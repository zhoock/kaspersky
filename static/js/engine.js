/*! jQuery v1.10.2 | (c) 2005, 2013 jQuery Foundation, Inc. | jquery.org/license
*/
(function(e,t){var n,r,i=typeof t,o=e.location,a=e.document,s=a.documentElement,l=e.jQuery,u=e.$,c={},p=[],f="1.10.2",d=p.concat,h=p.push,g=p.slice,m=p.indexOf,y=c.toString,v=c.hasOwnProperty,b=f.trim,x=function(e,t){return new x.fn.init(e,t,r)},w=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,T=/\S+/g,C=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,N=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,k=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,E=/^[\],:{}\s]*$/,S=/(?:^|:|,)(?:\s*\[)+/g,A=/\\(?:["\\\/bfnrt]|u[\da-fA-F]{4})/g,j=/"[^"\\\r\n]*"|true|false|null|-?(?:\d+\.|)\d+(?:[eE][+-]?\d+|)/g,D=/^-ms-/,L=/-([\da-z])/gi,H=function(e,t){return t.toUpperCase()},q=function(e){(a.addEventListener||"load"===e.type||"complete"===a.readyState)&&(_(),x.ready())},_=function(){a.addEventListener?(a.removeEventListener("DOMContentLoaded",q,!1),e.removeEventListener("load",q,!1)):(a.detachEvent("onreadystatechange",q),e.detachEvent("onload",q))};x.fn=x.prototype={jquery:f,constructor:x,init:function(e,n,r){var i,o;if(!e)return this;if("string"==typeof e){if(i="<"===e.charAt(0)&&">"===e.charAt(e.length-1)&&e.length>=3?[null,e,null]:N.exec(e),!i||!i[1]&&n)return!n||n.jquery?(n||r).find(e):this.constructor(n).find(e);if(i[1]){if(n=n instanceof x?n[0]:n,x.merge(this,x.parseHTML(i[1],n&&n.nodeType?n.ownerDocument||n:a,!0)),k.test(i[1])&&x.isPlainObject(n))for(i in n)x.isFunction(this[i])?this[i](n[i]):this.attr(i,n[i]);return this}if(o=a.getElementById(i[2]),o&&o.parentNode){if(o.id!==i[2])return r.find(e);this.length=1,this[0]=o}return this.context=a,this.selector=e,this}return e.nodeType?(this.context=this[0]=e,this.length=1,this):x.isFunction(e)?r.ready(e):(e.selector!==t&&(this.selector=e.selector,this.context=e.context),x.makeArray(e,this))},selector:"",length:0,toArray:function(){return g.call(this)},get:function(e){return null==e?this.toArray():0>e?this[this.length+e]:this[e]},pushStack:function(e){var t=x.merge(this.constructor(),e);return t.prevObject=this,t.context=this.context,t},each:function(e,t){return x.each(this,e,t)},ready:function(e){return x.ready.promise().done(e),this},slice:function(){return this.pushStack(g.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(0>e?t:0);return this.pushStack(n>=0&&t>n?[this[n]]:[])},map:function(e){return this.pushStack(x.map(this,function(t,n){return e.call(t,n,t)}))},end:function(){return this.prevObject||this.constructor(null)},push:h,sort:[].sort,splice:[].splice},x.fn.init.prototype=x.fn,x.extend=x.fn.extend=function(){var e,n,r,i,o,a,s=arguments[0]||{},l=1,u=arguments.length,c=!1;for("boolean"==typeof s&&(c=s,s=arguments[1]||{},l=2),"object"==typeof s||x.isFunction(s)||(s={}),u===l&&(s=this,--l);u>l;l++)if(null!=(o=arguments[l]))for(i in o)e=s[i],r=o[i],s!==r&&(c&&r&&(x.isPlainObject(r)||(n=x.isArray(r)))?(n?(n=!1,a=e&&x.isArray(e)?e:[]):a=e&&x.isPlainObject(e)?e:{},s[i]=x.extend(c,a,r)):r!==t&&(s[i]=r));return s},x.extend({expando:"jQuery"+(f+Math.random()).replace(/\D/g,""),noConflict:function(t){return e.$===x&&(e.$=u),t&&e.jQuery===x&&(e.jQuery=l),x},isReady:!1,readyWait:1,holdReady:function(e){e?x.readyWait++:x.ready(!0)},ready:function(e){if(e===!0?!--x.readyWait:!x.isReady){if(!a.body)return setTimeout(x.ready);x.isReady=!0,e!==!0&&--x.readyWait>0||(n.resolveWith(a,[x]),x.fn.trigger&&x(a).trigger("ready").off("ready"))}},isFunction:function(e){return"function"===x.type(e)},isArray:Array.isArray||function(e){return"array"===x.type(e)},isWindow:function(e){return null!=e&&e==e.window},isNumeric:function(e){return!isNaN(parseFloat(e))&&isFinite(e)},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?c[y.call(e)]||"object":typeof e},isPlainObject:function(e){var n;if(!e||"object"!==x.type(e)||e.nodeType||x.isWindow(e))return!1;try{if(e.constructor&&!v.call(e,"constructor")&&!v.call(e.constructor.prototype,"isPrototypeOf"))return!1}catch(r){return!1}if(x.support.ownLast)for(n in e)return v.call(e,n);for(n in e);return n===t||v.call(e,n)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},error:function(e){throw Error(e)},parseHTML:function(e,t,n){if(!e||"string"!=typeof e)return null;"boolean"==typeof t&&(n=t,t=!1),t=t||a;var r=k.exec(e),i=!n&&[];return r?[t.createElement(r[1])]:(r=x.buildFragment([e],t,i),i&&x(i).remove(),x.merge([],r.childNodes))},parseJSON:function(n){return e.JSON&&e.JSON.parse?e.JSON.parse(n):null===n?n:"string"==typeof n&&(n=x.trim(n),n&&E.test(n.replace(A,"@").replace(j,"]").replace(S,"")))?Function("return "+n)():(x.error("Invalid JSON: "+n),t)},parseXML:function(n){var r,i;if(!n||"string"!=typeof n)return null;try{e.DOMParser?(i=new DOMParser,r=i.parseFromString(n,"text/xml")):(r=new ActiveXObject("Microsoft.XMLDOM"),r.async="false",r.loadXML(n))}catch(o){r=t}return r&&r.documentElement&&!r.getElementsByTagName("parsererror").length||x.error("Invalid XML: "+n),r},noop:function(){},globalEval:function(t){t&&x.trim(t)&&(e.execScript||function(t){e.eval.call(e,t)})(t)},camelCase:function(e){return e.replace(D,"ms-").replace(L,H)},nodeName:function(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()},each:function(e,t,n){var r,i=0,o=e.length,a=M(e);if(n){if(a){for(;o>i;i++)if(r=t.apply(e[i],n),r===!1)break}else for(i in e)if(r=t.apply(e[i],n),r===!1)break}else if(a){for(;o>i;i++)if(r=t.call(e[i],i,e[i]),r===!1)break}else for(i in e)if(r=t.call(e[i],i,e[i]),r===!1)break;return e},trim:b&&!b.call("\ufeff\u00a0")?function(e){return null==e?"":b.call(e)}:function(e){return null==e?"":(e+"").replace(C,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(M(Object(e))?x.merge(n,"string"==typeof e?[e]:e):h.call(n,e)),n},inArray:function(e,t,n){var r;if(t){if(m)return m.call(t,e,n);for(r=t.length,n=n?0>n?Math.max(0,r+n):n:0;r>n;n++)if(n in t&&t[n]===e)return n}return-1},merge:function(e,n){var r=n.length,i=e.length,o=0;if("number"==typeof r)for(;r>o;o++)e[i++]=n[o];else while(n[o]!==t)e[i++]=n[o++];return e.length=i,e},grep:function(e,t,n){var r,i=[],o=0,a=e.length;for(n=!!n;a>o;o++)r=!!t(e[o],o),n!==r&&i.push(e[o]);return i},map:function(e,t,n){var r,i=0,o=e.length,a=M(e),s=[];if(a)for(;o>i;i++)r=t(e[i],i,n),null!=r&&(s[s.length]=r);else for(i in e)r=t(e[i],i,n),null!=r&&(s[s.length]=r);return d.apply([],s)},guid:1,proxy:function(e,n){var r,i,o;return"string"==typeof n&&(o=e[n],n=e,e=o),x.isFunction(e)?(r=g.call(arguments,2),i=function(){return e.apply(n||this,r.concat(g.call(arguments)))},i.guid=e.guid=e.guid||x.guid++,i):t},access:function(e,n,r,i,o,a,s){var l=0,u=e.length,c=null==r;if("object"===x.type(r)){o=!0;for(l in r)x.access(e,n,l,r[l],!0,a,s)}else if(i!==t&&(o=!0,x.isFunction(i)||(s=!0),c&&(s?(n.call(e,i),n=null):(c=n,n=function(e,t,n){return c.call(x(e),n)})),n))for(;u>l;l++)n(e[l],r,s?i:i.call(e[l],l,n(e[l],r)));return o?e:c?n.call(e):u?n(e[0],r):a},now:function(){return(new Date).getTime()},swap:function(e,t,n,r){var i,o,a={};for(o in t)a[o]=e.style[o],e.style[o]=t[o];i=n.apply(e,r||[]);for(o in t)e.style[o]=a[o];return i}}),x.ready.promise=function(t){if(!n)if(n=x.Deferred(),"complete"===a.readyState)setTimeout(x.ready);else if(a.addEventListener)a.addEventListener("DOMContentLoaded",q,!1),e.addEventListener("load",q,!1);else{a.attachEvent("onreadystatechange",q),e.attachEvent("onload",q);var r=!1;try{r=null==e.frameElement&&a.documentElement}catch(i){}r&&r.doScroll&&function o(){if(!x.isReady){try{r.doScroll("left")}catch(e){return setTimeout(o,50)}_(),x.ready()}}()}return n.promise(t)},x.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(e,t){c["[object "+t+"]"]=t.toLowerCase()});function M(e){var t=e.length,n=x.type(e);return x.isWindow(e)?!1:1===e.nodeType&&t?!0:"array"===n||"function"!==n&&(0===t||"number"==typeof t&&t>0&&t-1 in e)}r=x(a),function(e,t){var n,r,i,o,a,s,l,u,c,p,f,d,h,g,m,y,v,b="sizzle"+-new Date,w=e.document,T=0,C=0,N=st(),k=st(),E=st(),S=!1,A=function(e,t){return e===t?(S=!0,0):0},j=typeof t,D=1<<31,L={}.hasOwnProperty,H=[],q=H.pop,_=H.push,M=H.push,O=H.slice,F=H.indexOf||function(e){var t=0,n=this.length;for(;n>t;t++)if(this[t]===e)return t;return-1},B="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",P="[\\x20\\t\\r\\n\\f]",R="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",W=R.replace("w","w#"),$="\\["+P+"*("+R+")"+P+"*(?:([*^$|!~]?=)"+P+"*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|("+W+")|)|)"+P+"*\\]",I=":("+R+")(?:\\(((['\"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|"+$.replace(3,8)+")*)|.*)\\)|)",z=RegExp("^"+P+"+|((?:^|[^\\\\])(?:\\\\.)*)"+P+"+$","g"),X=RegExp("^"+P+"*,"+P+"*"),U=RegExp("^"+P+"*([>+~]|"+P+")"+P+"*"),V=RegExp(P+"*[+~]"),Y=RegExp("="+P+"*([^\\]'\"]*)"+P+"*\\]","g"),J=RegExp(I),G=RegExp("^"+W+"$"),Q={ID:RegExp("^#("+R+")"),CLASS:RegExp("^\\.("+R+")"),TAG:RegExp("^("+R.replace("w","w*")+")"),ATTR:RegExp("^"+$),PSEUDO:RegExp("^"+I),CHILD:RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+P+"*(even|odd|(([+-]|)(\\d*)n|)"+P+"*(?:([+-]|)"+P+"*(\\d+)|))"+P+"*\\)|)","i"),bool:RegExp("^(?:"+B+")$","i"),needsContext:RegExp("^"+P+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+P+"*((?:-\\d)?\\d*)"+P+"*\\)|)(?=[^-]|$)","i")},K=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,et=/^(?:input|select|textarea|button)$/i,tt=/^h\d$/i,nt=/'|\\/g,rt=RegExp("\\\\([\\da-f]{1,6}"+P+"?|("+P+")|.)","ig"),it=function(e,t,n){var r="0x"+t-65536;return r!==r||n?t:0>r?String.fromCharCode(r+65536):String.fromCharCode(55296|r>>10,56320|1023&r)};try{M.apply(H=O.call(w.childNodes),w.childNodes),H[w.childNodes.length].nodeType}catch(ot){M={apply:H.length?function(e,t){_.apply(e,O.call(t))}:function(e,t){var n=e.length,r=0;while(e[n++]=t[r++]);e.length=n-1}}}function at(e,t,n,i){var o,a,s,l,u,c,d,m,y,x;if((t?t.ownerDocument||t:w)!==f&&p(t),t=t||f,n=n||[],!e||"string"!=typeof e)return n;if(1!==(l=t.nodeType)&&9!==l)return[];if(h&&!i){if(o=Z.exec(e))if(s=o[1]){if(9===l){if(a=t.getElementById(s),!a||!a.parentNode)return n;if(a.id===s)return n.push(a),n}else if(t.ownerDocument&&(a=t.ownerDocument.getElementById(s))&&v(t,a)&&a.id===s)return n.push(a),n}else{if(o[2])return M.apply(n,t.getElementsByTagName(e)),n;if((s=o[3])&&r.getElementsByClassName&&t.getElementsByClassName)return M.apply(n,t.getElementsByClassName(s)),n}if(r.qsa&&(!g||!g.test(e))){if(m=d=b,y=t,x=9===l&&e,1===l&&"object"!==t.nodeName.toLowerCase()){c=mt(e),(d=t.getAttribute("id"))?m=d.replace(nt,"\\$&"):t.setAttribute("id",m),m="[id='"+m+"'] ",u=c.length;while(u--)c[u]=m+yt(c[u]);y=V.test(e)&&t.parentNode||t,x=c.join(",")}if(x)try{return M.apply(n,y.querySelectorAll(x)),n}catch(T){}finally{d||t.removeAttribute("id")}}}return kt(e.replace(z,"$1"),t,n,i)}function st(){var e=[];function t(n,r){return e.push(n+=" ")>o.cacheLength&&delete t[e.shift()],t[n]=r}return t}function lt(e){return e[b]=!0,e}function ut(e){var t=f.createElement("div");try{return!!e(t)}catch(n){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function ct(e,t){var n=e.split("|"),r=e.length;while(r--)o.attrHandle[n[r]]=t}function pt(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&(~t.sourceIndex||D)-(~e.sourceIndex||D);if(r)return r;if(n)while(n=n.nextSibling)if(n===t)return-1;return e?1:-1}function ft(e){return function(t){var n=t.nodeName.toLowerCase();return"input"===n&&t.type===e}}function dt(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function ht(e){return lt(function(t){return t=+t,lt(function(n,r){var i,o=e([],n.length,t),a=o.length;while(a--)n[i=o[a]]&&(n[i]=!(r[i]=n[i]))})})}s=at.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return t?"HTML"!==t.nodeName:!1},r=at.support={},p=at.setDocument=function(e){var n=e?e.ownerDocument||e:w,i=n.defaultView;return n!==f&&9===n.nodeType&&n.documentElement?(f=n,d=n.documentElement,h=!s(n),i&&i.attachEvent&&i!==i.top&&i.attachEvent("onbeforeunload",function(){p()}),r.attributes=ut(function(e){return e.className="i",!e.getAttribute("className")}),r.getElementsByTagName=ut(function(e){return e.appendChild(n.createComment("")),!e.getElementsByTagName("*").length}),r.getElementsByClassName=ut(function(e){return e.innerHTML="<div class='a'></div><div class='a i'></div>",e.firstChild.className="i",2===e.getElementsByClassName("i").length}),r.getById=ut(function(e){return d.appendChild(e).id=b,!n.getElementsByName||!n.getElementsByName(b).length}),r.getById?(o.find.ID=function(e,t){if(typeof t.getElementById!==j&&h){var n=t.getElementById(e);return n&&n.parentNode?[n]:[]}},o.filter.ID=function(e){var t=e.replace(rt,it);return function(e){return e.getAttribute("id")===t}}):(delete o.find.ID,o.filter.ID=function(e){var t=e.replace(rt,it);return function(e){var n=typeof e.getAttributeNode!==j&&e.getAttributeNode("id");return n&&n.value===t}}),o.find.TAG=r.getElementsByTagName?function(e,n){return typeof n.getElementsByTagName!==j?n.getElementsByTagName(e):t}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"===e){while(n=o[i++])1===n.nodeType&&r.push(n);return r}return o},o.find.CLASS=r.getElementsByClassName&&function(e,n){return typeof n.getElementsByClassName!==j&&h?n.getElementsByClassName(e):t},m=[],g=[],(r.qsa=K.test(n.querySelectorAll))&&(ut(function(e){e.innerHTML="<select><option selected=''></option></select>",e.querySelectorAll("[selected]").length||g.push("\\["+P+"*(?:value|"+B+")"),e.querySelectorAll(":checked").length||g.push(":checked")}),ut(function(e){var t=n.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("t",""),e.querySelectorAll("[t^='']").length&&g.push("[*^$]="+P+"*(?:''|\"\")"),e.querySelectorAll(":enabled").length||g.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),g.push(",.*:")})),(r.matchesSelector=K.test(y=d.webkitMatchesSelector||d.mozMatchesSelector||d.oMatchesSelector||d.msMatchesSelector))&&ut(function(e){r.disconnectedMatch=y.call(e,"div"),y.call(e,"[s!='']:x"),m.push("!=",I)}),g=g.length&&RegExp(g.join("|")),m=m.length&&RegExp(m.join("|")),v=K.test(d.contains)||d.compareDocumentPosition?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)while(t=t.parentNode)if(t===e)return!0;return!1},A=d.compareDocumentPosition?function(e,t){if(e===t)return S=!0,0;var i=t.compareDocumentPosition&&e.compareDocumentPosition&&e.compareDocumentPosition(t);return i?1&i||!r.sortDetached&&t.compareDocumentPosition(e)===i?e===n||v(w,e)?-1:t===n||v(w,t)?1:c?F.call(c,e)-F.call(c,t):0:4&i?-1:1:e.compareDocumentPosition?-1:1}:function(e,t){var r,i=0,o=e.parentNode,a=t.parentNode,s=[e],l=[t];if(e===t)return S=!0,0;if(!o||!a)return e===n?-1:t===n?1:o?-1:a?1:c?F.call(c,e)-F.call(c,t):0;if(o===a)return pt(e,t);r=e;while(r=r.parentNode)s.unshift(r);r=t;while(r=r.parentNode)l.unshift(r);while(s[i]===l[i])i++;return i?pt(s[i],l[i]):s[i]===w?-1:l[i]===w?1:0},n):f},at.matches=function(e,t){return at(e,null,null,t)},at.matchesSelector=function(e,t){if((e.ownerDocument||e)!==f&&p(e),t=t.replace(Y,"='$1']"),!(!r.matchesSelector||!h||m&&m.test(t)||g&&g.test(t)))try{var n=y.call(e,t);if(n||r.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(i){}return at(t,f,null,[e]).length>0},at.contains=function(e,t){return(e.ownerDocument||e)!==f&&p(e),v(e,t)},at.attr=function(e,n){(e.ownerDocument||e)!==f&&p(e);var i=o.attrHandle[n.toLowerCase()],a=i&&L.call(o.attrHandle,n.toLowerCase())?i(e,n,!h):t;return a===t?r.attributes||!h?e.getAttribute(n):(a=e.getAttributeNode(n))&&a.specified?a.value:null:a},at.error=function(e){throw Error("Syntax error, unrecognized expression: "+e)},at.uniqueSort=function(e){var t,n=[],i=0,o=0;if(S=!r.detectDuplicates,c=!r.sortStable&&e.slice(0),e.sort(A),S){while(t=e[o++])t===e[o]&&(i=n.push(o));while(i--)e.splice(n[i],1)}return e},a=at.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=a(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r];r++)n+=a(t);return n},o=at.selectors={cacheLength:50,createPseudo:lt,match:Q,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(rt,it),e[3]=(e[4]||e[5]||"").replace(rt,it),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||at.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&at.error(e[0]),e},PSEUDO:function(e){var n,r=!e[5]&&e[2];return Q.CHILD.test(e[0])?null:(e[3]&&e[4]!==t?e[2]=e[4]:r&&J.test(r)&&(n=mt(r,!0))&&(n=r.indexOf(")",r.length-n)-r.length)&&(e[0]=e[0].slice(0,n),e[2]=r.slice(0,n)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(rt,it).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=N[e+" "];return t||(t=RegExp("(^|"+P+")"+e+"("+P+"|$)"))&&N(e,function(e){return t.test("string"==typeof e.className&&e.className||typeof e.getAttribute!==j&&e.getAttribute("class")||"")})},ATTR:function(e,t,n){return function(r){var i=at.attr(r,e);return null==i?"!="===t:t?(i+="","="===t?i===n:"!="===t?i!==n:"^="===t?n&&0===i.indexOf(n):"*="===t?n&&i.indexOf(n)>-1:"$="===t?n&&i.slice(-n.length)===n:"~="===t?(" "+i+" ").indexOf(n)>-1:"|="===t?i===n||i.slice(0,n.length+1)===n+"-":!1):!0}},CHILD:function(e,t,n,r,i){var o="nth"!==e.slice(0,3),a="last"!==e.slice(-4),s="of-type"===t;return 1===r&&0===i?function(e){return!!e.parentNode}:function(t,n,l){var u,c,p,f,d,h,g=o!==a?"nextSibling":"previousSibling",m=t.parentNode,y=s&&t.nodeName.toLowerCase(),v=!l&&!s;if(m){if(o){while(g){p=t;while(p=p[g])if(s?p.nodeName.toLowerCase()===y:1===p.nodeType)return!1;h=g="only"===e&&!h&&"nextSibling"}return!0}if(h=[a?m.firstChild:m.lastChild],a&&v){c=m[b]||(m[b]={}),u=c[e]||[],d=u[0]===T&&u[1],f=u[0]===T&&u[2],p=d&&m.childNodes[d];while(p=++d&&p&&p[g]||(f=d=0)||h.pop())if(1===p.nodeType&&++f&&p===t){c[e]=[T,d,f];break}}else if(v&&(u=(t[b]||(t[b]={}))[e])&&u[0]===T)f=u[1];else while(p=++d&&p&&p[g]||(f=d=0)||h.pop())if((s?p.nodeName.toLowerCase()===y:1===p.nodeType)&&++f&&(v&&((p[b]||(p[b]={}))[e]=[T,f]),p===t))break;return f-=i,f===r||0===f%r&&f/r>=0}}},PSEUDO:function(e,t){var n,r=o.pseudos[e]||o.setFilters[e.toLowerCase()]||at.error("unsupported pseudo: "+e);return r[b]?r(t):r.length>1?(n=[e,e,"",t],o.setFilters.hasOwnProperty(e.toLowerCase())?lt(function(e,n){var i,o=r(e,t),a=o.length;while(a--)i=F.call(e,o[a]),e[i]=!(n[i]=o[a])}):function(e){return r(e,0,n)}):r}},pseudos:{not:lt(function(e){var t=[],n=[],r=l(e.replace(z,"$1"));return r[b]?lt(function(e,t,n,i){var o,a=r(e,null,i,[]),s=e.length;while(s--)(o=a[s])&&(e[s]=!(t[s]=o))}):function(e,i,o){return t[0]=e,r(t,null,o,n),!n.pop()}}),has:lt(function(e){return function(t){return at(e,t).length>0}}),contains:lt(function(e){return function(t){return(t.textContent||t.innerText||a(t)).indexOf(e)>-1}}),lang:lt(function(e){return G.test(e||"")||at.error("unsupported lang: "+e),e=e.replace(rt,it).toLowerCase(),function(t){var n;do if(n=h?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return n=n.toLowerCase(),n===e||0===n.indexOf(e+"-");while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===d},focus:function(e){return e===f.activeElement&&(!f.hasFocus||f.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:function(e){return e.disabled===!1},disabled:function(e){return e.disabled===!0},checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,e.selected===!0},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeName>"@"||3===e.nodeType||4===e.nodeType)return!1;return!0},parent:function(e){return!o.pseudos.empty(e)},header:function(e){return tt.test(e.nodeName)},input:function(e){return et.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||t.toLowerCase()===e.type)},first:ht(function(){return[0]}),last:ht(function(e,t){return[t-1]}),eq:ht(function(e,t,n){return[0>n?n+t:n]}),even:ht(function(e,t){var n=0;for(;t>n;n+=2)e.push(n);return e}),odd:ht(function(e,t){var n=1;for(;t>n;n+=2)e.push(n);return e}),lt:ht(function(e,t,n){var r=0>n?n+t:n;for(;--r>=0;)e.push(r);return e}),gt:ht(function(e,t,n){var r=0>n?n+t:n;for(;t>++r;)e.push(r);return e})}},o.pseudos.nth=o.pseudos.eq;for(n in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})o.pseudos[n]=ft(n);for(n in{submit:!0,reset:!0})o.pseudos[n]=dt(n);function gt(){}gt.prototype=o.filters=o.pseudos,o.setFilters=new gt;function mt(e,t){var n,r,i,a,s,l,u,c=k[e+" "];if(c)return t?0:c.slice(0);s=e,l=[],u=o.preFilter;while(s){(!n||(r=X.exec(s)))&&(r&&(s=s.slice(r[0].length)||s),l.push(i=[])),n=!1,(r=U.exec(s))&&(n=r.shift(),i.push({value:n,type:r[0].replace(z," ")}),s=s.slice(n.length));for(a in o.filter)!(r=Q[a].exec(s))||u[a]&&!(r=u[a](r))||(n=r.shift(),i.push({value:n,type:a,matches:r}),s=s.slice(n.length));if(!n)break}return t?s.length:s?at.error(e):k(e,l).slice(0)}function yt(e){var t=0,n=e.length,r="";for(;n>t;t++)r+=e[t].value;return r}function vt(e,t,n){var r=t.dir,o=n&&"parentNode"===r,a=C++;return t.first?function(t,n,i){while(t=t[r])if(1===t.nodeType||o)return e(t,n,i)}:function(t,n,s){var l,u,c,p=T+" "+a;if(s){while(t=t[r])if((1===t.nodeType||o)&&e(t,n,s))return!0}else while(t=t[r])if(1===t.nodeType||o)if(c=t[b]||(t[b]={}),(u=c[r])&&u[0]===p){if((l=u[1])===!0||l===i)return l===!0}else if(u=c[r]=[p],u[1]=e(t,n,s)||i,u[1]===!0)return!0}}function bt(e){return e.length>1?function(t,n,r){var i=e.length;while(i--)if(!e[i](t,n,r))return!1;return!0}:e[0]}function xt(e,t,n,r,i){var o,a=[],s=0,l=e.length,u=null!=t;for(;l>s;s++)(o=e[s])&&(!n||n(o,r,i))&&(a.push(o),u&&t.push(s));return a}function wt(e,t,n,r,i,o){return r&&!r[b]&&(r=wt(r)),i&&!i[b]&&(i=wt(i,o)),lt(function(o,a,s,l){var u,c,p,f=[],d=[],h=a.length,g=o||Nt(t||"*",s.nodeType?[s]:s,[]),m=!e||!o&&t?g:xt(g,f,e,s,l),y=n?i||(o?e:h||r)?[]:a:m;if(n&&n(m,y,s,l),r){u=xt(y,d),r(u,[],s,l),c=u.length;while(c--)(p=u[c])&&(y[d[c]]=!(m[d[c]]=p))}if(o){if(i||e){if(i){u=[],c=y.length;while(c--)(p=y[c])&&u.push(m[c]=p);i(null,y=[],u,l)}c=y.length;while(c--)(p=y[c])&&(u=i?F.call(o,p):f[c])>-1&&(o[u]=!(a[u]=p))}}else y=xt(y===a?y.splice(h,y.length):y),i?i(null,a,y,l):M.apply(a,y)})}function Tt(e){var t,n,r,i=e.length,a=o.relative[e[0].type],s=a||o.relative[" "],l=a?1:0,c=vt(function(e){return e===t},s,!0),p=vt(function(e){return F.call(t,e)>-1},s,!0),f=[function(e,n,r){return!a&&(r||n!==u)||((t=n).nodeType?c(e,n,r):p(e,n,r))}];for(;i>l;l++)if(n=o.relative[e[l].type])f=[vt(bt(f),n)];else{if(n=o.filter[e[l].type].apply(null,e[l].matches),n[b]){for(r=++l;i>r;r++)if(o.relative[e[r].type])break;return wt(l>1&&bt(f),l>1&&yt(e.slice(0,l-1).concat({value:" "===e[l-2].type?"*":""})).replace(z,"$1"),n,r>l&&Tt(e.slice(l,r)),i>r&&Tt(e=e.slice(r)),i>r&&yt(e))}f.push(n)}return bt(f)}function Ct(e,t){var n=0,r=t.length>0,a=e.length>0,s=function(s,l,c,p,d){var h,g,m,y=[],v=0,b="0",x=s&&[],w=null!=d,C=u,N=s||a&&o.find.TAG("*",d&&l.parentNode||l),k=T+=null==C?1:Math.random()||.1;for(w&&(u=l!==f&&l,i=n);null!=(h=N[b]);b++){if(a&&h){g=0;while(m=e[g++])if(m(h,l,c)){p.push(h);break}w&&(T=k,i=++n)}r&&((h=!m&&h)&&v--,s&&x.push(h))}if(v+=b,r&&b!==v){g=0;while(m=t[g++])m(x,y,l,c);if(s){if(v>0)while(b--)x[b]||y[b]||(y[b]=q.call(p));y=xt(y)}M.apply(p,y),w&&!s&&y.length>0&&v+t.length>1&&at.uniqueSort(p)}return w&&(T=k,u=C),x};return r?lt(s):s}l=at.compile=function(e,t){var n,r=[],i=[],o=E[e+" "];if(!o){t||(t=mt(e)),n=t.length;while(n--)o=Tt(t[n]),o[b]?r.push(o):i.push(o);o=E(e,Ct(i,r))}return o};function Nt(e,t,n){var r=0,i=t.length;for(;i>r;r++)at(e,t[r],n);return n}function kt(e,t,n,i){var a,s,u,c,p,f=mt(e);if(!i&&1===f.length){if(s=f[0]=f[0].slice(0),s.length>2&&"ID"===(u=s[0]).type&&r.getById&&9===t.nodeType&&h&&o.relative[s[1].type]){if(t=(o.find.ID(u.matches[0].replace(rt,it),t)||[])[0],!t)return n;e=e.slice(s.shift().value.length)}a=Q.needsContext.test(e)?0:s.length;while(a--){if(u=s[a],o.relative[c=u.type])break;if((p=o.find[c])&&(i=p(u.matches[0].replace(rt,it),V.test(s[0].type)&&t.parentNode||t))){if(s.splice(a,1),e=i.length&&yt(s),!e)return M.apply(n,i),n;break}}}return l(e,f)(i,t,!h,n,V.test(e)),n}r.sortStable=b.split("").sort(A).join("")===b,r.detectDuplicates=S,p(),r.sortDetached=ut(function(e){return 1&e.compareDocumentPosition(f.createElement("div"))}),ut(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||ct("type|href|height|width",function(e,n,r){return r?t:e.getAttribute(n,"type"===n.toLowerCase()?1:2)}),r.attributes&&ut(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||ct("value",function(e,n,r){return r||"input"!==e.nodeName.toLowerCase()?t:e.defaultValue}),ut(function(e){return null==e.getAttribute("disabled")})||ct(B,function(e,n,r){var i;return r?t:(i=e.getAttributeNode(n))&&i.specified?i.value:e[n]===!0?n.toLowerCase():null}),x.find=at,x.expr=at.selectors,x.expr[":"]=x.expr.pseudos,x.unique=at.uniqueSort,x.text=at.getText,x.isXMLDoc=at.isXML,x.contains=at.contains}(e);var O={};function F(e){var t=O[e]={};return x.each(e.match(T)||[],function(e,n){t[n]=!0}),t}x.Callbacks=function(e){e="string"==typeof e?O[e]||F(e):x.extend({},e);var n,r,i,o,a,s,l=[],u=!e.once&&[],c=function(t){for(r=e.memory&&t,i=!0,a=s||0,s=0,o=l.length,n=!0;l&&o>a;a++)if(l[a].apply(t[0],t[1])===!1&&e.stopOnFalse){r=!1;break}n=!1,l&&(u?u.length&&c(u.shift()):r?l=[]:p.disable())},p={add:function(){if(l){var t=l.length;(function i(t){x.each(t,function(t,n){var r=x.type(n);"function"===r?e.unique&&p.has(n)||l.push(n):n&&n.length&&"string"!==r&&i(n)})})(arguments),n?o=l.length:r&&(s=t,c(r))}return this},remove:function(){return l&&x.each(arguments,function(e,t){var r;while((r=x.inArray(t,l,r))>-1)l.splice(r,1),n&&(o>=r&&o--,a>=r&&a--)}),this},has:function(e){return e?x.inArray(e,l)>-1:!(!l||!l.length)},empty:function(){return l=[],o=0,this},disable:function(){return l=u=r=t,this},disabled:function(){return!l},lock:function(){return u=t,r||p.disable(),this},locked:function(){return!u},fireWith:function(e,t){return!l||i&&!u||(t=t||[],t=[e,t.slice?t.slice():t],n?u.push(t):c(t)),this},fire:function(){return p.fireWith(this,arguments),this},fired:function(){return!!i}};return p},x.extend({Deferred:function(e){var t=[["resolve","done",x.Callbacks("once memory"),"resolved"],["reject","fail",x.Callbacks("once memory"),"rejected"],["notify","progress",x.Callbacks("memory")]],n="pending",r={state:function(){return n},always:function(){return i.done(arguments).fail(arguments),this},then:function(){var e=arguments;return x.Deferred(function(n){x.each(t,function(t,o){var a=o[0],s=x.isFunction(e[t])&&e[t];i[o[1]](function(){var e=s&&s.apply(this,arguments);e&&x.isFunction(e.promise)?e.promise().done(n.resolve).fail(n.reject).progress(n.notify):n[a+"With"](this===r?n.promise():this,s?[e]:arguments)})}),e=null}).promise()},promise:function(e){return null!=e?x.extend(e,r):r}},i={};return r.pipe=r.then,x.each(t,function(e,o){var a=o[2],s=o[3];r[o[1]]=a.add,s&&a.add(function(){n=s},t[1^e][2].disable,t[2][2].lock),i[o[0]]=function(){return i[o[0]+"With"](this===i?r:this,arguments),this},i[o[0]+"With"]=a.fireWith}),r.promise(i),e&&e.call(i,i),i},when:function(e){var t=0,n=g.call(arguments),r=n.length,i=1!==r||e&&x.isFunction(e.promise)?r:0,o=1===i?e:x.Deferred(),a=function(e,t,n){return function(r){t[e]=this,n[e]=arguments.length>1?g.call(arguments):r,n===s?o.notifyWith(t,n):--i||o.resolveWith(t,n)}},s,l,u;if(r>1)for(s=Array(r),l=Array(r),u=Array(r);r>t;t++)n[t]&&x.isFunction(n[t].promise)?n[t].promise().done(a(t,u,n)).fail(o.reject).progress(a(t,l,s)):--i;return i||o.resolveWith(u,n),o.promise()}}),x.support=function(t){var n,r,o,s,l,u,c,p,f,d=a.createElement("div");if(d.setAttribute("className","t"),d.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",n=d.getElementsByTagName("*")||[],r=d.getElementsByTagName("a")[0],!r||!r.style||!n.length)return t;s=a.createElement("select"),u=s.appendChild(a.createElement("option")),o=d.getElementsByTagName("input")[0],r.style.cssText="top:1px;float:left;opacity:.5",t.getSetAttribute="t"!==d.className,t.leadingWhitespace=3===d.firstChild.nodeType,t.tbody=!d.getElementsByTagName("tbody").length,t.htmlSerialize=!!d.getElementsByTagName("link").length,t.style=/top/.test(r.getAttribute("style")),t.hrefNormalized="/a"===r.getAttribute("href"),t.opacity=/^0.5/.test(r.style.opacity),t.cssFloat=!!r.style.cssFloat,t.checkOn=!!o.value,t.optSelected=u.selected,t.enctype=!!a.createElement("form").enctype,t.html5Clone="<:nav></:nav>"!==a.createElement("nav").cloneNode(!0).outerHTML,t.inlineBlockNeedsLayout=!1,t.shrinkWrapBlocks=!1,t.pixelPosition=!1,t.deleteExpando=!0,t.noCloneEvent=!0,t.reliableMarginRight=!0,t.boxSizingReliable=!0,o.checked=!0,t.noCloneChecked=o.cloneNode(!0).checked,s.disabled=!0,t.optDisabled=!u.disabled;try{delete d.test}catch(h){t.deleteExpando=!1}o=a.createElement("input"),o.setAttribute("value",""),t.input=""===o.getAttribute("value"),o.value="t",o.setAttribute("type","radio"),t.radioValue="t"===o.value,o.setAttribute("checked","t"),o.setAttribute("name","t"),l=a.createDocumentFragment(),l.appendChild(o),t.appendChecked=o.checked,t.checkClone=l.cloneNode(!0).cloneNode(!0).lastChild.checked,d.attachEvent&&(d.attachEvent("onclick",function(){t.noCloneEvent=!1}),d.cloneNode(!0).click());for(f in{submit:!0,change:!0,focusin:!0})d.setAttribute(c="on"+f,"t"),t[f+"Bubbles"]=c in e||d.attributes[c].expando===!1;d.style.backgroundClip="content-box",d.cloneNode(!0).style.backgroundClip="",t.clearCloneStyle="content-box"===d.style.backgroundClip;for(f in x(t))break;return t.ownLast="0"!==f,x(function(){var n,r,o,s="padding:0;margin:0;border:0;display:block;box-sizing:content-box;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;",l=a.getElementsByTagName("body")[0];l&&(n=a.createElement("div"),n.style.cssText="border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px",l.appendChild(n).appendChild(d),d.innerHTML="<table><tr><td></td><td>t</td></tr></table>",o=d.getElementsByTagName("td"),o[0].style.cssText="padding:0;margin:0;border:0;display:none",p=0===o[0].offsetHeight,o[0].style.display="",o[1].style.display="none",t.reliableHiddenOffsets=p&&0===o[0].offsetHeight,d.innerHTML="",d.style.cssText="box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;",x.swap(l,null!=l.style.zoom?{zoom:1}:{},function(){t.boxSizing=4===d.offsetWidth}),e.getComputedStyle&&(t.pixelPosition="1%"!==(e.getComputedStyle(d,null)||{}).top,t.boxSizingReliable="4px"===(e.getComputedStyle(d,null)||{width:"4px"}).width,r=d.appendChild(a.createElement("div")),r.style.cssText=d.style.cssText=s,r.style.marginRight=r.style.width="0",d.style.width="1px",t.reliableMarginRight=!parseFloat((e.getComputedStyle(r,null)||{}).marginRight)),typeof d.style.zoom!==i&&(d.innerHTML="",d.style.cssText=s+"width:1px;padding:1px;display:inline;zoom:1",t.inlineBlockNeedsLayout=3===d.offsetWidth,d.style.display="block",d.innerHTML="<div></div>",d.firstChild.style.width="5px",t.shrinkWrapBlocks=3!==d.offsetWidth,t.inlineBlockNeedsLayout&&(l.style.zoom=1)),l.removeChild(n),n=d=o=r=null)}),n=s=l=u=r=o=null,t
}({});var B=/(?:\{[\s\S]*\}|\[[\s\S]*\])$/,P=/([A-Z])/g;function R(e,n,r,i){if(x.acceptData(e)){var o,a,s=x.expando,l=e.nodeType,u=l?x.cache:e,c=l?e[s]:e[s]&&s;if(c&&u[c]&&(i||u[c].data)||r!==t||"string"!=typeof n)return c||(c=l?e[s]=p.pop()||x.guid++:s),u[c]||(u[c]=l?{}:{toJSON:x.noop}),("object"==typeof n||"function"==typeof n)&&(i?u[c]=x.extend(u[c],n):u[c].data=x.extend(u[c].data,n)),a=u[c],i||(a.data||(a.data={}),a=a.data),r!==t&&(a[x.camelCase(n)]=r),"string"==typeof n?(o=a[n],null==o&&(o=a[x.camelCase(n)])):o=a,o}}function W(e,t,n){if(x.acceptData(e)){var r,i,o=e.nodeType,a=o?x.cache:e,s=o?e[x.expando]:x.expando;if(a[s]){if(t&&(r=n?a[s]:a[s].data)){x.isArray(t)?t=t.concat(x.map(t,x.camelCase)):t in r?t=[t]:(t=x.camelCase(t),t=t in r?[t]:t.split(" ")),i=t.length;while(i--)delete r[t[i]];if(n?!I(r):!x.isEmptyObject(r))return}(n||(delete a[s].data,I(a[s])))&&(o?x.cleanData([e],!0):x.support.deleteExpando||a!=a.window?delete a[s]:a[s]=null)}}}x.extend({cache:{},noData:{applet:!0,embed:!0,object:"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"},hasData:function(e){return e=e.nodeType?x.cache[e[x.expando]]:e[x.expando],!!e&&!I(e)},data:function(e,t,n){return R(e,t,n)},removeData:function(e,t){return W(e,t)},_data:function(e,t,n){return R(e,t,n,!0)},_removeData:function(e,t){return W(e,t,!0)},acceptData:function(e){if(e.nodeType&&1!==e.nodeType&&9!==e.nodeType)return!1;var t=e.nodeName&&x.noData[e.nodeName.toLowerCase()];return!t||t!==!0&&e.getAttribute("classid")===t}}),x.fn.extend({data:function(e,n){var r,i,o=null,a=0,s=this[0];if(e===t){if(this.length&&(o=x.data(s),1===s.nodeType&&!x._data(s,"parsedAttrs"))){for(r=s.attributes;r.length>a;a++)i=r[a].name,0===i.indexOf("data-")&&(i=x.camelCase(i.slice(5)),$(s,i,o[i]));x._data(s,"parsedAttrs",!0)}return o}return"object"==typeof e?this.each(function(){x.data(this,e)}):arguments.length>1?this.each(function(){x.data(this,e,n)}):s?$(s,e,x.data(s,e)):null},removeData:function(e){return this.each(function(){x.removeData(this,e)})}});function $(e,n,r){if(r===t&&1===e.nodeType){var i="data-"+n.replace(P,"-$1").toLowerCase();if(r=e.getAttribute(i),"string"==typeof r){try{r="true"===r?!0:"false"===r?!1:"null"===r?null:+r+""===r?+r:B.test(r)?x.parseJSON(r):r}catch(o){}x.data(e,n,r)}else r=t}return r}function I(e){var t;for(t in e)if(("data"!==t||!x.isEmptyObject(e[t]))&&"toJSON"!==t)return!1;return!0}x.extend({queue:function(e,n,r){var i;return e?(n=(n||"fx")+"queue",i=x._data(e,n),r&&(!i||x.isArray(r)?i=x._data(e,n,x.makeArray(r)):i.push(r)),i||[]):t},dequeue:function(e,t){t=t||"fx";var n=x.queue(e,t),r=n.length,i=n.shift(),o=x._queueHooks(e,t),a=function(){x.dequeue(e,t)};"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,a,o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return x._data(e,n)||x._data(e,n,{empty:x.Callbacks("once memory").add(function(){x._removeData(e,t+"queue"),x._removeData(e,n)})})}}),x.fn.extend({queue:function(e,n){var r=2;return"string"!=typeof e&&(n=e,e="fx",r--),r>arguments.length?x.queue(this[0],e):n===t?this:this.each(function(){var t=x.queue(this,e,n);x._queueHooks(this,e),"fx"===e&&"inprogress"!==t[0]&&x.dequeue(this,e)})},dequeue:function(e){return this.each(function(){x.dequeue(this,e)})},delay:function(e,t){return e=x.fx?x.fx.speeds[e]||e:e,t=t||"fx",this.queue(t,function(t,n){var r=setTimeout(t,e);n.stop=function(){clearTimeout(r)}})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,n){var r,i=1,o=x.Deferred(),a=this,s=this.length,l=function(){--i||o.resolveWith(a,[a])};"string"!=typeof e&&(n=e,e=t),e=e||"fx";while(s--)r=x._data(a[s],e+"queueHooks"),r&&r.empty&&(i++,r.empty.add(l));return l(),o.promise(n)}});var z,X,U=/[\t\r\n\f]/g,V=/\r/g,Y=/^(?:input|select|textarea|button|object)$/i,J=/^(?:a|area)$/i,G=/^(?:checked|selected)$/i,Q=x.support.getSetAttribute,K=x.support.input;x.fn.extend({attr:function(e,t){return x.access(this,x.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){x.removeAttr(this,e)})},prop:function(e,t){return x.access(this,x.prop,e,t,arguments.length>1)},removeProp:function(e){return e=x.propFix[e]||e,this.each(function(){try{this[e]=t,delete this[e]}catch(n){}})},addClass:function(e){var t,n,r,i,o,a=0,s=this.length,l="string"==typeof e&&e;if(x.isFunction(e))return this.each(function(t){x(this).addClass(e.call(this,t,this.className))});if(l)for(t=(e||"").match(T)||[];s>a;a++)if(n=this[a],r=1===n.nodeType&&(n.className?(" "+n.className+" ").replace(U," "):" ")){o=0;while(i=t[o++])0>r.indexOf(" "+i+" ")&&(r+=i+" ");n.className=x.trim(r)}return this},removeClass:function(e){var t,n,r,i,o,a=0,s=this.length,l=0===arguments.length||"string"==typeof e&&e;if(x.isFunction(e))return this.each(function(t){x(this).removeClass(e.call(this,t,this.className))});if(l)for(t=(e||"").match(T)||[];s>a;a++)if(n=this[a],r=1===n.nodeType&&(n.className?(" "+n.className+" ").replace(U," "):"")){o=0;while(i=t[o++])while(r.indexOf(" "+i+" ")>=0)r=r.replace(" "+i+" "," ");n.className=e?x.trim(r):""}return this},toggleClass:function(e,t){var n=typeof e;return"boolean"==typeof t&&"string"===n?t?this.addClass(e):this.removeClass(e):x.isFunction(e)?this.each(function(n){x(this).toggleClass(e.call(this,n,this.className,t),t)}):this.each(function(){if("string"===n){var t,r=0,o=x(this),a=e.match(T)||[];while(t=a[r++])o.hasClass(t)?o.removeClass(t):o.addClass(t)}else(n===i||"boolean"===n)&&(this.className&&x._data(this,"__className__",this.className),this.className=this.className||e===!1?"":x._data(this,"__className__")||"")})},hasClass:function(e){var t=" "+e+" ",n=0,r=this.length;for(;r>n;n++)if(1===this[n].nodeType&&(" "+this[n].className+" ").replace(U," ").indexOf(t)>=0)return!0;return!1},val:function(e){var n,r,i,o=this[0];{if(arguments.length)return i=x.isFunction(e),this.each(function(n){var o;1===this.nodeType&&(o=i?e.call(this,n,x(this).val()):e,null==o?o="":"number"==typeof o?o+="":x.isArray(o)&&(o=x.map(o,function(e){return null==e?"":e+""})),r=x.valHooks[this.type]||x.valHooks[this.nodeName.toLowerCase()],r&&"set"in r&&r.set(this,o,"value")!==t||(this.value=o))});if(o)return r=x.valHooks[o.type]||x.valHooks[o.nodeName.toLowerCase()],r&&"get"in r&&(n=r.get(o,"value"))!==t?n:(n=o.value,"string"==typeof n?n.replace(V,""):null==n?"":n)}}}),x.extend({valHooks:{option:{get:function(e){var t=x.find.attr(e,"value");return null!=t?t:e.text}},select:{get:function(e){var t,n,r=e.options,i=e.selectedIndex,o="select-one"===e.type||0>i,a=o?null:[],s=o?i+1:r.length,l=0>i?s:o?i:0;for(;s>l;l++)if(n=r[l],!(!n.selected&&l!==i||(x.support.optDisabled?n.disabled:null!==n.getAttribute("disabled"))||n.parentNode.disabled&&x.nodeName(n.parentNode,"optgroup"))){if(t=x(n).val(),o)return t;a.push(t)}return a},set:function(e,t){var n,r,i=e.options,o=x.makeArray(t),a=i.length;while(a--)r=i[a],(r.selected=x.inArray(x(r).val(),o)>=0)&&(n=!0);return n||(e.selectedIndex=-1),o}}},attr:function(e,n,r){var o,a,s=e.nodeType;if(e&&3!==s&&8!==s&&2!==s)return typeof e.getAttribute===i?x.prop(e,n,r):(1===s&&x.isXMLDoc(e)||(n=n.toLowerCase(),o=x.attrHooks[n]||(x.expr.match.bool.test(n)?X:z)),r===t?o&&"get"in o&&null!==(a=o.get(e,n))?a:(a=x.find.attr(e,n),null==a?t:a):null!==r?o&&"set"in o&&(a=o.set(e,r,n))!==t?a:(e.setAttribute(n,r+""),r):(x.removeAttr(e,n),t))},removeAttr:function(e,t){var n,r,i=0,o=t&&t.match(T);if(o&&1===e.nodeType)while(n=o[i++])r=x.propFix[n]||n,x.expr.match.bool.test(n)?K&&Q||!G.test(n)?e[r]=!1:e[x.camelCase("default-"+n)]=e[r]=!1:x.attr(e,n,""),e.removeAttribute(Q?n:r)},attrHooks:{type:{set:function(e,t){if(!x.support.radioValue&&"radio"===t&&x.nodeName(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},propFix:{"for":"htmlFor","class":"className"},prop:function(e,n,r){var i,o,a,s=e.nodeType;if(e&&3!==s&&8!==s&&2!==s)return a=1!==s||!x.isXMLDoc(e),a&&(n=x.propFix[n]||n,o=x.propHooks[n]),r!==t?o&&"set"in o&&(i=o.set(e,r,n))!==t?i:e[n]=r:o&&"get"in o&&null!==(i=o.get(e,n))?i:e[n]},propHooks:{tabIndex:{get:function(e){var t=x.find.attr(e,"tabindex");return t?parseInt(t,10):Y.test(e.nodeName)||J.test(e.nodeName)&&e.href?0:-1}}}}),X={set:function(e,t,n){return t===!1?x.removeAttr(e,n):K&&Q||!G.test(n)?e.setAttribute(!Q&&x.propFix[n]||n,n):e[x.camelCase("default-"+n)]=e[n]=!0,n}},x.each(x.expr.match.bool.source.match(/\w+/g),function(e,n){var r=x.expr.attrHandle[n]||x.find.attr;x.expr.attrHandle[n]=K&&Q||!G.test(n)?function(e,n,i){var o=x.expr.attrHandle[n],a=i?t:(x.expr.attrHandle[n]=t)!=r(e,n,i)?n.toLowerCase():null;return x.expr.attrHandle[n]=o,a}:function(e,n,r){return r?t:e[x.camelCase("default-"+n)]?n.toLowerCase():null}}),K&&Q||(x.attrHooks.value={set:function(e,n,r){return x.nodeName(e,"input")?(e.defaultValue=n,t):z&&z.set(e,n,r)}}),Q||(z={set:function(e,n,r){var i=e.getAttributeNode(r);return i||e.setAttributeNode(i=e.ownerDocument.createAttribute(r)),i.value=n+="","value"===r||n===e.getAttribute(r)?n:t}},x.expr.attrHandle.id=x.expr.attrHandle.name=x.expr.attrHandle.coords=function(e,n,r){var i;return r?t:(i=e.getAttributeNode(n))&&""!==i.value?i.value:null},x.valHooks.button={get:function(e,n){var r=e.getAttributeNode(n);return r&&r.specified?r.value:t},set:z.set},x.attrHooks.contenteditable={set:function(e,t,n){z.set(e,""===t?!1:t,n)}},x.each(["width","height"],function(e,n){x.attrHooks[n]={set:function(e,r){return""===r?(e.setAttribute(n,"auto"),r):t}}})),x.support.hrefNormalized||x.each(["href","src"],function(e,t){x.propHooks[t]={get:function(e){return e.getAttribute(t,4)}}}),x.support.style||(x.attrHooks.style={get:function(e){return e.style.cssText||t},set:function(e,t){return e.style.cssText=t+""}}),x.support.optSelected||(x.propHooks.selected={get:function(e){var t=e.parentNode;return t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex),null}}),x.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){x.propFix[this.toLowerCase()]=this}),x.support.enctype||(x.propFix.enctype="encoding"),x.each(["radio","checkbox"],function(){x.valHooks[this]={set:function(e,n){return x.isArray(n)?e.checked=x.inArray(x(e).val(),n)>=0:t}},x.support.checkOn||(x.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var Z=/^(?:input|select|textarea)$/i,et=/^key/,tt=/^(?:mouse|contextmenu)|click/,nt=/^(?:focusinfocus|focusoutblur)$/,rt=/^([^.]*)(?:\.(.+)|)$/;function it(){return!0}function ot(){return!1}function at(){try{return a.activeElement}catch(e){}}x.event={global:{},add:function(e,n,r,o,a){var s,l,u,c,p,f,d,h,g,m,y,v=x._data(e);if(v){r.handler&&(c=r,r=c.handler,a=c.selector),r.guid||(r.guid=x.guid++),(l=v.events)||(l=v.events={}),(f=v.handle)||(f=v.handle=function(e){return typeof x===i||e&&x.event.triggered===e.type?t:x.event.dispatch.apply(f.elem,arguments)},f.elem=e),n=(n||"").match(T)||[""],u=n.length;while(u--)s=rt.exec(n[u])||[],g=y=s[1],m=(s[2]||"").split(".").sort(),g&&(p=x.event.special[g]||{},g=(a?p.delegateType:p.bindType)||g,p=x.event.special[g]||{},d=x.extend({type:g,origType:y,data:o,handler:r,guid:r.guid,selector:a,needsContext:a&&x.expr.match.needsContext.test(a),namespace:m.join(".")},c),(h=l[g])||(h=l[g]=[],h.delegateCount=0,p.setup&&p.setup.call(e,o,m,f)!==!1||(e.addEventListener?e.addEventListener(g,f,!1):e.attachEvent&&e.attachEvent("on"+g,f))),p.add&&(p.add.call(e,d),d.handler.guid||(d.handler.guid=r.guid)),a?h.splice(h.delegateCount++,0,d):h.push(d),x.event.global[g]=!0);e=null}},remove:function(e,t,n,r,i){var o,a,s,l,u,c,p,f,d,h,g,m=x.hasData(e)&&x._data(e);if(m&&(c=m.events)){t=(t||"").match(T)||[""],u=t.length;while(u--)if(s=rt.exec(t[u])||[],d=g=s[1],h=(s[2]||"").split(".").sort(),d){p=x.event.special[d]||{},d=(r?p.delegateType:p.bindType)||d,f=c[d]||[],s=s[2]&&RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),l=o=f.length;while(o--)a=f[o],!i&&g!==a.origType||n&&n.guid!==a.guid||s&&!s.test(a.namespace)||r&&r!==a.selector&&("**"!==r||!a.selector)||(f.splice(o,1),a.selector&&f.delegateCount--,p.remove&&p.remove.call(e,a));l&&!f.length&&(p.teardown&&p.teardown.call(e,h,m.handle)!==!1||x.removeEvent(e,d,m.handle),delete c[d])}else for(d in c)x.event.remove(e,d+t[u],n,r,!0);x.isEmptyObject(c)&&(delete m.handle,x._removeData(e,"events"))}},trigger:function(n,r,i,o){var s,l,u,c,p,f,d,h=[i||a],g=v.call(n,"type")?n.type:n,m=v.call(n,"namespace")?n.namespace.split("."):[];if(u=f=i=i||a,3!==i.nodeType&&8!==i.nodeType&&!nt.test(g+x.event.triggered)&&(g.indexOf(".")>=0&&(m=g.split("."),g=m.shift(),m.sort()),l=0>g.indexOf(":")&&"on"+g,n=n[x.expando]?n:new x.Event(g,"object"==typeof n&&n),n.isTrigger=o?2:3,n.namespace=m.join("."),n.namespace_re=n.namespace?RegExp("(^|\\.)"+m.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,n.result=t,n.target||(n.target=i),r=null==r?[n]:x.makeArray(r,[n]),p=x.event.special[g]||{},o||!p.trigger||p.trigger.apply(i,r)!==!1)){if(!o&&!p.noBubble&&!x.isWindow(i)){for(c=p.delegateType||g,nt.test(c+g)||(u=u.parentNode);u;u=u.parentNode)h.push(u),f=u;f===(i.ownerDocument||a)&&h.push(f.defaultView||f.parentWindow||e)}d=0;while((u=h[d++])&&!n.isPropagationStopped())n.type=d>1?c:p.bindType||g,s=(x._data(u,"events")||{})[n.type]&&x._data(u,"handle"),s&&s.apply(u,r),s=l&&u[l],s&&x.acceptData(u)&&s.apply&&s.apply(u,r)===!1&&n.preventDefault();if(n.type=g,!o&&!n.isDefaultPrevented()&&(!p._default||p._default.apply(h.pop(),r)===!1)&&x.acceptData(i)&&l&&i[g]&&!x.isWindow(i)){f=i[l],f&&(i[l]=null),x.event.triggered=g;try{i[g]()}catch(y){}x.event.triggered=t,f&&(i[l]=f)}return n.result}},dispatch:function(e){e=x.event.fix(e);var n,r,i,o,a,s=[],l=g.call(arguments),u=(x._data(this,"events")||{})[e.type]||[],c=x.event.special[e.type]||{};if(l[0]=e,e.delegateTarget=this,!c.preDispatch||c.preDispatch.call(this,e)!==!1){s=x.event.handlers.call(this,e,u),n=0;while((o=s[n++])&&!e.isPropagationStopped()){e.currentTarget=o.elem,a=0;while((i=o.handlers[a++])&&!e.isImmediatePropagationStopped())(!e.namespace_re||e.namespace_re.test(i.namespace))&&(e.handleObj=i,e.data=i.data,r=((x.event.special[i.origType]||{}).handle||i.handler).apply(o.elem,l),r!==t&&(e.result=r)===!1&&(e.preventDefault(),e.stopPropagation()))}return c.postDispatch&&c.postDispatch.call(this,e),e.result}},handlers:function(e,n){var r,i,o,a,s=[],l=n.delegateCount,u=e.target;if(l&&u.nodeType&&(!e.button||"click"!==e.type))for(;u!=this;u=u.parentNode||this)if(1===u.nodeType&&(u.disabled!==!0||"click"!==e.type)){for(o=[],a=0;l>a;a++)i=n[a],r=i.selector+" ",o[r]===t&&(o[r]=i.needsContext?x(r,this).index(u)>=0:x.find(r,this,null,[u]).length),o[r]&&o.push(i);o.length&&s.push({elem:u,handlers:o})}return n.length>l&&s.push({elem:this,handlers:n.slice(l)}),s},fix:function(e){if(e[x.expando])return e;var t,n,r,i=e.type,o=e,s=this.fixHooks[i];s||(this.fixHooks[i]=s=tt.test(i)?this.mouseHooks:et.test(i)?this.keyHooks:{}),r=s.props?this.props.concat(s.props):this.props,e=new x.Event(o),t=r.length;while(t--)n=r[t],e[n]=o[n];return e.target||(e.target=o.srcElement||a),3===e.target.nodeType&&(e.target=e.target.parentNode),e.metaKey=!!e.metaKey,s.filter?s.filter(e,o):e},props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(e,t){return null==e.which&&(e.which=null!=t.charCode?t.charCode:t.keyCode),e}},mouseHooks:{props:"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(e,n){var r,i,o,s=n.button,l=n.fromElement;return null==e.pageX&&null!=n.clientX&&(i=e.target.ownerDocument||a,o=i.documentElement,r=i.body,e.pageX=n.clientX+(o&&o.scrollLeft||r&&r.scrollLeft||0)-(o&&o.clientLeft||r&&r.clientLeft||0),e.pageY=n.clientY+(o&&o.scrollTop||r&&r.scrollTop||0)-(o&&o.clientTop||r&&r.clientTop||0)),!e.relatedTarget&&l&&(e.relatedTarget=l===e.target?n.toElement:l),e.which||s===t||(e.which=1&s?1:2&s?3:4&s?2:0),e}},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==at()&&this.focus)try{return this.focus(),!1}catch(e){}},delegateType:"focusin"},blur:{trigger:function(){return this===at()&&this.blur?(this.blur(),!1):t},delegateType:"focusout"},click:{trigger:function(){return x.nodeName(this,"input")&&"checkbox"===this.type&&this.click?(this.click(),!1):t},_default:function(e){return x.nodeName(e.target,"a")}},beforeunload:{postDispatch:function(e){e.result!==t&&(e.originalEvent.returnValue=e.result)}}},simulate:function(e,t,n,r){var i=x.extend(new x.Event,n,{type:e,isSimulated:!0,originalEvent:{}});r?x.event.trigger(i,null,t):x.event.dispatch.call(t,i),i.isDefaultPrevented()&&n.preventDefault()}},x.removeEvent=a.removeEventListener?function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n,!1)}:function(e,t,n){var r="on"+t;e.detachEvent&&(typeof e[r]===i&&(e[r]=null),e.detachEvent(r,n))},x.Event=function(e,n){return this instanceof x.Event?(e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||e.returnValue===!1||e.getPreventDefault&&e.getPreventDefault()?it:ot):this.type=e,n&&x.extend(this,n),this.timeStamp=e&&e.timeStamp||x.now(),this[x.expando]=!0,t):new x.Event(e,n)},x.Event.prototype={isDefaultPrevented:ot,isPropagationStopped:ot,isImmediatePropagationStopped:ot,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=it,e&&(e.preventDefault?e.preventDefault():e.returnValue=!1)},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=it,e&&(e.stopPropagation&&e.stopPropagation(),e.cancelBubble=!0)},stopImmediatePropagation:function(){this.isImmediatePropagationStopped=it,this.stopPropagation()}},x.each({mouseenter:"mouseover",mouseleave:"mouseout"},function(e,t){x.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,i=e.relatedTarget,o=e.handleObj;return(!i||i!==r&&!x.contains(r,i))&&(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}}),x.support.submitBubbles||(x.event.special.submit={setup:function(){return x.nodeName(this,"form")?!1:(x.event.add(this,"click._submit keypress._submit",function(e){var n=e.target,r=x.nodeName(n,"input")||x.nodeName(n,"button")?n.form:t;r&&!x._data(r,"submitBubbles")&&(x.event.add(r,"submit._submit",function(e){e._submit_bubble=!0}),x._data(r,"submitBubbles",!0))}),t)},postDispatch:function(e){e._submit_bubble&&(delete e._submit_bubble,this.parentNode&&!e.isTrigger&&x.event.simulate("submit",this.parentNode,e,!0))},teardown:function(){return x.nodeName(this,"form")?!1:(x.event.remove(this,"._submit"),t)}}),x.support.changeBubbles||(x.event.special.change={setup:function(){return Z.test(this.nodeName)?(("checkbox"===this.type||"radio"===this.type)&&(x.event.add(this,"propertychange._change",function(e){"checked"===e.originalEvent.propertyName&&(this._just_changed=!0)}),x.event.add(this,"click._change",function(e){this._just_changed&&!e.isTrigger&&(this._just_changed=!1),x.event.simulate("change",this,e,!0)})),!1):(x.event.add(this,"beforeactivate._change",function(e){var t=e.target;Z.test(t.nodeName)&&!x._data(t,"changeBubbles")&&(x.event.add(t,"change._change",function(e){!this.parentNode||e.isSimulated||e.isTrigger||x.event.simulate("change",this.parentNode,e,!0)}),x._data(t,"changeBubbles",!0))}),t)},handle:function(e){var n=e.target;return this!==n||e.isSimulated||e.isTrigger||"radio"!==n.type&&"checkbox"!==n.type?e.handleObj.handler.apply(this,arguments):t},teardown:function(){return x.event.remove(this,"._change"),!Z.test(this.nodeName)}}),x.support.focusinBubbles||x.each({focus:"focusin",blur:"focusout"},function(e,t){var n=0,r=function(e){x.event.simulate(t,e.target,x.event.fix(e),!0)};x.event.special[t]={setup:function(){0===n++&&a.addEventListener(e,r,!0)},teardown:function(){0===--n&&a.removeEventListener(e,r,!0)}}}),x.fn.extend({on:function(e,n,r,i,o){var a,s;if("object"==typeof e){"string"!=typeof n&&(r=r||n,n=t);for(a in e)this.on(a,n,r,e[a],o);return this}if(null==r&&null==i?(i=n,r=n=t):null==i&&("string"==typeof n?(i=r,r=t):(i=r,r=n,n=t)),i===!1)i=ot;else if(!i)return this;return 1===o&&(s=i,i=function(e){return x().off(e),s.apply(this,arguments)},i.guid=s.guid||(s.guid=x.guid++)),this.each(function(){x.event.add(this,e,i,r,n)})},one:function(e,t,n,r){return this.on(e,t,n,r,1)},off:function(e,n,r){var i,o;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,x(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof e){for(o in e)this.off(o,n,e[o]);return this}return(n===!1||"function"==typeof n)&&(r=n,n=t),r===!1&&(r=ot),this.each(function(){x.event.remove(this,e,r,n)})},trigger:function(e,t){return this.each(function(){x.event.trigger(e,t,this)})},triggerHandler:function(e,n){var r=this[0];return r?x.event.trigger(e,n,r,!0):t}});var st=/^.[^:#\[\.,]*$/,lt=/^(?:parents|prev(?:Until|All))/,ut=x.expr.match.needsContext,ct={children:!0,contents:!0,next:!0,prev:!0};x.fn.extend({find:function(e){var t,n=[],r=this,i=r.length;if("string"!=typeof e)return this.pushStack(x(e).filter(function(){for(t=0;i>t;t++)if(x.contains(r[t],this))return!0}));for(t=0;i>t;t++)x.find(e,r[t],n);return n=this.pushStack(i>1?x.unique(n):n),n.selector=this.selector?this.selector+" "+e:e,n},has:function(e){var t,n=x(e,this),r=n.length;return this.filter(function(){for(t=0;r>t;t++)if(x.contains(this,n[t]))return!0})},not:function(e){return this.pushStack(ft(this,e||[],!0))},filter:function(e){return this.pushStack(ft(this,e||[],!1))},is:function(e){return!!ft(this,"string"==typeof e&&ut.test(e)?x(e):e||[],!1).length},closest:function(e,t){var n,r=0,i=this.length,o=[],a=ut.test(e)||"string"!=typeof e?x(e,t||this.context):0;for(;i>r;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(11>n.nodeType&&(a?a.index(n)>-1:1===n.nodeType&&x.find.matchesSelector(n,e))){n=o.push(n);break}return this.pushStack(o.length>1?x.unique(o):o)},index:function(e){return e?"string"==typeof e?x.inArray(this[0],x(e)):x.inArray(e.jquery?e[0]:e,this):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){var n="string"==typeof e?x(e,t):x.makeArray(e&&e.nodeType?[e]:e),r=x.merge(this.get(),n);return this.pushStack(x.unique(r))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}});function pt(e,t){do e=e[t];while(e&&1!==e.nodeType);return e}x.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return x.dir(e,"parentNode")},parentsUntil:function(e,t,n){return x.dir(e,"parentNode",n)},next:function(e){return pt(e,"nextSibling")},prev:function(e){return pt(e,"previousSibling")},nextAll:function(e){return x.dir(e,"nextSibling")},prevAll:function(e){return x.dir(e,"previousSibling")},nextUntil:function(e,t,n){return x.dir(e,"nextSibling",n)},prevUntil:function(e,t,n){return x.dir(e,"previousSibling",n)},siblings:function(e){return x.sibling((e.parentNode||{}).firstChild,e)},children:function(e){return x.sibling(e.firstChild)},contents:function(e){return x.nodeName(e,"iframe")?e.contentDocument||e.contentWindow.document:x.merge([],e.childNodes)}},function(e,t){x.fn[e]=function(n,r){var i=x.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=x.filter(r,i)),this.length>1&&(ct[e]||(i=x.unique(i)),lt.test(e)&&(i=i.reverse())),this.pushStack(i)}}),x.extend({filter:function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?x.find.matchesSelector(r,e)?[r]:[]:x.find.matches(e,x.grep(t,function(e){return 1===e.nodeType}))},dir:function(e,n,r){var i=[],o=e[n];while(o&&9!==o.nodeType&&(r===t||1!==o.nodeType||!x(o).is(r)))1===o.nodeType&&i.push(o),o=o[n];return i},sibling:function(e,t){var n=[];for(;e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n}});function ft(e,t,n){if(x.isFunction(t))return x.grep(e,function(e,r){return!!t.call(e,r,e)!==n});if(t.nodeType)return x.grep(e,function(e){return e===t!==n});if("string"==typeof t){if(st.test(t))return x.filter(t,e,n);t=x.filter(t,e)}return x.grep(e,function(e){return x.inArray(e,t)>=0!==n})}function dt(e){var t=ht.split("|"),n=e.createDocumentFragment();if(n.createElement)while(t.length)n.createElement(t.pop());return n}var ht="abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",gt=/ jQuery\d+="(?:null|\d+)"/g,mt=RegExp("<(?:"+ht+")[\\s/>]","i"),yt=/^\s+/,vt=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,bt=/<([\w:]+)/,xt=/<tbody/i,wt=/<|&#?\w+;/,Tt=/<(?:script|style|link)/i,Ct=/^(?:checkbox|radio)$/i,Nt=/checked\s*(?:[^=]|=\s*.checked.)/i,kt=/^$|\/(?:java|ecma)script/i,Et=/^true\/(.*)/,St=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,At={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],area:[1,"<map>","</map>"],param:[1,"<object>","</object>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:x.support.htmlSerialize?[0,"",""]:[1,"X<div>","</div>"]},jt=dt(a),Dt=jt.appendChild(a.createElement("div"));At.optgroup=At.option,At.tbody=At.tfoot=At.colgroup=At.caption=At.thead,At.th=At.td,x.fn.extend({text:function(e){return x.access(this,function(e){return e===t?x.text(this):this.empty().append((this[0]&&this[0].ownerDocument||a).createTextNode(e))},null,e,arguments.length)},append:function(){return this.domManip(arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Lt(this,e);t.appendChild(e)}})},prepend:function(){return this.domManip(arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Lt(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return this.domManip(arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return this.domManip(arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},remove:function(e,t){var n,r=e?x.filter(e,this):this,i=0;for(;null!=(n=r[i]);i++)t||1!==n.nodeType||x.cleanData(Ft(n)),n.parentNode&&(t&&x.contains(n.ownerDocument,n)&&_t(Ft(n,"script")),n.parentNode.removeChild(n));return this},empty:function(){var e,t=0;for(;null!=(e=this[t]);t++){1===e.nodeType&&x.cleanData(Ft(e,!1));while(e.firstChild)e.removeChild(e.firstChild);e.options&&x.nodeName(e,"select")&&(e.options.length=0)}return this},clone:function(e,t){return e=null==e?!1:e,t=null==t?e:t,this.map(function(){return x.clone(this,e,t)})},html:function(e){return x.access(this,function(e){var n=this[0]||{},r=0,i=this.length;if(e===t)return 1===n.nodeType?n.innerHTML.replace(gt,""):t;if(!("string"!=typeof e||Tt.test(e)||!x.support.htmlSerialize&&mt.test(e)||!x.support.leadingWhitespace&&yt.test(e)||At[(bt.exec(e)||["",""])[1].toLowerCase()])){e=e.replace(vt,"<$1></$2>");try{for(;i>r;r++)n=this[r]||{},1===n.nodeType&&(x.cleanData(Ft(n,!1)),n.innerHTML=e);n=0}catch(o){}}n&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=x.map(this,function(e){return[e.nextSibling,e.parentNode]}),t=0;return this.domManip(arguments,function(n){var r=e[t++],i=e[t++];i&&(r&&r.parentNode!==i&&(r=this.nextSibling),x(this).remove(),i.insertBefore(n,r))},!0),t?this:this.remove()},detach:function(e){return this.remove(e,!0)},domManip:function(e,t,n){e=d.apply([],e);var r,i,o,a,s,l,u=0,c=this.length,p=this,f=c-1,h=e[0],g=x.isFunction(h);if(g||!(1>=c||"string"!=typeof h||x.support.checkClone)&&Nt.test(h))return this.each(function(r){var i=p.eq(r);g&&(e[0]=h.call(this,r,i.html())),i.domManip(e,t,n)});if(c&&(l=x.buildFragment(e,this[0].ownerDocument,!1,!n&&this),r=l.firstChild,1===l.childNodes.length&&(l=r),r)){for(a=x.map(Ft(l,"script"),Ht),o=a.length;c>u;u++)i=l,u!==f&&(i=x.clone(i,!0,!0),o&&x.merge(a,Ft(i,"script"))),t.call(this[u],i,u);if(o)for(s=a[a.length-1].ownerDocument,x.map(a,qt),u=0;o>u;u++)i=a[u],kt.test(i.type||"")&&!x._data(i,"globalEval")&&x.contains(s,i)&&(i.src?x._evalUrl(i.src):x.globalEval((i.text||i.textContent||i.innerHTML||"").replace(St,"")));l=r=null}return this}});function Lt(e,t){return x.nodeName(e,"table")&&x.nodeName(1===t.nodeType?t:t.firstChild,"tr")?e.getElementsByTagName("tbody")[0]||e.appendChild(e.ownerDocument.createElement("tbody")):e}function Ht(e){return e.type=(null!==x.find.attr(e,"type"))+"/"+e.type,e}function qt(e){var t=Et.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function _t(e,t){var n,r=0;for(;null!=(n=e[r]);r++)x._data(n,"globalEval",!t||x._data(t[r],"globalEval"))}function Mt(e,t){if(1===t.nodeType&&x.hasData(e)){var n,r,i,o=x._data(e),a=x._data(t,o),s=o.events;if(s){delete a.handle,a.events={};for(n in s)for(r=0,i=s[n].length;i>r;r++)x.event.add(t,n,s[n][r])}a.data&&(a.data=x.extend({},a.data))}}function Ot(e,t){var n,r,i;if(1===t.nodeType){if(n=t.nodeName.toLowerCase(),!x.support.noCloneEvent&&t[x.expando]){i=x._data(t);for(r in i.events)x.removeEvent(t,r,i.handle);t.removeAttribute(x.expando)}"script"===n&&t.text!==e.text?(Ht(t).text=e.text,qt(t)):"object"===n?(t.parentNode&&(t.outerHTML=e.outerHTML),x.support.html5Clone&&e.innerHTML&&!x.trim(t.innerHTML)&&(t.innerHTML=e.innerHTML)):"input"===n&&Ct.test(e.type)?(t.defaultChecked=t.checked=e.checked,t.value!==e.value&&(t.value=e.value)):"option"===n?t.defaultSelected=t.selected=e.defaultSelected:("input"===n||"textarea"===n)&&(t.defaultValue=e.defaultValue)}}x.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){x.fn[e]=function(e){var n,r=0,i=[],o=x(e),a=o.length-1;for(;a>=r;r++)n=r===a?this:this.clone(!0),x(o[r])[t](n),h.apply(i,n.get());return this.pushStack(i)}});function Ft(e,n){var r,o,a=0,s=typeof e.getElementsByTagName!==i?e.getElementsByTagName(n||"*"):typeof e.querySelectorAll!==i?e.querySelectorAll(n||"*"):t;if(!s)for(s=[],r=e.childNodes||e;null!=(o=r[a]);a++)!n||x.nodeName(o,n)?s.push(o):x.merge(s,Ft(o,n));return n===t||n&&x.nodeName(e,n)?x.merge([e],s):s}function Bt(e){Ct.test(e.type)&&(e.defaultChecked=e.checked)}x.extend({clone:function(e,t,n){var r,i,o,a,s,l=x.contains(e.ownerDocument,e);if(x.support.html5Clone||x.isXMLDoc(e)||!mt.test("<"+e.nodeName+">")?o=e.cloneNode(!0):(Dt.innerHTML=e.outerHTML,Dt.removeChild(o=Dt.firstChild)),!(x.support.noCloneEvent&&x.support.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||x.isXMLDoc(e)))for(r=Ft(o),s=Ft(e),a=0;null!=(i=s[a]);++a)r[a]&&Ot(i,r[a]);if(t)if(n)for(s=s||Ft(e),r=r||Ft(o),a=0;null!=(i=s[a]);a++)Mt(i,r[a]);else Mt(e,o);return r=Ft(o,"script"),r.length>0&&_t(r,!l&&Ft(e,"script")),r=s=i=null,o},buildFragment:function(e,t,n,r){var i,o,a,s,l,u,c,p=e.length,f=dt(t),d=[],h=0;for(;p>h;h++)if(o=e[h],o||0===o)if("object"===x.type(o))x.merge(d,o.nodeType?[o]:o);else if(wt.test(o)){s=s||f.appendChild(t.createElement("div")),l=(bt.exec(o)||["",""])[1].toLowerCase(),c=At[l]||At._default,s.innerHTML=c[1]+o.replace(vt,"<$1></$2>")+c[2],i=c[0];while(i--)s=s.lastChild;if(!x.support.leadingWhitespace&&yt.test(o)&&d.push(t.createTextNode(yt.exec(o)[0])),!x.support.tbody){o="table"!==l||xt.test(o)?"<table>"!==c[1]||xt.test(o)?0:s:s.firstChild,i=o&&o.childNodes.length;while(i--)x.nodeName(u=o.childNodes[i],"tbody")&&!u.childNodes.length&&o.removeChild(u)}x.merge(d,s.childNodes),s.textContent="";while(s.firstChild)s.removeChild(s.firstChild);s=f.lastChild}else d.push(t.createTextNode(o));s&&f.removeChild(s),x.support.appendChecked||x.grep(Ft(d,"input"),Bt),h=0;while(o=d[h++])if((!r||-1===x.inArray(o,r))&&(a=x.contains(o.ownerDocument,o),s=Ft(f.appendChild(o),"script"),a&&_t(s),n)){i=0;while(o=s[i++])kt.test(o.type||"")&&n.push(o)}return s=null,f},cleanData:function(e,t){var n,r,o,a,s=0,l=x.expando,u=x.cache,c=x.support.deleteExpando,f=x.event.special;for(;null!=(n=e[s]);s++)if((t||x.acceptData(n))&&(o=n[l],a=o&&u[o])){if(a.events)for(r in a.events)f[r]?x.event.remove(n,r):x.removeEvent(n,r,a.handle);
u[o]&&(delete u[o],c?delete n[l]:typeof n.removeAttribute!==i?n.removeAttribute(l):n[l]=null,p.push(o))}},_evalUrl:function(e){return x.ajax({url:e,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})}}),x.fn.extend({wrapAll:function(e){if(x.isFunction(e))return this.each(function(t){x(this).wrapAll(e.call(this,t))});if(this[0]){var t=x(e,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){var e=this;while(e.firstChild&&1===e.firstChild.nodeType)e=e.firstChild;return e}).append(this)}return this},wrapInner:function(e){return x.isFunction(e)?this.each(function(t){x(this).wrapInner(e.call(this,t))}):this.each(function(){var t=x(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=x.isFunction(e);return this.each(function(n){x(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(){return this.parent().each(function(){x.nodeName(this,"body")||x(this).replaceWith(this.childNodes)}).end()}});var Pt,Rt,Wt,$t=/alpha\([^)]*\)/i,It=/opacity\s*=\s*([^)]*)/,zt=/^(top|right|bottom|left)$/,Xt=/^(none|table(?!-c[ea]).+)/,Ut=/^margin/,Vt=RegExp("^("+w+")(.*)$","i"),Yt=RegExp("^("+w+")(?!px)[a-z%]+$","i"),Jt=RegExp("^([+-])=("+w+")","i"),Gt={BODY:"block"},Qt={position:"absolute",visibility:"hidden",display:"block"},Kt={letterSpacing:0,fontWeight:400},Zt=["Top","Right","Bottom","Left"],en=["Webkit","O","Moz","ms"];function tn(e,t){if(t in e)return t;var n=t.charAt(0).toUpperCase()+t.slice(1),r=t,i=en.length;while(i--)if(t=en[i]+n,t in e)return t;return r}function nn(e,t){return e=t||e,"none"===x.css(e,"display")||!x.contains(e.ownerDocument,e)}function rn(e,t){var n,r,i,o=[],a=0,s=e.length;for(;s>a;a++)r=e[a],r.style&&(o[a]=x._data(r,"olddisplay"),n=r.style.display,t?(o[a]||"none"!==n||(r.style.display=""),""===r.style.display&&nn(r)&&(o[a]=x._data(r,"olddisplay",ln(r.nodeName)))):o[a]||(i=nn(r),(n&&"none"!==n||!i)&&x._data(r,"olddisplay",i?n:x.css(r,"display"))));for(a=0;s>a;a++)r=e[a],r.style&&(t&&"none"!==r.style.display&&""!==r.style.display||(r.style.display=t?o[a]||"":"none"));return e}x.fn.extend({css:function(e,n){return x.access(this,function(e,n,r){var i,o,a={},s=0;if(x.isArray(n)){for(o=Rt(e),i=n.length;i>s;s++)a[n[s]]=x.css(e,n[s],!1,o);return a}return r!==t?x.style(e,n,r):x.css(e,n)},e,n,arguments.length>1)},show:function(){return rn(this,!0)},hide:function(){return rn(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){nn(this)?x(this).show():x(this).hide()})}}),x.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Wt(e,"opacity");return""===n?"1":n}}}},cssNumber:{columnCount:!0,fillOpacity:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":x.support.cssFloat?"cssFloat":"styleFloat"},style:function(e,n,r,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var o,a,s,l=x.camelCase(n),u=e.style;if(n=x.cssProps[l]||(x.cssProps[l]=tn(u,l)),s=x.cssHooks[n]||x.cssHooks[l],r===t)return s&&"get"in s&&(o=s.get(e,!1,i))!==t?o:u[n];if(a=typeof r,"string"===a&&(o=Jt.exec(r))&&(r=(o[1]+1)*o[2]+parseFloat(x.css(e,n)),a="number"),!(null==r||"number"===a&&isNaN(r)||("number"!==a||x.cssNumber[l]||(r+="px"),x.support.clearCloneStyle||""!==r||0!==n.indexOf("background")||(u[n]="inherit"),s&&"set"in s&&(r=s.set(e,r,i))===t)))try{u[n]=r}catch(c){}}},css:function(e,n,r,i){var o,a,s,l=x.camelCase(n);return n=x.cssProps[l]||(x.cssProps[l]=tn(e.style,l)),s=x.cssHooks[n]||x.cssHooks[l],s&&"get"in s&&(a=s.get(e,!0,r)),a===t&&(a=Wt(e,n,i)),"normal"===a&&n in Kt&&(a=Kt[n]),""===r||r?(o=parseFloat(a),r===!0||x.isNumeric(o)?o||0:a):a}}),e.getComputedStyle?(Rt=function(t){return e.getComputedStyle(t,null)},Wt=function(e,n,r){var i,o,a,s=r||Rt(e),l=s?s.getPropertyValue(n)||s[n]:t,u=e.style;return s&&(""!==l||x.contains(e.ownerDocument,e)||(l=x.style(e,n)),Yt.test(l)&&Ut.test(n)&&(i=u.width,o=u.minWidth,a=u.maxWidth,u.minWidth=u.maxWidth=u.width=l,l=s.width,u.width=i,u.minWidth=o,u.maxWidth=a)),l}):a.documentElement.currentStyle&&(Rt=function(e){return e.currentStyle},Wt=function(e,n,r){var i,o,a,s=r||Rt(e),l=s?s[n]:t,u=e.style;return null==l&&u&&u[n]&&(l=u[n]),Yt.test(l)&&!zt.test(n)&&(i=u.left,o=e.runtimeStyle,a=o&&o.left,a&&(o.left=e.currentStyle.left),u.left="fontSize"===n?"1em":l,l=u.pixelLeft+"px",u.left=i,a&&(o.left=a)),""===l?"auto":l});function on(e,t,n){var r=Vt.exec(t);return r?Math.max(0,r[1]-(n||0))+(r[2]||"px"):t}function an(e,t,n,r,i){var o=n===(r?"border":"content")?4:"width"===t?1:0,a=0;for(;4>o;o+=2)"margin"===n&&(a+=x.css(e,n+Zt[o],!0,i)),r?("content"===n&&(a-=x.css(e,"padding"+Zt[o],!0,i)),"margin"!==n&&(a-=x.css(e,"border"+Zt[o]+"Width",!0,i))):(a+=x.css(e,"padding"+Zt[o],!0,i),"padding"!==n&&(a+=x.css(e,"border"+Zt[o]+"Width",!0,i)));return a}function sn(e,t,n){var r=!0,i="width"===t?e.offsetWidth:e.offsetHeight,o=Rt(e),a=x.support.boxSizing&&"border-box"===x.css(e,"boxSizing",!1,o);if(0>=i||null==i){if(i=Wt(e,t,o),(0>i||null==i)&&(i=e.style[t]),Yt.test(i))return i;r=a&&(x.support.boxSizingReliable||i===e.style[t]),i=parseFloat(i)||0}return i+an(e,t,n||(a?"border":"content"),r,o)+"px"}function ln(e){var t=a,n=Gt[e];return n||(n=un(e,t),"none"!==n&&n||(Pt=(Pt||x("<iframe frameborder='0' width='0' height='0'/>").css("cssText","display:block !important")).appendTo(t.documentElement),t=(Pt[0].contentWindow||Pt[0].contentDocument).document,t.write("<!doctype html><html><body>"),t.close(),n=un(e,t),Pt.detach()),Gt[e]=n),n}function un(e,t){var n=x(t.createElement(e)).appendTo(t.body),r=x.css(n[0],"display");return n.remove(),r}x.each(["height","width"],function(e,n){x.cssHooks[n]={get:function(e,r,i){return r?0===e.offsetWidth&&Xt.test(x.css(e,"display"))?x.swap(e,Qt,function(){return sn(e,n,i)}):sn(e,n,i):t},set:function(e,t,r){var i=r&&Rt(e);return on(e,t,r?an(e,n,r,x.support.boxSizing&&"border-box"===x.css(e,"boxSizing",!1,i),i):0)}}}),x.support.opacity||(x.cssHooks.opacity={get:function(e,t){return It.test((t&&e.currentStyle?e.currentStyle.filter:e.style.filter)||"")?.01*parseFloat(RegExp.$1)+"":t?"1":""},set:function(e,t){var n=e.style,r=e.currentStyle,i=x.isNumeric(t)?"alpha(opacity="+100*t+")":"",o=r&&r.filter||n.filter||"";n.zoom=1,(t>=1||""===t)&&""===x.trim(o.replace($t,""))&&n.removeAttribute&&(n.removeAttribute("filter"),""===t||r&&!r.filter)||(n.filter=$t.test(o)?o.replace($t,i):o+" "+i)}}),x(function(){x.support.reliableMarginRight||(x.cssHooks.marginRight={get:function(e,n){return n?x.swap(e,{display:"inline-block"},Wt,[e,"marginRight"]):t}}),!x.support.pixelPosition&&x.fn.position&&x.each(["top","left"],function(e,n){x.cssHooks[n]={get:function(e,r){return r?(r=Wt(e,n),Yt.test(r)?x(e).position()[n]+"px":r):t}}})}),x.expr&&x.expr.filters&&(x.expr.filters.hidden=function(e){return 0>=e.offsetWidth&&0>=e.offsetHeight||!x.support.reliableHiddenOffsets&&"none"===(e.style&&e.style.display||x.css(e,"display"))},x.expr.filters.visible=function(e){return!x.expr.filters.hidden(e)}),x.each({margin:"",padding:"",border:"Width"},function(e,t){x.cssHooks[e+t]={expand:function(n){var r=0,i={},o="string"==typeof n?n.split(" "):[n];for(;4>r;r++)i[e+Zt[r]+t]=o[r]||o[r-2]||o[0];return i}},Ut.test(e)||(x.cssHooks[e+t].set=on)});var cn=/%20/g,pn=/\[\]$/,fn=/\r?\n/g,dn=/^(?:submit|button|image|reset|file)$/i,hn=/^(?:input|select|textarea|keygen)/i;x.fn.extend({serialize:function(){return x.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=x.prop(this,"elements");return e?x.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!x(this).is(":disabled")&&hn.test(this.nodeName)&&!dn.test(e)&&(this.checked||!Ct.test(e))}).map(function(e,t){var n=x(this).val();return null==n?null:x.isArray(n)?x.map(n,function(e){return{name:t.name,value:e.replace(fn,"\r\n")}}):{name:t.name,value:n.replace(fn,"\r\n")}}).get()}}),x.param=function(e,n){var r,i=[],o=function(e,t){t=x.isFunction(t)?t():null==t?"":t,i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(t)};if(n===t&&(n=x.ajaxSettings&&x.ajaxSettings.traditional),x.isArray(e)||e.jquery&&!x.isPlainObject(e))x.each(e,function(){o(this.name,this.value)});else for(r in e)gn(r,e[r],n,o);return i.join("&").replace(cn,"+")};function gn(e,t,n,r){var i;if(x.isArray(t))x.each(t,function(t,i){n||pn.test(e)?r(e,i):gn(e+"["+("object"==typeof i?t:"")+"]",i,n,r)});else if(n||"object"!==x.type(t))r(e,t);else for(i in t)gn(e+"["+i+"]",t[i],n,r)}x.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(e,t){x.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),x.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)},bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}});var mn,yn,vn=x.now(),bn=/\?/,xn=/#.*$/,wn=/([?&])_=[^&]*/,Tn=/^(.*?):[ \t]*([^\r\n]*)\r?$/gm,Cn=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Nn=/^(?:GET|HEAD)$/,kn=/^\/\//,En=/^([\w.+-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,Sn=x.fn.load,An={},jn={},Dn="*/".concat("*");try{yn=o.href}catch(Ln){yn=a.createElement("a"),yn.href="",yn=yn.href}mn=En.exec(yn.toLowerCase())||[];function Hn(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,i=0,o=t.toLowerCase().match(T)||[];if(x.isFunction(n))while(r=o[i++])"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function qn(e,n,r,i){var o={},a=e===jn;function s(l){var u;return o[l]=!0,x.each(e[l]||[],function(e,l){var c=l(n,r,i);return"string"!=typeof c||a||o[c]?a?!(u=c):t:(n.dataTypes.unshift(c),s(c),!1)}),u}return s(n.dataTypes[0])||!o["*"]&&s("*")}function _n(e,n){var r,i,o=x.ajaxSettings.flatOptions||{};for(i in n)n[i]!==t&&((o[i]?e:r||(r={}))[i]=n[i]);return r&&x.extend(!0,e,r),e}x.fn.load=function(e,n,r){if("string"!=typeof e&&Sn)return Sn.apply(this,arguments);var i,o,a,s=this,l=e.indexOf(" ");return l>=0&&(i=e.slice(l,e.length),e=e.slice(0,l)),x.isFunction(n)?(r=n,n=t):n&&"object"==typeof n&&(a="POST"),s.length>0&&x.ajax({url:e,type:a,dataType:"html",data:n}).done(function(e){o=arguments,s.html(i?x("<div>").append(x.parseHTML(e)).find(i):e)}).complete(r&&function(e,t){s.each(r,o||[e.responseText,t,e])}),this},x.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){x.fn[t]=function(e){return this.on(t,e)}}),x.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:yn,type:"GET",isLocal:Cn.test(mn[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Dn,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":x.parseJSON,"text xml":x.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?_n(_n(e,x.ajaxSettings),t):_n(x.ajaxSettings,e)},ajaxPrefilter:Hn(An),ajaxTransport:Hn(jn),ajax:function(e,n){"object"==typeof e&&(n=e,e=t),n=n||{};var r,i,o,a,s,l,u,c,p=x.ajaxSetup({},n),f=p.context||p,d=p.context&&(f.nodeType||f.jquery)?x(f):x.event,h=x.Deferred(),g=x.Callbacks("once memory"),m=p.statusCode||{},y={},v={},b=0,w="canceled",C={readyState:0,getResponseHeader:function(e){var t;if(2===b){if(!c){c={};while(t=Tn.exec(a))c[t[1].toLowerCase()]=t[2]}t=c[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return 2===b?a:null},setRequestHeader:function(e,t){var n=e.toLowerCase();return b||(e=v[n]=v[n]||e,y[e]=t),this},overrideMimeType:function(e){return b||(p.mimeType=e),this},statusCode:function(e){var t;if(e)if(2>b)for(t in e)m[t]=[m[t],e[t]];else C.always(e[C.status]);return this},abort:function(e){var t=e||w;return u&&u.abort(t),k(0,t),this}};if(h.promise(C).complete=g.add,C.success=C.done,C.error=C.fail,p.url=((e||p.url||yn)+"").replace(xn,"").replace(kn,mn[1]+"//"),p.type=n.method||n.type||p.method||p.type,p.dataTypes=x.trim(p.dataType||"*").toLowerCase().match(T)||[""],null==p.crossDomain&&(r=En.exec(p.url.toLowerCase()),p.crossDomain=!(!r||r[1]===mn[1]&&r[2]===mn[2]&&(r[3]||("http:"===r[1]?"80":"443"))===(mn[3]||("http:"===mn[1]?"80":"443")))),p.data&&p.processData&&"string"!=typeof p.data&&(p.data=x.param(p.data,p.traditional)),qn(An,p,n,C),2===b)return C;l=p.global,l&&0===x.active++&&x.event.trigger("ajaxStart"),p.type=p.type.toUpperCase(),p.hasContent=!Nn.test(p.type),o=p.url,p.hasContent||(p.data&&(o=p.url+=(bn.test(o)?"&":"?")+p.data,delete p.data),p.cache===!1&&(p.url=wn.test(o)?o.replace(wn,"$1_="+vn++):o+(bn.test(o)?"&":"?")+"_="+vn++)),p.ifModified&&(x.lastModified[o]&&C.setRequestHeader("If-Modified-Since",x.lastModified[o]),x.etag[o]&&C.setRequestHeader("If-None-Match",x.etag[o])),(p.data&&p.hasContent&&p.contentType!==!1||n.contentType)&&C.setRequestHeader("Content-Type",p.contentType),C.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+("*"!==p.dataTypes[0]?", "+Dn+"; q=0.01":""):p.accepts["*"]);for(i in p.headers)C.setRequestHeader(i,p.headers[i]);if(p.beforeSend&&(p.beforeSend.call(f,C,p)===!1||2===b))return C.abort();w="abort";for(i in{success:1,error:1,complete:1})C[i](p[i]);if(u=qn(jn,p,n,C)){C.readyState=1,l&&d.trigger("ajaxSend",[C,p]),p.async&&p.timeout>0&&(s=setTimeout(function(){C.abort("timeout")},p.timeout));try{b=1,u.send(y,k)}catch(N){if(!(2>b))throw N;k(-1,N)}}else k(-1,"No Transport");function k(e,n,r,i){var c,y,v,w,T,N=n;2!==b&&(b=2,s&&clearTimeout(s),u=t,a=i||"",C.readyState=e>0?4:0,c=e>=200&&300>e||304===e,r&&(w=Mn(p,C,r)),w=On(p,w,C,c),c?(p.ifModified&&(T=C.getResponseHeader("Last-Modified"),T&&(x.lastModified[o]=T),T=C.getResponseHeader("etag"),T&&(x.etag[o]=T)),204===e||"HEAD"===p.type?N="nocontent":304===e?N="notmodified":(N=w.state,y=w.data,v=w.error,c=!v)):(v=N,(e||!N)&&(N="error",0>e&&(e=0))),C.status=e,C.statusText=(n||N)+"",c?h.resolveWith(f,[y,N,C]):h.rejectWith(f,[C,N,v]),C.statusCode(m),m=t,l&&d.trigger(c?"ajaxSuccess":"ajaxError",[C,p,c?y:v]),g.fireWith(f,[C,N]),l&&(d.trigger("ajaxComplete",[C,p]),--x.active||x.event.trigger("ajaxStop")))}return C},getJSON:function(e,t,n){return x.get(e,t,n,"json")},getScript:function(e,n){return x.get(e,t,n,"script")}}),x.each(["get","post"],function(e,n){x[n]=function(e,r,i,o){return x.isFunction(r)&&(o=o||i,i=r,r=t),x.ajax({url:e,type:n,dataType:o,data:r,success:i})}});function Mn(e,n,r){var i,o,a,s,l=e.contents,u=e.dataTypes;while("*"===u[0])u.shift(),o===t&&(o=e.mimeType||n.getResponseHeader("Content-Type"));if(o)for(s in l)if(l[s]&&l[s].test(o)){u.unshift(s);break}if(u[0]in r)a=u[0];else{for(s in r){if(!u[0]||e.converters[s+" "+u[0]]){a=s;break}i||(i=s)}a=a||i}return a?(a!==u[0]&&u.unshift(a),r[a]):t}function On(e,t,n,r){var i,o,a,s,l,u={},c=e.dataTypes.slice();if(c[1])for(a in e.converters)u[a.toLowerCase()]=e.converters[a];o=c.shift();while(o)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!l&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=o,o=c.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(a=u[l+" "+o]||u["* "+o],!a)for(i in u)if(s=i.split(" "),s[1]===o&&(a=u[l+" "+s[0]]||u["* "+s[0]])){a===!0?a=u[i]:u[i]!==!0&&(o=s[0],c.unshift(s[1]));break}if(a!==!0)if(a&&e["throws"])t=a(t);else try{t=a(t)}catch(p){return{state:"parsererror",error:a?p:"No conversion from "+l+" to "+o}}}return{state:"success",data:t}}x.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/(?:java|ecma)script/},converters:{"text script":function(e){return x.globalEval(e),e}}}),x.ajaxPrefilter("script",function(e){e.cache===t&&(e.cache=!1),e.crossDomain&&(e.type="GET",e.global=!1)}),x.ajaxTransport("script",function(e){if(e.crossDomain){var n,r=a.head||x("head")[0]||a.documentElement;return{send:function(t,i){n=a.createElement("script"),n.async=!0,e.scriptCharset&&(n.charset=e.scriptCharset),n.src=e.url,n.onload=n.onreadystatechange=function(e,t){(t||!n.readyState||/loaded|complete/.test(n.readyState))&&(n.onload=n.onreadystatechange=null,n.parentNode&&n.parentNode.removeChild(n),n=null,t||i(200,"success"))},r.insertBefore(n,r.firstChild)},abort:function(){n&&n.onload(t,!0)}}}});var Fn=[],Bn=/(=)\?(?=&|$)|\?\?/;x.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Fn.pop()||x.expando+"_"+vn++;return this[e]=!0,e}}),x.ajaxPrefilter("json jsonp",function(n,r,i){var o,a,s,l=n.jsonp!==!1&&(Bn.test(n.url)?"url":"string"==typeof n.data&&!(n.contentType||"").indexOf("application/x-www-form-urlencoded")&&Bn.test(n.data)&&"data");return l||"jsonp"===n.dataTypes[0]?(o=n.jsonpCallback=x.isFunction(n.jsonpCallback)?n.jsonpCallback():n.jsonpCallback,l?n[l]=n[l].replace(Bn,"$1"+o):n.jsonp!==!1&&(n.url+=(bn.test(n.url)?"&":"?")+n.jsonp+"="+o),n.converters["script json"]=function(){return s||x.error(o+" was not called"),s[0]},n.dataTypes[0]="json",a=e[o],e[o]=function(){s=arguments},i.always(function(){e[o]=a,n[o]&&(n.jsonpCallback=r.jsonpCallback,Fn.push(o)),s&&x.isFunction(a)&&a(s[0]),s=a=t}),"script"):t});var Pn,Rn,Wn=0,$n=e.ActiveXObject&&function(){var e;for(e in Pn)Pn[e](t,!0)};function In(){try{return new e.XMLHttpRequest}catch(t){}}function zn(){try{return new e.ActiveXObject("Microsoft.XMLHTTP")}catch(t){}}x.ajaxSettings.xhr=e.ActiveXObject?function(){return!this.isLocal&&In()||zn()}:In,Rn=x.ajaxSettings.xhr(),x.support.cors=!!Rn&&"withCredentials"in Rn,Rn=x.support.ajax=!!Rn,Rn&&x.ajaxTransport(function(n){if(!n.crossDomain||x.support.cors){var r;return{send:function(i,o){var a,s,l=n.xhr();if(n.username?l.open(n.type,n.url,n.async,n.username,n.password):l.open(n.type,n.url,n.async),n.xhrFields)for(s in n.xhrFields)l[s]=n.xhrFields[s];n.mimeType&&l.overrideMimeType&&l.overrideMimeType(n.mimeType),n.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest");try{for(s in i)l.setRequestHeader(s,i[s])}catch(u){}l.send(n.hasContent&&n.data||null),r=function(e,i){var s,u,c,p;try{if(r&&(i||4===l.readyState))if(r=t,a&&(l.onreadystatechange=x.noop,$n&&delete Pn[a]),i)4!==l.readyState&&l.abort();else{p={},s=l.status,u=l.getAllResponseHeaders(),"string"==typeof l.responseText&&(p.text=l.responseText);try{c=l.statusText}catch(f){c=""}s||!n.isLocal||n.crossDomain?1223===s&&(s=204):s=p.text?200:404}}catch(d){i||o(-1,d)}p&&o(s,c,p,u)},n.async?4===l.readyState?setTimeout(r):(a=++Wn,$n&&(Pn||(Pn={},x(e).unload($n)),Pn[a]=r),l.onreadystatechange=r):r()},abort:function(){r&&r(t,!0)}}}});var Xn,Un,Vn=/^(?:toggle|show|hide)$/,Yn=RegExp("^(?:([+-])=|)("+w+")([a-z%]*)$","i"),Jn=/queueHooks$/,Gn=[nr],Qn={"*":[function(e,t){var n=this.createTween(e,t),r=n.cur(),i=Yn.exec(t),o=i&&i[3]||(x.cssNumber[e]?"":"px"),a=(x.cssNumber[e]||"px"!==o&&+r)&&Yn.exec(x.css(n.elem,e)),s=1,l=20;if(a&&a[3]!==o){o=o||a[3],i=i||[],a=+r||1;do s=s||".5",a/=s,x.style(n.elem,e,a+o);while(s!==(s=n.cur()/r)&&1!==s&&--l)}return i&&(a=n.start=+a||+r||0,n.unit=o,n.end=i[1]?a+(i[1]+1)*i[2]:+i[2]),n}]};function Kn(){return setTimeout(function(){Xn=t}),Xn=x.now()}function Zn(e,t,n){var r,i=(Qn[t]||[]).concat(Qn["*"]),o=0,a=i.length;for(;a>o;o++)if(r=i[o].call(n,t,e))return r}function er(e,t,n){var r,i,o=0,a=Gn.length,s=x.Deferred().always(function(){delete l.elem}),l=function(){if(i)return!1;var t=Xn||Kn(),n=Math.max(0,u.startTime+u.duration-t),r=n/u.duration||0,o=1-r,a=0,l=u.tweens.length;for(;l>a;a++)u.tweens[a].run(o);return s.notifyWith(e,[u,o,n]),1>o&&l?n:(s.resolveWith(e,[u]),!1)},u=s.promise({elem:e,props:x.extend({},t),opts:x.extend(!0,{specialEasing:{}},n),originalProperties:t,originalOptions:n,startTime:Xn||Kn(),duration:n.duration,tweens:[],createTween:function(t,n){var r=x.Tween(e,u.opts,t,n,u.opts.specialEasing[t]||u.opts.easing);return u.tweens.push(r),r},stop:function(t){var n=0,r=t?u.tweens.length:0;if(i)return this;for(i=!0;r>n;n++)u.tweens[n].run(1);return t?s.resolveWith(e,[u,t]):s.rejectWith(e,[u,t]),this}}),c=u.props;for(tr(c,u.opts.specialEasing);a>o;o++)if(r=Gn[o].call(u,e,c,u.opts))return r;return x.map(c,Zn,u),x.isFunction(u.opts.start)&&u.opts.start.call(e,u),x.fx.timer(x.extend(l,{elem:e,anim:u,queue:u.opts.queue})),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always)}function tr(e,t){var n,r,i,o,a;for(n in e)if(r=x.camelCase(n),i=t[r],o=e[n],x.isArray(o)&&(i=o[1],o=e[n]=o[0]),n!==r&&(e[r]=o,delete e[n]),a=x.cssHooks[r],a&&"expand"in a){o=a.expand(o),delete e[r];for(n in o)n in e||(e[n]=o[n],t[n]=i)}else t[r]=i}x.Animation=x.extend(er,{tweener:function(e,t){x.isFunction(e)?(t=e,e=["*"]):e=e.split(" ");var n,r=0,i=e.length;for(;i>r;r++)n=e[r],Qn[n]=Qn[n]||[],Qn[n].unshift(t)},prefilter:function(e,t){t?Gn.unshift(e):Gn.push(e)}});function nr(e,t,n){var r,i,o,a,s,l,u=this,c={},p=e.style,f=e.nodeType&&nn(e),d=x._data(e,"fxshow");n.queue||(s=x._queueHooks(e,"fx"),null==s.unqueued&&(s.unqueued=0,l=s.empty.fire,s.empty.fire=function(){s.unqueued||l()}),s.unqueued++,u.always(function(){u.always(function(){s.unqueued--,x.queue(e,"fx").length||s.empty.fire()})})),1===e.nodeType&&("height"in t||"width"in t)&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],"inline"===x.css(e,"display")&&"none"===x.css(e,"float")&&(x.support.inlineBlockNeedsLayout&&"inline"!==ln(e.nodeName)?p.zoom=1:p.display="inline-block")),n.overflow&&(p.overflow="hidden",x.support.shrinkWrapBlocks||u.always(function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]}));for(r in t)if(i=t[r],Vn.exec(i)){if(delete t[r],o=o||"toggle"===i,i===(f?"hide":"show"))continue;c[r]=d&&d[r]||x.style(e,r)}if(!x.isEmptyObject(c)){d?"hidden"in d&&(f=d.hidden):d=x._data(e,"fxshow",{}),o&&(d.hidden=!f),f?x(e).show():u.done(function(){x(e).hide()}),u.done(function(){var t;x._removeData(e,"fxshow");for(t in c)x.style(e,t,c[t])});for(r in c)a=Zn(f?d[r]:0,r,u),r in d||(d[r]=a.start,f&&(a.end=a.start,a.start="width"===r||"height"===r?1:0))}}function rr(e,t,n,r,i){return new rr.prototype.init(e,t,n,r,i)}x.Tween=rr,rr.prototype={constructor:rr,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||"swing",this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(x.cssNumber[n]?"":"px")},cur:function(){var e=rr.propHooks[this.prop];return e&&e.get?e.get(this):rr.propHooks._default.get(this)},run:function(e){var t,n=rr.propHooks[this.prop];return this.pos=t=this.options.duration?x.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):rr.propHooks._default.set(this),this}},rr.prototype.init.prototype=rr.prototype,rr.propHooks={_default:{get:function(e){var t;return null==e.elem[e.prop]||e.elem.style&&null!=e.elem.style[e.prop]?(t=x.css(e.elem,e.prop,""),t&&"auto"!==t?t:0):e.elem[e.prop]},set:function(e){x.fx.step[e.prop]?x.fx.step[e.prop](e):e.elem.style&&(null!=e.elem.style[x.cssProps[e.prop]]||x.cssHooks[e.prop])?x.style(e.elem,e.prop,e.now+e.unit):e.elem[e.prop]=e.now}}},rr.propHooks.scrollTop=rr.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},x.each(["toggle","show","hide"],function(e,t){var n=x.fn[t];x.fn[t]=function(e,r,i){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(ir(t,!0),e,r,i)}}),x.fn.extend({fadeTo:function(e,t,n,r){return this.filter(nn).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=x.isEmptyObject(e),o=x.speed(t,n,r),a=function(){var t=er(this,x.extend({},e),o);(i||x._data(this,"finish"))&&t.stop(!0)};return a.finish=a,i||o.queue===!1?this.each(a):this.queue(o.queue,a)},stop:function(e,n,r){var i=function(e){var t=e.stop;delete e.stop,t(r)};return"string"!=typeof e&&(r=n,n=e,e=t),n&&e!==!1&&this.queue(e||"fx",[]),this.each(function(){var t=!0,n=null!=e&&e+"queueHooks",o=x.timers,a=x._data(this);if(n)a[n]&&a[n].stop&&i(a[n]);else for(n in a)a[n]&&a[n].stop&&Jn.test(n)&&i(a[n]);for(n=o.length;n--;)o[n].elem!==this||null!=e&&o[n].queue!==e||(o[n].anim.stop(r),t=!1,o.splice(n,1));(t||!r)&&x.dequeue(this,e)})},finish:function(e){return e!==!1&&(e=e||"fx"),this.each(function(){var t,n=x._data(this),r=n[e+"queue"],i=n[e+"queueHooks"],o=x.timers,a=r?r.length:0;for(n.finish=!0,x.queue(this,e,[]),i&&i.stop&&i.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;a>t;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish})}});function ir(e,t){var n,r={height:e},i=0;for(t=t?1:0;4>i;i+=2-t)n=Zt[i],r["margin"+n]=r["padding"+n]=e;return t&&(r.opacity=r.width=e),r}x.each({slideDown:ir("show"),slideUp:ir("hide"),slideToggle:ir("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){x.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}}),x.speed=function(e,t,n){var r=e&&"object"==typeof e?x.extend({},e):{complete:n||!n&&t||x.isFunction(e)&&e,duration:e,easing:n&&t||t&&!x.isFunction(t)&&t};return r.duration=x.fx.off?0:"number"==typeof r.duration?r.duration:r.duration in x.fx.speeds?x.fx.speeds[r.duration]:x.fx.speeds._default,(null==r.queue||r.queue===!0)&&(r.queue="fx"),r.old=r.complete,r.complete=function(){x.isFunction(r.old)&&r.old.call(this),r.queue&&x.dequeue(this,r.queue)},r},x.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2}},x.timers=[],x.fx=rr.prototype.init,x.fx.tick=function(){var e,n=x.timers,r=0;for(Xn=x.now();n.length>r;r++)e=n[r],e()||n[r]!==e||n.splice(r--,1);n.length||x.fx.stop(),Xn=t},x.fx.timer=function(e){e()&&x.timers.push(e)&&x.fx.start()},x.fx.interval=13,x.fx.start=function(){Un||(Un=setInterval(x.fx.tick,x.fx.interval))},x.fx.stop=function(){clearInterval(Un),Un=null},x.fx.speeds={slow:600,fast:200,_default:400},x.fx.step={},x.expr&&x.expr.filters&&(x.expr.filters.animated=function(e){return x.grep(x.timers,function(t){return e===t.elem}).length}),x.fn.offset=function(e){if(arguments.length)return e===t?this:this.each(function(t){x.offset.setOffset(this,e,t)});var n,r,o={top:0,left:0},a=this[0],s=a&&a.ownerDocument;if(s)return n=s.documentElement,x.contains(n,a)?(typeof a.getBoundingClientRect!==i&&(o=a.getBoundingClientRect()),r=or(s),{top:o.top+(r.pageYOffset||n.scrollTop)-(n.clientTop||0),left:o.left+(r.pageXOffset||n.scrollLeft)-(n.clientLeft||0)}):o},x.offset={setOffset:function(e,t,n){var r=x.css(e,"position");"static"===r&&(e.style.position="relative");var i=x(e),o=i.offset(),a=x.css(e,"top"),s=x.css(e,"left"),l=("absolute"===r||"fixed"===r)&&x.inArray("auto",[a,s])>-1,u={},c={},p,f;l?(c=i.position(),p=c.top,f=c.left):(p=parseFloat(a)||0,f=parseFloat(s)||0),x.isFunction(t)&&(t=t.call(e,n,o)),null!=t.top&&(u.top=t.top-o.top+p),null!=t.left&&(u.left=t.left-o.left+f),"using"in t?t.using.call(e,u):i.css(u)}},x.fn.extend({position:function(){if(this[0]){var e,t,n={top:0,left:0},r=this[0];return"fixed"===x.css(r,"position")?t=r.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),x.nodeName(e[0],"html")||(n=e.offset()),n.top+=x.css(e[0],"borderTopWidth",!0),n.left+=x.css(e[0],"borderLeftWidth",!0)),{top:t.top-n.top-x.css(r,"marginTop",!0),left:t.left-n.left-x.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){var e=this.offsetParent||s;while(e&&!x.nodeName(e,"html")&&"static"===x.css(e,"position"))e=e.offsetParent;return e||s})}}),x.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,n){var r=/Y/.test(n);x.fn[e]=function(i){return x.access(this,function(e,i,o){var a=or(e);return o===t?a?n in a?a[n]:a.document.documentElement[i]:e[i]:(a?a.scrollTo(r?x(a).scrollLeft():o,r?o:x(a).scrollTop()):e[i]=o,t)},e,i,arguments.length,null)}});function or(e){return x.isWindow(e)?e:9===e.nodeType?e.defaultView||e.parentWindow:!1}x.each({Height:"height",Width:"width"},function(e,n){x.each({padding:"inner"+e,content:n,"":"outer"+e},function(r,i){x.fn[i]=function(i,o){var a=arguments.length&&(r||"boolean"!=typeof i),s=r||(i===!0||o===!0?"margin":"border");return x.access(this,function(n,r,i){var o;return x.isWindow(n)?n.document.documentElement["client"+e]:9===n.nodeType?(o=n.documentElement,Math.max(n.body["scroll"+e],o["scroll"+e],n.body["offset"+e],o["offset"+e],o["client"+e])):i===t?x.css(n,r,s):x.style(n,r,i,s)},n,a?i:t,a,null)}})}),x.fn.size=function(){return this.length},x.fn.andSelf=x.fn.addBack,"object"==typeof module&&module&&"object"==typeof module.exports?module.exports=x:(e.jQuery=e.$=x,"function"==typeof define&&define.amd&&define("jquery",[],function(){return x}))})(window);

/* Modernizr 2.6.2 (Custom Build) | MIT & BSD
 * Build: http://modernizr.com/download/#-fontface-backgroundsize-borderimage-borderradius-boxshadow-flexbox-hsla-multiplebgs-opacity-rgba-textshadow-cssanimations-csscolumns-generatedcontent-cssgradients-cssreflections-csstransforms-csstransforms3d-csstransitions-applicationcache-canvas-canvastext-draganddrop-hashchange-history-audio-video-indexeddb-input-inputtypes-localstorage-postmessage-sessionstorage-websockets-websqldatabase-webworkers-geolocation-inlinesvg-smil-svg-svgclippaths-touch-webgl-shiv-mq-cssclasses-addtest-prefixed-teststyles-testprop-testallprops-hasevent-prefixes-domprefixes-load
 */
;window.Modernizr=function(a,b,c){function D(a){j.cssText=a}function E(a,b){return D(n.join(a+";")+(b||""))}function F(a,b){return typeof a===b}function G(a,b){return!!~(""+a).indexOf(b)}function H(a,b){for(var d in a){var e=a[d];if(!G(e,"-")&&j[e]!==c)return b=="pfx"?e:!0}return!1}function I(a,b,d){for(var e in a){var f=b[a[e]];if(f!==c)return d===!1?a[e]:F(f,"function")?f.bind(d||b):f}return!1}function J(a,b,c){var d=a.charAt(0).toUpperCase()+a.slice(1),e=(a+" "+p.join(d+" ")+d).split(" ");return F(b,"string")||F(b,"undefined")?H(e,b):(e=(a+" "+q.join(d+" ")+d).split(" "),I(e,b,c))}function K(){e.input=function(c){for(var d=0,e=c.length;d<e;d++)u[c[d]]=c[d]in k;return u.list&&(u.list=!!b.createElement("datalist")&&!!a.HTMLDataListElement),u}("autocomplete autofocus list placeholder max min multiple pattern required step".split(" ")),e.inputtypes=function(a){for(var d=0,e,f,h,i=a.length;d<i;d++)k.setAttribute("type",f=a[d]),e=k.type!=="text",e&&(k.value=l,k.style.cssText="position:absolute;visibility:hidden;",/^range$/.test(f)&&k.style.WebkitAppearance!==c?(g.appendChild(k),h=b.defaultView,e=h.getComputedStyle&&h.getComputedStyle(k,null).WebkitAppearance!=="textfield"&&k.offsetHeight!==0,g.removeChild(k)):/^(search|tel)$/.test(f)||(/^(url|email)$/.test(f)?e=k.checkValidity&&k.checkValidity()===!1:e=k.value!=l)),t[a[d]]=!!e;return t}("search tel url email datetime date month week time datetime-local number range color".split(" "))}var d="2.6.2",e={},f=!0,g=b.documentElement,h="modernizr",i=b.createElement(h),j=i.style,k=b.createElement("input"),l=":)",m={}.toString,n=" -webkit- -moz- -o- -ms- ".split(" "),o="Webkit Moz O ms",p=o.split(" "),q=o.toLowerCase().split(" "),r={svg:"http://www.w3.org/2000/svg"},s={},t={},u={},v=[],w=v.slice,x,y=function(a,c,d,e){var f,i,j,k,l=b.createElement("div"),m=b.body,n=m||b.createElement("body");if(parseInt(d,10))while(d--)j=b.createElement("div"),j.id=e?e[d]:h+(d+1),l.appendChild(j);return f=["&#173;",'<style id="s',h,'">',a,"</style>"].join(""),l.id=h,(m?l:n).innerHTML+=f,n.appendChild(l),m||(n.style.background="",n.style.overflow="hidden",k=g.style.overflow,g.style.overflow="hidden",g.appendChild(n)),i=c(l,a),m?l.parentNode.removeChild(l):(n.parentNode.removeChild(n),g.style.overflow=k),!!i},z=function(b){var c=a.matchMedia||a.msMatchMedia;if(c)return c(b).matches;var d;return y("@media "+b+" { #"+h+" { position: absolute; } }",function(b){d=(a.getComputedStyle?getComputedStyle(b,null):b.currentStyle)["position"]=="absolute"}),d},A=function(){function d(d,e){e=e||b.createElement(a[d]||"div"),d="on"+d;var f=d in e;return f||(e.setAttribute||(e=b.createElement("div")),e.setAttribute&&e.removeAttribute&&(e.setAttribute(d,""),f=F(e[d],"function"),F(e[d],"undefined")||(e[d]=c),e.removeAttribute(d))),e=null,f}var a={select:"input",change:"input",submit:"form",reset:"form",error:"img",load:"img",abort:"img"};return d}(),B={}.hasOwnProperty,C;!F(B,"undefined")&&!F(B.call,"undefined")?C=function(a,b){return B.call(a,b)}:C=function(a,b){return b in a&&F(a.constructor.prototype[b],"undefined")},Function.prototype.bind||(Function.prototype.bind=function(b){var c=this;if(typeof c!="function")throw new TypeError;var d=w.call(arguments,1),e=function(){if(this instanceof e){var a=function(){};a.prototype=c.prototype;var f=new a,g=c.apply(f,d.concat(w.call(arguments)));return Object(g)===g?g:f}return c.apply(b,d.concat(w.call(arguments)))};return e}),s.flexbox=function(){return J("flexWrap")},s.canvas=function(){var a=b.createElement("canvas");return!!a.getContext&&!!a.getContext("2d")},s.canvastext=function(){return!!e.canvas&&!!F(b.createElement("canvas").getContext("2d").fillText,"function")},s.webgl=function(){return!!a.WebGLRenderingContext},s.touch=function(){var c;return"ontouchstart"in a||a.DocumentTouch&&b instanceof DocumentTouch?c=!0:y(["@media (",n.join("touch-enabled),("),h,")","{#modernizr{top:9px;position:absolute}}"].join(""),function(a){c=a.offsetTop===9}),c},s.geolocation=function(){return"geolocation"in navigator},s.postmessage=function(){return!!a.postMessage},s.websqldatabase=function(){return!!a.openDatabase},s.indexedDB=function(){return!!J("indexedDB",a)},s.hashchange=function(){return A("hashchange",a)&&(b.documentMode===c||b.documentMode>7)},s.history=function(){return!!a.history&&!!history.pushState},s.draganddrop=function(){var a=b.createElement("div");return"draggable"in a||"ondragstart"in a&&"ondrop"in a},s.websockets=function(){return"WebSocket"in a||"MozWebSocket"in a},s.rgba=function(){return D("background-color:rgba(150,255,150,.5)"),G(j.backgroundColor,"rgba")},s.hsla=function(){return D("background-color:hsla(120,40%,100%,.5)"),G(j.backgroundColor,"rgba")||G(j.backgroundColor,"hsla")},s.multiplebgs=function(){return D("background:url(https://),url(https://),red url(https://)"),/(url\s*\(.*?){3}/.test(j.background)},s.backgroundsize=function(){return J("backgroundSize")},s.borderimage=function(){return J("borderImage")},s.borderradius=function(){return J("borderRadius")},s.boxshadow=function(){return J("boxShadow")},s.textshadow=function(){return b.createElement("div").style.textShadow===""},s.opacity=function(){return E("opacity:.55"),/^0.55$/.test(j.opacity)},s.cssanimations=function(){return J("animationName")},s.csscolumns=function(){return J("columnCount")},s.cssgradients=function(){var a="background-images:",b="gradient(linear,left top,right bottom,from(#9f9),to(white));",c="linear-gradient(left top,#9f9, white);";return D((a+"-webkit- ".split(" ").join(b+a)+n.join(c+a)).slice(0,-a.length)),G(j.backgroundImage,"gradient")},s.cssreflections=function(){return J("boxReflect")},s.csstransforms=function(){return!!J("transform")},s.csstransforms3d=function(){var a=!!J("perspective");return a&&"webkitPerspective"in g.style&&y("@media (transform-3d),(-webkit-transform-3d){#modernizr{left:9px;position:absolute;height:3px;}}",function(b,c){a=b.offsetLeft===9&&b.offsetHeight===3}),a},s.csstransitions=function(){return J("transition")},s.fontface=function(){var a;return y('@font-face {font-family:"font";src:url("https://")}',function(c,d){var e=b.getElementById("smodernizr"),f=e.sheet||e.styleSheet,g=f?f.cssRules&&f.cssRules[0]?f.cssRules[0].cssText:f.cssText||"":"";a=/src/i.test(g)&&g.indexOf(d.split(" ")[0])===0}),a},s.generatedcontent=function(){var a;return y(["#",h,"{font:0/0 a}#",h,':after{content:"',l,'";visibility:hidden;font:3px/1.json a}'].join(""),function(b){a=b.offsetHeight>=3}),a},s.video=function(){var a=b.createElement("video"),c=!1;try{if(c=!!a.canPlayType)c=new Boolean(c),c.ogg=a.canPlayType('video/ogg; codecs="theora"').replace(/^no$/,""),c.h264=a.canPlayType('video/mp4; codecs="avc1.42E01E"').replace(/^no$/,""),c.webm=a.canPlayType('video/webm; codecs="vp8, vorbis"').replace(/^no$/,"")}catch(d){}return c},s.audio=function(){var a=b.createElement("audio"),c=!1;try{if(c=!!a.canPlayType)c=new Boolean(c),c.ogg=a.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/,""),c.mp3=a.canPlayType("audio/mpeg;").replace(/^no$/,""),c.wav=a.canPlayType('audio/wav; codecs="1.json"').replace(/^no$/,""),c.m4a=(a.canPlayType("audio/x-m4a;")||a.canPlayType("audio/aac;")).replace(/^no$/,"")}catch(d){}return c},s.localstorage=function(){try{return localStorage.setItem(h,h),localStorage.removeItem(h),!0}catch(a){return!1}},s.sessionstorage=function(){try{return sessionStorage.setItem(h,h),sessionStorage.removeItem(h),!0}catch(a){return!1}},s.webworkers=function(){return!!a.Worker},s.applicationcache=function(){return!!a.applicationCache},s.svg=function(){return!!b.createElementNS&&!!b.createElementNS(r.svg,"svg").createSVGRect},s.inlinesvg=function(){var a=b.createElement("div");return a.innerHTML="<svg/>",(a.firstChild&&a.firstChild.namespaceURI)==r.svg},s.smil=function(){return!!b.createElementNS&&/SVGAnimate/.test(m.call(b.createElementNS(r.svg,"animate")))},s.svgclippaths=function(){return!!b.createElementNS&&/SVGClipPath/.test(m.call(b.createElementNS(r.svg,"clipPath")))};for(var L in s)C(s,L)&&(x=L.toLowerCase(),e[x]=s[L](),v.push((e[x]?"":"no-")+x));return e.input||K(),e.addTest=function(a,b){if(typeof a=="object")for(var d in a)C(a,d)&&e.addTest(d,a[d]);else{a=a.toLowerCase();if(e[a]!==c)return e;b=typeof b=="function"?b():b,typeof f!="undefined"&&f&&(g.className+=" "+(b?"":"no-")+a),e[a]=b}return e},D(""),i=k=null,function(a,b){function k(a,b){var c=a.createElement("p"),d=a.getElementsByTagName("head")[0]||a.documentElement;return c.innerHTML="x<style>"+b+"</style>",d.insertBefore(c.lastChild,d.firstChild)}function l(){var a=r.elements;return typeof a=="string"?a.split(" "):a}function m(a){var b=i[a[g]];return b||(b={},h++,a[g]=h,i[h]=b),b}function n(a,c,f){c||(c=b);if(j)return c.createElement(a);f||(f=m(c));var g;return f.cache[a]?g=f.cache[a].cloneNode():e.test(a)?g=(f.cache[a]=f.createElem(a)).cloneNode():g=f.createElem(a),g.canHaveChildren&&!d.test(a)?f.frag.appendChild(g):g}function o(a,c){a||(a=b);if(j)return a.createDocumentFragment();c=c||m(a);var d=c.frag.cloneNode(),e=0,f=l(),g=f.length;for(;e<g;e++)d.createElement(f[e]);return d}function p(a,b){b.cache||(b.cache={},b.createElem=a.createElement,b.createFrag=a.createDocumentFragment,b.frag=b.createFrag()),a.createElement=function(c){return r.shivMethods?n(c,a,b):b.createElem(c)},a.createDocumentFragment=Function("h,f","return function(){var n=f.cloneNode(),c=n.createElement;h.shivMethods&&("+l().join().replace(/\w+/g,function(a){return b.createElem(a),b.frag.createElement(a),'c("'+a+'")'})+");return n}")(r,b.frag)}function q(a){a||(a=b);var c=m(a);return r.shivCSS&&!f&&!c.hasCSS&&(c.hasCSS=!!k(a,"article,aside,figcaption,figure,footer,header,hgroup,nav,section{display:block}mark{background:#FF0;color:#000}")),j||p(a,c),a}var c=a.html5||{},d=/^<|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i,e=/^(?:a|b|code|div|fieldset|h1|h2|h3|h4|h5|h6|i|label|li|ol|p|q|span|strong|style|table|tbody|td|th|tr|ul)$/i,f,g="_html5shiv",h=0,i={},j;(function(){try{var a=b.createElement("a");a.innerHTML="<xyz></xyz>",f="hidden"in a,j=a.childNodes.length==1||function(){b.createElement("a");var a=b.createDocumentFragment();return typeof a.cloneNode=="undefined"||typeof a.createDocumentFragment=="undefined"||typeof a.createElement=="undefined"}()}catch(c){f=!0,j=!0}})();var r={elements:c.elements||"abbr article aside audio bdi canvas data datalist details figcaption figure footer header hgroup mark meter nav output progress section summary time video",shivCSS:c.shivCSS!==!1,supportsUnknownElements:j,shivMethods:c.shivMethods!==!1,type:"default",shivDocument:q,createElement:n,createDocumentFragment:o};a.html5=r,q(b)}(this,b),e._version=d,e._prefixes=n,e._domPrefixes=q,e._cssomPrefixes=p,e.mq=z,e.hasEvent=A,e.testProp=function(a){return H([a])},e.testAllProps=J,e.testStyles=y,e.prefixed=function(a,b,c){return b?J(a,b,c):J(a,"pfx")},g.className=g.className.replace(/(^|\s)no-js(\s|$)/,"$1.txt$2")+(f?" js "+v.join(" "):""),e}(this,this.document),function(a,b,c){function d(a){return"[object Function]"==o.call(a)}function e(a){return"string"==typeof a}function f(){}function g(a){return!a||"loaded"==a||"complete"==a||"uninitialized"==a}function h(){var a=p.shift();q=1,a?a.t?m(function(){("c"==a.t?B.injectCss:B.injectJs)(a.s,0,a.a,a.x,a.e,1)},0):(a(),h()):q=0}function i(a,c,d,e,f,i,j){function k(b){if(!o&&g(l.readyState)&&(u.r=o=1,!q&&h(),l.onload=l.onreadystatechange=null,b)){"img"!=a&&m(function(){t.removeChild(l)},50);for(var d in y[c])y[c].hasOwnProperty(d)&&y[c][d].onload()}}var j=j||B.errorTimeout,l=b.createElement(a),o=0,r=0,u={t:d,s:c,e:f,a:i,x:j};1===y[c]&&(r=1,y[c]=[]),"object"==a?l.data=c:(l.src=c,l.type=a),l.width=l.height="0",l.onerror=l.onload=l.onreadystatechange=function(){k.call(this,r)},p.splice(e,0,u),"img"!=a&&(r||2===y[c]?(t.insertBefore(l,s?null:n),m(k,j)):y[c].push(l))}function j(a,b,c,d,f){return q=0,b=b||"j",e(a)?i("c"==b?v:u,a,b,this.i++,c,d,f):(p.splice(this.i++,0,a),1==p.length&&h()),this}function k(){var a=B;return a.loader={load:j,i:0},a}var l=b.documentElement,m=a.setTimeout,n=b.getElementsByTagName("script")[0],o={}.toString,p=[],q=0,r="MozAppearance"in l.style,s=r&&!!b.createRange().compareNode,t=s?l:n.parentNode,l=a.opera&&"[object Opera]"==o.call(a.opera),l=!!b.attachEvent&&!l,u=r?"object":l?"script":"img",v=l?"script":u,w=Array.isArray||function(a){return"[object Array]"==o.call(a)},x=[],y={},z={timeout:function(a,b){return b.length&&(a.timeout=b[0]),a}},A,B;B=function(a){function b(a){var a=a.split("!"),b=x.length,c=a.pop(),d=a.length,c={url:c,origUrl:c,prefixes:a},e,f,g;for(f=0;f<d;f++)g=a[f].split("="),(e=z[g.shift()])&&(c=e(c,g));for(f=0;f<b;f++)c=x[f](c);return c}function g(a,e,f,g,h){var i=b(a),j=i.autoCallback;i.url.split(".").pop().split("?").shift(),i.bypass||(e&&(e=d(e)?e:e[a]||e[g]||e[a.split("/").pop().split("?")[0]]),i.instead?i.instead(a,e,f,g,h):(y[i.url]?i.noexec=!0:y[i.url]=1,f.load(i.url,i.forceCSS||!i.forceJS&&"css"==i.url.split(".").pop().split("?").shift()?"c":c,i.noexec,i.attrs,i.timeout),(d(e)||d(j))&&f.load(function(){k(),e&&e(i.origUrl,h,g),j&&j(i.origUrl,h,g),y[i.url]=2})))}function h(a,b){function c(a,c){if(a){if(e(a))c||(j=function(){var a=[].slice.call(arguments);k.apply(this,a),l()}),g(a,j,b,0,h);else if(Object(a)===a)for(n in m=function(){var b=0,c;for(c in a)a.hasOwnProperty(c)&&b++;return b}(),a)a.hasOwnProperty(n)&&(!c&&!--m&&(d(j)?j=function(){var a=[].slice.call(arguments);k.apply(this,a),l()}:j[n]=function(a){return function(){var b=[].slice.call(arguments);a&&a.apply(this,b),l()}}(k[n])),g(a[n],j,b,n,h))}else!c&&l()}var h=!!a.test,i=a.load||a.both,j=a.callback||f,k=j,l=a.complete||f,m,n;c(h?a.yep:a.nope,!!i),i&&c(i)}var i,j,l=this.yepnope.loader;if(e(a))g(a,0,l,0);else if(w(a))for(i=0;i<a.length;i++)j=a[i],e(j)?g(j,0,l,0):w(j)?B(j):Object(j)===j&&h(j,l);else Object(a)===a&&h(a,l)},B.addPrefix=function(a,b){z[a]=b},B.addFilter=function(a){x.push(a)},B.errorTimeout=1e4,null==b.readyState&&b.addEventListener&&(b.readyState="loading",b.addEventListener("DOMContentLoaded",A=function(){b.removeEventListener("DOMContentLoaded",A,0),b.readyState="complete"},0)),a.yepnope=k(),a.yepnope.executeStack=h,a.yepnope.injectJs=function(a,c,d,e,i,j){var k=b.createElement("script"),l,o,e=e||B.errorTimeout;k.src=a;for(o in d)k.setAttribute(o,d[o]);c=j?h:c||f,k.onreadystatechange=k.onload=function(){!l&&g(k.readyState)&&(l=1,c(),k.onload=k.onreadystatechange=null)},m(function(){l||(l=1,c(1))},e),i?k.onload():n.parentNode.insertBefore(k,n)},a.yepnope.injectCss=function(a,c,d,e,g,i){var e=b.createElement("link"),j,c=i?h:c||f;e.href=a,e.rel="stylesheet",e.type="text/css";for(j in d)e.setAttribute(j,d[j]);g||(n.parentNode.insertBefore(e,n),m(c,0))}}(this,document),Modernizr.load=function(){yepnope.apply(window,[].slice.call(arguments,0))};

/*!
 * fancyBox - jQuery Plugin
 * version: 2.1.5 (Fri, 14 Jun 2013)
 * @requires jQuery v1.6 or later
 *
 * Examples at http://fancyapps.com/fancybox/
 * License: www.fancyapps.com/fancybox/#license
 *
 * Copyright 2012 Janis Skarnelis - janis@fancyapps.com
 *
 */

(function (window, document, $, undefined) {
	"use strict";

	var H = $("html"),
		W = $(window),
		D = $(document),
		F = $.fancybox = function () {
			F.open.apply( this, arguments );
		},
		IE =  navigator.userAgent.match(/msie/i),
		didUpdate	= null,
		isTouch		= document.createTouch !== undefined,

		isQuery	= function(obj) {
			return obj && obj.hasOwnProperty && obj instanceof $;
		},
		isString = function(str) {
			return str && $.type(str) === "string";
		},
		isPercentage = function(str) {
			return isString(str) && str.indexOf('%') > 0;
		},
		isScrollable = function(el) {
			return (el && !(el.style.overflow && el.style.overflow === 'hidden') && ((el.clientWidth && el.scrollWidth > el.clientWidth) || (el.clientHeight && el.scrollHeight > el.clientHeight)));
		},
		getScalar = function(orig, dim) {
			var value = parseInt(orig, 10) || 0;

			if (dim && isPercentage(orig)) {
				value = F.getViewport()[ dim ] / 100 * value;
			}

			return Math.ceil(value);
		},
		getValue = function(value, dim) {
			return getScalar(value, dim) + 'px';
		};

	$.extend(F, {
		// The current version of fancyBox
		version: '2.1.5',

		defaults: {
			padding : 15,
			margin  : 20,

			width     : 800,
			height    : 600,
			minWidth  : 100,
			minHeight : 100,
			maxWidth  : 9999,
			maxHeight : 9999,
			pixelRatio: 1, // Set to 2 for retina display support

			autoSize   : true,
			autoHeight : false,
			autoWidth  : false,

			autoResize  : true,
			autoCenter  : !isTouch,
			fitToView   : true,
			aspectRatio : false,
			topRatio    : 0.5,
			leftRatio   : 0.5,

			scrolling : 'auto', // 'auto', 'yes' or 'no'
			wrapCSS   : '',

			arrows     : true,
			closeBtn   : true,
			closeClick : false,
			nextClick  : false,
			mouseWheel : true,
			autoPlay   : false,
			playSpeed  : 3000,
			preload    : 3,
			modal      : false,
			loop       : true,

			ajax  : {
				dataType : 'html',
				headers  : { 'X-fancyBox': true }
			},
			iframe : {
				scrolling : 'auto',
				preload   : true
			},
			swf : {
				wmode: 'transparent',
				allowfullscreen   : 'true',
				allowscriptaccess : 'always'
			},

			keys  : {
				next : {
					13 : 'left', // enter
					34 : 'up',   // page down
					39 : 'left', // right arrow
					40 : 'up'    // down arrow
				},
				prev : {
					8  : 'right',  // backspace
					33 : 'down',   // page up
					37 : 'right',  // left arrow
					38 : 'down'    // up arrow
				},
				close  : [27], // escape key
				play   : [32], // space - start/stop slideshow
				toggle : [70]  // letter "f" - toggle fullscreen
			},

			direction : {
				next : 'left',
				prev : 'right'
			},

			scrollOutside  : true,

			// Override some properties
			index   : 0,
			type    : null,
			href    : null,
			content : null,
			title   : null,

			// HTML templates
			tpl: {
				wrap     : '<div class="fancybox-wrap" tabIndex="-1"><div class="fancybox-skin"><div class="fancybox-outer"><div class="fancybox-inner"></div></div></div></div>',
				image    : '<img class="fancybox-images" src="{href}" alt="" />',
				iframe   : '<iframe id="fancybox-frame{rnd}" name="fancybox-frame{rnd}" class="fancybox-iframe" frameborder="0" vspace="0" hspace="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen' + (IE ? ' allowtransparency="true"' : '') + '></iframe>',
				error    : '<p class="fancybox-error">The requested content cannot be loaded.<br/>Please try again later.</p>',
				closeBtn : '<a title="Close" class="fancybox-item fancybox-close" href="javascript:;"></a>',
				next     : '<a title="Next" class="fancybox-nav fancybox-next" href="javascript:;"><span></span></a>',
				prev     : '<a title="Previous" class="fancybox-nav fancybox-prev" href="javascript:;"><span></span></a>'
			},

			// Properties for each animation type
			// Opening fancyBox
			openEffect  : 'fade', // 'elastic', 'fade' or 'none'
			openSpeed   : 250,
			openEasing  : 'swing',
			openOpacity : true,
			openMethod  : 'zoomIn',

			// Closing fancyBox
			closeEffect  : 'fade', // 'elastic', 'fade' or 'none'
			closeSpeed   : 250,
			closeEasing  : 'swing',
			closeOpacity : true,
			closeMethod  : 'zoomOut',

			// Changing next gallery item
			nextEffect : 'elastic', // 'elastic', 'fade' or 'none'
			nextSpeed  : 250,
			nextEasing : 'swing',
			nextMethod : 'changeIn',

			// Changing previous gallery item
			prevEffect : 'elastic', // 'elastic', 'fade' or 'none'
			prevSpeed  : 250,
			prevEasing : 'swing',
			prevMethod : 'changeOut',

			// Enable default helpers
			helpers : {
				overlay : true,
				title   : true
			},

			// Callbacks
			onCancel     : $.noop, // If canceling
			beforeLoad   : $.noop, // Before loading
			afterLoad    : $.noop, // After loading
			beforeShow   : $.noop, // Before changing in current item
			afterShow    : $.noop, // After opening
			beforeChange : $.noop, // Before changing gallery item
			beforeClose  : $.noop, // Before closing
			afterClose   : $.noop  // After closing
		},

		//Current state
		group    : {}, // Selected group
		opts     : {}, // Group options
		previous : null,  // Previous element
		coming   : null,  // Element being loaded
		current  : null,  // Currently loaded element
		isActive : false, // Is activated
		isOpen   : false, // Is currently open
		isOpened : false, // Have been fully opened at least once

		wrap  : null,
		skin  : null,
		outer : null,
		inner : null,

		player : {
			timer    : null,
			isActive : false
		},

		// Loaders
		ajaxLoad   : null,
		imgPreload : null,

		// Some collections
		transitions : {},
		helpers     : {},

		/*
		 *	Static methods
		 */

		open: function (group, opts) {
			if (!group) {
				return;
			}

			if (!$.isPlainObject(opts)) {
				opts = {};
			}

			// Close if already active
			if (false === F.close(true)) {
				return;
			}

			// Normalize group
			if (!$.isArray(group)) {
				group = isQuery(group) ? $(group).get() : [group];
			}

			// Recheck if the type of each element is `object` and set content type (images, ajax, etc)
			$.each(group, function(i, element) {
				var obj = {},
					href,
					title,
					content,
					type,
					rez,
					hrefParts,
					selector;

				if ($.type(element) === "object") {
					// Check if is DOM element
					if (element.nodeType) {
						element = $(element);
					}

					if (isQuery(element)) {
						obj = {
							href    : element.data('fancybox-href') || element.attr('href'),
							title   : element.data('fancybox-title') || element.attr('title'),
							isDom   : true,
							element : element
						};

						if ($.metadata) {
							$.extend(true, obj, element.metadata());
						}

					} else {
						obj = element;
					}
				}

				href  = opts.href  || obj.href || (isString(element) ? element : null);
				title = opts.title !== undefined ? opts.title : obj.title || '';

				content = opts.content || obj.content;
				type    = content ? 'html' : (opts.type  || obj.type);

				if (!type && obj.isDom) {
					type = element.data('fancybox-type');

					if (!type) {
						rez  = element.prop('class').match(/fancybox\.(\w+)/);
						type = rez ? rez[1] : null;
					}
				}

				if (isString(href)) {
					// Try to guess the content type
					if (!type) {
						if (F.isImage(href)) {
							type = 'image';

						} else if (F.isSWF(href)) {
							type = 'swf';

						} else if (href.charAt(0) === '#') {
							type = 'inline';

						} else if (isString(element)) {
							type    = 'html';
							content = element;
						}
					}

					// Split url into two pieces with source url and content selector, e.g,
					// "/mypage.html #my_id" will load "/mypage.html" and display element having id "my_id"
					if (type === 'ajax') {
						hrefParts = href.split(/\s+/, 2);
						href      = hrefParts.shift();
						selector  = hrefParts.shift();
					}
				}

				if (!content) {
					if (type === 'inline') {
						if (href) {
							content = $( isString(href) ? href.replace(/.*(?=#[^\s]+$)/, '') : href ); //strip for ie7

						} else if (obj.isDom) {
							content = element;
						}

					} else if (type === 'html') {
						content = href;

					} else if (!type && !href && obj.isDom) {
						type    = 'inline';
						content = element;
					}
				}

				$.extend(obj, {
					href     : href,
					type     : type,
					content  : content,
					title    : title,
					selector : selector
				});

				group[ i ] = obj;
			});

			// Extend the defaults
			F.opts = $.extend(true, {}, F.defaults, opts);

			// All options are merged recursive except keys
			if (opts.keys !== undefined) {
				F.opts.keys = opts.keys ? $.extend({}, F.defaults.keys, opts.keys) : false;
			}

			F.group = group;

			return F._start(F.opts.index);
		},

		// Cancel images loading or abort ajax request
		cancel: function () {
			var coming = F.coming;

			if (!coming || false === F.trigger('onCancel')) {
				return;
			}

			F.hideLoading();

			if (F.ajaxLoad) {
				F.ajaxLoad.abort();
			}

			F.ajaxLoad = null;

			if (F.imgPreload) {
				F.imgPreload.onload = F.imgPreload.onerror = null;
			}

			if (coming.wrap) {
				coming.wrap.stop(true, true).trigger('onReset').remove();
			}

			F.coming = null;

			// If the first item has been canceled, then clear everything
			if (!F.current) {
				F._afterZoomOut( coming );
			}
		},

		// Start closing animation if is open; remove immediately if opening/closing
		close: function (event) {
			F.cancel();

			if (false === F.trigger('beforeClose')) {
				return;
			}

			F.unbindEvents();

			if (!F.isActive) {
				return;
			}

			if (!F.isOpen || event === true) {
				$('.fancybox-wrap').stop(true).trigger('onReset').remove();

				F._afterZoomOut();

			} else {
				F.isOpen = F.isOpened = false;
				F.isClosing = true;

				$('.fancybox-item, .fancybox-nav').remove();

				F.wrap.stop(true, true).removeClass('fancybox-opened');

				F.transitions[ F.current.closeMethod ]();
			}
		},

		// Manage slideshow:
		//   $.fancybox.play(); - toggle slideshow
		//   $.fancybox.play( true ); - start
		//   $.fancybox.play( false ); - stop
		play: function ( action ) {
			var clear = function () {
					clearTimeout(F.player.timer);
				},
				set = function () {
					clear();

					if (F.current && F.player.isActive) {
						F.player.timer = setTimeout(F.next, F.current.playSpeed);
					}
				},
				stop = function () {
					clear();

					D.unbind('.player');

					F.player.isActive = false;

					F.trigger('onPlayEnd');
				},
				start = function () {
					if (F.current && (F.current.loop || F.current.index < F.group.length - 1)) {
						F.player.isActive = true;

						D.bind({
							'onCancel.player beforeClose.player' : stop,
							'onUpdate.player'   : set,
							'beforeLoad.player' : clear
						});

						set();

						F.trigger('onPlayStart');
					}
				};

			if (action === true || (!F.player.isActive && action !== false)) {
				start();
			} else {
				stop();
			}
		},

		// Navigate to next gallery item
		next: function ( direction ) {
			var current = F.current;

			if (current) {
				if (!isString(direction)) {
					direction = current.direction.next;
				}

				F.jumpto(current.index + 1, direction, 'next');
			}
		},

		// Navigate to previous gallery item
		prev: function ( direction ) {
			var current = F.current;

			if (current) {
				if (!isString(direction)) {
					direction = current.direction.prev;
				}

				F.jumpto(current.index - 1, direction, 'prev');
			}
		},

		// Navigate to gallery item by index
		jumpto: function ( index, direction, router ) {
			var current = F.current;

			if (!current) {
				return;
			}

			index = getScalar(index);

			F.direction = direction || current.direction[ (index >= current.index ? 'next' : 'prev') ];
			F.router    = router || 'jumpto';

			if (current.loop) {
				if (index < 0) {
					index = current.group.length + (index % current.group.length);
				}

				index = index % current.group.length;
			}

			if (current.group[ index ] !== undefined) {
				F.cancel();

				F._start(index);
			}
		},

		// Center inside viewport and toggle position type to fixed or absolute if needed
		reposition: function (e, onlyAbsolute) {
			var current = F.current,
				wrap    = current ? current.wrap : null,
				pos;

			if (wrap) {
				pos = F._getPosition(onlyAbsolute);

				if (e && e.type === 'scroll') {
					delete pos.position;

					wrap.stop(true, true).animate(pos, 200);

				} else {
					wrap.css(pos);

					current.pos = $.extend({}, current.dim, pos);
				}
			}
		},

		update: function (e) {
			var type = (e && e.type),
				anyway = !type || type === 'orientationchange';

			if (anyway) {
				clearTimeout(didUpdate);

				didUpdate = null;
			}

			if (!F.isOpen || didUpdate) {
				return;
			}

			didUpdate = setTimeout(function() {
				var current = F.current;

				if (!current || F.isClosing) {
					return;
				}

				F.wrap.removeClass('fancybox-tmp');

				if (anyway || type === 'load' || (type === 'resize' && current.autoResize)) {
					F._setDimension();
				}

				if (!(type === 'scroll' && current.canShrink)) {
					F.reposition(e);
				}

				F.trigger('onUpdate');

				didUpdate = null;

			}, (anyway && !isTouch ? 0 : 300));
		},

		// Shrink content to fit inside viewport or restore if resized
		toggle: function ( action ) {
			if (F.isOpen) {
				F.current.fitToView = $.type(action) === "boolean" ? action : !F.current.fitToView;

				// Help browser to restore document dimensions
				if (isTouch) {
					F.wrap.removeAttr('style').addClass('fancybox-tmp');

					F.trigger('onUpdate');
				}

				F.update();
			}
		},

		hideLoading: function () {
			D.unbind('.loading');

			$('#fancybox-loading').remove();
		},

		showLoading: function () {
			var el, viewport;

			F.hideLoading();

			el = $('<div id="fancybox-loading"><div></div></div>').click(F.cancel).appendTo('body');

			// If user will press the escape-button, the request will be canceled
			D.bind('keydown.loading', function(e) {
				if ((e.which || e.keyCode) === 27) {
					e.preventDefault();

					F.cancel();
				}
			});

			if (!F.defaults.fixed) {
				viewport = F.getViewport();

				el.css({
					position : 'absolute',
					top  : (viewport.h * 0.5) + viewport.y,
					left : (viewport.w * 0.5) + viewport.x
				});
			}
		},

		getViewport: function () {
			var locked = (F.current && F.current.locked) || false,
				rez    = {
					x: W.scrollLeft(),
					y: W.scrollTop()
				};

			if (locked) {
				rez.w = locked[0].clientWidth;
				rez.h = locked[0].clientHeight;

			} else {
				// See http://bugs.jquery.com/ticket/6724
				rez.w = isTouch && window.innerWidth  ? window.innerWidth  : W.width();
				rez.h = isTouch && window.innerHeight ? window.innerHeight : W.height();
			}

			return rez;
		},

		// Unbind the keyboard / clicking actions
		unbindEvents: function () {
			if (F.wrap && isQuery(F.wrap)) {
				F.wrap.unbind('.fb');
			}

			D.unbind('.fb');
			W.unbind('.fb');
		},

		bindEvents: function () {
			var current = F.current,
				keys;

			if (!current) {
				return;
			}

			// Changing document height on iOS devices triggers a 'resize' event,
			// that can change document height... repeating infinitely
			W.bind('orientationchange.fb' + (isTouch ? '' : ' resize.fb') + (current.autoCenter && !current.locked ? ' scroll.fb' : ''), F.update);

			keys = current.keys;

			if (keys) {
				D.bind('keydown.fb', function (e) {
					var code   = e.which || e.keyCode,
						target = e.target || e.srcElement;

					// Skip esc key if loading, because showLoading will cancel preloading
					if (code === 27 && F.coming) {
						return false;
					}

					// Ignore key combinations and key events within form elements
					if (!e.ctrlKey && !e.altKey && !e.shiftKey && !e.metaKey && !(target && (target.type || $(target).is('[contenteditable]')))) {
						$.each(keys, function(i, val) {
							if (current.group.length > 1 && val[ code ] !== undefined) {
								F[ i ]( val[ code ] );

								e.preventDefault();
								return false;
							}

							if ($.inArray(code, val) > -1) {
								F[ i ] ();

								e.preventDefault();
								return false;
							}
						});
					}
				});
			}

			if ($.fn.mousewheel && current.mouseWheel) {
				F.wrap.bind('mousewheel.fb', function (e, delta, deltaX, deltaY) {
					var target = e.target || null,
						parent = $(target),
						canScroll = false;

					while (parent.length) {
						if (canScroll || parent.is('.fancybox-skin') || parent.is('.fancybox-wrap')) {
							break;
						}

						canScroll = isScrollable( parent[0] );
						parent    = $(parent).parent();
					}

					if (delta !== 0 && !canScroll) {
						if (F.group.length > 1 && !current.canShrink) {
							if (deltaY > 0 || deltaX > 0) {
								F.prev( deltaY > 0 ? 'down' : 'left' );

							} else if (deltaY < 0 || deltaX < 0) {
								F.next( deltaY < 0 ? 'up' : 'right' );
							}

							e.preventDefault();
						}
					}
				});
			}
		},

		trigger: function (event, o) {
			var ret, obj = o || F.coming || F.current;

			if (!obj) {
				return;
			}

			if ($.isFunction( obj[event] )) {
				ret = obj[event].apply(obj, Array.prototype.slice.call(arguments, 1));
			}

			if (ret === false) {
				return false;
			}

			if (obj.helpers) {
				$.each(obj.helpers, function (helper, opts) {
					if (opts && F.helpers[helper] && $.isFunction(F.helpers[helper][event])) {
						F.helpers[helper][event]($.extend(true, {}, F.helpers[helper].defaults, opts), obj);
					}
				});
			}

			D.trigger(event);
		},

		isImage: function (str) {
			return isString(str) && str.match(/(^data:image\/.*,)|(\.(jp(e|g|eg)|gif|png|bmp|webp|svg)((\?|#).*)?$)/i);
		},

		isSWF: function (str) {
			return isString(str) && str.match(/\.(swf)((\?|#).*)?$/i);
		},

		_start: function (index) {
			var coming = {},
				obj,
				href,
				type,
				margin,
				padding;

			index = getScalar( index );
			obj   = F.group[ index ] || null;

			if (!obj) {
				return false;
			}

			coming = $.extend(true, {}, F.opts, obj);

			// Convert margin and padding properties to array - top, right, bottom, left
			margin  = coming.margin;
			padding = coming.padding;

			if ($.type(margin) === 'number') {
				coming.margin = [margin, margin, margin, margin];
			}

			if ($.type(padding) === 'number') {
				coming.padding = [padding, padding, padding, padding];
			}

			// 'modal' propery is just a shortcut
			if (coming.modal) {
				$.extend(true, coming, {
					closeBtn   : false,
					closeClick : false,
					nextClick  : false,
					arrows     : false,
					mouseWheel : false,
					keys       : null,
					helpers: {
						overlay : {
							closeClick : false
						}
					}
				});
			}

			// 'autoSize' property is a shortcut, too
			if (coming.autoSize) {
				coming.autoWidth = coming.autoHeight = true;
			}

			if (coming.width === 'auto') {
				coming.autoWidth = true;
			}

			if (coming.height === 'auto') {
				coming.autoHeight = true;
			}

			/*
			 * Add reference to the group, so it`s possible to access from callbacks, example:
			 * afterLoad : function() {
			 *     this.title = 'Image ' + (this.index + 1) + ' of ' + this.group.length + (this.title ? ' - ' + this.title : '');
			 * }
			 */

			coming.group  = F.group;
			coming.index  = index;

			// Give a chance for callback or helpers to update coming item (type, title, etc)
			F.coming = coming;

			if (false === F.trigger('beforeLoad')) {
				F.coming = null;

				return;
			}

			type = coming.type;
			href = coming.href;

			if (!type) {
				F.coming = null;

				//If we can not determine content type then drop silently or display next/prev item if looping through gallery
				if (F.current && F.router && F.router !== 'jumpto') {
					F.current.index = index;

					return F[ F.router ]( F.direction );
				}

				return false;
			}

			F.isActive = true;

			if (type === 'image' || type === 'swf') {
				coming.autoHeight = coming.autoWidth = false;
				coming.scrolling  = 'visible';
			}

			if (type === 'image') {
				coming.aspectRatio = true;
			}

			if (type === 'iframe' && isTouch) {
				coming.scrolling = 'scroll';
			}

			// Build the neccessary markup
			coming.wrap = $(coming.tpl.wrap).addClass('fancybox-' + (isTouch ? 'mobile' : 'desktop') + ' fancybox-type-' + type + ' fancybox-tmp ' + coming.wrapCSS).appendTo( coming.parent || 'body' );

			$.extend(coming, {
				skin  : $('.fancybox-skin',  coming.wrap),
				outer : $('.fancybox-outer', coming.wrap),
				inner : $('.fancybox-inner', coming.wrap)
			});

			$.each(["Top", "Right", "Bottom", "Left"], function(i, v) {
				coming.skin.css('padding' + v, getValue(coming.padding[ i ]));
			});

			F.trigger('onReady');

			// Check before try to load; 'inline' and 'html' types need content, others - href
			if (type === 'inline' || type === 'html') {
				if (!coming.content || !coming.content.length) {
					return F._error( 'content' );
				}

			} else if (!href) {
				return F._error( 'href' );
			}

			if (type === 'image') {
				F._loadImage();

			} else if (type === 'ajax') {
				F._loadAjax();

			} else if (type === 'iframe') {
				F._loadIframe();

			} else {
				F._afterLoad();
			}
		},

		_error: function ( type ) {
			$.extend(F.coming, {
				type       : 'html',
				autoWidth  : true,
				autoHeight : true,
				minWidth   : 0,
				minHeight  : 0,
				scrolling  : 'no',
				hasError   : type,
				content    : F.coming.tpl.error
			});

			F._afterLoad();
		},

		_loadImage: function () {
			// Reset preload images so it is later possible to check "complete" property
			var img = F.imgPreload = new Image();

			img.onload = function () {
				this.onload = this.onerror = null;

				F.coming.width  = this.width / F.opts.pixelRatio;
				F.coming.height = this.height / F.opts.pixelRatio;

				F._afterLoad();
			};

			img.onerror = function () {
				this.onload = this.onerror = null;

				F._error( 'image' );
			};

			img.src = F.coming.href;

			if (img.complete !== true) {
				F.showLoading();
			}
		},

		_loadAjax: function () {
			var coming = F.coming;

			F.showLoading();

			F.ajaxLoad = $.ajax($.extend({}, coming.ajax, {
				url: coming.href,
				error: function (jqXHR, textStatus) {
					if (F.coming && textStatus !== 'abort') {
						F._error( 'ajax', jqXHR );

					} else {
						F.hideLoading();
					}
				},
				success: function (data, textStatus) {
					if (textStatus === 'success') {
						coming.content = data;

						F._afterLoad();
					}
				}
			}));
		},

		_loadIframe: function() {
			var coming = F.coming,
				iframe = $(coming.tpl.iframe.replace(/\{rnd\}/g, new Date().getTime()))
					.attr('scrolling', isTouch ? 'auto' : coming.iframe.scrolling)
					.attr('src', coming.href);

			// This helps IE
			$(coming.wrap).bind('onReset', function () {
				try {
					$(this).find('iframe').hide().attr('src', '//about:blank').end().empty();
				} catch (e) {}
			});

			if (coming.iframe.preload) {
				F.showLoading();

				iframe.one('load', function() {
					$(this).data('ready', 1);

					// iOS will lose scrolling if we resize
					if (!isTouch) {
						$(this).bind('load.fb', F.update);
					}

					// Without this trick:
					//   - iframe won't scroll on iOS devices
					//   - IE7 sometimes displays empty iframe
					$(this).parents('.fancybox-wrap').width('100%').removeClass('fancybox-tmp').show();

					F._afterLoad();
				});
			}

			coming.content = iframe.appendTo( coming.inner );

			if (!coming.iframe.preload) {
				F._afterLoad();
			}
		},

		_preloadImages: function() {
			var group   = F.group,
				current = F.current,
				len     = group.length,
				cnt     = current.preload ? Math.min(current.preload, len - 1) : 0,
				item,
				i;

			for (i = 1; i <= cnt; i += 1) {
				item = group[ (current.index + i ) % len ];

				if (item.type === 'image' && item.href) {
					new Image().src = item.href;
				}
			}
		},

		_afterLoad: function () {
			var coming   = F.coming,
				previous = F.current,
				placeholder = 'fancybox-placeholder',
				current,
				content,
				type,
				scrolling,
				href,
				embed;

			F.hideLoading();

			if (!coming || F.isActive === false) {
				return;
			}

			if (false === F.trigger('afterLoad', coming, previous)) {
				coming.wrap.stop(true).trigger('onReset').remove();

				F.coming = null;

				return;
			}

			if (previous) {
				F.trigger('beforeChange', previous);

				previous.wrap.stop(true).removeClass('fancybox-opened')
					.find('.fancybox-item, .fancybox-nav')
					.remove();
			}

			F.unbindEvents();

			current   = coming;
			content   = coming.content;
			type      = coming.type;
			scrolling = coming.scrolling;

			$.extend(F, {
				wrap  : current.wrap,
				skin  : current.skin,
				outer : current.outer,
				inner : current.inner,
				current  : current,
				previous : previous
			});

			href = current.href;

			switch (type) {
				case 'inline':
				case 'ajax':
				case 'html':
					if (current.selector) {
						content = $('<div>').html(content).find(current.selector);

					} else if (isQuery(content)) {
						if (!content.data(placeholder)) {
							content.data(placeholder, $('<div class="' + placeholder + '"></div>').insertAfter( content ).hide() );
						}

						content = content.show().detach();

						current.wrap.bind('onReset', function () {
							if ($(this).find(content).length) {
								content.hide().replaceAll( content.data(placeholder) ).data(placeholder, false);
							}
						});
					}
				break;

				case 'image':
					content = current.tpl.image.replace('{href}', href);
				break;

				case 'swf':
					content = '<object id="fancybox-swf" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" width="100%" height="100%"><param name="movie" value="' + href + '"></param>';
					embed   = '';

					$.each(current.swf, function(name, val) {
						content += '<param name="' + name + '" value="' + val + '"></param>';
						embed   += ' ' + name + '="' + val + '"';
					});

					content += '<embed src="' + href + '" type="application/x-shockwave-flash" width="100%" height="100%"' + embed + '></embed></object>';
				break;
			}

			if (!(isQuery(content) && content.parent().is(current.inner))) {
				current.inner.append( content );
			}

			// Give a chance for helpers or callbacks to update elements
			F.trigger('beforeShow');

			// Set scrolling before calculating dimensions
			current.inner.css('overflow', scrolling === 'yes' ? 'scroll' : (scrolling === 'no' ? 'hidden' : scrolling));

			// Set initial dimensions and start position
			F._setDimension();

			F.reposition();

			F.isOpen = false;
			F.coming = null;

			F.bindEvents();

			if (!F.isOpened) {
				$('.fancybox-wrap').not( current.wrap ).stop(true).trigger('onReset').remove();

			} else if (previous.prevMethod) {
				F.transitions[ previous.prevMethod ]();
			}

			F.transitions[ F.isOpened ? current.nextMethod : current.openMethod ]();

			F._preloadImages();
		},

		_setDimension: function () {
			var viewport   = F.getViewport(),
				steps      = 0,
				canShrink  = false,
				canExpand  = false,
				wrap       = F.wrap,
				skin       = F.skin,
				inner      = F.inner,
				current    = F.current,
				width      = current.width,
				height     = current.height,
				minWidth   = current.minWidth,
				minHeight  = current.minHeight,
				maxWidth   = current.maxWidth,
				maxHeight  = current.maxHeight,
				scrolling  = current.scrolling,
				scrollOut  = current.scrollOutside ? current.scrollbarWidth : 0,
				margin     = current.margin,
				wMargin    = getScalar(margin[1] + margin[3]),
				hMargin    = getScalar(margin[0] + margin[2]),
				wPadding,
				hPadding,
				wSpace,
				hSpace,
				origWidth,
				origHeight,
				origMaxWidth,
				origMaxHeight,
				ratio,
				width_,
				height_,
				maxWidth_,
				maxHeight_,
				iframe,
				body;

			// Reset dimensions so we could re-check actual size
			wrap.add(skin).add(inner).width('auto').height('auto').removeClass('fancybox-tmp');

			wPadding = getScalar(skin.outerWidth(true)  - skin.width());
			hPadding = getScalar(skin.outerHeight(true) - skin.height());

			// Any space between content and viewport (margin, padding, border, title)
			wSpace = wMargin + wPadding;
			hSpace = hMargin + hPadding;

			origWidth  = isPercentage(width)  ? (viewport.w - wSpace) * getScalar(width)  / 100 : width;
			origHeight = isPercentage(height) ? (viewport.h - hSpace) * getScalar(height) / 100 : height;

			if (current.type === 'iframe') {
				iframe = current.content;

				if (current.autoHeight && iframe.data('ready') === 1) {
					try {
						if (iframe[0].contentWindow.document.location) {
							inner.width( origWidth ).height(9999);

							body = iframe.contents().find('body');

							if (scrollOut) {
								body.css('overflow-x', 'hidden');
							}

							origHeight = body.outerHeight(true);
						}

					} catch (e) {}
				}

			} else if (current.autoWidth || current.autoHeight) {
				inner.addClass( 'fancybox-tmp' );

				// Set width or height in case we need to calculate only one dimension
				if (!current.autoWidth) {
					inner.width( origWidth );
				}

				if (!current.autoHeight) {
					inner.height( origHeight );
				}

				if (current.autoWidth) {
					origWidth = inner.width();
				}

				if (current.autoHeight) {
					origHeight = inner.height();
				}

				inner.removeClass( 'fancybox-tmp' );
			}

			width  = getScalar( origWidth );
			height = getScalar( origHeight );

			ratio  = origWidth / origHeight;

			// Calculations for the content
			minWidth  = getScalar(isPercentage(minWidth) ? getScalar(minWidth, 'w') - wSpace : minWidth);
			maxWidth  = getScalar(isPercentage(maxWidth) ? getScalar(maxWidth, 'w') - wSpace : maxWidth);

			minHeight = getScalar(isPercentage(minHeight) ? getScalar(minHeight, 'h') - hSpace : minHeight);
			maxHeight = getScalar(isPercentage(maxHeight) ? getScalar(maxHeight, 'h') - hSpace : maxHeight);

			// These will be used to determine if wrap can fit in the viewport
			origMaxWidth  = maxWidth;
			origMaxHeight = maxHeight;

			if (current.fitToView) {
				maxWidth  = Math.min(viewport.w - wSpace, maxWidth);
				maxHeight = Math.min(viewport.h - hSpace, maxHeight);
			}

			maxWidth_  = viewport.w - wMargin;
			maxHeight_ = viewport.h - hMargin;

			if (current.aspectRatio) {
				if (width > maxWidth) {
					width  = maxWidth;
					height = getScalar(width / ratio);
				}

				if (height > maxHeight) {
					height = maxHeight;
					width  = getScalar(height * ratio);
				}

				if (width < minWidth) {
					width  = minWidth;
					height = getScalar(width / ratio);
				}

				if (height < minHeight) {
					height = minHeight;
					width  = getScalar(height * ratio);
				}

			} else {
				width = Math.max(minWidth, Math.min(width, maxWidth));

				if (current.autoHeight && current.type !== 'iframe') {
					inner.width( width );

					height = inner.height();
				}

				height = Math.max(minHeight, Math.min(height, maxHeight));
			}

			// Try to fit inside viewport (including the title)
			if (current.fitToView) {
				inner.width( width ).height( height );

				wrap.width( width + wPadding );

				// Real wrap dimensions
				width_  = wrap.width();
				height_ = wrap.height();

				if (current.aspectRatio) {
					while ((width_ > maxWidth_ || height_ > maxHeight_) && width > minWidth && height > minHeight) {
						if (steps++ > 19) {
							break;
						}

						height = Math.max(minHeight, Math.min(maxHeight, height - 10));
						width  = getScalar(height * ratio);

						if (width < minWidth) {
							width  = minWidth;
							height = getScalar(width / ratio);
						}

						if (width > maxWidth) {
							width  = maxWidth;
							height = getScalar(width / ratio);
						}

						inner.width( width ).height( height );

						wrap.width( width + wPadding );

						width_  = wrap.width();
						height_ = wrap.height();
					}

				} else {
					width  = Math.max(minWidth,  Math.min(width,  width  - (width_  - maxWidth_)));
					height = Math.max(minHeight, Math.min(height, height - (height_ - maxHeight_)));
				}
			}

			if (scrollOut && scrolling === 'auto' && height < origHeight && (width + wPadding + scrollOut) < maxWidth_) {
				width += scrollOut;
			}

			inner.width( width ).height( height );

			wrap.width( width + wPadding );

			width_  = wrap.width();
			height_ = wrap.height();

			canShrink = (width_ > maxWidth_ || height_ > maxHeight_) && width > minWidth && height > minHeight;
			canExpand = current.aspectRatio ? (width < origMaxWidth && height < origMaxHeight && width < origWidth && height < origHeight) : ((width < origMaxWidth || height < origMaxHeight) && (width < origWidth || height < origHeight));

			$.extend(current, {
				dim : {
					width	: getValue( width_ ),
					height	: getValue( height_ )
				},
				origWidth  : origWidth,
				origHeight : origHeight,
				canShrink  : canShrink,
				canExpand  : canExpand,
				wPadding   : wPadding,
				hPadding   : hPadding,
				wrapSpace  : height_ - skin.outerHeight(true),
				skinSpace  : skin.height() - height
			});

			if (!iframe && current.autoHeight && height > minHeight && height < maxHeight && !canExpand) {
				inner.height('auto');
			}
		},

		_getPosition: function (onlyAbsolute) {
			var current  = F.current,
				viewport = F.getViewport(),
				margin   = current.margin,
				width    = F.wrap.width()  + margin[1] + margin[3],
				height   = F.wrap.height() + margin[0] + margin[2],
				rez      = {
					position: 'absolute',
					top  : margin[0],
					left : margin[3]
				};

			if (current.autoCenter && current.fixed && !onlyAbsolute && height <= viewport.h && width <= viewport.w) {
				rez.position = 'fixed';

			} else if (!current.locked) {
				rez.top  += viewport.y;
				rez.left += viewport.x;
			}

			rez.top  = getValue(Math.max(rez.top,  rez.top  + ((viewport.h - height) * current.topRatio)));
			rez.left = getValue(Math.max(rez.left, rez.left + ((viewport.w - width)  * current.leftRatio)));

			return rez;
		},

		_afterZoomIn: function () {
			var current = F.current;

			if (!current) {
				return;
			}

			F.isOpen = F.isOpened = true;

			F.wrap.css('overflow', 'visible').addClass('fancybox-opened');

			F.update();

			// Assign a click event
			if ( current.closeClick || (current.nextClick && F.group.length > 1) ) {
				F.inner.css('cursor', 'pointer').bind('click.fb', function(e) {
					if (!$(e.target).is('a') && !$(e.target).parent().is('a')) {
						e.preventDefault();

						F[ current.closeClick ? 'close' : 'next' ]();
					}
				});
			}

			// Create a close button
			if (current.closeBtn) {
				$(current.tpl.closeBtn).appendTo(F.skin).bind('click.fb', function(e) {
					e.preventDefault();

					F.close();
				});
			}

			// Create navigation arrows
			if (current.arrows && F.group.length > 1) {
				if (current.loop || current.index > 0) {
					$(current.tpl.prev).appendTo(F.outer).bind('click.fb', F.prev);
				}

				if (current.loop || current.index < F.group.length - 1) {
					$(current.tpl.next).appendTo(F.outer).bind('click.fb', F.next);
				}
			}

			F.trigger('afterShow');

			// Stop the slideshow if this is the last item
			if (!current.loop && current.index === current.group.length - 1) {
				F.play( false );

			} else if (F.opts.autoPlay && !F.player.isActive) {
				F.opts.autoPlay = false;

				F.play();
			}
		},

		_afterZoomOut: function ( obj ) {
			obj = obj || F.current;

			$('.fancybox-wrap').trigger('onReset').remove();

			$.extend(F, {
				group  : {},
				opts   : {},
				router : false,
				current   : null,
				isActive  : false,
				isOpened  : false,
				isOpen    : false,
				isClosing : false,
				wrap   : null,
				skin   : null,
				outer  : null,
				inner  : null
			});

			F.trigger('afterClose', obj);
		}
	});

	/*
	 *	Default transitions
	 */

	F.transitions = {
		getOrigPosition: function () {
			var current  = F.current,
				element  = current.element,
				orig     = current.orig,
				pos      = {},
				width    = 50,
				height   = 50,
				hPadding = current.hPadding,
				wPadding = current.wPadding,
				viewport = F.getViewport();

			if (!orig && current.isDom && element.is(':visible')) {
				orig = element.find('img:first');

				if (!orig.length) {
					orig = element;
				}
			}

			if (isQuery(orig)) {
				pos = orig.offset();

				if (orig.is('img')) {
					width  = orig.outerWidth();
					height = orig.outerHeight();
				}

			} else {
				pos.top  = viewport.y + (viewport.h - height) * current.topRatio;
				pos.left = viewport.x + (viewport.w - width)  * current.leftRatio;
			}

			if (F.wrap.css('position') === 'fixed' || current.locked) {
				pos.top  -= viewport.y;
				pos.left -= viewport.x;
			}

			pos = {
				top     : getValue(pos.top  - hPadding * current.topRatio),
				left    : getValue(pos.left - wPadding * current.leftRatio),
				width   : getValue(width  + wPadding),
				height  : getValue(height + hPadding)
			};

			return pos;
		},

		step: function (now, fx) {
			var ratio,
				padding,
				value,
				prop       = fx.prop,
				current    = F.current,
				wrapSpace  = current.wrapSpace,
				skinSpace  = current.skinSpace;

			if (prop === 'width' || prop === 'height') {
				ratio = fx.end === fx.start ? 1 : (now - fx.start) / (fx.end - fx.start);

				if (F.isClosing) {
					ratio = 1 - ratio;
				}

				padding = prop === 'width' ? current.wPadding : current.hPadding;
				value   = now - padding;

				F.skin[ prop ](  getScalar( prop === 'width' ?  value : value - (wrapSpace * ratio) ) );
				F.inner[ prop ]( getScalar( prop === 'width' ?  value : value - (wrapSpace * ratio) - (skinSpace * ratio) ) );
			}
		},

		zoomIn: function () {
			var current  = F.current,
				startPos = current.pos,
				effect   = current.openEffect,
				elastic  = effect === 'elastic',
				endPos   = $.extend({opacity : 1}, startPos);

			// Remove "position" property that breaks older IE
			delete endPos.position;

			if (elastic) {
				startPos = this.getOrigPosition();

				if (current.openOpacity) {
					startPos.opacity = 0.1;
				}

			} else if (effect === 'fade') {
				startPos.opacity = 0.1;
			}

			F.wrap.css(startPos).animate(endPos, {
				duration : effect === 'none' ? 0 : current.openSpeed,
				easing   : current.openEasing,
				step     : elastic ? this.step : null,
				complete : F._afterZoomIn
			});
		},

		zoomOut: function () {
			var current  = F.current,
				effect   = current.closeEffect,
				elastic  = effect === 'elastic',
				endPos   = {opacity : 0.1};

			if (elastic) {
				endPos = this.getOrigPosition();

				if (current.closeOpacity) {
					endPos.opacity = 0.1;
				}
			}

			F.wrap.animate(endPos, {
				duration : effect === 'none' ? 0 : current.closeSpeed,
				easing   : current.closeEasing,
				step     : elastic ? this.step : null,
				complete : F._afterZoomOut
			});
		},

		changeIn: function () {
			var current   = F.current,
				effect    = current.nextEffect,
				startPos  = current.pos,
				endPos    = { opacity : 1 },
				direction = F.direction,
				distance  = 200,
				field;

			startPos.opacity = 0.1;

			if (effect === 'elastic') {
				field = direction === 'down' || direction === 'up' ? 'top' : 'left';

				if (direction === 'down' || direction === 'right') {
					startPos[ field ] = getValue(getScalar(startPos[ field ]) - distance);
					endPos[ field ]   = '+=' + distance + 'px';

				} else {
					startPos[ field ] = getValue(getScalar(startPos[ field ]) + distance);
					endPos[ field ]   = '-=' + distance + 'px';
				}
			}

			// Workaround for http://bugs.jquery.com/ticket/12273
			if (effect === 'none') {
				F._afterZoomIn();

			} else {
				F.wrap.css(startPos).animate(endPos, {
					duration : current.nextSpeed,
					easing   : current.nextEasing,
					complete : F._afterZoomIn
				});
			}
		},

		changeOut: function () {
			var previous  = F.previous,
				effect    = previous.prevEffect,
				endPos    = { opacity : 0.1 },
				direction = F.direction,
				distance  = 200;

			if (effect === 'elastic') {
				endPos[ direction === 'down' || direction === 'up' ? 'top' : 'left' ] = ( direction === 'up' || direction === 'left' ? '-' : '+' ) + '=' + distance + 'px';
			}

			previous.wrap.animate(endPos, {
				duration : effect === 'none' ? 0 : previous.prevSpeed,
				easing   : previous.prevEasing,
				complete : function () {
					$(this).trigger('onReset').remove();
				}
			});
		}
	};

	/*
	 *	Overlay helper
	 */

	F.helpers.overlay = {
		defaults : {
			closeClick : true,      // if true, fancyBox will be closed when user clicks on the overlay
			speedOut   : 200,       // duration of fadeOut animation
			showEarly  : true,      // indicates if should be opened immediately or wait until the content is ready
			css        : {},        // custom CSS properties
			locked     : !isTouch,  // if true, the content will be locked into overlay
			fixed      : true       // if false, the overlay CSS position property will not be set to "fixed"
		},

		overlay : null,      // current handle
		fixed   : false,     // indicates if the overlay has position "fixed"
		el      : $('html'), // element that contains "the lock"

		// Public methods
		create : function(opts) {
			opts = $.extend({}, this.defaults, opts);

			if (this.overlay) {
				this.close();
			}

			this.overlay = $('<div class="fancybox-overlay"></div>').appendTo( F.coming ? F.coming.parent : opts.parent );
			this.fixed   = false;

			if (opts.fixed && F.defaults.fixed) {
				this.overlay.addClass('fancybox-overlay-fixed');

				this.fixed = true;
			}
		},

		open : function(opts) {
			var that = this;

			opts = $.extend({}, this.defaults, opts);

			if (this.overlay) {
				this.overlay.unbind('.overlay').width('auto').height('auto');

			} else {
				this.create(opts);
			}

			if (!this.fixed) {
				W.bind('resize.overlay', $.proxy( this.update, this) );

				this.update();
			}

			if (opts.closeClick) {
				this.overlay.bind('click.overlay', function(e) {
					if ($(e.target).hasClass('fancybox-overlay')) {
						if (F.isActive) {
							F.close();
						} else {
							that.close();
						}

						return false;
					}
				});
			}

			this.overlay.css( opts.css ).show();
		},

		close : function() {
			var scrollV, scrollH;

			W.unbind('resize.overlay');

			if (this.el.hasClass('fancybox-lock')) {
				$('.fancybox-margin').removeClass('fancybox-margin');

				scrollV = W.scrollTop();
				scrollH = W.scrollLeft();

				this.el.removeClass('fancybox-lock');

				W.scrollTop( scrollV ).scrollLeft( scrollH );
			}

			$('.fancybox-overlay').remove().hide();

			$.extend(this, {
				overlay : null,
				fixed   : false
			});
		},

		// Private, callbacks

		update : function () {
			var width = '100%', offsetWidth;

			// Reset width/height so it will not mess
			this.overlay.width(width).height('100%');

			// jQuery does not return reliable result for IE
			if (IE) {
				offsetWidth = Math.max(document.documentElement.offsetWidth, document.body.offsetWidth);

				if (D.width() > offsetWidth) {
					width = D.width();
				}

			} else if (D.width() > W.width()) {
				width = D.width();
			}

			this.overlay.width(width).height(D.height());
		},

		// This is where we can manipulate DOM, because later it would cause iframes to reload
		onReady : function (opts, obj) {
			var overlay = this.overlay;

			$('.fancybox-overlay').stop(true, true);

			if (!overlay) {
				this.create(opts);
			}

			if (opts.locked && this.fixed && obj.fixed) {
				if (!overlay) {
					this.margin = D.height() > W.height() ? $('html').css('margin-right').replace("px", "") : false;
				}

				obj.locked = this.overlay.append( obj.wrap );
				obj.fixed  = false;
			}

			if (opts.showEarly === true) {
				this.beforeShow.apply(this, arguments);
			}
		},

		beforeShow : function(opts, obj) {
			var scrollV, scrollH;

			if (obj.locked) {
				if (this.margin !== false) {
					$('*').filter(function(){
						return ($(this).css('position') === 'fixed' && !$(this).hasClass("fancybox-overlay") && !$(this).hasClass("fancybox-wrap") );
					}).addClass('fancybox-margin');

					this.el.addClass('fancybox-margin');
				}

				scrollV = W.scrollTop();
				scrollH = W.scrollLeft();

				this.el.addClass('fancybox-lock');

				W.scrollTop( scrollV ).scrollLeft( scrollH );
			}

			this.open(opts);
		},

		onUpdate : function() {
			if (!this.fixed) {
				this.update();
			}
		},

		afterClose: function (opts) {
			// Remove overlay if exists and fancyBox is not opening
			// (e.g., it is not being open using afterClose callback)
			//if (this.overlay && !F.isActive) {
			if (this.overlay && !F.coming) {
				this.overlay.fadeOut(opts.speedOut, $.proxy( this.close, this ));
			}
		}
	};

	/*
	 *	Title helper
	 */

	F.helpers.title = {
		defaults : {
			type     : 'float', // 'float', 'inside', 'outside' or 'over',
			position : 'bottom' // 'top' or 'bottom'
		},

		beforeShow: function (opts) {
			var current = F.current,
				text    = current.title,
				type    = opts.type,
				title,
				target;

			if ($.isFunction(text)) {
				text = text.call(current.element, current);
			}

			if (!isString(text) || $.trim(text) === '') {
				return;
			}

			title = $('<div class="fancybox-title fancybox-title-' + type + '-wrap">' + text + '</div>');

			switch (type) {
				case 'inside':
					target = F.skin;
				break;

				case 'outside':
					target = F.wrap;
				break;

				case 'over':
					target = F.inner;
				break;

				default: // 'float'
					target = F.skin;

					title.appendTo('body');

					if (IE) {
						title.width( title.width() );
					}

					title.wrapInner('<span class="child"></span>');

					//Increase bottom margin so this title will also fit into viewport
					F.current.margin[2] += Math.abs( getScalar(title.css('margin-bottom')) );
				break;
			}

			title[ (opts.position === 'top' ? 'prependTo'  : 'appendTo') ](target);
		}
	};

	// jQuery plugin initialization
	$.fn.fancybox = function (options) {
		var index,
			that     = $(this),
			selector = this.selector || '',
			run      = function(e) {
				var what = $(this).blur(), idx = index, relType, relVal;

				if (!(e.ctrlKey || e.altKey || e.shiftKey || e.metaKey) && !what.is('.fancybox-wrap')) {
					relType = options.groupAttr || 'data-fancybox-group';
					relVal  = what.attr(relType);

					if (!relVal) {
						relType = 'rel';
						relVal  = what.get(0)[ relType ];
					}

					if (relVal && relVal !== '' && relVal !== 'nofollow') {
						what = selector.length ? $(selector) : that;
						what = what.filter('[' + relType + '="' + relVal + '"]');
						idx  = what.index(this);
					}

					options.index = idx;

					// Stop an event from bubbling if everything is fine
					if (F.open(what, options) !== false) {
						e.preventDefault();
					}
				}
			};

		options = options || {};
		index   = options.index || 0;

		if (!selector || options.live === false) {
			that.unbind('click.fb-start').bind('click.fb-start', run);

		} else {
			D.undelegate(selector, 'click.fb-start').delegate(selector + ":not('.fancybox-item, .fancybox-nav')", 'click.fb-start', run);
		}

		this.filter('[data-fancybox-start=1]').trigger('click');

		return this;
	};

	// Tests that need a body at doc ready
	D.ready(function() {
		var w1, w2;

		if ( $.scrollbarWidth === undefined ) {
			// http://benalman.com/projects/jquery-misc-plugins/#scrollbarwidth
			$.scrollbarWidth = function() {
				var parent = $('<div style="width:50px;height:50px;overflow:auto"><div/></div>').appendTo('body'),
					child  = parent.children(),
					width  = child.innerWidth() - child.height( 99 ).innerWidth();

				parent.remove();

				return width;
			};
		}

		if ( $.support.fixedPosition === undefined ) {
			$.support.fixedPosition = (function() {
				var elem  = $('<div style="position:fixed;top:20px;"></div>').appendTo('body'),
					fixed = ( elem[0].offsetTop === 20 || elem[0].offsetTop === 15 );

				elem.remove();

				return fixed;
			}());
		}

		$.extend(F.defaults, {
			scrollbarWidth : $.scrollbarWidth(),
			fixed  : $.support.fixedPosition,
			parent : $('body')
		});

		//Get real width of page scroll-bar
		w1 = $(window).width();

		H.addClass('fancybox-lock-test');

		w2 = $(window).width();

		H.removeClass('fancybox-lock-test');

		$("<style type='text/css'>.fancybox-margin{margin-right:" + (w2 - w1) + "px;}</style>").appendTo("head");
	});

}(window, document, jQuery));
/*
 * Input Mask Core
 * http://github.com/RobinHerbots/jquery.inputmask
 * Copyright (c) 2010 -	Robin Herbots
 * Licensed under the MIT license (http://www.opensource.org/licenses/mit-license.php)
 * Version: 0.0.0-dev
 */

(function($) {
	function inputmask(options) {
		this.el = undefined;
		//init options
		this.opts = $.extend(true, {}, this.defaults, options);
		this.noMasksCache = options && options.definitions !== undefined;
		this.userOptions = options || {}; //user passed options
		resolveAlias(this.opts.alias, options, this.opts);
	}

	inputmask.prototype = {
		//options default
		defaults: {
			placeholder: "_",
			optionalmarker: {
				start: "[",
				end: "]"
			},
			quantifiermarker: {
				start: "{",
				end: "}"
			},
			groupmarker: {
				start: "(",
				end: ")"
			},
			alternatormarker: "|",
			escapeChar: "\\",
			mask: null,
			oncomplete: $.noop, //executes when the mask is complete
			onincomplete: $.noop, //executes when the mask is incomplete and focus is lost
			oncleared: $.noop, //executes when the mask is cleared
			repeat: 0, //repetitions of the mask: * ~ forever, otherwise specify an integer
			greedy: true, //true: allocated buffer for the mask and repetitions - false: allocate only if needed
			autoUnmask: false, //automatically unmask when retrieving the value with $.fn.val or value if the browser supports __lookupGetter__ or getOwnPropertyDescriptor
			removeMaskOnSubmit: false, //remove the mask before submitting the form.
			clearMaskOnLostFocus: true,
			insertMode: true, //insert the input or overwrite the input
			clearIncomplete: false, //clear the incomplete input on blur
			aliases: {}, //aliases definitions => see jquery.inputmask.extensions.js
			alias: null,
			onKeyDown: $.noop, //callback to implement autocomplete on certain keys for example. args => event, buffer, caretPos, opts
			onBeforeMask: undefined, //executes before masking the initial value to allow preprocessing of the initial value.	args => initialValue, opts => return processedValue
			onBeforePaste: undefined, //executes before masking the pasted value to allow preprocessing of the pasted value.	args => pastedValue, opts => return processedValue
			onBeforeWrite: undefined, //executes before writing to the masked element. args => event, opts
			onUnMask: undefined, //executes after unmasking to allow postprocessing of the unmaskedvalue.	args => maskedValue, unmaskedValue, opts
			showMaskOnFocus: true, //show the mask-placeholder when the input has focus
			showMaskOnHover: true, //show the mask-placeholder when hovering the empty input
			onKeyValidation: $.noop, //executes on every key-press with the result of isValid. Params: result, opts
			skipOptionalPartCharacter: " ", //a character which can be used to skip an optional part of a mask
			showTooltip: false, //show the activemask as tooltip
			numericInput: false, //numericInput input direction style (input shifts to the left while holding the caret position)
			rightAlign: false, //align to the right
			undoOnEscape: true, //pressing escape reverts the value to the value before focus
			//numeric basic properties
			radixPoint: "", //".", // | ","
			groupSeparator: "", //",", // | "."
			radixFocus: false, //position caret to radixpoint on initial click
			//numeric basic properties
			nojumps: false, //do not jump over fixed parts in the mask
			nojumpsThreshold: 0, //start nojumps as of
			keepStatic: undefined, //try to keep the mask static while typing. Decisions to alter the mask will be posponed if possible - undefined see auto selection for multi masks
			definitions: {
				'9': {
					validator: "[0-9]",
					cardinality: 1,
					definitionSymbol: "*"
				},
				'a': {
					validator: "[A-Za-z\u0410-\u044F\u0401\u0451\u00C0-\u00FF\u00B5]",
					cardinality: 1,
					definitionSymbol: "*"
				},
				'*': {
					validator: "[0-9A-Za-z\u0410-\u044F\u0401\u0451\u00C0-\u00FF\u00B5]",
					cardinality: 1
				}
			},
			//specify keyCodes which should not be considered in the keypress event, otherwise the preventDefault will stop their default behavior especially in FF
			ignorables: [8, 9, 13, 19, 27, 33, 34, 35, 36, 37, 38, 39, 40, 45, 46, 93, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123],
			isComplete: undefined, //override for isComplete - args => buffer, opts - return true || false
			canClearPosition: $.noop, //hook to alter the clear behavior in the stripValidPositions args => maskset, position, lastValidPosition, opts => return true|false
			postValidation: undefined //hook to postValidate the result from isValid.	Usefull for validating the entry as a whole.	args => buffer, opts => return true/false
		},
		keyCode: {
			ALT: 18,
			BACKSPACE: 8,
			CAPS_LOCK: 20,
			COMMA: 188,
			COMMAND: 91,
			COMMAND_LEFT: 91,
			COMMAND_RIGHT: 93,
			CONTROL: 17,
			DELETE: 46,
			DOWN: 40,
			END: 35,
			ENTER: 13,
			ESCAPE: 27,
			HOME: 36,
			INSERT: 45,
			LEFT: 37,
			MENU: 93,
			NUMPAD_ADD: 107,
			NUMPAD_DECIMAL: 110,
			NUMPAD_DIVIDE: 111,
			NUMPAD_ENTER: 108,
			NUMPAD_MULTIPLY: 106,
			NUMPAD_SUBTRACT: 109,
			PAGE_DOWN: 34,
			PAGE_UP: 33,
			PERIOD: 190,
			RIGHT: 39,
			SHIFT: 16,
			SPACE: 32,
			TAB: 9,
			UP: 38,
			WINDOWS: 91
		},
		masksCache: {},
		mask: function(el) {
			var input = el.jquery && el.length > 0 ? el[0] : el,
				scopedOpts = $.extend(true, {}, this.opts);
			importAttributeOptions(el, scopedOpts, $.extend(true, {}, this.userOptions));
			var maskset = generateMaskSet(scopedOpts, this.noMasksCache);
			if (maskset != undefined) {
				//store inputmask instance on the input with element reference
				input.inputmask = new inputmask();
				input.inputmask.opts = scopedOpts;
				input.inputmask.noMasksCache = this.noMasksCache;
				input.inputmask.el = input;
				input.inputmask.maskset = maskset;
				input.inputmask.isRTL = false;

				maskScope({
					"action": "mask",
					"el": input
				}, maskset, input.inputmask.opts);
			}
			return el;
		},
		unmaskedvalue: function() {
			if (this.el) {
				return maskScope({
					"action": "unmaskedvalue",
					"el": this.el
				});
			}
		},
		remove: function() {
			if (this.el) {
				maskScope({
					"action": "remove",
					"el": this.el
				});
				this.el.inputmask = undefined; //delete ~ undefined
				return this.el;
			}
		},
		getemptymask: function() { //return the default (empty) mask value, usefull for setting the default value in validation
			if (this.el) {
				return maskScope({
					"action": "getemptymask",
					"el": this.el
				});
			}
		},
		hasMaskedValue: function() { //check wheter the returned value is masked or not; currently only works reliable when using jquery.val fn to retrieve the value
			return !this.opts.autoUnmask;
		},
		isComplete: function() {
			if (this.el) {
				return maskScope({
					"action": "isComplete",
					"buffer": this.el._valueGet().split(''),
					"el": this.el
				});
			}
		},
		getmetadata: function() { //return mask metadata if exists
			if (this.el) {
				return maskScope({
					"action": "getmetadata",
					"el": this.el
				});
			}
		}
	}

	//aply defaults, definitions, aliases
	inputmask.extendDefaults = function(options) {
		$.extend(inputmask.prototype.defaults, options);
	}
	inputmask.extendDefinitions = function(definition) {
		$.extend(inputmask.prototype.defaults.definitions, definition);
	}
	inputmask.extendAliases = function(alias) {
			$.extend(inputmask.prototype.defaults.aliases, alias);
		}
		//static fn on inputmask
	inputmask.format = function(value, options, metadata) {
		var opts = $.extend(true, {}, inputmask.prototype.defaults, options);
		resolveAlias(opts.alias, options, opts);
		return maskScope({
			"action": "format",
			"value": value,
			"metadata": metadata //true/false getmetadata
		}, generateMaskSet(opts, options && options.definitions !== undefined), opts);
	}
	inputmask.isValid = function(value, options) {
		var opts = $.extend(true, {}, inputmask.prototype.defaults, options);
		resolveAlias(opts.alias, options, opts);
		return maskScope({
			"action": "isValid",
			"value": value
		}, generateMaskSet(opts, options && options.definitions !== undefined), opts);
	}
	inputmask.escapeRegex = function(str) {
		var specials = ['/', '.', '*', '+', '?', '|', '(', ')', '[', ']', '{', '}', '\\', '$', '^'];
		return str.replace(new RegExp('(\\' + specials.join('|\\') + ')', 'gim'), '\\$1');
	}
	inputmask.keyCode = {
		ALT: 18,
		BACKSPACE: 8,
		CAPS_LOCK: 20,
		COMMA: 188,
		COMMAND: 91,
		COMMAND_LEFT: 91,
		COMMAND_RIGHT: 93,
		CONTROL: 17,
		DELETE: 46,
		DOWN: 40,
		END: 35,
		ENTER: 13,
		ESCAPE: 27,
		HOME: 36,
		INSERT: 45,
		LEFT: 37,
		MENU: 93,
		NUMPAD_ADD: 107,
		NUMPAD_DECIMAL: 110,
		NUMPAD_DIVIDE: 111,
		NUMPAD_ENTER: 108,
		NUMPAD_MULTIPLY: 106,
		NUMPAD_SUBTRACT: 109,
		PAGE_DOWN: 34,
		PAGE_UP: 33,
		PERIOD: 190,
		RIGHT: 39,
		SHIFT: 16,
		SPACE: 32,
		TAB: 9,
		UP: 38,
		WINDOWS: 91
	}

	//helper functions
	function isInputEventSupported(eventName) {
		var el = document.createElement('input'),
			evName = 'on' + eventName,
			isSupported = (evName in el);
		if (!isSupported) {
			el.setAttribute(evName, 'return;');
			isSupported = typeof el[evName] == 'function';
		}
		el = null;
		return isSupported;
	}

	function isInputTypeSupported(inputType) {
		var isSupported = inputType == "text" || inputType == "tel" || inputType == "password";
		if (!isSupported) {
			var el = document.createElement('input');
			el.setAttribute("type", inputType);
			isSupported = el.type === "text"; //apply mask only if the type is not natively supported
			el = null;
		}
		return isSupported;
	}

	function resolveAlias(aliasStr, options, opts) {
		var aliasDefinition = opts.aliases[aliasStr];
		if (aliasDefinition) {
			if (aliasDefinition.alias) resolveAlias(aliasDefinition.alias, undefined, opts); //alias is another alias
			$.extend(true, opts, aliasDefinition); //merge alias definition in the options
			$.extend(true, opts, options); //reapply extra given options
			return true;
		} else { //alias not found - try as mask
			if (opts.mask == undefined)
				opts.mask = aliasStr;
		}

		return false;
	}

	function importAttributeOptions(npt, opts, userOptions) {
		var $npt = $(npt);
		var attrOptions = $npt.data("inputmask");
		if (attrOptions && attrOptions != "") {
			try {
				attrOptions = attrOptions.replace(new RegExp("'", "g"), '"');
				var dataoptions = $.parseJSON("{" + attrOptions + "}");
				$.extend(true, userOptions, dataoptions);
			} catch (ex) {} //need a more relax parseJSON
		}
		for (var option in opts) {
			var optionData = $npt.data("inputmask-" + option.toLowerCase());
			if (optionData != undefined) {
				optionData = typeof optionData == "boolean" ? optionData : optionData.toString();
				if (option == "mask" && optionData.indexOf("[") == 0) {
					userOptions[option] = optionData.replace(/[\s[\]]/g, "").split("','");
					userOptions[option][0] = userOptions[option][0].replace("'", "");
					userOptions[option][userOptions[option].length - 1] = userOptions[option][userOptions[option].length - 1].replace("'", "");
				} else
					userOptions[option] = optionData;
			}
		}
		if (userOptions.alias)
			resolveAlias(userOptions.alias, userOptions, opts);
		else $.extend(true, opts, userOptions);
		return opts;
	}

	function generateMaskSet(opts, nocache) {
		var ms = undefined;

		function analyseMask(mask) {
			var tokenizer = /(?:[?*+]|\{[0-9\+\*]+(?:,[0-9\+\*]*)?\})\??|[^.?*+^${[]()|\\]+|./g,
				escaped = false;

			function maskToken(isGroup, isOptional, isQuantifier, isAlternator) {
				this.matches = [];
				this.isGroup = isGroup || false;
				this.isOptional = isOptional || false;
				this.isQuantifier = isQuantifier || false;
				this.isAlternator = isAlternator || false;
				this.quantifier = {
					min: 1,
					max: 1
				};
			};

			//test definition => {fn: RegExp/function, cardinality: int, optionality: bool, newBlockMarker: bool, casing: null/upper/lower, def: definitionSymbol, placeholder: placeholder, mask: real maskDefinition}
			function insertTestDefinition(mtoken, element, position) {
				var maskdef = opts.definitions[element];
				var newBlockMarker = mtoken.matches.length == 0;
				position = position != undefined ? position : mtoken.matches.length;
				if (maskdef && !escaped) {
					maskdef["placeholder"] = $.isFunction(maskdef["placeholder"]) ? maskdef["placeholder"].call(this, opts) : maskdef["placeholder"];
					var prevalidators = maskdef["prevalidator"],
						prevalidatorsL = prevalidators ? prevalidators.length : 0;
					for (var i = 1; i < maskdef.cardinality; i++) {
						var prevalidator = prevalidatorsL >= i ? prevalidators[i - 1] : [],
							validator = prevalidator["validator"],
							cardinality = prevalidator["cardinality"];
						mtoken.matches.splice(position++, 0, {
							fn: validator ? typeof validator == 'string' ? new RegExp(validator) : new function() {
								this.test = validator;
							} : new RegExp("."),
							cardinality: cardinality ? cardinality : 1,
							optionality: mtoken.isOptional,
							newBlockMarker: newBlockMarker,
							casing: maskdef["casing"],
							def: maskdef["definitionSymbol"] || element,
							placeholder: maskdef["placeholder"],
							mask: element
						});
					}
					mtoken.matches.splice(position++, 0, {
						fn: maskdef.validator ? typeof maskdef.validator == 'string' ? new RegExp(maskdef.validator) : new function() {
							this.test = maskdef.validator;
						} : new RegExp("."),
						cardinality: maskdef.cardinality,
						optionality: mtoken.isOptional,
						newBlockMarker: newBlockMarker,
						casing: maskdef["casing"],
						def: maskdef["definitionSymbol"] || element,
						placeholder: maskdef["placeholder"],
						mask: element
					});
				} else {
					mtoken.matches.splice(position++, 0, {
						fn: null,
						cardinality: 0,
						optionality: mtoken.isOptional,
						newBlockMarker: newBlockMarker,
						casing: null,
						def: element,
						placeholder: undefined,
						mask: element
					});
					escaped = false;
				}
			}

			function verifyGroupMarker(lastMatch) {
				if (lastMatch["isGroup"]) { //this is not a group but a normal mask => convert
					lastMatch.isGroup = false;
					insertTestDefinition(lastMatch, opts.groupmarker.start, 0);
					insertTestDefinition(lastMatch, opts.groupmarker.end);
				}
			}

			function maskCurrentToken(m, currentToken, lastMatch, extraCondition) {
				if (currentToken.matches.length > 0 && (extraCondition == undefined || extraCondition)) {
					lastMatch = currentToken.matches[currentToken.matches.length - 1];
					verifyGroupMarker(lastMatch);
				}
				insertTestDefinition(currentToken, m);
			}

			var currentToken = new maskToken(),
				match,
				m,
				openenings = [],
				maskTokens = [],
				openingToken,
				currentOpeningToken,
				alternator,
				lastMatch;

			while (match = tokenizer.exec(mask)) {
				m = match[0];
				if (escaped) {
					maskCurrentToken(m, currentToken, lastMatch);
					continue;
				}

				switch (m.charAt(0)) {
					case opts.escapeChar:
						escaped = true;
						break;
					case opts.optionalmarker.end:
						// optional closing
					case opts.groupmarker.end:
						// Group closing
						openingToken = openenings.pop();
						if (openenings.length > 0) {
							currentOpeningToken = openenings[openenings.length - 1];
							currentOpeningToken["matches"].push(openingToken);
							if (currentOpeningToken.isAlternator) { //handle alternator (a) | (b) case
								alternator = openenings.pop();
								for (var mndx = 0; mndx < alternator.matches.length; mndx++) {
									alternator.matches[mndx].isGroup = false; //don't mark alternate groups as group
								}
								if (openenings.length > 0) {
									currentOpeningToken = openenings[openenings.length - 1];
									currentOpeningToken["matches"].push(alternator);
								} else {
									currentToken.matches.push(alternator);
								}
							}
						} else {
							currentToken.matches.push(openingToken);
						}
						break;
					case opts.optionalmarker.start:
						// optional opening
						openenings.push(new maskToken(false, true));
						break;
					case opts.groupmarker.start:
						// Group opening
						openenings.push(new maskToken(true));
						break;
					case opts.quantifiermarker.start:
						//Quantifier
						var quantifier = new maskToken(false, false, true);

						m = m.replace(/[{}]/g, "");
						var mq = m.split(","),
							mq0 = isNaN(mq[0]) ? mq[0] : parseInt(mq[0]),
							mq1 = mq.length == 1 ? mq0 : (isNaN(mq[1]) ? mq[1] : parseInt(mq[1]));
						if (mq1 == "*" || mq1 == "+") {
							mq0 = mq1 == "*" ? 0 : 1;
						}
						quantifier.quantifier = {
							min: mq0,
							max: mq1
						};
						if (openenings.length > 0) {
							var matches = openenings[openenings.length - 1]["matches"];
							match = matches.pop();
							if (!match["isGroup"]) {
								var groupToken = new maskToken(true);
								groupToken.matches.push(match);
								match = groupToken;
							}
							matches.push(match);
							matches.push(quantifier);
						} else {
							match = currentToken.matches.pop();
							if (!match["isGroup"]) {
								var groupToken = new maskToken(true);
								groupToken.matches.push(match);
								match = groupToken;
							}
							currentToken.matches.push(match);
							currentToken.matches.push(quantifier);
						}
						break;
					case opts.alternatormarker:
						if (openenings.length > 0) {
							currentOpeningToken = openenings[openenings.length - 1];
							lastMatch = currentOpeningToken.matches.pop();
						} else {
							lastMatch = currentToken.matches.pop();
						}
						if (lastMatch.isAlternator) {
							openenings.push(lastMatch);
						} else {
							alternator = new maskToken(false, false, false, true);
							alternator.matches.push(lastMatch);
							openenings.push(alternator);
						}
						break;
					default:
						if (openenings.length > 0) {
							currentOpeningToken = openenings[openenings.length - 1];
							maskCurrentToken(m, currentOpeningToken, lastMatch, !currentOpeningToken.isAlternator);
							if (currentOpeningToken.isAlternator) { //handle alternator a | b case
								alternator = openenings.pop();
								for (var mndx = 0; mndx < alternator.matches.length; mndx++) {
									alternator.matches[mndx].isGroup = false; //don't mark alternate groups as group
								}
								if (openenings.length > 0) {
									currentOpeningToken = openenings[openenings.length - 1];
									currentOpeningToken["matches"].push(alternator);
								} else {
									currentToken.matches.push(alternator);
								}
							}
						} else {
							maskCurrentToken(m, currentToken, lastMatch);
						}
				}
			}

			if (currentToken.matches.length > 0) {
				lastMatch = currentToken.matches[currentToken.matches.length - 1];
				verifyGroupMarker(lastMatch);
				maskTokens.push(currentToken);
			}

			//console.log(JSON.stringify(maskTokens));
			return maskTokens;
		}

		function generateMask(mask, metadata) {
			if (mask == undefined || mask == "")
				return undefined;
			else {
				if (mask.length == 1 && opts.greedy == false && opts.repeat != 0) {
					opts.placeholder = "";
				} //hide placeholder with single non-greedy mask
				if (opts.repeat > 0 || opts.repeat == "*" || opts.repeat == "+") {
					var repeatStart = opts.repeat == "*" ? 0 : (opts.repeat == "+" ? 1 : opts.repeat);
					mask = opts.groupmarker.start + mask + opts.groupmarker.end + opts.quantifiermarker.start + repeatStart + "," + opts.repeat + opts.quantifiermarker.end;
				}

				var masksetDefinition;
				if (inputmask.prototype.masksCache[mask] == undefined || nocache === true) {
					masksetDefinition = {
						"mask": mask,
						"maskToken": analyseMask(mask),
						"validPositions": {},
						"_buffer": undefined,
						"buffer": undefined,
						"tests": {},
						"metadata": metadata
					};
					if (nocache !== true)
						inputmask.prototype.masksCache[mask] = masksetDefinition;
				} else masksetDefinition = $.extend(true, {}, inputmask.prototype.masksCache[mask]);

				return masksetDefinition;
			}
		}

		function preProcessMask(mask) {
			mask = mask.toString();
			if (opts.numericInput) { //TODO FIX FOR DYNAMIC MASKS WITH QUANTIFIERS
				mask = mask.split('').reverse();
				for (var ndx = 0; ndx < mask.length; ndx++) {
					if (mask[ndx] == opts.optionalmarker.start)
						mask[ndx] = opts.optionalmarker.end;
					else if (mask[ndx] == opts.optionalmarker.end)
						mask[ndx] = opts.optionalmarker.start;
					else if (mask[ndx] == opts.groupmarker.start)
						mask[ndx] = opts.groupmarker.end;
					else if (mask[ndx] == opts.groupmarker.end)
						mask[ndx] = opts.groupmarker.start;
				}
				mask = mask.join('');
			}
			return mask;
		}

		if ($.isFunction(opts.mask)) { //allow mask to be a preprocessing fn - should return a valid mask
			opts.mask = opts.mask.call(this, opts);
		}
		if ($.isArray(opts.mask)) {
			if (opts.mask.length > 1) {
				opts.keepStatic = opts.keepStatic == undefined ? true : opts.keepStatic; //enable by default when passing multiple masks when the option is not explicitly specified
				var altMask = "(";
				$.each(opts.mask, function(ndx, msk) {
					if (altMask.length > 1)
						altMask += ")|(";
					if (msk["mask"] != undefined && !$.isFunction(msk["mask"])) {
						altMask += preProcessMask(msk["mask"]);
					} else {
						altMask += preProcessMask(msk);
					}
				});
				altMask += ")";
				return generateMask(altMask, opts.mask);
			} else opts.mask = opts.mask.pop();
		}

		if (opts.mask) {
			if (opts.mask["mask"] != undefined && !$.isFunction(opts.mask["mask"])) {
				ms = generateMask(preProcessMask(opts.mask["mask"]), opts.mask);
			} else {
				ms = generateMask(preProcessMask(opts.mask), opts.mask);
			}
		}

		return ms;
	}

	var ua = navigator.userAgent,
		iphone = ua.match(new RegExp("iphone", "i")) !== null,
		android = ua.match(new RegExp("android.*safari.*", "i")) !== null,
		androidchrome = ua.match(new RegExp("android.*chrome.*", "i")) !== null,
		androidfirefox = ua.match(new RegExp("android.*firefox.*", "i")) !== null,
		kindle = /Kindle/i.test(ua) || /Silk/i.test(ua) || /KFTT/i.test(ua) || /KFOT/i.test(ua) || /KFJWA/i.test(ua) || /KFJWI/i.test(ua) || /KFSOWI/i.test(ua) || /KFTHWA/i.test(ua) || /KFTHWI/i.test(ua) || /KFAPWA/i.test(ua) || /KFAPWI/i.test(ua),
		PasteEventType = isInputEventSupported('paste') ? 'paste' : isInputEventSupported('input') ? 'input' : "propertychange";

	//if (androidchrome) {
	//		var browser = navigator.userAgent.match(new RegExp("chrome.*", "i")),
	//				version = parseInt(new RegExp(/[0-9]+/).exec(browser));
	//		androidchrome32 = (version == 32);
	//}

	//masking scope
	//actionObj definition see below
	function maskScope(actionObj, maskset, opts) {
		var isRTL = false,
			undoValue,
			compositionValidPos,
			compositionCaretPos,
			compositionData,
			el, $el,
			skipKeyPressEvent = false, //Safari 5.1.x - modal dialog fires keypress twice workaround
			skipInputEvent = false, //skip when triggered from within inputmask
			ignorable = false,
			maxLength,
			firstClick = true,
			mouseEnter = true;

		//maskset helperfunctions
		function getMaskTemplate(baseOnInput, minimalPos, includeInput) {
			minimalPos = minimalPos || 0;
			var maskTemplate = [],
				ndxIntlzr, pos = 0,
				test, testPos;
			do {
				if (baseOnInput === true && getMaskSet()['validPositions'][pos]) {
					var validPos = getMaskSet()['validPositions'][pos];
					test = validPos["match"];
					ndxIntlzr = validPos["locator"].slice();
					maskTemplate.push(includeInput === true ? validPos["input"] : getPlaceholder(pos, test));
				} else {
					//console.log("getmasktemplate " + pos + " " + JSON.stringify(ndxIntlzr));
					testPos = getTestTemplate(pos, ndxIntlzr, pos - 1);
					test = testPos["match"];
					ndxIntlzr = testPos["locator"].slice();
					maskTemplate.push(getPlaceholder(pos, test));
				}
				pos++;
			} while ((maxLength == undefined || pos - 1 < maxLength) && test["fn"] != null || (test["fn"] == null && test["def"] != "") || minimalPos >= pos);
			maskTemplate.pop(); //drop the last one which is empty
			return maskTemplate;
		}

		function getMaskSet() {
			return maskset;
		}

		function resetMaskSet(soft) {
			var maskset = getMaskSet();
			maskset["buffer"] = undefined;
			maskset["tests"] = {};
			if (soft !== true) {
				maskset["_buffer"] = undefined;
				maskset["validPositions"] = {};
				maskset["p"] = 0;
			}
		}

		function getLastValidPosition(closestTo, strict) {
			var maskset = getMaskSet(),
				lastValidPosition = -1,
				valids = maskset["validPositions"];
			if (closestTo == undefined) closestTo = -1;
			var before = lastValidPosition,
				after = lastValidPosition;
			for (var posNdx in valids) {
				var psNdx = parseInt(posNdx);
				if (valids[psNdx] && (strict || valids[psNdx]["match"].fn != null)) {
					if (psNdx <= closestTo) before = psNdx;
					if (psNdx >= closestTo) after = psNdx;
				}
			}
			lastValidPosition = (before != -1 && (closestTo - before) > 1) || after < closestTo ? before : after;
			return lastValidPosition;
		}

		function setValidPosition(pos, validTest, fromSetValid) {
			if (opts.insertMode && getMaskSet()["validPositions"][pos] != undefined && fromSetValid == undefined) {
				//reposition & revalidate others
				var positionsClone = $.extend(true, {}, getMaskSet()["validPositions"]),
					lvp = getLastValidPosition(),
					i;
				for (i = pos; i <= lvp; i++) { //clear selection
					delete getMaskSet()["validPositions"][i];
				}
				getMaskSet()["validPositions"][pos] = validTest;
				var valid = true,
					j, vps = getMaskSet()["validPositions"];
				for (i = (j = pos); i <= lvp; i++) {
					var t = positionsClone[i];
					if (t != undefined) {
						var posMatch = j,
							prevPosMatch = -1;
						while (posMatch < getMaskLength() && ((t.match.fn == null && vps[i] && (vps[i].match.optionalQuantifier === true || vps[i].match.optionality === true)) || t.match.fn != null)) {
							//determine next position
							if (t.match.fn == null || (!opts.keepStatic && vps[i] && (vps[i + 1] != undefined && getTests(i + 1, vps[i].locator.slice(), i).length > 1 || vps[i].alternation != undefined)))
								posMatch++;
							else
								posMatch = seekNext(j);

							//does it match
							if (positionCanMatchDefinition(posMatch, t["match"].def)) {
								valid = isValid(posMatch, t["input"], true, true) !== false;
								j = posMatch;
								break;
							} else {
								valid = t["match"].fn == null;
								if (prevPosMatch == posMatch) break; //prevent endless loop
								prevPosMatch = posMatch;
							}
						}
					}
					if (!valid) break;
				}

				if (!valid) {
					getMaskSet()["validPositions"] = $.extend(true, {}, positionsClone);
					return false;
				}
			} else
				getMaskSet()["validPositions"][pos] = validTest;

			return true;
		}

		function stripValidPositions(start, end, nocheck, strict) {
			var i, startPos = start;
			getMaskSet()["p"] = start; //needed for alternated position after overtype selection

			var endPos = end;
			for (i = startPos; i < end; i++) { //clear selection
				if (getMaskSet()["validPositions"][i] != undefined) {
					if (nocheck === true || opts.canClearPosition(getMaskSet(), i, getLastValidPosition(), strict, opts) != false)
						delete getMaskSet()["validPositions"][i];
				}
			}

			resetMaskSet(true);
			for (i = startPos + 1; i <= getLastValidPosition();) {
				while (getMaskSet()["validPositions"][startPos] != undefined) startPos++;
				var s = getMaskSet()["validPositions"][startPos];
				if (i < startPos) i = startPos + 1;
				var t = getMaskSet()["validPositions"][i];
				if (t != undefined && s == undefined) {
					if (positionCanMatchDefinition(startPos, t.match.def) && isValid(startPos, t["input"], true) !== false) {
						delete getMaskSet()["validPositions"][i];
						i++;
					}
					startPos++;
				} else i++;
			}
			//remove radixpoint if needed
			var lvp = getLastValidPosition(),
				ml = getMaskLength();
			if (nocheck !== true && getMaskSet()["validPositions"][lvp] != undefined && getMaskSet()["validPositions"][lvp].input == opts.radixPoint)
				delete getMaskSet()["validPositions"][lvp];

			for (i = lvp + 1; i <= ml; i++) {
				if (getMaskSet()["validPositions"][i])
					delete getMaskSet()["validPositions"][i];
			}

			resetMaskSet(true);
		}

		function getTestTemplate(pos, ndxIntlzr, tstPs) {
			var testPos = getMaskSet()["validPositions"][pos];
			if (testPos == undefined) {
				var testPositions = getTests(pos, ndxIntlzr, tstPs),
					lvp = getLastValidPosition(),
					lvTest = getMaskSet()["validPositions"][lvp] || getTests(0)[0],
					lvTestAltArr = (lvTest.alternation != undefined) ? lvTest["locator"][lvTest.alternation].toString().split(',') : [];
				for (var ndx = 0; ndx < testPositions.length; ndx++) {
					testPos = testPositions[ndx];

					if (testPos["match"] &&
						(((opts.greedy && testPos["match"].optionalQuantifier !== true) || (testPos["match"].optionality === false || testPos["match"].newBlockMarker === false) && testPos["match"].optionalQuantifier !== true) &&
							((lvTest.alternation == undefined || lvTest.alternation != testPos.alternation) ||
								(testPos["locator"][lvTest.alternation] != undefined && checkAlternationMatch(testPos.locator[lvTest.alternation].toString().split(","), lvTestAltArr))))) {
						break;
					}
				}
			}

			return testPos;
		}

		function getTest(pos) {
			if (getMaskSet()['validPositions'][pos]) {
				return getMaskSet()['validPositions'][pos]["match"];
			}
			return getTests(pos)[0]["match"];
		}

		function positionCanMatchDefinition(pos, def) {
			var valid = false,
				tests = getTests(pos);
			for (var tndx = 0; tndx < tests.length; tndx++) {
				if (tests[tndx]["match"] && tests[tndx]["match"].def == def) {
					valid = true;
					break;
				}
			}
			return valid;
		};

		function getTests(pos, ndxIntlzr, tstPs, cacheable) {
			var maskTokens = getMaskSet()["maskToken"],
				testPos = ndxIntlzr ? tstPs : 0,
				ndxInitializer = ndxIntlzr || [0],
				matches = [],
				insertStop = false;

			function ResolveTestFromToken(maskToken, ndxInitializer, loopNdx, quantifierRecurse) { //ndxInitilizer contains a set of indexes to speedup searches in the mtokens
				function handleMatch(match, loopNdx, quantifierRecurse) {
					if (testPos > 10000) {
						alert("jquery.inputmask: There is probably an error in your mask definition or in the code. Create an issue on github with an example of the mask you are using. " + getMaskSet()["mask"]);
						return true;
					}
					if (testPos == pos && match.matches == undefined) {
						matches.push({
							"match": match,
							"locator": loopNdx.reverse()
						});
						return true;
					} else if (match.matches != undefined) {
						if (match.isGroup && quantifierRecurse !== true) { //when a group pass along to the quantifier
							match = handleMatch(maskToken.matches[tndx + 1], loopNdx);
							if (match) return true;
						} else if (match.isOptional) {
							var optionalToken = match;
							match = ResolveTestFromToken(match, ndxInitializer, loopNdx, quantifierRecurse);
							if (match) {
								var latestMatch = matches[matches.length - 1]["match"];
								var isFirstMatch = $.inArray(latestMatch, optionalToken.matches) == 0;
								if (isFirstMatch) {
									insertStop = true; //insert a stop
									testPos = pos; //match the position after the group
								} else return true;
							}
						} else if (match.isAlternator) {
							var alternateToken = match,
								malternateMatches = [],
								maltMatches,
								currentMatches = matches.slice(),
								loopNdxCnt = loopNdx.length;
							var altIndex = ndxInitializer.length > 0 ? ndxInitializer.shift() : -1;
							if (altIndex == -1 || typeof altIndex == "string") {
								var currentPos = testPos,
									ndxInitializerClone = ndxInitializer.slice(),
									altIndexArr = [];
								if (typeof altIndex == "string") altIndexArr = altIndex.split(",");
								for (var amndx = 0; amndx < alternateToken.matches.length; amndx++) {
									matches = [];
									match = handleMatch(alternateToken.matches[amndx], [amndx].concat(loopNdx), quantifierRecurse) || match;
									if (match !== true && match != undefined && (altIndexArr[altIndexArr.length - 1] < alternateToken.matches.length)) { //no match in the alternations (length mismatch) => look further
										var ntndx = maskToken.matches.indexOf(match) + 1;
										if (maskToken.matches.length > ntndx) {
											match = handleMatch(maskToken.matches[ntndx], [ntndx].concat(loopNdx.slice(1, loopNdx.length)), quantifierRecurse)
											if (match) {
												altIndexArr.push(ntndx.toString());
												$.each(matches, function(ndx, lmnt) {
													lmnt.alternation = loopNdx.length - 1;
												});
											}
										}
									}
									maltMatches = matches.slice();
									testPos = currentPos;
									matches = [];
									//cloneback
									for (var i = 0; i < ndxInitializerClone.length; i++) {
										ndxInitializer[i] = ndxInitializerClone[i];
									}
									//fuzzy merge matches
									for (var ndx1 = 0; ndx1 < maltMatches.length; ndx1++) {
										var altMatch = maltMatches[ndx1];
										altMatch.alternation = altMatch.alternation || loopNdxCnt;
										for (var ndx2 = 0; ndx2 < malternateMatches.length; ndx2++) {
											var altMatch2 = malternateMatches[ndx2];
											//verify equality
											if (altMatch.match.mask == altMatch2.match.mask && (typeof altIndex != "string" || $.inArray(altMatch.locator[altMatch.alternation].toString(), altIndexArr) != -1)) {
												maltMatches.splice(ndx1, 1);
												ndx1--;
												altMatch2.locator[altMatch.alternation] = altMatch2.locator[altMatch.alternation] + "," + altMatch.locator[altMatch.alternation];
												altMatch2.alternation = altMatch.alternation; //we pass the alternation index => used in determineLastRequiredPosition
												break;
											}
										}
									}
									malternateMatches = malternateMatches.concat(maltMatches);
								}

								if (typeof altIndex == "string") { //filter matches
									malternateMatches = $.map(malternateMatches, function(lmnt, ndx) {
										if (isFinite(ndx)) {
											var mamatch,
												alternation = lmnt.alternation,
												altLocArr = lmnt.locator[alternation].toString().split(",");
											lmnt.locator[alternation] = undefined;
											lmnt.alternation = undefined;
											for (var alndx = 0; alndx < altLocArr.length; alndx++) {
												mamatch = $.inArray(altLocArr[alndx], altIndexArr) != -1;
												if (mamatch) { //rebuild the locator with valid entries
													if (lmnt.locator[alternation] != undefined) {
														lmnt.locator[alternation] += ",";
														lmnt.locator[alternation] += altLocArr[alndx];
													} else
														lmnt.locator[alternation] = parseInt(altLocArr[alndx]);

													lmnt.alternation = alternation;
												}
											}
											if (lmnt.locator[alternation] != undefined) return lmnt;
										}
									});
								}

								matches = currentMatches.concat(malternateMatches);
								testPos = pos;
								insertStop = matches.length > 0; //insert a stopelemnt when there is an alternate
							} else {
								if (alternateToken.matches[altIndex]) { //if not in the initial alternation => look further
									match = handleMatch(alternateToken.matches[altIndex], [altIndex].concat(loopNdx), quantifierRecurse);
								} else match = false;
							}
							if (match) return true;
						} else if (match.isQuantifier && quantifierRecurse !== true) {
							var qt = match;
							for (var qndx = (ndxInitializer.length > 0 && quantifierRecurse !== true) ? ndxInitializer.shift() : 0;
								(qndx < (isNaN(qt.quantifier.max) ? qndx + 1 : qt.quantifier.max)) && testPos <= pos; qndx++) {
								var tokenGroup = maskToken.matches[$.inArray(qt, maskToken.matches) - 1];
								match = handleMatch(tokenGroup, [qndx].concat(loopNdx), true);
								if (match) {
									//get latest match
									var latestMatch = matches[matches.length - 1]["match"];
									latestMatch.optionalQuantifier = qndx > (qt.quantifier.min - 1);
									var isFirstMatch = $.inArray(latestMatch, tokenGroup.matches) == 0;

									if (isFirstMatch) { //search for next possible match
										if (qndx > (qt.quantifier.min - 1)) {
											insertStop = true;
											testPos = pos; //match the position after the group
											break; //stop quantifierloop
										} else return true;
									} else {
										return true;
									}
								}
							}
						} else {
							match = ResolveTestFromToken(match, ndxInitializer, loopNdx, quantifierRecurse);
							if (match)
								return true;
						}
					} else testPos++;
				}

				for (var tndx = (ndxInitializer.length > 0 ? ndxInitializer.shift() : 0); tndx < maskToken.matches.length; tndx++) {
					if (maskToken.matches[tndx]["isQuantifier"] !== true) {
						var match = handleMatch(maskToken.matches[tndx], [tndx].concat(loopNdx), quantifierRecurse);
						if (match && testPos == pos) {
							return match;
						} else if (testPos > pos) {
							break;
						}
					}
				}
			}

			if (cacheable === true && getMaskSet()['tests'][pos]) {
				return getMaskSet()['tests'][pos];
			}
			if (ndxIntlzr == undefined) {
				var previousPos = pos - 1,
					test;
				while ((test = getMaskSet()['validPositions'][previousPos]) == undefined && previousPos > -1) {
					if (getMaskSet()['tests'][previousPos] && (test = getMaskSet()['tests'][previousPos][0]) != undefined)
						break;
					previousPos--;

				}
				if (test != undefined && previousPos > -1) {
					testPos = previousPos;
					ndxInitializer = test["locator"].slice();
				}
			}
			for (var mtndx = ndxInitializer.shift(); mtndx < maskTokens.length; mtndx++) {
				var match = ResolveTestFromToken(maskTokens[mtndx], ndxInitializer, [mtndx]);
				if ((match && testPos == pos) || testPos > pos) {
					break;
				}
			}
			if (matches.length == 0 || insertStop)
				matches.push({
					"match": {
						fn: null,
						cardinality: 0,
						optionality: true,
						casing: null,
						def: ""
					},
					"locator": []
				});

			getMaskSet()['tests'][pos] = $.extend(true, [], matches); //set a clone to prevent overwriting some props

			//console.log(pos + " - " + JSON.stringify(matches));
			return getMaskSet()['tests'][pos];
		}

		function getBufferTemplate() {
			if (getMaskSet()['_buffer'] == undefined) {
				//generate template
				getMaskSet()["_buffer"] = getMaskTemplate(false, 1);
			}
			return getMaskSet()['_buffer'];
		}

		function getBuffer() {
			if (getMaskSet()['buffer'] == undefined) {
				getMaskSet()['buffer'] = getMaskTemplate(true, getLastValidPosition(), true);
			}
			return getMaskSet()['buffer'];
		}

		function refreshFromBuffer(start, end, buffer) {
			buffer = buffer || getBuffer().slice(); //pass or work on clone
			if (start === true) {
				resetMaskSet();
				start = 0;
				end = buffer.length;
			} else {
				for (var i = start; i < end; i++) {
					delete getMaskSet()["validPositions"][i];
					delete getMaskSet()["tests"][i];
				}
			}

			for (var i = start; i < end; i++) {
				if (buffer[i] != opts.skipOptionalPartCharacter) {
					isValid(i, buffer[i], true, true);
				}
			}
		}

		function casing(elem, test) {
			switch (test.casing) {
				case "upper":
					elem = elem.toUpperCase();
					break;
				case "lower":
					elem = elem.toLowerCase();
					break;
			}

			return elem;
		}

		function checkAlternationMatch(altArr1, altArr2) {
			var altArrC = opts.greedy ? altArr2 : altArr2.slice(0, 1),
				isMatch = false;
			for (var alndx = 0; alndx < altArr1.length; alndx++) {
				if ($.inArray(altArr1[alndx], altArrC) != -1) {
					isMatch = true;
					break;
				}
			}
			return isMatch;
		}

		function isValid(pos, c, strict, fromSetValid) { //strict true ~ no correction or autofill
			strict = strict === true; //always set a value to strict to prevent possible strange behavior in the extensions

			function _isValid(position, c, strict, fromSetValid) {
				var rslt = false;
				//console.log(JSON.stringify(getTests(position)));
				$.each(getTests(position), function(ndx, tst) {
					var test = tst["match"];
					var loopend = c ? 1 : 0,
						chrs = '',
						buffer = getBuffer();
					for (var i = test.cardinality; i > loopend; i--) {
						chrs += getBufferElement(position - (i - 1));
					}
					if (c) {
						chrs += c;
					}

					//return is false or a json object => { pos: ??, c: ??} or true
					rslt = test.fn != null ?
						test.fn.test(chrs, getMaskSet(), position, strict, opts) : (c == test["def"] || c == opts.skipOptionalPartCharacter) && test["def"] != "" ? //non mask
						{
							c: test["def"],
							pos: position
						} : false;

					if (rslt !== false) {
						var elem = rslt.c != undefined ? rslt.c : c;
						elem = (elem == opts.skipOptionalPartCharacter && test["fn"] === null) ? test["def"] : elem;

						var validatedPos = position,
							possibleModifiedBuffer = getBuffer();

						if (rslt["remove"] != undefined) { //remove position(s)
							if (!$.isArray(rslt["remove"])) rslt["remove"] = [rslt["remove"]];
							$.each(rslt["remove"].sort(function(a, b) {
								return b - a;
							}), function(ndx, lmnt) {
								stripValidPositions(lmnt, lmnt + 1, true);
							});
						}
						if (rslt["insert"] != undefined) { //insert position(s)
							if (!$.isArray(rslt["insert"])) rslt["insert"] = [rslt["insert"]];
							$.each(rslt["insert"].sort(function(a, b) {
								return a - b;
							}), function(ndx, lmnt) {
								isValid(lmnt["pos"], lmnt["c"], true);
							});
						}

						if (rslt["refreshFromBuffer"]) {
							var refresh = rslt["refreshFromBuffer"];
							strict = true;
							refreshFromBuffer(refresh === true ? refresh : refresh["start"], refresh["end"], possibleModifiedBuffer);
							if (rslt.pos == undefined && rslt.c == undefined) {
								rslt.pos = getLastValidPosition();
								return false; //breakout if refreshFromBuffer && nothing to insert
							}
							validatedPos = rslt.pos != undefined ? rslt.pos : position;
							if (validatedPos != position) {
								rslt = $.extend(rslt, isValid(validatedPos, elem, true)); //revalidate new position strict
								return false;
							}

						} else if (rslt !== true && rslt.pos != undefined && rslt["pos"] != position) { //their is a position offset
							validatedPos = rslt["pos"];
							refreshFromBuffer(position, validatedPos);
							if (validatedPos != position) {
								rslt = $.extend(rslt, isValid(validatedPos, elem, true)); //revalidate new position strict
								return false;
							}
						}

						if (rslt != true && rslt.pos == undefined && rslt.c == undefined) {
							return false; //breakout if nothing to insert
						}

						if (ndx > 0) {
							resetMaskSet(true);
						}

						if (!setValidPosition(validatedPos, $.extend({}, tst, {
								"input": casing(elem, test)
							}), fromSetValid))
							rslt = false;
						return false; //break from $.each
					}
				});

				return rslt;
			}

			function alternate(pos, c, strict, fromSetValid) {
				var validPsClone = $.extend(true, {}, getMaskSet()["validPositions"]),
					lastAlt,
					alternation,
					isValidRslt,
					altPos;
				//find last modified alternation
				for (var lAlt = getLastValidPosition(); lAlt >= 0; lAlt--) {
					altPos = getMaskSet()["validPositions"][lAlt];
					if (altPos && altPos.alternation != undefined) {
						lastAlt = lAlt;
						alternation = getMaskSet()["validPositions"][lastAlt].alternation;
						if (getTestTemplate(lastAlt).locator[altPos.alternation] != altPos.locator[altPos.alternation]) {
							break;
						}
					}
				}
				if (alternation != undefined) {
					//find first decision making position
					lastAlt = parseInt(lastAlt);
					for (var decisionPos in getMaskSet()["validPositions"]) {
						decisionPos = parseInt(decisionPos);
						altPos = getMaskSet()["validPositions"][decisionPos];
						if (decisionPos >= lastAlt && altPos.alternation != undefined) {
							var altNdxs = getMaskSet()["validPositions"][lastAlt].locator[alternation].toString().split(','),
								decisionTaker = altPos.locator[alternation] || altNdxs[0]; //no match in the alternations (length mismatch)
							if (decisionTaker.length > 0) { //no decision taken ~ take first one as decider
								decisionTaker = decisionTaker.split(',')[0];
							}

							for (var mndx = 0; mndx < altNdxs.length; mndx++) {
								if (decisionTaker < altNdxs[mndx]) {
									var possibilityPos, possibilities;
									for (var dp = decisionPos; dp >= 0; dp--) {
										possibilityPos = getMaskSet()["validPositions"][dp];
										if (possibilityPos != undefined) {
											possibilities = possibilityPos.locator[alternation]; //store to reset
											//possibilityPos.alternation = undefined;
											possibilityPos.locator[alternation] = parseInt(altNdxs[mndx]);
											break;
										}
									}
									if (decisionTaker != possibilityPos.locator[alternation]) {
										var validInputs = [],
											staticInputsBeforePos = 0;
										for (var i = decisionPos + 1; i < getLastValidPosition() + 1; i++) {
											var validPos = getMaskSet()["validPositions"][i];
											if (validPos) {
												if (validPos.match.fn != null) {
													validInputs.push(validPos.input);
												} else if (i < pos) staticInputsBeforePos++;
											}
											delete getMaskSet()["validPositions"][i];
											delete getMaskSet()["tests"][i];
										}
										resetMaskSet(true); //clear getbuffer
										opts.keepStatic = !opts.keepStatic; //disable keepStatic on getMaskLength
										isValidRslt = true;
										while (validInputs.length > 0) {
											var input = validInputs.shift();
											//console.log(input);
											if (input != opts.skipOptionalPartCharacter) {
												if (!(isValidRslt = isValid(getLastValidPosition() + 1, input, false, true))) {
													break;
												}
											}
										}

										possibilityPos.alternation = alternation;
										possibilityPos.locator[alternation] = possibilities; //reset forceddecision ~ needed for proper delete
										if (isValidRslt) {
											var targetLvp = getLastValidPosition(pos) + 1;
											var staticInputsBeforePosAlternate = 0;
											for (var i = decisionPos + 1; i < getLastValidPosition() + 1; i++) {
												var validPos = getMaskSet()["validPositions"][i];
												if (validPos && validPos.match.fn == null && i < pos)
													staticInputsBeforePosAlternate++;
											}
											pos = pos + (staticInputsBeforePosAlternate - staticInputsBeforePos);
											isValidRslt = isValid(pos > targetLvp ? targetLvp : pos, c, strict, fromSetValid);
										}
										opts.keepStatic = !opts.keepStatic; //enable keepStatic on getMaskLength
										if (!isValidRslt) {
											resetMaskSet();
											getMaskSet()["validPositions"] = $.extend(true, {}, validPsClone);
										} else
											return isValidRslt;
									}
								}
							}
							break;
						}
					}
				}
				return false;
			}

			//set alternator choice on previous skipped placeholder positions
			function trackbackAlternations(originalPos, newPos) {
				var vp = getMaskSet()["validPositions"][newPos],
					targetLocator = vp.locator,
					tll = targetLocator.length;

				for (var ps = originalPos; ps < newPos; ps++) {
					if (!isMask(ps)) {
						var tests = getTests(ps),
							bestMatch = tests[0],
							equality = -1;
						$.each(tests, function(ndx, tst) {
							for (var i = 0; i < tll; i++) {
								if (tst.locator[i] && checkAlternationMatch(tst.locator[i].toString().split(','), targetLocator[i].toString().split(',')) && equality < i) {
									equality = i;
									bestMatch = tst;
								}
							}
						});
						setValidPosition(ps, $.extend({}, bestMatch, {
							"input": bestMatch["match"].def
						}), true)
					}
				}
			}
			//Check for a nonmask before the pos
			var buffer = getBuffer();
			//find previous valid
			for (var pndx = pos - 1; pndx > -1; pndx--) {
				if (getMaskSet()["validPositions"][pndx])
					break;
			}
			////fill missing nonmask and valid placeholders
			pndx++;
			for (; pndx < pos; pndx++) {
				//console.log("missing " + pndx + " " + buffer[pndx] + " ismask " + isMask(pndx) + " plchldr " + getPlaceholder(pndx) + " nrt " + getTests(pndx).len);
				if (getMaskSet()["validPositions"][pndx] == undefined && (((!isMask(pndx) || buffer[pndx] != getPlaceholder(pndx)) && getTests(pndx).length > 1) || (buffer[pndx] == opts.radixPoint || buffer[pndx] == "0" && $.inArray(opts.radixPoint, buffer) < pndx))) //special case for decimals ~ = placeholder but yet valid input
				{
					//console.log("inject " + pndx + " " + buffer[pndx]);
					_isValid(pndx, buffer[pndx], true);
				}
			}

			var maskPos = pos,
				result = false,
				positionsClone = $.extend(true, {}, getMaskSet()["validPositions"]); //clone the currentPositions

			//if (fromSetValid && maskPos >= getMaskLength()) {
			//		resetMaskSet(true); //masklenght can be altered on the process => reset to get the actual length
			//}
			if (maskPos < getMaskLength()) {
				result = _isValid(maskPos, c, strict, fromSetValid);
				if ((!strict || fromSetValid) && result === false) {
					var currentPosValid = getMaskSet()["validPositions"][maskPos];
					if (currentPosValid && currentPosValid["match"].fn == null && (currentPosValid["match"].def == c || c == opts.skipOptionalPartCharacter)) {
						result = {
							"caret": seekNext(maskPos)
						};
					} else if ((opts.insertMode || getMaskSet()["validPositions"][seekNext(maskPos)] == undefined) && !isMask(maskPos)) { //does the input match on a further position?
						for (var nPos = maskPos + 1, snPos = seekNext(maskPos); nPos <= snPos; nPos++) {
							result = _isValid(nPos, c, strict, fromSetValid);
							if (result !== false) {
								trackbackAlternations(maskPos, nPos);
								maskPos = nPos;
								break;
							}
						}
					}
				}
			}
			if (result === false && opts.keepStatic && isComplete(buffer)) { //try fuzzy alternator logic
				result = alternate(pos, c, strict, fromSetValid);
			}
			if (result === true) result = {
				"pos": maskPos
			};

			if ($.isFunction(opts.postValidation) && result != false && !strict) {
				resetMaskSet(true);
				var postValidResult = opts.postValidation(getBuffer(), opts);
				if (!postValidResult) {
					resetMaskSet(true);
					getMaskSet()["validPositions"] = $.extend(true, {}, positionsClone); //revert validation changes
					return false;
				}
			}

			return result;
		}

		function isMask(pos) {
			var test = getTest(pos);
			if (test.fn != null)
				return test.fn
			else if (!opts.keepStatic && getMaskSet()["validPositions"][pos] == undefined) {
				var tests = getTests(pos),
					staticAlternations = true;
				for (var i = 0; i < tests.length; i++) {
					if (tests[i].match.def != "" && ( /*tests[i].match.fn !== null || */ (tests[i].alternation == undefined || tests[i].locator[tests[i].alternation].length > 1))) {
						staticAlternations = false;
						break;
					}
				}
				return staticAlternations;
			}

			return false;
		}

		function getMaskLength() {
			var maskLength;
			maxLength = $el.prop('maxLength');
			if (maxLength == -1) maxLength = undefined; /* FF sets no defined max length to -1 */
			var pos, lvp = getLastValidPosition(),
				testPos = getMaskSet()["validPositions"][lvp],
				ndxIntlzr = testPos != undefined ? testPos["locator"].slice() : undefined;
			for (pos = lvp + 1; testPos == undefined || (testPos["match"]["fn"] != null || (testPos["match"]["fn"] == null && testPos["match"]["def"] != "")); pos++) {
				testPos = getTestTemplate(pos, ndxIntlzr, pos - 1);
				ndxIntlzr = testPos["locator"].slice();
			}

			var lastTest = getTest(pos - 1);
			maskLength = (lastTest.def != "") ? pos : pos - 1;
			return (maxLength == undefined || maskLength < maxLength) ? maskLength : maxLength;
		}

		function seekNext(pos) {
			var maskL = getMaskLength();
			if (pos >= maskL) return maskL;
			var position = pos;
			while (++position < maskL && !isMask(position) && (opts.nojumps !== true || opts.nojumpsThreshold > position)) {}

			return position;
		}

		function seekPrevious(pos) {
			var position = pos;
			if (position <= 0) return 0;

			while (--position > 0 && !isMask(position)) {};
			return position;
		}

		function getBufferElement(position) {
			return getMaskSet()["validPositions"][position] == undefined ? getPlaceholder(position) : getMaskSet()["validPositions"][position]["input"];
		}

		function writeBuffer(input, buffer, caretPos, event, triggerInputEvent) {
			if (event && $.isFunction(opts.onBeforeWrite)) {
				var result = opts.onBeforeWrite.call(input, event, buffer, caretPos, opts);
				if (result) {
					if (result["refreshFromBuffer"]) {
						var refresh = result["refreshFromBuffer"];
						refreshFromBuffer(refresh === true ? refresh : refresh["start"], refresh["end"], result["buffer"]);

						resetMaskSet(true);
						buffer = getBuffer();
					}
					caretPos = result.caret || caretPos;
				}
			}
			input._valueSet(buffer.join(''));
			if (caretPos != undefined) {
				caret(input, caretPos);
			}
			if (triggerInputEvent === true) {
				skipInputEvent = true;
				$(input).trigger("input");
			}
		}

		function getPlaceholder(pos, test) {
			test = test || getTest(pos);
			if (test["placeholder"] != undefined)
				return test["placeholder"];
			else if (test["fn"] == null) {
				if (!opts.keepStatic && getMaskSet()["validPositions"][pos] == undefined) {
					var tests = getTests(pos),
						hasAlternations = false,
						prevTest;
					for (var i = 0; i < tests.length; i++) {
						if (prevTest && tests[i].match.def != "" && (tests[i].match.def != prevTest.match.def && (tests[i].alternation == undefined || tests[i].alternation == prevTest.alternation))) {
							hasAlternations = true;
							break;
						}

						if (tests[i].match.optionality != true && tests[i].match.optionalQuantifier != true)
							prevTest = tests[i];
					}

					if (hasAlternations)
						return opts.placeholder.charAt(pos % opts.placeholder.length);
				}
				return test["def"]
			} else {
				return opts.placeholder.charAt(pos % opts.placeholder.length);
			}
		}

		function checkVal(input, writeOut, strict, nptvl) {
			function isTemplateMatch() {
				var isMatch = false;
				var charCodeNdx = getBufferTemplate().slice(initialNdx, seekNext(initialNdx)).join('').indexOf(charCodes);
				if (charCodeNdx != -1 && !isMask(initialNdx)) {
					isMatch = true;
					var bufferTemplateArr = getBufferTemplate().slice(initialNdx, initialNdx + charCodeNdx);
					for (var i = 0; i < bufferTemplateArr.length; i++) {
						if (bufferTemplateArr[i] != " ") {
							isMatch = false;
							break;
						}
					}
				}

				return isMatch;
			}
			var inputValue = nptvl != undefined ? nptvl.slice() : input._valueGet().split(''),
				charCodes = "",
				initialNdx = 0;
			resetMaskSet();
			getMaskSet()["p"] = seekNext(-1);
			if (writeOut) input._valueSet(""); //initial clear

			if (!strict) {
				if (opts.autoUnmask != true) {
					var staticInput = getBufferTemplate().slice(0, seekNext(-1)).join(''),
						matches = inputValue.join('').match(new RegExp("^" + inputmask.escapeRegex(staticInput), "g"));
					if (matches && matches.length > 0) {
						inputValue.splice(0, matches.length * staticInput.length);
						initialNdx = seekNext(initialNdx);
					}
				} else {
					initialNdx = seekNext(initialNdx);
				}
			}


			$.each(inputValue, function(ndx, charCode) {
				var keypress = $.Event("keypress");
				keypress.which = charCode.charCodeAt(0);
				charCodes += charCode;
				var lvp = getLastValidPosition(undefined, true),
					lvTest = getMaskSet()["validPositions"][lvp],
					nextTest = getTestTemplate(lvp + 1, lvTest ? lvTest.locator.slice() : undefined, lvp);
				if (!isTemplateMatch() || strict || opts.autoUnmask) {
					var pos = strict ? ndx : (nextTest["match"].fn == null && nextTest["match"].optionality && (lvp + 1) < getMaskSet()["p"] ? lvp + 1 : getMaskSet()["p"]);
					keypressEvent.call(input, keypress, true, false, strict, pos);
					initialNdx = pos + 1;
					charCodes = "";
				} else {
					keypressEvent.call(input, keypress, true, false, true, lvp + 1);
				}

			});
			if (writeOut) {
				writeBuffer(input, getBuffer(), $(input).is(":focus") ? seekNext(getLastValidPosition(0)) : undefined, $.Event("checkval"));
			}
		}

		function unmaskedvalue($input) {
			if ($input[0].inputmask && !$input.hasClass('hasDatepicker')) {
				var umValue = [],
					vps = getMaskSet()["validPositions"];
				for (var pndx in vps) {
					if (vps[pndx]["match"] && vps[pndx]["match"].fn != null) {
						umValue.push(vps[pndx]["input"]);
					}
				}
				var unmaskedValue = (isRTL ? umValue.reverse() : umValue).join('');
				var bufferValue = (isRTL ? getBuffer().slice().reverse() : getBuffer()).join('');
				if ($.isFunction(opts.onUnMask)) {
					unmaskedValue = (opts.onUnMask.call($input, bufferValue, unmaskedValue, opts) || unmaskedValue);
				}
				return unmaskedValue;
			} else {
				return $input[0]._valueGet();
			}
		}

		function caret(input, begin, end) {
			function TranslatePosition(pos) {
				if (isRTL && typeof pos == 'number' && (!opts.greedy || opts.placeholder != "")) {
					var bffrLght = getBuffer().length;
					pos = bffrLght - pos;
				}
				return pos;
			}
			var npt = input.jquery && input.length > 0 ? input[0] : input,
				range;
			if (typeof begin == 'number') {
				begin = TranslatePosition(begin);
				end = TranslatePosition(end);
				end = (typeof end == 'number') ? end : begin;
				if (!$(npt).is(":visible")) {
					return;
				}

				var scrollCalc = $(npt).css("font-size").replace("px", "") * end;
				npt.scrollLeft = scrollCalc > npt.scrollWidth ? scrollCalc : 0;
				if (!androidchrome && opts.insertMode == false && begin == end) end++; //set visualization for insert/overwrite mode
				if (npt.setSelectionRange) {
					npt.selectionStart = begin;
					npt.selectionEnd = end;
				} else if (window.getSelection) {
					range = document.createRange();
					if (npt.firstChild == undefined) {
						var textNode = document.createTextNode("");
						npt.appendChild(textNode);
					}
					range.setStart(npt.firstChild, begin < npt._valueGet().length ? begin : npt._valueGet().length);
					range.setEnd(npt.firstChild, end < npt._valueGet().length ? end : npt._valueGet().length);
					range.collapse(true);
					var sel = window.getSelection();
					sel.removeAllRanges();
					sel.addRange(range);
					//npt.focus();
				} else if (npt.createTextRange) {
					range = npt.createTextRange();
					range.collapse(true);
					range.moveEnd('character', end);
					range.moveStart('character', begin);
					range.select();

				}
			} else {
				if (npt.setSelectionRange) {
					begin = npt.selectionStart;
					end = npt.selectionEnd;
				} else if (window.getSelection) {
					range = window.getSelection().getRangeAt(0);
					if (range.commonAncestorContainer.parentNode == npt || range.commonAncestorContainer == npt) {
						begin = range.startOffset;
						end = range.endOffset;
					}
				} else if (document.selection && document.selection.createRange) {
					range = document.selection.createRange();
					begin = 0 - range.duplicate().moveStart('character', -100000);
					end = begin + range.text.length;
				}
				return {
					"begin": TranslatePosition(begin),
					"end": TranslatePosition(end)
				};
			}
		}

		function determineLastRequiredPosition(returnDefinition) {
			var buffer = getBuffer(),
				bl = buffer.length,
				pos, lvp = getLastValidPosition(),
				positions = {},
				lvTest = getMaskSet()["validPositions"][lvp],
				ndxIntlzr = lvTest != undefined ? lvTest["locator"].slice() : undefined,
				testPos;
			for (pos = lvp + 1; pos < buffer.length; pos++) {
				testPos = getTestTemplate(pos, ndxIntlzr, pos - 1);
				ndxIntlzr = testPos["locator"].slice();
				positions[pos] = $.extend(true, {}, testPos);
			}

			var lvTestAlt = lvTest && lvTest.alternation != undefined ? lvTest["locator"][lvTest.alternation] : undefined;
			for (pos = bl - 1; pos > lvp; pos--) {
				testPos = positions[pos];
				if ((testPos.match.optionality ||
						testPos.match.optionalQuantifier ||
						(lvTestAlt && ((lvTestAlt != positions[pos]["locator"][lvTest.alternation] && testPos.match.fn != null) ||
							(testPos.match.fn == null && testPos.locator[lvTest.alternation] && checkAlternationMatch(testPos.locator[lvTest.alternation].toString().split(","), lvTestAlt.split(",")) && getTests(pos)[0].def != "")))) && buffer[pos] == getPlaceholder(pos, testPos.match)) {
					bl--;
				} else break;
			}
			return returnDefinition ? {
				"l": bl,
				"def": positions[bl] ? positions[bl]["match"] : undefined
			} : bl;
		}

		function clearOptionalTail(buffer) {
			var rl = determineLastRequiredPosition(),
				lmib = buffer.length - 1;
			for (; lmib > rl; lmib--) {
				if (isMask(lmib)) break; //fixme ismask is not good enough
			}
			buffer.splice(rl, lmib + 1 - rl);

			return buffer
		}

		function isComplete(buffer) { //return true / false / undefined (repeat *)
			if ($.isFunction(opts.isComplete)) return opts.isComplete.call($el, buffer, opts);
			if (opts.repeat == "*") return undefined;
			var complete = false,
				lrp = determineLastRequiredPosition(true),
				aml = seekPrevious(lrp["l"]),
				lvp = getLastValidPosition();

			if (lrp["def"] == undefined || lrp["def"].newBlockMarker || lrp["def"].optionality || lrp["def"].optionalQuantifier) {
				complete = true;
				for (var i = 0; i <= aml; i++) {
					var test = getTestTemplate(i).match;
					if ((test.fn != null && getMaskSet()["validPositions"][i] == undefined && test.optionality !== true && test.optionalQuantifier !== true) || (test.fn == null && buffer[i] != getPlaceholder(i, test))) {
						complete = false;
						break;
					}
				}
			}
			return complete;
		}

		function isSelection(begin, end) {
			return isRTL ? (begin - end) > 1 || ((begin - end) == 1 && opts.insertMode) :
				(end - begin) > 1 || ((end - begin) == 1 && opts.insertMode);
		}

		function installEventRuler(npt) {
			var events = $._data(npt).events,
				inComposition = false;

			$.each(events, function(eventType, eventHandlers) {
				$.each(eventHandlers, function(ndx, eventHandler) {
					if (eventHandler.namespace == "inputmask") {
						if (eventHandler.type != "setvalue") {
							var handler = eventHandler.handler;
							eventHandler.handler = function(e) {
								// console.log("triggered " + e.type);
								if (this.disabled || (this.readOnly && !(e.type == "keydown" && (e.ctrlKey && e.keyCode == 67) || e.keyCode == inputmask.keyCode.TAB)))
									e.preventDefault();
								else {
									switch (e.type) {
										case "input":
											if (skipInputEvent === true || inComposition === true) {
												skipInputEvent = false;
												return e.preventDefault();
											}
											break;
										case "keydown":
											//Safari 5.1.x - modal dialog fires keypress twice workaround
											skipKeyPressEvent = false;
											inComposition = false;
											break;
										case "keypress":
											if (skipKeyPressEvent === true)
												return e.preventDefault();
											skipKeyPressEvent = true;

											break;
										case "compositionstart":
											inComposition = true;
											break;
										case "compositionupdate":
											skipInputEvent = true;
											break;
										case "compositionend":
											inComposition = false;
											break;
									}
									//console.log("executed " + e.type);
									return handler.apply(this, arguments);
								}
							};
						}
					}
				});
			});
		}

		function patchValueProperty(npt) {
			var valueGet;
			var valueSet;

			function PatchValhook(type) {
				if ($.valHooks[type] == undefined || $.valHooks[type].inputmaskpatch != true) {
					var valhookGet = $.valHooks[type] && $.valHooks[type].get ? $.valHooks[type].get : function(elem) {
						return elem.value;
					};
					var valhookSet = $.valHooks[type] && $.valHooks[type].set ? $.valHooks[type].set : function(elem, value) {
						elem.value = value;
						return elem;
					};

					$.valHooks[type] = {
						get: function(elem) {
							var $elem = $(elem);
							if (elem.inputmask) {
								if (elem.inputmask.opts.autoUnmask)
									return elem.inputmask.unmaskedvalue();
								else {
									var result = valhookGet(elem),
										maskset = elem.inputmask.maskset,
										bufferTemplate = maskset['_buffer'];
									bufferTemplate = bufferTemplate ? bufferTemplate.join('') : '';
									return result != bufferTemplate ? result : '';
								}
							} else return valhookGet(elem);
						},
						set: function(elem, value) {
							var $elem = $(elem),
								result;
							result = valhookSet(elem, value);
							if (elem.inputmask)
								$elem.triggerHandler('setvalue.inputmask');
							return result;
						},
						inputmaskpatch: true
					};
				}
			}

			function getter() {
				var $self = $(this);
				if (this.inputmask) {
					return this.inputmask.opts.autoUnmask ? this.inputmask.unmaskedvalue() : (valueGet.call(this) != getBufferTemplate().join('') ? valueGet.call(this) : '');
				} else return valueGet.call(this);
			}

			function setter(value) {
				valueSet.call(this, value);
				if (this.inputmask)
					$(this).triggerHandler('setvalue.inputmask');
			}

			function InstallNativeValueSetFallback(npt) {
				$(npt).bind("mouseenter.inputmask", function(event) {
					var $input = $(this),
						input = this,
						value = input._valueGet();
					if (value != "" && value != getBuffer().join(''))
						$input.triggerHandler('setvalue.inputmask');
				});
				//!! the bound handlers are executed in the order they where bound
				//reorder the events - the mouseenter event is internally mapped to the mouseover event
				var events = $._data(npt).events;
				var handlers = events["mouseover"];
				if (handlers) {
					var ourHandler = handlers[handlers.length - 1];
					for (var i = handlers.length - 1; i > 0; i--) {
						handlers[i] = handlers[i - 1];
					}
					handlers[0] = ourHandler;
				}
			}

			if (!npt._valueGet) {
				var valueProperty;
				if (Object.getOwnPropertyDescriptor && npt.value == undefined) { // && npt.isContentEditable) {
					valueGet = function() {
						return this.textContent;
					}
					valueSet = function(value) {
						this.textContent = value;
					}

					Object.defineProperty(npt, "value", {
						get: getter,
						set: setter
					});
				} else if ((valueProperty = (Object.getOwnPropertyDescriptor && Object.getOwnPropertyDescriptor(npt, "value"))) && valueProperty.configurable && false) { //experimental for chrome
					npt._value = valueProperty.value;
					valueGet = function() {
						return this._value || "";
					}
					valueSet = function(value) {
						this._value = value;
						this.select();
						this.setRangeText(value);
						this.selectionStart = this.selectionEnd;
					}

					Object.defineProperty(npt, "value", {
						get: getter,
						set: setter
					});
				} else if (document.__lookupGetter__ && npt.__lookupGetter__("value")) {
					valueGet = npt.__lookupGetter__("value");
					valueSet = npt.__lookupSetter__("value");

					npt.__defineGetter__("value", getter);
					npt.__defineSetter__("value", setter);
				} else { //jquery.val
					valueGet = function() {
						return npt.value;
					}
					valueSet = function(value) {
						npt.value = value;
					}
					PatchValhook(npt.type);
					InstallNativeValueSetFallback(npt);
				}
				npt._valueGet = function(overruleRTL) {
					return isRTL && overruleRTL !== true ? valueGet.call(this).split('').reverse().join('') : valueGet.call(this);
				};
				npt._valueSet = function(value) {
					valueSet.call(this, isRTL ? value.split('').reverse().join('') : value);
				};
			}
		}

		function handleRemove(input, k, pos, strict) {
			function generalize() {
				if (opts.keepStatic) {
					resetMaskSet(true);
					var validInputs = [],
						lastAlt, positionsClone = $.extend(true, {}, getMaskSet()["validPositions"]);
					//find last alternation
					for (lastAlt = getLastValidPosition(); lastAlt >= 0; lastAlt--) {
						var validPos = getMaskSet()["validPositions"][lastAlt];
						if (validPos) {
							if (validPos.match.fn != null)
								validInputs.push(validPos.input);
							delete getMaskSet()["validPositions"][lastAlt];
							if (validPos.alternation != undefined && validPos.locator[validPos.alternation] == getTestTemplate(lastAlt).locator[validPos.alternation]) {
								break;
							}
						}
					}

					if (lastAlt > -1) {
						while (validInputs.length > 0) {
							getMaskSet()["p"] = seekNext(getLastValidPosition());
							var keypress = $.Event("keypress");
							keypress.which = validInputs.pop().charCodeAt(0);
							keypressEvent.call(input, keypress, true, false, false, getMaskSet()["p"]);
						}
					} else {
						//restore original positions
						getMaskSet()["validPositions"] = $.extend(true, {}, positionsClone);
					}
				}
			}

			if (opts.numericInput || isRTL) {
				if (k == inputmask.keyCode.BACKSPACE)
					k = inputmask.keyCode.DELETE;
				else if (k == inputmask.keyCode.DELETE)
					k = inputmask.keyCode.BACKSPACE;

				if (isRTL) {
					var pend = pos.end;
					pos.end = pos.begin;
					pos.begin = pend;
				}
			}

			if (k == inputmask.keyCode.BACKSPACE && (pos.end - pos.begin < 1 || opts.insertMode == false)) {
				pos.begin = seekPrevious(pos.begin);
				if (getMaskSet()["validPositions"][pos.begin] != undefined && (getMaskSet()["validPositions"][pos.begin].input == opts.groupSeparator || getMaskSet()["validPositions"][pos.begin].input == opts.radixPoint)) {
					pos.begin--;
				}
			} else if (k == inputmask.keyCode.DELETE && pos.begin == pos.end) {
				pos.end = isMask(pos.end) ? pos.end + 1 : seekNext(pos.end) + 1;
				if (getMaskSet()["validPositions"][pos.begin] != undefined && (getMaskSet()["validPositions"][pos.begin].input == opts.groupSeparator || getMaskSet()["validPositions"][pos.begin].input == opts.radixPoint)) {
					pos.end++;
				}
			}

			stripValidPositions(pos.begin, pos.end, false, strict);
			if (strict !== true) {
				generalize(); //revert the alternation

				var lvp = getLastValidPosition(pos.begin);
				if (lvp < pos.begin) {
					if (lvp == -1) resetMaskSet();
					getMaskSet()["p"] = seekNext(lvp);
				} else {
					getMaskSet()["p"] = pos.begin;
				}
			}
		}
		//postprocessing of the validpositions according to the buffer manipulations
		function handleOnKeyResult(input, keyResult, caretPos) {
			if (keyResult && keyResult["refreshFromBuffer"]) {
				var refresh = keyResult["refreshFromBuffer"];
				refreshFromBuffer(refresh === true ? refresh : refresh["start"], refresh["end"], keyResult["buffer"]);

				resetMaskSet(true);
				if (caretPos != undefined) {
					writeBuffer(input, getBuffer());
					caret(input, keyResult.caret || caretPos.begin, keyResult.caret || caretPos.end);
				}
			}
		}

		function keydownEvent(e) {
			var input = this,
				$input = $(input),
				k = e.keyCode,
				pos = caret(input);

			//backspace, delete, and escape get special treatment
			if (k == inputmask.keyCode.BACKSPACE || k == inputmask.keyCode.DELETE || (iphone && k == 127) || (e.ctrlKey && k == 88 && !isInputEventSupported("cut"))) { //backspace/delete
				e.preventDefault(); //stop default action but allow propagation
				if (k == 88) undoValue = getBuffer().join('');
				handleRemove(input, k, pos);
				writeBuffer(input, getBuffer(), getMaskSet()["p"], e, undoValue != getBuffer().join(''));
				if (input._valueGet() == getBufferTemplate().join(''))
					$input.trigger('cleared');
				else if (isComplete(getBuffer()) === true)
					$input.trigger("complete");
				if (opts.showTooltip) { //update tooltip
					$input.prop("title", getMaskSet()["mask"]);
				}
			} else if (k == inputmask.keyCode.END || k == inputmask.keyCode.PAGE_DOWN) { //when END or PAGE_DOWN pressed set position at lastmatch
				setTimeout(function() {
					var caretPos = seekNext(getLastValidPosition());
					if (!opts.insertMode && caretPos == getMaskLength() && !e.shiftKey) caretPos--;
					caret(input, e.shiftKey ? pos.begin : caretPos, caretPos);
				}, 0);
			} else if ((k == inputmask.keyCode.HOME && !e.shiftKey) || k == inputmask.keyCode.PAGE_UP) { //Home or page_up
				caret(input, 0, e.shiftKey ? pos.begin : 0);
			} else if (((opts.undoOnEscape && k == inputmask.keyCode.ESCAPE) || (k == 90 && e.ctrlKey)) && e.altKey !== true) { //escape && undo && #762
				checkVal(input, true, false, undoValue.split(''));
				$input.click();
			} else if (k == inputmask.keyCode.INSERT && !(e.shiftKey || e.ctrlKey)) { //insert
				opts.insertMode = !opts.insertMode;
				caret(input, !opts.insertMode && pos.begin == getMaskLength() ? pos.begin - 1 : pos.begin);
			} else if (opts.insertMode == false && !e.shiftKey) {
				if (k == inputmask.keyCode.RIGHT) {
					setTimeout(function() {
						var caretPos = caret(input);
						caret(input, caretPos.begin);
					}, 0);
				} else if (k == inputmask.keyCode.LEFT) {
					setTimeout(function() {
						var caretPos = caret(input);
						caret(input, isRTL ? caretPos.begin + 1 : caretPos.begin - 1);
					}, 0);
				}
			}
			opts.onKeyDown.call(this, e, getBuffer(), caret(input).begin, opts);
			ignorable = $.inArray(k, opts.ignorables) != -1;
		}

		function keypressEvent(e, checkval, writeOut, strict, ndx) {
			var input = this,
				$input = $(input),
				k = e.which || e.charCode || e.keyCode;

			if (checkval !== true && (!(e.ctrlKey && e.altKey) && (e.ctrlKey || e.metaKey || ignorable))) {
				return true;
			} else {
				if (k) {
					//special treat the decimal separator
					if (k == 46 && e.shiftKey == false && opts.radixPoint == ",") k = 44;
					var pos = checkval ? {
							begin: ndx,
							end: ndx
						} : caret(input),
						forwardPosition, c = String.fromCharCode(k);

					//should we clear a possible selection??
					var isSlctn = isSelection(pos.begin, pos.end);
					if (isSlctn) {
						getMaskSet()["undoPositions"] = $.extend(true, {}, getMaskSet()["validPositions"]); //init undobuffer for recovery when not valid
						handleRemove(input, inputmask.keyCode.DELETE, pos, true);
						pos.begin = getMaskSet()["p"];
						if (!opts.insertMode) { //preserve some space
							opts.insertMode = !opts.insertMode;
							setValidPosition(pos.begin, strict);
							opts.insertMode = !opts.insertMode;
						}
						isSlctn = !opts.multi;
					}

					getMaskSet()["writeOutBuffer"] = true;
					var p = isRTL && !isSlctn ? pos.end : pos.begin;
					var valResult = isValid(p, c, strict);
					if (valResult !== false) {
						if (valResult !== true) {
							p = valResult.pos != undefined ? valResult.pos : p; //set new position from isValid
							c = valResult.c != undefined ? valResult.c : c; //set new char from isValid
						}
						resetMaskSet(true);
						if (valResult.caret != undefined)
							forwardPosition = valResult.caret;
						else {
							var vps = getMaskSet()["validPositions"];
							if (!opts.keepStatic && (vps[p + 1] != undefined && getTests(p + 1, vps[p].locator.slice(), p).length > 1 || vps[p].alternation != undefined))
								forwardPosition = p + 1;
							else
								forwardPosition = seekNext(p);
						}
						getMaskSet()["p"] = forwardPosition; //needed for checkval
					}

					if (writeOut !== false) {
						var self = this;
						setTimeout(function() {
							opts.onKeyValidation.call(self, valResult, opts);
						}, 0);
						if (getMaskSet()["writeOutBuffer"] && valResult !== false) {
							var buffer = getBuffer();
							writeBuffer(input, buffer, checkval ? undefined : opts.numericInput ? seekPrevious(forwardPosition) : forwardPosition, e, checkval !== true);
							if (checkval !== true) {
								setTimeout(function() { //timeout needed for IE
									if (isComplete(buffer) === true)
										$input.trigger("complete");
								}, 0);
							}
						} else if (isSlctn) {
							getMaskSet()["buffer"] = undefined;
							getMaskSet()["validPositions"] = getMaskSet()["undoPositions"];
						}
					} else if (isSlctn) {
						getMaskSet()["buffer"] = undefined;
						getMaskSet()["validPositions"] = getMaskSet()["undoPositions"];
					}

					if (opts.showTooltip) { //update tooltip
						$input.prop("title", getMaskSet()["mask"]);
					}

					if (checkval && $.isFunction(opts.onBeforeWrite)) {
						var result = opts.onBeforeWrite.call(this, e, getBuffer(), forwardPosition, opts);
						if (result && result["refreshFromBuffer"]) {
							var refresh = result["refreshFromBuffer"];
							refreshFromBuffer(refresh === true ? refresh : refresh["start"], refresh["end"], result["buffer"]);

							resetMaskSet(true);
							if (result.caret) {
								getMaskSet()["p"] = result.caret;
							}
						}
					}
					e.preventDefault();
				}
			}
		}

		function pasteEvent(e) {
			var input = this,
				$input = $(input),
				inputValue = input._valueGet(true),
				caretPos = caret(input);
			//paste event for IE8 and lower I guess ;-)
			if (e.type == "propertychange" && input._valueGet().length <= getMaskLength()) {
				return true;
			} else if (e.type == "paste") {
				var valueBeforeCaret = inputValue.substr(0, caretPos.begin),
					valueAfterCaret = inputValue.substr(caretPos.end, inputValue.length);

				if (valueBeforeCaret == getBufferTemplate().slice(0, caretPos.begin).join('')) valueBeforeCaret = "";
				if (valueAfterCaret == getBufferTemplate().slice(caretPos.end).join('')) valueAfterCaret = "";

				if (window.clipboardData && window.clipboardData.getData) { // IE
					inputValue = valueBeforeCaret + window.clipboardData.getData('Text') + valueAfterCaret;
				} else if (e.originalEvent && e.originalEvent.clipboardData && e.originalEvent.clipboardData.getData) {
					inputValue = valueBeforeCaret + e.originalEvent.clipboardData.getData('text/plain') + valueAfterCaret;
				}
			}

			var pasteValue = inputValue;
			if ($.isFunction(opts.onBeforePaste)) {
				pasteValue = opts.onBeforePaste.call(input, inputValue, opts);
				if (pasteValue === false) {
					e.preventDefault();
					return false;
				}
				if (!pasteValue)
					pasteValue = inputValue;
			}
			checkVal(input, false, false, isRTL ? pasteValue.split('').reverse() : pasteValue.split(''));
			writeBuffer(input, getBuffer(), undefined, e, true);
			$input.click();
			if (isComplete(getBuffer()) === true)
				$input.trigger("complete");

			return false;
		}

		function inputFallBackEvent(e) { //fallback when keypress & compositionevents fail
			var input = this;
			checkVal(input, true, false);

			if (isComplete(getBuffer()) === true)
				$(input).trigger("complete");

			e.preventDefault();
		}

		function compositionStartEvent(e) {
			var input = this;
			undoValue = getBuffer().join('');
			if (compositionData == "" || e.originalEvent.data.indexOf(compositionData) != 0) {
				compositionCaretPos = caret(input);
			}
		}

		function compositionUpdateEvent(e) {
			var input = this,
				caretPos = caret(input);
			if (e.originalEvent.data.indexOf(compositionData) == 0) {
				resetMaskSet();
				caretPos = compositionCaretPos;
			}
			var newData = e.originalEvent.data;
			caret(input, caretPos.begin, caretPos.end);
			for (var i = 0; i < newData.length; i++) {
				var keypress = $.Event("keypress");
				keypress.which = newData.charCodeAt(i);
				skipKeyPressEvent = false;
				ignorable = false;
				keypressEvent.call(input, keypress); //needs update
			}
			setTimeout(function() {
				var forwardPosition = getMaskSet()["p"];
				writeBuffer(input, getBuffer(), opts.numericInput ? seekPrevious(forwardPosition) : forwardPosition);
			}, 0);
			compositionData = e.originalEvent.data;
		}

		function compositionEndEvent(e) {
			//pickup by inputfallback
		}

		function mask(el) {
			$el = $(el);

			//show tooltip
			if (opts.showTooltip) {
				$el.prop("title", getMaskSet()["mask"]);
			}

			if (el.dir == "rtl" || opts.rightAlign)
				$el.css("text-align", "right");

			if (el.dir == "rtl" || opts.numericInput) {
				el.dir = "ltr";
				$el.removeAttr("dir");
				el.inputmask.isRTL = true;
				isRTL = true;
			}

			//unbind all events - to make sure that no other mask will interfere when re-masking
			$el.unbind(".inputmask");

			if (($el.is(":input") && isInputTypeSupported($el.attr("type"))) || el.isContentEditable) {
				//bind events
				$el.closest('form').bind("submit", function(e) { //trigger change on submit if any
					if (undoValue != getBuffer().join('')) {
						$el.change();
					}
					if (opts.clearMaskOnLostFocus && $el[0]._valueGet && $el[0]._valueGet() == getBufferTemplate().join('')) {
						$el[0]._valueSet(''); //clear masktemplete on submit and still has focus
					}
					if (opts.removeMaskOnSubmit) {
						$el.inputmask("remove");
					}
				}).bind('reset', function() {
					setTimeout(function() {
						$el.triggerHandler('setvalue.inputmask');
					}, 0);
				});
				$el.bind("mouseenter.inputmask", function() {
					var $input = $(this),
						input = this;
					mouseEnter = true;
					if (!$input.is(":focus") && opts.showMaskOnHover) {
						if (input._valueGet() != getBuffer().join('')) {
							writeBuffer(input, getBuffer());
						}
					}
				}).bind("blur.inputmask", function(e) {
					var $input = $(this),
						input = this;
					if (input.inputmask) {
						var nptValue = input._valueGet(),
							buffer = getBuffer().slice();
						firstClick = true;
						if (undoValue != buffer.join('')) {
							setTimeout(function() { //change event should be triggered after the other buffer manipulations on blur
								$input.change();
								undoValue = buffer.join('');
							}, 0);
						}
						if (nptValue != '') {
							if (opts.clearMaskOnLostFocus) {
								if (nptValue == getBufferTemplate().join(''))
									buffer = [];
								else { //clearout optional tail of the mask
									clearOptionalTail(buffer);
								}
							}
							if (isComplete(buffer) === false) {
								setTimeout(function() {
									$input.trigger("incomplete");
								}, 0);
								if (opts.clearIncomplete) {
									resetMaskSet();
									if (opts.clearMaskOnLostFocus)
										buffer = [];
									else {
										buffer = getBufferTemplate().slice();

									}
								}
							}

							writeBuffer(input, buffer, undefined, e);
						}
					}
				}).bind("focus.inputmask", function(e) {
					var $input = $(this),
						input = this,
						nptValue = input._valueGet();
					if (opts.showMaskOnFocus && (!opts.showMaskOnHover || (opts.showMaskOnHover && nptValue == ''))) {
						if (input._valueGet() != getBuffer().join('')) {
							writeBuffer(input, getBuffer(), seekNext(getLastValidPosition()));
						}
					} else if (mouseEnter === false) { //only executed on focus without mouseenter
						caret(input, seekNext(getLastValidPosition()));
					}
					undoValue = getBuffer().join('');
				}).bind("mouseleave.inputmask", function() {
					var $input = $(this),
						input = this;
					mouseEnter = false;
					if (opts.clearMaskOnLostFocus) {
						var buffer = getBuffer().slice(),
							nptValue = input._valueGet();
						if (!$input.is(":focus") && nptValue != $input.attr("placeholder") && nptValue != '') {
							if (nptValue == getBufferTemplate().join(''))
								buffer = [];
							else { //clearout optional tail of the mask
								clearOptionalTail(buffer);
							}
							writeBuffer(input, buffer);
						}
					}
				}).bind("click.inputmask", function() {
					var $input = $(this),
						input = this;
					if ($input.is(":focus")) {
						var selectedCaret = caret(input);
						if (selectedCaret.begin == selectedCaret.end) {
							if (opts.radixFocus && opts.radixPoint != "" && $.inArray(opts.radixPoint, getBuffer()) != -1 && (firstClick || getBuffer().join('') == getBufferTemplate().join(''))) {
								caret(input, $.inArray(opts.radixPoint, getBuffer()));
								firstClick = false;
							} else {
								var clickPosition = selectedCaret.begin,
									lastPosition = seekNext(getLastValidPosition(clickPosition));

								if (clickPosition < lastPosition) {
									caret(input, isMask(clickPosition) ? clickPosition : seekNext(clickPosition));
								} else {
									if (lastPosition > 0 && opts.alias == 'email') {
										lastPosition += 1;
										caret(input, lastPosition);
									}
									else
										caret(input, lastPosition);

								}
							}
						}
					}
				}).bind('dblclick.inputmask', function() {
					var input = this;
					setTimeout(function() {
						caret(input, 0, seekNext(getLastValidPosition()));
					}, 0);
				}).bind(PasteEventType + ".inputmask dragdrop.inputmask drop.inputmask", pasteEvent).bind('cut.inputmask', function(e) {
					skipInputEvent = true; //stop inputFallback
					var input = this,
						$input = $(input),
						pos = caret(input);

					//correct clipboardData
					if (isRTL) {
						var clipboardData = window.clipboardData || e.originalEvent.clipboardData,
							clipData = clipboardData.getData('text').split('').reverse().join('');
						clipboardData.setData('text', clipData);
					}
					handleRemove(input, inputmask.keyCode.DELETE, pos);
					writeBuffer(input, getBuffer(), getMaskSet()["p"], e, undoValue != getBuffer().join(''));

					if (input._valueGet() == getBufferTemplate().join(''))
						$input.trigger('cleared');

					if (opts.showTooltip) { //update tooltip
						$input.prop("title", getMaskSet()["mask"]);
					}
				}).bind('complete.inputmask', opts.oncomplete).bind('incomplete.inputmask', opts.onincomplete).bind('cleared.inputmask', opts.oncleared);

				$el.bind("keydown.inputmask", keydownEvent).bind("keypress.inputmask", keypressEvent);

				if (!androidfirefox) {
					$el.bind("compositionstart.inputmask", compositionStartEvent).bind("compositionupdate.inputmask", compositionUpdateEvent).bind("compositionend.inputmask", compositionEndEvent);
				}

				if (PasteEventType === "paste") {
					$el.bind("input.inputmask", inputFallBackEvent);
				}

				//if (android || androidfirefox || androidchrome || kindle) {
				//		$el.unbind("input.inputmask");
				//		$el.bind("input.inputmask", mobileInputEvent);
				//}
			}

			$el.bind('setvalue.inputmask', function() {
				var input = this,
					value = input._valueGet();
				input._valueSet($.isFunction(opts.onBeforeMask) ? (opts.onBeforeMask.call(input, value, opts) || value) : value);
				checkVal(input, true, false);
				undoValue = getBuffer().join('');
				if ((opts.clearMaskOnLostFocus || opts.clearIncomplete) && input._valueGet() == getBufferTemplate().join(''))
					input._valueSet('');
			});

			patchValueProperty(el);

			//apply mask
			var initialValue = $.isFunction(opts.onBeforeMask) ? (opts.onBeforeMask.call(el, el._valueGet(), opts) || el._valueGet()) : el._valueGet();
			checkVal(el, true, false, initialValue.split(''));
			var buffer = getBuffer().slice();
			undoValue = buffer.join('');
			// Wrap document.activeElement in a try/catch block since IE9 throw "Unspecified error" if document.activeElement is undefined when we are in an IFrame.
			var activeElement;
			try {
				activeElement = document.activeElement;
			} catch (e) {}
			if (isComplete(buffer) === false) {
				if (opts.clearIncomplete)
					resetMaskSet();
			}
			if (opts.clearMaskOnLostFocus) {
				if (buffer.join('') == getBufferTemplate().join('')) {
					buffer = [];
				} else {
					clearOptionalTail(buffer);
				}
			}
			writeBuffer(el, buffer);
			if (activeElement === el) { //position the caret when in focus
				caret(el, seekNext(getLastValidPosition()));
			}

			installEventRuler(el);
		}

		//action object
		if (actionObj != undefined) {
			switch (actionObj["action"]) {
				case "isComplete":
					el = actionObj["el"]
					$el = $(el);
					maskset = el.inputmask.maskset;
					opts = el.inputmask.opts;
					return isComplete(actionObj["buffer"]);
				case "unmaskedvalue":
					el = actionObj["el"]
					$el = $(el);
					maskset = el.inputmask.maskset;
					opts = el.inputmask.opts;
					isRTL = el.inputmask.isRTL;
					return unmaskedvalue($el);
				case "mask":
					undoValue = getBuffer().join('');
					mask(actionObj["el"]);
					break;
				case "format":
					$el = $({});
					//store inputmask instance on the input with element reference
					$el[0].inputmask = new inputmask();
					$el[0].inputmask.opts = opts;
					$el[0].inputmask.el = $el[0];
					$el[0].inputmask.maskset = maskset;
					$el[0].inputmask.isRTL = opts.numericInput;

					if (opts.numericInput) {
						isRTL = true;
					}
					var valueBuffer = ($.isFunction(opts.onBeforeMask) ? (opts.onBeforeMask.call($el, actionObj["value"], opts) || actionObj["value"]) : actionObj["value"]).split('');
					checkVal($el, false, false, isRTL ? valueBuffer.reverse() : valueBuffer);
					$.isFunction(opts.onBeforeWrite) && opts.onBeforeWrite.call(this, undefined, getBuffer(), 0, opts);

					if (actionObj["metadata"]) {
						return {
							value: isRTL ? getBuffer().slice().reverse().join('') : getBuffer().join(''),
							metadata: $el.inputmask("getmetadata")
						}
					}

					return isRTL ? getBuffer().slice().reverse().join('') : getBuffer().join('');
				case "isValid":
					$el = $({});
					//store inputmask instance on the input with element reference
					$el[0].inputmask = new inputmask();
					$el[0].inputmask.opts = opts;
					$el[0].inputmask.el = $el[0];
					$el[0].inputmask.maskset = maskset;
					$el[0].inputmask.isRTL = opts.numericInput;

					if (opts.numericInput) {
						isRTL = true;
					}
					var valueBuffer = actionObj["value"].split('');
					checkVal($el, false, true, isRTL ? valueBuffer.reverse() : valueBuffer);
					var buffer = getBuffer();
					var rl = determineLastRequiredPosition(),
						lmib = buffer.length - 1;
					for (; lmib > rl; lmib--) {
						if (isMask(lmib)) break;
					}
					buffer.splice(rl, lmib + 1 - rl);

					return isComplete(buffer) && actionObj["value"] == buffer.join('');
				case "getemptymask":
					el = actionObj["el"]
					$el = $(el);
					maskset = el.inputmask.maskset;
					opts = el.inputmask.opts;
					return getBufferTemplate();
				case "remove":
					el = actionObj["el"]
					$el = $(el);
					maskset = el.inputmask.maskset;
					opts = el.inputmask.opts;
					//writeout the unmaskedvalue
					el._valueSet(unmaskedvalue($el));
					//unbind all events
					$el.unbind(".inputmask");
					//clear data
					el.inputmask = undefined;
					//restore the value property
					var valueProperty;
					if (Object.getOwnPropertyDescriptor)
						valueProperty = Object.getOwnPropertyDescriptor(el, "value");
					if (valueProperty && valueProperty.get) {
						if (el._valueGet) {
							Object.defineProperty(el, "value", {
								get: el._valueGet,
								set: el._valueSet
							});
						}
					} else if (document.__lookupGetter__ && el.__lookupGetter__("value")) {
						if (el._valueGet) {
							el.__defineGetter__("value", el._valueGet);
							el.__defineSetter__("value", el._valueSet);
						}
					}
					try { //try catch needed for IE7 as it does not supports deleting fns
						delete el._valueGet;
						delete el._valueSet;
					} catch (e) {
						el._valueGet = undefined;
						el._valueSet = undefined;

					}
					break;
				case "getmetadata":
					el = actionObj["el"]
					$el = $(el);
					maskset = el.inputmask.maskset;
					opts = el.inputmask.opts;
					if ($.isArray(maskset["metadata"])) {
						//find last alternation
						var alternation, lvp = getLastValidPosition();
						for (var firstAlt = lvp; firstAlt >= 0; firstAlt--) {
							if (getMaskSet()["validPositions"][firstAlt] && getMaskSet()["validPositions"][firstAlt].alternation != undefined) {
								alternation = getMaskSet()["validPositions"][firstAlt].alternation;
								break;
							}
						}
						if (alternation != undefined) {
							return maskset["metadata"][getMaskSet()["validPositions"][lvp].locator[alternation]];
						} else return maskset["metadata"][0];
					}

					return maskset["metadata"];
			}
		}
	}

	//make inputmask available
	window.inputmask = inputmask;
	return inputmask;
})(jQuery);

/*
 * Input Mask plugin for jquery
 * http://github.com/RobinHerbots/jquery.inputmask
 * Copyright (c) 2010 -	Robin Herbots
 * Licensed under the MIT license (http://www.opensource.org/licenses/mit-license.php)
 * Version: 0.0.0-dev
 */

(function ($) {
	if ($.fn.inputmask === undefined) {
		//jquery plugin
		$.fn.inputmask = function (fn, options) {
			var nptmask;
			options = options || {};
			if (typeof fn === "string") {
				switch (fn) {
					case "mask":
						nptmask = new inputmask(options);
						return this.each(function () {
							nptmask.mask(this);
						});
					case "unmaskedvalue":
						var input = this.jquery && this.length > 0 ? this[0] : this;
						return input.inputmask ? input.inputmask.unmaskedvalue() : $(input).val();
					case "remove":
						return this.each(function () {
							if (this.inputmask) this.inputmask.remove();
						});
					case "getemptymask":
						var input = this.jquery && this.length > 0 ? this[0] : this;
						return input.inputmask ? input.inputmask.getemptymask() : "";
					case "hasMaskedValue": //check wheter the returned value is masked or not; currently only works reliable when using jquery.val fn to retrieve the value
						var input = this.jquery && this.length > 0 ? this[0] : this;
						return input.inputmask ? input.inputmask.hasMaskedValue() : false;
					case "isComplete":
						var input = this.jquery && this.length > 0 ? this[0] : this;
						return input.inputmask ? input.inputmask.isComplete() : true;
					case "getmetadata": //return mask metadata if exists
						var input = this.jquery && this.length > 0 ? this[0] : this;
						return input.inputmask ? input.inputmask.getmetadata() : undefined;
					default:
						options.alias = fn;
						nptmask = new inputmask(options);
						return this.each(function () {
							nptmask.mask(this);
						});
				}
			} else if (typeof fn == "object") {
				nptmask = new inputmask(fn);
				return this.each(function () {
					nptmask.mask(this);
				});
			} else if (fn == undefined) {
				//look for data-inputmask atributes
				return this.each(function () {
					nptmask = new inputmask(options);
					nptmask.mask(this);
				});
			}
		};
	}
	return $.fn.inputmask;
})(jQuery);

/*
 Input Mask plugin extensions
 http://github.com/RobinHerbots/jquery.inputmask
 Copyright (c) 2010 -  Robin Herbots
 Licensed under the MIT license (http://www.opensource.org/licenses/mit-license.php)
 Version: 0.0.0-dev

 Optional extensions on the jquery.inputmask base
 */
(function ($) {
	//extra definitions
	inputmask.extendDefinitions({
		'A': {
			validator: "[A-Za-z\u0410-\u044F\u0401\u0451\u00C0-\u00FF\u00B5]",
			cardinality: 1,
			casing: "upper" //auto uppercasing
		},
		'#': {
			validator: "[0-9A-Za-z\u0410-\u044F\u0401\u0451\u00C0-\u00FF\u00B5]",
			cardinality: 1,
			casing: "upper"
		}
	});
	inputmask.extendAliases({
		'url': {
			mask: "ir",
			placeholder: "",
			separator: "",
			defaultPrefix: "http://",
			regex: {
				urlpre1: new RegExp("[fh]"),
				urlpre2: new RegExp("(ft|ht)"),
				urlpre3: new RegExp("(ftp|htt)"),
				urlpre4: new RegExp("(ftp:|http|ftps)"),
				urlpre5: new RegExp("(ftp:/|ftps:|http:|https)"),
				urlpre6: new RegExp("(ftp://|ftps:/|http:/|https:)"),
				urlpre7: new RegExp("(ftp://|ftps://|http://|https:/)"),
				urlpre8: new RegExp("(ftp://|ftps://|http://|https://)")
			},
			definitions: {
				'i': {
					validator: function (chrs, maskset, pos, strict, opts) {
						return true;
					},
					cardinality: 8,
					prevalidator: (function () {
						var result = [],
								prefixLimit = 8;
						for (var i = 0; i < prefixLimit; i++) {
							result[i] = (function () {
								var j = i;
								return {
									validator: function (chrs, maskset, pos, strict, opts) {
										if (opts.regex["urlpre" + (j + 1)]) {
											var tmp = chrs,
													k;
											if (((j + 1) - chrs.length) > 0) {
												tmp = maskset.buffer.join('').substring(0, ((j + 1) - chrs.length)) + "" + tmp;
											}
											var isValid = opts.regex["urlpre" + (j + 1)].test(tmp);
											if (!strict && !isValid) {
												pos = pos - j;
												for (k = 0; k < opts.defaultPrefix.length; k++) {
													maskset.buffer[pos] = opts.defaultPrefix[k];
													pos++;
												}
												for (k = 0; k < tmp.length - 1; k++) {
													maskset.buffer[pos] = tmp[k];
													pos++;
												}
												return {
													"pos": pos
												};
											}
											return isValid;
										} else {
											return false;
										}
									},
									cardinality: j
								};
							})();
						}
						return result;
					})()
				},
				"r": {
					validator: ".",
					cardinality: 50
				}
			},
			insertMode: false,
			autoUnmask: false
		},
		"ip": { //ip-address mask
			mask: "i[i[i]].i[i[i]].i[i[i]].i[i[i]]",
			definitions: {
				'i': {
					validator: function (chrs, maskset, pos, strict, opts) {
						if (pos - 1 > -1 && maskset.buffer[pos - 1] != ".") {
							chrs = maskset.buffer[pos - 1] + chrs;
							if (pos - 2 > -1 && maskset.buffer[pos - 2] != ".") {
								chrs = maskset.buffer[pos - 2] + chrs;
							} else chrs = "0" + chrs;
						} else chrs = "00" + chrs;
						return new RegExp("25[0-5]|2[0-4][0-9]|[01][0-9][0-9]").test(chrs);
					},
					cardinality: 1
				}
			}
		},
		"email": {
			mask: "*{1,64}[.*{1,64}][.*{1,64}][.*{1,64}]@*{1,64}[.*{2,64}][.*{2,6}][.*{1,2}]",
			greedy: false,
			onBeforePaste: function (pastedValue, opts) {
				pastedValue = pastedValue.toLowerCase();
				return pastedValue.replace("mailto:", "");
			},
			definitions: {
				'*': {
					validator: "[0-9A-Za-z!#$%&'*+/=?^_`{|}~\-]",
					cardinality: 1,
					casing: "lower"
				}
			}
		},
		'numeric': {
			mask: function (opts) {
				function autoEscape(txt) {
					var escapedTxt = "";
					for (var i = 0; i < txt.length; i++) {
						escapedTxt += opts.definitions[txt[i]] ? "\\" + txt[i] : txt[i];
					}
					return escapedTxt;
				}

				if (opts.repeat !== 0 && isNaN(opts.integerDigits)) {
					opts.integerDigits = opts.repeat;
				}
				opts.repeat = 0;
				if (opts.groupSeparator == opts.radixPoint) { //treat equal separator and radixpoint
					if (opts.radixPoint == ".")
						opts.groupSeparator = ",";
					else if (opts.radixPoint == ",")
						opts.groupSeparator = ".";
					else opts.groupSeparator = "";
				}
				if (opts.groupSeparator === " ") { //prevent conflict with default skipOptionalPartCharacter
					opts.skipOptionalPartCharacter = undefined;
				}
				opts.autoGroup = opts.autoGroup && opts.groupSeparator != "";
				if (opts.autoGroup) {
					if (typeof opts.groupSize == "string" && isFinite(opts.groupSize)) opts.groupSize = parseInt(opts.groupSize);
					if (isFinite(opts.integerDigits)) {
						var seps = Math.floor(opts.integerDigits / opts.groupSize);
						var mod = opts.integerDigits % opts.groupSize;
						opts.integerDigits = parseInt(opts.integerDigits) + (mod == 0 ? seps - 1 : seps);
					}
				}

				//enforce placeholder to single
				if (opts.placeholder.length > 1)
					opts.placeholder = opts.placeholder.charAt(0);
				//only allow radixfocus when placeholder = 0
				opts.radixFocus = opts.radixFocus && opts.placeholder == "0";

				opts.definitions[";"] = opts.definitions["~"]; //clone integer def for decimals
				opts.definitions[";"].definitionSymbol = "~";

				var mask = autoEscape(opts.prefix);
				mask += "[+]";
				mask += "~{1," + opts.integerDigits + "}";
				if (opts.digits != undefined && (isNaN(opts.digits) || parseInt(opts.digits) > 0)) {
					if (opts.digitsOptional)
						mask += "[" + (opts.decimalProtect ? ":" : opts.radixPoint) + ";{" + opts.digits + "}]";
					else mask += (opts.decimalProtect ? ":" : opts.radixPoint) + ";{" + opts.digits + "}";
				}
				if (opts.negationSymbol.back != "")
					mask += "[-]";
				mask += autoEscape(opts.suffix);

				opts.greedy = false; //enforce greedy false
				return mask;
			},
			placeholder: "",
			greedy: false,
			digits: "*", //number of fractionalDigits
			digitsOptional: true,
			radixPoint: ".",
			radixFocus: true,
			groupSize: 3,
			autoGroup: false,
			allowPlus: true,
			allowMinus: true,
			negationSymbol: {
				front: "-", //"("
				back: "" //")"
			},
			integerDigits: "+", //number of integerDigits
			prefix: "",
			suffix: "",
			rightAlign: false,
			decimalProtect: true, //do not allow assumption of decimals input without entering the radixpoint
			min: undefined, //minimum value
			max: undefined, //maximum value
			step: 1,
			insertMode: true,
			autoUnmask: false,
			unmaskAsNumber: false,
			postFormat: function (buffer, pos, reformatOnly, opts) { //this needs to be removed // this is crap
				//console.log("input " + buffer);
				var negationStrip = false;

				var suffixStripped = false;
				if (buffer.length >= opts.suffix.length && buffer.join('').indexOf(opts.suffix) == (buffer.length - opts.suffix.length)) {
					buffer.length = buffer.length - opts.suffix.length; //strip suffix
					suffixStripped = true;
				}
				//position overflow corrections
				pos = pos >= buffer.length ? buffer.length - 1 : (pos < opts.prefix.length ? opts.prefix.length : pos);

				var needsRefresh = false,
						charAtPos = buffer[pos];
				if (opts.groupSeparator == "" ||
						($.inArray(opts.radixPoint, buffer) != -1 && pos > $.inArray(opts.radixPoint, buffer)) ||
						new RegExp('[' + inputmask.escapeRegex(opts.negationSymbol.front) + '\+]').test(charAtPos)
				) {
					if (suffixStripped) {
						for (var i = 0, l = opts.suffix.length; i < l; i++) {
							buffer.push(opts.suffix.charAt(i));
						}
					}
					//console.log("return input " + buffer);
					return {
						pos: pos
					};
				}

				var cbuf = buffer.slice();
				if (charAtPos == opts.groupSeparator) {
					cbuf.splice(pos--, 1);
					charAtPos = cbuf[pos];
				}
				if (reformatOnly) {
					if (charAtPos != opts.radixPoint) cbuf[pos] = "?";
				} else cbuf.splice(pos, 0, "?"); //set position indicator
				var bufVal = cbuf.join(''),
						bufValOrigin = bufVal;
				if (bufVal.length > 0 && opts.autoGroup || (reformatOnly && bufVal.indexOf(opts.groupSeparator) != -1)) {
					var escapedGroupSeparator = inputmask.escapeRegex(opts.groupSeparator);
					needsRefresh = bufVal.indexOf(opts.groupSeparator) == 0;
					bufVal = bufVal.replace(new RegExp(escapedGroupSeparator, "g"), '');
					var radixSplit = bufVal.split(opts.radixPoint);
					bufVal = opts.radixPoint == "" ? bufVal : radixSplit[0];
					if (bufVal != (opts.prefix + "?0") && bufVal.length >= (opts.groupSize + opts.prefix.length)) {
						//needsRefresh = true;
						var reg = new RegExp('([-\+]?[\\d\?]+)([\\d\?]{' + opts.groupSize + '})');
						while (reg.test(bufVal)) {
							bufVal = bufVal.replace(reg, '$1' + opts.groupSeparator + '$2');
							bufVal = bufVal.replace(opts.groupSeparator + opts.groupSeparator, opts.groupSeparator);
						}
					}
					if (opts.radixPoint != "" && radixSplit.length > 1)
						bufVal += opts.radixPoint + radixSplit[1];
				}
				needsRefresh = bufValOrigin != bufVal;
				buffer.length = bufVal.length; //align the length
				for (var i = 0, l = bufVal.length; i < l; i++) {
					buffer[i] = bufVal.charAt(i);
				}
				var newPos = $.inArray("?", buffer);
				if (newPos == -1 && charAtPos == opts.radixPoint) newPos = $.inArray(opts.radixPoint, buffer);
				if (reformatOnly) buffer[newPos] = charAtPos;
				else buffer.splice(newPos, 1);

				if (!needsRefresh && suffixStripped) {
					for (var i = 0, l = opts.suffix.length; i < l; i++) {
						buffer.push(opts.suffix.charAt(i));
					}
				}
				//console.log("formatted " + buffer + " refresh " + needsRefresh);
				return {
					pos: newPos,
					"refreshFromBuffer": needsRefresh,
					"buffer": buffer
				};
			},
			onBeforeWrite: function (e, buffer, caretPos, opts) {
				if (e && e.type == "blur") {
					//handle minvalue
					var maskedValue = buffer.join(''),
							processValue = maskedValue.replace(opts.prefix, "");
					processValue = processValue.replace(opts.suffix, "");
					processValue = processValue.replace(new RegExp(inputmask.escapeRegex(opts.groupSeparator), "g"), "");
					if (opts.radixPoint === ",") processValue = processValue.replace(inputmask.escapeRegex(opts.radixPoint), ".");

					if (isFinite(processValue)) {
						if (isFinite(opts.min) && parseFloat(processValue) < parseFloat(opts.min)) {
							return $.extend(true, {
								"refreshFromBuffer": true,
								"buffer": (opts.prefix + opts.min).split('')
							}, opts.postFormat((opts.prefix + opts.min).split(''), 0, true, opts));
						}
					}

					var tmpBufSplit = opts.radixPoint != "" ? buffer.join('').split(opts.radixPoint) : [buffer.join('')],
							matchRslt = tmpBufSplit[0].match(opts.regex.integerPart(opts)),
							matchRsltDigits = tmpBufSplit.length == 2 ? tmpBufSplit[1].match(opts.regex.integerNPart(opts)) : undefined;
					if (matchRslt && (matchRslt[0] == opts.negationSymbol.front + "0" || matchRslt[0] == opts.negationSymbol.front || matchRslt[0] == "+") && (matchRsltDigits == undefined || matchRsltDigits[0].match(/^0+$/))) {
						buffer.splice(matchRslt.index, 1);
					}
					var radixPosition = $.inArray(opts.radixPoint, buffer);
					if (radixPosition != -1 && isFinite(opts.digits) && !opts.digitsOptional) {
						for (var i = 1; i <= opts.digits; i++) {
							if (buffer[radixPosition + i] == undefined || buffer[radixPosition + i] == opts.placeholder.charAt(0)) buffer[radixPosition + i] = "0";
						}
						return {
							"refreshFromBuffer": true,
							"buffer": buffer
						};
					}
				}

				if (opts.autoGroup) {
					var rslt = opts.postFormat(buffer, caretPos - 1, true, opts);
					rslt.caret = caretPos <= opts.prefix.length ? rslt.pos : rslt.pos + 1;
					return rslt;
				}
			},
			regex: {
				integerPart: function (opts) {
					return new RegExp('[' + inputmask.escapeRegex(opts.negationSymbol.front) + '\+]?\\d+');
				},
				integerNPart: function (opts) {
					return new RegExp('[\\d' + inputmask.escapeRegex(opts.groupSeparator) + ']+');
				}
			},
			signHandler: function (chrs, maskset, pos, strict, opts) {
				if (!strict && (opts.allowMinus && chrs === "-") || (opts.allowPlus && chrs === "+")) {
					var matchRslt = maskset.buffer.join('').match(opts.regex.integerPart(opts));

					if (matchRslt && matchRslt[0].length > 0) {
						if (maskset.buffer[matchRslt.index] == (chrs === "-" ? "+" : opts.negationSymbol.front)) {
							if (chrs == "-") {
								if (opts.negationSymbol.back != "")
									return {
										"pos": matchRslt.index,
										"c": opts.negationSymbol.front,
										"remove": matchRslt.index,
										"caret": pos,
										"insert": {
											"pos": maskset["buffer"].length - opts.suffix.length - 1,
											"c": opts.negationSymbol.back
										}
									};
								else return {
									"pos": matchRslt.index,
									"c": opts.negationSymbol.front,
									"remove": matchRslt.index,
									"caret": pos
								};
							} else {
								if (opts.negationSymbol.back != "")
									return {
										"pos": matchRslt.index,
										"c": "+",
										"remove": [matchRslt.index, maskset["buffer"].length - opts.suffix.length - 1],
										"caret": pos
									};
								else return {
									"pos": matchRslt.index,
									"c": "+",
									"remove": matchRslt.index,
									"caret": pos
								};
							}
						} else if (maskset.buffer[matchRslt.index] == (chrs === "-" ? opts.negationSymbol.front : "+")) {
							if (chrs == "-" && opts.negationSymbol.back != "") {
								return {
									"remove": [matchRslt.index, maskset["buffer"].length - opts.suffix.length - 1],
									"caret": pos - 1
								};
							} else {
								return {
									"remove": matchRslt.index,
									"caret": pos - 1
								};
							}
						} else {
							if (chrs == "-") {
								if (opts.negationSymbol.back != "")
									return {
										"pos": matchRslt.index,
										"c": opts.negationSymbol.front,
										"caret": pos + 1,
										"insert": {
											"pos": maskset["buffer"].length - opts.suffix.length,
											"c": opts.negationSymbol.back
										}
									};
								else return {
									"pos": matchRslt.index,
									"c": opts.negationSymbol.front,
									"caret": pos + 1
								};
							} else {
								return {
									"pos": matchRslt.index,
									"c": chrs,
									"caret": pos + 1
								};
							}
						}
					}
				}
				return false;
			},
			radixHandler: function (chrs, maskset, pos, strict, opts) {
				if (!strict && chrs === opts.radixPoint && opts.digits > 0) {
					var radixPos = $.inArray(opts.radixPoint, maskset.buffer),
							integerValue = maskset.buffer.join('').match(opts.regex.integerPart(opts));

					if (radixPos != -1 && maskset["validPositions"][radixPos]) {
						if (maskset["validPositions"][radixPos - 1])
							return {
								"caret": radixPos + 1
							};
						else return {
							"pos": integerValue.index,
							c: integerValue[0],
							"caret": radixPos + 1
						};
					} else if (!integerValue || (integerValue["0"] == "0" && (integerValue.index + 1) != pos)) {
						maskset.buffer[integerValue ? integerValue.index : pos] = "0";
						return {
							"pos": (integerValue ? integerValue.index : pos) + 1
						};
					}
				}
				return false;
			},
			leadingZeroHandler: function (chrs, maskset, pos, strict, opts) {
				var matchRslt = maskset.buffer.join('').match(opts.regex.integerNPart(opts)),
						radixPosition = $.inArray(opts.radixPoint, maskset.buffer);
				if (matchRslt && !strict && (radixPosition == -1 || pos <= radixPosition)) {
					if (matchRslt["0"].indexOf("0") == 0) {
						if (pos < opts.prefix.length) pos = matchRslt.index; //position
						var _radixPosition = $.inArray(opts.radixPoint, maskset._buffer);
						var digitsMatch = maskset._buffer && maskset.buffer.slice(radixPosition).join('') == maskset._buffer.slice(_radixPosition).join('') || parseInt(maskset.buffer.slice(radixPosition + 1).join('')) == 0;
						var integerMatch = maskset._buffer && maskset.buffer.slice(matchRslt.index, radixPosition).join('') == maskset._buffer.slice(opts.prefix.length, _radixPosition).join('') || maskset.buffer.slice(matchRslt.index, radixPosition).join('') == "0";

						if (radixPosition == -1 || digitsMatch && integerMatch) {
							maskset.buffer.splice(matchRslt.index, 1);
							pos = pos > matchRslt.index ? pos - 1 : matchRslt.index;
							return {
								"pos": pos,
								"remove": matchRslt.index
							};
						} else if (matchRslt.index + 1 == pos || chrs == "0") {
							maskset.buffer.splice(matchRslt.index, 1);
							pos = matchRslt.index;
							return {
								"pos": pos,
								"remove": matchRslt.index
							};
						}
					} else if (chrs === "0" && pos <= matchRslt.index && matchRslt["0"] != opts.groupSeparator) {
						return false;
					}
				}
				return true;
			},
			postValidation: function (buffer, opts) {
				//handle maxvalue
				var isValid = true,
						maskedValue = buffer.join(''),
						processValue = maskedValue.replace(opts.prefix, "");
				processValue = processValue.replace(opts.suffix, "");
				processValue = processValue.replace(new RegExp(inputmask.escapeRegex(opts.groupSeparator), "g"), "");
				if (opts.radixPoint === ",") processValue = processValue.replace(inputmask.escapeRegex(opts.radixPoint), ".");
				//handle negation symbol
				processValue = processValue.replace(new RegExp("^" + inputmask.escapeRegex(opts.negationSymbol.front)), "-");
				processValue = processValue.replace(new RegExp(inputmask.escapeRegex(opts.negationSymbol.back) + "$"), "");


				if (isFinite(processValue)) {
					if (isFinite(opts.max)) {
						isValid = parseFloat(processValue) <= parseFloat(opts.max);
					}
					// if (isValid && isFinite(opts.min)) {
					// 	isValid = parseFloat(processValue) >= parseFloat(opts.min);
					// }
				}

				return isValid;
			},
			definitions: {
				'~': {
					validator: function (chrs, maskset, pos, strict, opts) {
						var isValid = opts.signHandler(chrs, maskset, pos, strict, opts);
						if (!isValid) {
							isValid = opts.radixHandler(chrs, maskset, pos, strict, opts);
							if (!isValid) {
								isValid = strict ? new RegExp("[0-9" + inputmask.escapeRegex(opts.groupSeparator) + "]").test(chrs) : new RegExp("[0-9]").test(chrs);
								if (isValid === true) {
									isValid = opts.leadingZeroHandler(chrs, maskset, pos, strict, opts);
									if (isValid === true) {
										//handle overwrite when fixed precision
										var radixPosition = $.inArray(opts.radixPoint, maskset.buffer);
										if (radixPosition != -1 && opts.digitsOptional === false && pos > radixPosition && !strict) {
											isValid = {
												"pos": pos,
												"remove": pos
											};
										} else isValid = {
											pos: pos
										};
									}
								}
							}
						}

						return isValid;
					},
					cardinality: 1,
					prevalidator: null
				},
				'+': {
					validator: function (chrs, maskset, pos, strict, opts) {
						var isValid = opts.signHandler(chrs, maskset, pos, strict, opts),
								nbl;
						if (!isValid && ((strict && opts.allowMinus && chrs === opts.negationSymbol.front) || (opts.allowMinus && chrs == "-") || (opts.allowPlus && chrs == "+"))) {
							if (chrs == "-") {
								if (opts.negationSymbol.back != "")
									isValid = {
										"pos": pos,
										"c": chrs === "-" ? opts.negationSymbol.front : "+",
										"caret": pos + 1,
										"insert": {
											"pos": maskset["buffer"].length,
											"c": opts.negationSymbol.back
										}
									};
								else isValid = {
									"pos": pos,
									"c": chrs === "-" ? opts.negationSymbol.front : "+",
									"caret": pos + 1
								};
							} else {
								isValid = true;
							}
						}
						return isValid;
					},
					cardinality: 1,
					prevalidator: null,
					placeholder: ''
				},
				'-': {
					validator: function (chrs, maskset, pos, strict, opts) {
						var isValid = opts.signHandler(chrs, maskset, pos, strict, opts);
						if (!isValid && strict && opts.allowMinus && chrs === opts.negationSymbol.back) {
							isValid = true;
						}
						return isValid;
					},
					cardinality: 1,
					prevalidator: null,
					placeholder: ''
				},
				':': {
					validator: function (chrs, maskset, pos, strict, opts) {
						var isValid = opts.signHandler(chrs, maskset, pos, strict, opts);
						if (!isValid) {
							var radix = "[" + inputmask.escapeRegex(opts.radixPoint) + "]";
							isValid = new RegExp(radix).test(chrs);
							if (isValid && maskset["validPositions"][pos] && maskset["validPositions"][pos]["match"].placeholder == opts.radixPoint) {
								isValid = {
									"caret": pos + 1
								};
							}
						}
						return isValid;
					},
					cardinality: 1,
					prevalidator: null,
					placeholder: function (opts) {
						return opts.radixPoint;
					}
				}
			},
			onUnMask: function (maskedValue, unmaskedValue, opts) {
				var processValue = maskedValue.replace(opts.prefix, "");
				processValue = processValue.replace(opts.suffix, "");
				processValue = processValue.replace(new RegExp(inputmask.escapeRegex(opts.groupSeparator), "g"), "");
				if (opts.unmaskAsNumber) {
					processValue = processValue.replace(inputmask.escapeRegex.call(this, opts.radixPoint), ".");
					return Number(processValue);
				}
				return processValue;
			},
			isComplete: function (buffer, opts) {
				var maskedValue = buffer.join(''),
						bufClone = buffer.slice();
				//verify separator positions
				opts.postFormat(bufClone, 0, true, opts);
				if (bufClone.join('') != maskedValue) return false;

				var processValue = maskedValue.replace(opts.prefix, "");
				processValue = processValue.replace(opts.suffix, "");
				processValue = processValue.replace(new RegExp(inputmask.escapeRegex(opts.groupSeparator), "g"), "");
				if (opts.radixPoint === ",") processValue = processValue.replace(inputmask.escapeRegex(opts.radixPoint), ".");
				return isFinite(processValue);
			},
			onBeforeMask: function (initialValue, opts) {
				if (opts.radixPoint != "" && isFinite(initialValue)) {
					initialValue = initialValue.toString().replace(".", opts.radixPoint);
				} else {
					var kommaMatches = initialValue.match(/,/g);
					var dotMatches = initialValue.match(/\./g);
					if (dotMatches && kommaMatches) {
						if (dotMatches.length > kommaMatches.length) {
							initialValue = initialValue.replace(/\./g, "");
							initialValue = initialValue.replace(",", opts.radixPoint);
						} else if (kommaMatches.length > dotMatches.length) {
							initialValue = initialValue.replace(/,/g, "");
							initialValue = initialValue.replace(".", opts.radixPoint);
						} else { //equal
							initialValue = initialValue.indexOf(".") < initialValue.indexOf(",") ? initialValue.replace(/\./g, "") : initialValue = initialValue.replace(/,/g, "");
						}
					} else {
						initialValue = initialValue.replace(new RegExp(inputmask.escapeRegex(opts.groupSeparator), "g"), "");
					}
				}

				if (opts.digits == 0) {
					if (initialValue.indexOf(".") != -1) {
						initialValue = initialValue.substring(0, initialValue.indexOf("."));
					} else if (initialValue.indexOf(",") != -1) {
						initialValue = initialValue.substring(0, initialValue.indexOf(","));
					}
				}

				if (opts.radixPoint != "" && isFinite(opts.digits) && initialValue.indexOf(opts.radixPoint) != -1) {
					var valueParts = initialValue.split(opts.radixPoint),
							decPart = valueParts[1].match(new RegExp("\\d*"))[0];
					if (parseInt(opts.digits) < decPart.toString().length) {
						var digitsFactor = Math.pow(10, parseInt(opts.digits));
						//make the initialValue a valid javascript number for the parsefloat
						initialValue = initialValue.replace(inputmask.escapeRegex(opts.radixPoint), ".");
						initialValue = Math.round(parseFloat(initialValue) * digitsFactor) / digitsFactor;
						initialValue = initialValue.toString().replace(".", opts.radixPoint);
					}
				}
				return initialValue.toString();
			},
			canClearPosition: function (maskset, position, lvp, strict, opts) {
				var positionInput = maskset["validPositions"][position].input,
						canClear = (positionInput != opts.radixPoint && isFinite(positionInput)) ||
								position == lvp ||
								positionInput == opts.groupSeparator ||
								positionInput == opts.negationSymbol.front ||
								positionInput == opts.negationSymbol.back,
						posOffset = 0;

				if (canClear && isFinite(positionInput)) {
					var matchRslt
					if (!strict && maskset["buffer"]) {
						matchRslt = maskset["buffer"].join('').substr(0, position).match(opts.regex.integerNPart(opts));
						var pos = position + 1,
								isNull = matchRslt == null || parseInt(matchRslt["0"].replace(new RegExp(inputmask.escapeRegex(opts.groupSeparator), "g"), "")) == 0;
						if (isNull) {
							while (maskset["validPositions"][pos] && (maskset["validPositions"][pos].input == opts.groupSeparator || maskset["validPositions"][pos].input == "0")) {
								delete maskset["validPositions"][pos];
								pos++;
							}
						}
					}

					var buffer = [];
					//build new buffer from validPositions
					for (var vp in maskset.validPositions) {
						buffer.push(maskset.validPositions[vp].input);
					}
					matchRslt = buffer.join('').match(opts.regex.integerNPart(opts));
					var radixPosition = $.inArray(opts.radixPoint, maskset.buffer);
					if (matchRslt && (radixPosition == -1 || position <= radixPosition)) {
						if (matchRslt["0"].indexOf("0") == 0) {
							canClear = matchRslt.index != position || radixPosition == -1;
						} else {
							var intPart = parseInt(matchRslt["0"].replace(new RegExp(inputmask.escapeRegex(opts.groupSeparator), "g"), ""));
							if (radixPosition != -1 && intPart < 10 /*&& opts.placeholder.charAt(0) == "0"*/) {
								maskset["validPositions"][position].input = "0";
								maskset["p"] = opts.prefix.length + 1;
								canClear = false;
							}
						}
					}
				}

				return canClear;
			},
			onKeyDown: function (e, buffer, caretPos, opts) {
				var $input = $(this);
				if (e.ctrlKey) {
					switch (e.keyCode) {
						case inputmask.keyCode.UP:
							$input.val(parseFloat(this.inputmask.unmaskedvalue()) + parseInt(opts.step));
							$input.triggerHandler('setvalue.inputmask');
							break;
						case inputmask.keyCode.DOWN:
							$input.val(parseFloat(this.inputmask.unmaskedvalue()) - parseInt(opts.step));
							$input.triggerHandler('setvalue.inputmask');
							break;
					}
				}
			},
		},
		'currency': {
			prefix: "$ ",
			groupSeparator: ",",
			alias: "numeric",
			placeholder: "0",
			autoGroup: true,
			digits: 2,
			digitsOptional: false,
			clearMaskOnLostFocus: false
		},
		'decimal': {
			alias: "numeric"
		},
		'ksphone': {
			mask: "*{1,20}",
			placeholder: " ",
			definitions: {
				'*': {
					validator: "[0-9+()\-]",
					cardinality: 1,
					casing: "lower"
				}
			}
		},
		'integer': {
			alias: "numeric",
			digits: 0,
			radixPoint: ""
		},
		'percentage': {
			alias: "numeric",
			digits: 2,
			radixPoint: ".",
			placeholder: "0",
			autoGroup: false,
			min: 0,
			max: 100,
			suffix: " %",
			allowPlus: false,
			allowMinus: false
		},
		'numeric2': {
			alias: "numeric"
		}
	});
	return inputmask;
})(jQuery);

(function ($) {

  $.fn.customScrollbar = function (options, args) {

    var defaultOptions = {
      skin: undefined,
      hScroll: true,
      vScroll: true,
      updateOnWindowResize: false,
      animationSpeed: 150,
      onCustomScroll: undefined,
      swipeSpeed: 1,
      wheelSpeed: 20,
      fixedThumbWidth: undefined,
      fixedThumbHeight: undefined,
      preventDefaultScroll: false
    }

    var Scrollable = function (element, options) {
      this.$element = $(element);
      this.options = options;
      this.addScrollableClass();
      this.addSkinClass();
      this.addScrollBarComponents();
      if (this.options.vScroll)
        this.vScrollbar = new Scrollbar(this, new VSizing());
      if (this.options.hScroll)
        this.hScrollbar = new Scrollbar(this, new HSizing());
      this.$element.data("scrollable", this);
      this.initKeyboardScrolling();
      this.bindEvents();
    }

    Scrollable.prototype = {

      addScrollableClass: function () {
        if (!this.$element.hasClass("scrollable")) {
          this.scrollableAdded = true;
          this.$element.addClass("scrollable");
        }
      },

      removeScrollableClass: function () {
        if (this.scrollableAdded)
          this.$element.removeClass("scrollable");
      },

      addSkinClass: function () {
        if (typeof(this.options.skin) == "string" && !this.$element.hasClass(this.options.skin)) {
          this.skinClassAdded = true;
          this.$element.addClass(this.options.skin);
        }
      },

      removeSkinClass: function () {
        if (this.skinClassAdded)
          this.$element.removeClass(this.options.skin);
      },

      addScrollBarComponents: function () {
        this.assignViewPort();
        if (this.$viewPort.length == 0) {
          this.$element.wrapInner("<div class=\"viewport\" />");
          this.assignViewPort();
          this.viewPortAdded = true;
        }
        this.assignOverview();
        if (this.$overview.length == 0) {
          this.$viewPort.wrapInner("<div class=\"overview\" />");
          this.assignOverview();
          this.overviewAdded = true;
        }
        this.addScrollBar("vertical", "prepend");
        this.addScrollBar("horizontal", "append");
      },

      removeScrollbarComponents: function () {
        this.removeScrollbar("vertical");
        this.removeScrollbar("horizontal");
        if (this.overviewAdded)
          this.$element.unwrap();
        if (this.viewPortAdded)
          this.$element.unwrap();
      },

      removeScrollbar: function (orientation) {
        if (this[orientation + "ScrollbarAdded"])
          this.$element.find(".scroll-bar." + orientation).remove();
      },

      assignViewPort: function () {
        this.$viewPort = this.$element.find(".viewport");
      },

      assignOverview: function () {
        this.$overview = this.$viewPort.find(".overview");
      },

      addScrollBar: function (orientation, fun) {
        if (this.$element.find(".scroll-bar." + orientation).length == 0) {
          this.$element[fun]("<div class='scroll-bar " + orientation + "'><div class='thumb'></div></div>")
          this[orientation + "ScrollbarAdded"] = true;
        }
      },

      resize: function (keepPosition) {
        if (this.vScrollbar)
          this.vScrollbar.resize(keepPosition);
        if (this.hScrollbar)
          this.hScrollbar.resize(keepPosition);
      },

      scrollTo: function (element) {
        if (this.vScrollbar)
          this.vScrollbar.scrollToElement(element);
        if (this.hScrollbar)
          this.hScrollbar.scrollToElement(element);
      },

      scrollToXY: function (x, y) {
        this.scrollToX(x);
        this.scrollToY(y);
      },

      scrollToX: function (x) {
        if (this.hScrollbar)
          this.hScrollbar.scrollOverviewTo(x, true);
      },

      scrollToY: function (y) {
        if (this.vScrollbar)
          this.vScrollbar.scrollOverviewTo(y, true);
      },

      remove: function () {
        this.removeScrollableClass();
        this.removeSkinClass();
        this.removeScrollbarComponents();
        this.$element.data("scrollable", null);
        this.removeKeyboardScrolling();
        if (this.vScrollbar)
          this.vScrollbar.remove();
        if (this.hScrollbar)
          this.hScrollbar.remove();
      },

      setAnimationSpeed: function (speed) {
        this.options.animationSpeed = speed;
      },

      isInside: function (element, wrappingElement) {
        var $element = $(element);
        var $wrappingElement = $(wrappingElement);
        var elementOffset = $element.offset();
        var wrappingElementOffset = $wrappingElement.offset();
        return (elementOffset.top >= wrappingElementOffset.top) && (elementOffset.left >= wrappingElementOffset.left) &&
          (elementOffset.top + $element.height() <= wrappingElementOffset.top + $wrappingElement.height()) &&
          (elementOffset.left + $element.width() <= wrappingElementOffset.left + $wrappingElement.width())
      },

      initKeyboardScrolling: function () {
        var _this = this;

        this.elementKeydown = function (event) {
          if (document.activeElement === _this.$element[0]) {
            if (_this.vScrollbar)
              _this.vScrollbar.keyScroll(event);
            if (_this.hScrollbar)
              _this.hScrollbar.keyScroll(event);
          }
        }

        this.$element
          .attr('tabindex', '-1')
          .keydown(this.elementKeydown);
      },

      removeKeyboardScrolling: function () {
        this.$element
          .removeAttr('tabindex')
          .unbind("keydown", this.elementKeydown);
      },

      bindEvents: function () {
        if (this.options.onCustomScroll)
          this.$element.on("customScroll", this.options.onCustomScroll);
      }

    }

    var Scrollbar = function (scrollable, sizing) {
      this.scrollable = scrollable;
      this.sizing = sizing
      this.$scrollBar = this.sizing.scrollBar(this.scrollable.$element);
      this.$thumb = this.$scrollBar.find(".thumb");
      this.setScrollPosition(0, 0);
      this.resize();
      this.initMouseMoveScrolling();
      this.initMouseWheelScrolling();
      this.initTouchScrolling();
      this.initMouseClickScrolling();
      this.initWindowResize();
    }

    Scrollbar.prototype = {

      resize: function (keepPosition) {
        this.scrollable.$viewPort.height(this.scrollable.$element.height());
        this.sizing.size(this.scrollable.$viewPort, this.sizing.size(this.scrollable.$element));
        this.viewPortSize = this.sizing.size(this.scrollable.$viewPort);
        this.overviewSize = this.sizing.size(this.scrollable.$overview);
        this.ratio = this.viewPortSize / this.overviewSize;
        this.sizing.size(this.$scrollBar, this.viewPortSize);
        this.thumbSize = this.calculateThumbSize();
        this.sizing.size(this.$thumb, this.thumbSize);
        this.maxThumbPosition = this.calculateMaxThumbPosition();
        this.maxOverviewPosition = this.calculateMaxOverviewPosition();
        this.enabled = (this.overviewSize > this.viewPortSize);
        if (this.scrollPercent === undefined)
          this.scrollPercent = 0.0;
        if (this.enabled)
          this.rescroll(keepPosition);
        else
          this.setScrollPosition(0, 0);
        this.$scrollBar.toggle(this.enabled);
      },

      calculateThumbSize: function () {
        var fixedSize = this.sizing.fixedThumbSize(this.scrollable.options)
        var size;
        if (fixedSize)
          size = fixedSize;
        else
          size = this.ratio * this.viewPortSize
        return Math.max(size, this.sizing.minSize(this.$thumb));
      },

      initMouseMoveScrolling: function () {
        var _this = this;
        this.$thumb.mousedown(function (event) {
          if (_this.enabled)
            _this.startMouseMoveScrolling(event);
        });
        this.documentMouseup = function (event) {
          _this.stopMouseMoveScrolling(event);
        };
        $(document).mouseup(this.documentMouseup);
        this.documentMousemove = function (event) {
          _this.mouseMoveScroll(event);
        };
        $(document).mousemove(this.documentMousemove);
        this.$thumb.click(function (event) {
          event.stopPropagation();
        });
      },

      removeMouseMoveScrolling: function () {
        this.$thumb.unbind();
        $(document).unbind("mouseup", this.documentMouseup);
        $(document).unbind("mousemove", this.documentMousemove);
      },

      initMouseWheelScrolling: function () {
        var _this = this;
        this.scrollable.$element.mousewheel(function (event, delta, deltaX, deltaY) {
          if (_this.enabled) {
            var scrolled = _this.mouseWheelScroll(deltaX, deltaY);
            _this.stopEventConditionally(event, scrolled);
          }
        });
      },

      removeMouseWheelScrolling: function () {
        this.scrollable.$element.unbind("mousewheel");
      },

      initTouchScrolling: function () {
        if (document.addEventListener) {
          var _this = this;
          this.elementTouchstart = function (event) {
            if (_this.enabled)
              _this.startTouchScrolling(event);
          }
          this.scrollable.$element[0].addEventListener("touchstart", this.elementTouchstart);
          this.documentTouchmove = function (event) {
            _this.touchScroll(event);
          }
          document.addEventListener("touchmove", this.documentTouchmove);
          this.elementTouchend = function (event) {
            _this.stopTouchScrolling(event);
          }
          this.scrollable.$element[0].addEventListener("touchend", this.elementTouchend);
        }
      },

      removeTouchScrolling: function () {
        if (document.addEventListener) {
          this.scrollable.$element[0].removeEventListener("touchstart", this.elementTouchstart);
          document.removeEventListener("touchmove", this.documentTouchmove);
          this.scrollable.$element[0].removeEventListener("touchend", this.elementTouchend);
        }
      },

      initMouseClickScrolling: function () {
        var _this = this;
        this.scrollBarClick = function (event) {
          _this.mouseClickScroll(event);
        };
        this.$scrollBar.click(this.scrollBarClick);
      },

      removeMouseClickScrolling: function () {
        this.$scrollBar.unbind("click", this.scrollBarClick);
      },

      initWindowResize: function () {
        if (this.scrollable.options.updateOnWindowResize) {
          var _this = this;
          this.windowResize = function () {
            _this.resize();
          };
          $(window).resize(this.windowResize);
        }
      },

      removeWindowResize: function () {
        $(window).unbind("resize", this.windowResize);
      },

      isKeyScrolling: function (key) {
        return this.keyScrollDelta(key) != null;
      },

      keyScrollDelta: function (key) {
        for (var scrollingKey in this.sizing.scrollingKeys)
          if (scrollingKey == key)
            return this.sizing.scrollingKeys[key](this.viewPortSize);
        return null;
      },

      startMouseMoveScrolling: function (event) {
        this.mouseMoveScrolling = true;
        $("html").addClass("not-selectable");
        this.setUnselectable($("html"), "on");
        this.setScrollEvent(event);
      },

      stopMouseMoveScrolling: function (event) {
        this.mouseMoveScrolling = false;
        $("html").removeClass("not-selectable");
        this.setUnselectable($("html"), null);
      },

      setUnselectable: function (element, value) {
        if (element.attr("unselectable") != value) {
          element.attr("unselectable", value);
          element.find(':not(input)').attr('unselectable', value);
        }
      },

      mouseMoveScroll: function (event) {
        if (this.mouseMoveScrolling) {
          var delta = this.sizing.mouseDelta(this.scrollEvent, event);
          this.scrollThumbBy(delta);
          this.setScrollEvent(event);
        }
      },

      startTouchScrolling: function (event) {
        if (event.touches && event.touches.length == 1) {
          this.setScrollEvent(event.touches[0]);
          this.touchScrolling = true;
          event.stopPropagation();
        }
      },

      touchScroll: function (event) {
        if (this.touchScrolling && event.touches && event.touches.length == 1) {
          var delta = -this.sizing.mouseDelta(this.scrollEvent, event.touches[0]) * this.scrollable.options.swipeSpeed;
          var scrolled = this.scrollOverviewBy(delta);
          if (scrolled)
            this.setScrollEvent(event.touches[0]);
          this.stopEventConditionally(event, scrolled);
        }
      },

      stopTouchScrolling: function (event) {
        this.touchScrolling = false;
        event.stopPropagation();
      },

      mouseWheelScroll: function (deltaX, deltaY) {
        var delta = -this.sizing.wheelDelta(deltaX, deltaY) * this.scrollable.options.wheelSpeed;
        if (delta != 0)
          return this.scrollOverviewBy(delta);
      },

      mouseClickScroll: function (event) {
        var delta = this.viewPortSize - 20;
        if (event["page" + this.sizing.scrollAxis()] < this.$thumb.offset()[this.sizing.offsetComponent()])
        // mouse click over thumb
          delta = -delta;
        this.scrollOverviewBy(delta);
      },

      keyScroll: function (event) {
        var keyDown = event.which;
        if (this.enabled && this.isKeyScrolling(keyDown)) {
          var scrolled = this.scrollOverviewBy(this.keyScrollDelta(keyDown));
          this.stopEventConditionally(event, scrolled);
        }
      },

      scrollThumbBy: function (delta) {
        var thumbPosition = this.thumbPosition();
        thumbPosition += delta;
        thumbPosition = this.positionOrMax(thumbPosition, this.maxThumbPosition);
        var oldScrollPercent = this.scrollPercent;
        this.scrollPercent = thumbPosition / this.maxThumbPosition;
        if (oldScrollPercent != this.scrollPercent) {
          var overviewPosition = (thumbPosition * this.maxOverviewPosition) / this.maxThumbPosition;
          this.setScrollPosition(overviewPosition, thumbPosition);
          this.triggerCustomScroll(oldScrollPercent);
          return true
        }
        else
          return false;
      },

      thumbPosition: function () {
        return this.$thumb.position()[this.sizing.offsetComponent()];
      },

      scrollOverviewBy: function (delta) {
        var overviewPosition = this.overviewPosition() + delta;
        return this.scrollOverviewTo(overviewPosition, false);
      },

      overviewPosition: function () {
        return -this.scrollable.$overview.position()[this.sizing.offsetComponent()];
      },

      scrollOverviewTo: function (overviewPosition, animate) {
        overviewPosition = this.positionOrMax(overviewPosition, this.maxOverviewPosition);
        var oldScrollPercent = this.scrollPercent;
        this.scrollPercent = overviewPosition / this.maxOverviewPosition;
        if (oldScrollPercent != this.scrollPercent) {
          var thumbPosition = this.scrollPercent * this.maxThumbPosition;
          if (animate)
            this.setScrollPositionWithAnimation(overviewPosition, thumbPosition);
          else
            this.setScrollPosition(overviewPosition, thumbPosition);
          this.triggerCustomScroll(oldScrollPercent);
          return true;
        }
        else
          return false;
      },

      positionOrMax: function (p, max) {
        if (p < 0)
          return 0;
        else if (p > max)
          return max;
        else
          return p;
      },

      triggerCustomScroll: function (oldScrollPercent) {
        this.scrollable.$element.trigger("customScroll", {
            scrollAxis: this.sizing.scrollAxis(),
            direction: this.sizing.scrollDirection(oldScrollPercent, this.scrollPercent),
            scrollPercent: this.scrollPercent * 100
          }
        );
      },

      rescroll: function (keepPosition) {
        if (keepPosition) {
          var overviewPosition = this.positionOrMax(this.overviewPosition(), this.maxOverviewPosition);
          this.scrollPercent = overviewPosition / this.maxOverviewPosition;
          var thumbPosition = this.scrollPercent * this.maxThumbPosition;
          this.setScrollPosition(overviewPosition, thumbPosition);
        }
        else {
          var thumbPosition = this.scrollPercent * this.maxThumbPosition;
          var overviewPosition = this.scrollPercent * this.maxOverviewPosition;
          this.setScrollPosition(overviewPosition, thumbPosition);
        }
      },

      setScrollPosition: function (overviewPosition, thumbPosition) {
        this.$thumb.css(this.sizing.offsetComponent(), thumbPosition + "px");
        this.scrollable.$overview.css(this.sizing.offsetComponent(), -overviewPosition + "px");
      },

      setScrollPositionWithAnimation: function (overviewPosition, thumbPosition) {
        var thumbAnimationOpts = {};
        var overviewAnimationOpts = {};
        thumbAnimationOpts[this.sizing.offsetComponent()] = thumbPosition + "px";
        this.$thumb.animate(thumbAnimationOpts, this.scrollable.options.animationSpeed);
        overviewAnimationOpts[this.sizing.offsetComponent()] = -overviewPosition + "px";
        this.scrollable.$overview.animate(overviewAnimationOpts, this.scrollable.options.animationSpeed);
      },

      calculateMaxThumbPosition: function () {
        return Math.max(0, this.sizing.size(this.$scrollBar) - this.thumbSize);
      },

      calculateMaxOverviewPosition: function () {
        return Math.max(0, this.sizing.size(this.scrollable.$overview) - this.sizing.size(this.scrollable.$viewPort));
      },

      setScrollEvent: function (event) {
        var attr = "page" + this.sizing.scrollAxis();
        if (!this.scrollEvent || this.scrollEvent[attr] != event[attr])
          this.scrollEvent = {pageX: event.pageX, pageY: event.pageY};
      },

      scrollToElement: function (element) {
        var $element = $(element);
        if (this.sizing.isInside($element, this.scrollable.$overview) && !this.sizing.isInside($element, this.scrollable.$viewPort)) {
          var elementOffset = $element.offset();
          var overviewOffset = this.scrollable.$overview.offset();
          var viewPortOffset = this.scrollable.$viewPort.offset();
          this.scrollOverviewTo(elementOffset[this.sizing.offsetComponent()] - overviewOffset[this.sizing.offsetComponent()], true);
        }
      },

      remove: function () {
        this.removeMouseMoveScrolling();
        this.removeMouseWheelScrolling();
        this.removeTouchScrolling();
        this.removeMouseClickScrolling();
        this.removeWindowResize();
      },

      stopEventConditionally: function (event, condition) {
        if (condition || this.scrollable.options.preventDefaultScroll) {
          event.preventDefault();
          event.stopPropagation();
        }
      }

    }

    var HSizing = function () {
    }

    HSizing.prototype = {
      size: function ($el, arg) {
        if (arg)
          return $el.width(arg);
        else
          return $el.width();
      },

      minSize: function ($el) {
        return parseInt($el.css("min-width")) || 0;
      },

      fixedThumbSize: function (options) {
        return options.fixedThumbWidth;
      },

      scrollBar: function ($el) {
        return $el.find(".scroll-bar.horizontal");
      },

      mouseDelta: function (event1, event2) {
        return event2.pageX - event1.pageX;
      },

      offsetComponent: function () {
        return "left";
      },

      wheelDelta: function (deltaX, deltaY) {
        return deltaX;
      },

      scrollAxis: function () {
        return "X";
      },

      scrollDirection: function (oldPercent, newPercent) {
        return oldPercent < newPercent ? "right" : "left";
      },

      scrollingKeys: {
        37: function (viewPortSize) {
          return -10; //arrow left
        },
        39: function (viewPortSize) {
          return 10; //arrow right
        }
      },

      isInside: function (element, wrappingElement) {
        var $element = $(element);
        var $wrappingElement = $(wrappingElement);
        var elementOffset = $element.offset();
        var wrappingElementOffset = $wrappingElement.offset();
        return (elementOffset.left >= wrappingElementOffset.left) &&
          (elementOffset.left + $element.width() <= wrappingElementOffset.left + $wrappingElement.width());
      }

    }

    var VSizing = function () {
    }

    VSizing.prototype = {

      size: function ($el, arg) {
        if (arg)
          return $el.height(arg);
        else
          return $el.height();
      },

      minSize: function ($el) {
        return parseInt($el.css("min-height")) || 0;
      },

      fixedThumbSize: function (options) {
        return options.fixedThumbHeight;
      },

      scrollBar: function ($el) {
        return $el.find(".scroll-bar.vertical");
      },

      mouseDelta: function (event1, event2) {
        return event2.pageY - event1.pageY;
      },

      offsetComponent: function () {
        return "top";
      },

      wheelDelta: function (deltaX, deltaY) {
        return deltaY;
      },

      scrollAxis: function () {
        return "Y";
      },

      scrollDirection: function (oldPercent, newPercent) {
        return oldPercent < newPercent ? "down" : "up";
      },

      scrollingKeys: {
        38: function (viewPortSize) {
          return -10; //arrow up
        },
        40: function (viewPortSize) {
          return 10; //arrow down
        },
        33: function (viewPortSize) {
          return -(viewPortSize - 20); //page up
        },
        34: function (viewPortSize) {
          return viewPortSize - 20; //page down
        }
      },

      isInside: function (element, wrappingElement) {
        var $element = $(element);
        var $wrappingElement = $(wrappingElement);
        var elementOffset = $element.offset();
        var wrappingElementOffset = $wrappingElement.offset();
        return (elementOffset.top >= wrappingElementOffset.top) &&
          (elementOffset.top + $element.height() <= wrappingElementOffset.top + $wrappingElement.height());
      }

    }

    return this.each(function () {
      if (options == undefined)
        options = defaultOptions;
      if (typeof(options) == "string") {
        var scrollable = $(this).data("scrollable");
        if (scrollable)
          scrollable[options](args);
      }
      else if (typeof(options) == "object") {
        options = $.extend(defaultOptions, options);
        new Scrollable($(this), options);
      }
      else
        throw "Invalid type of options";
    });

  }
  ;

})
  (jQuery);

(function ($) {

  var types = ['DOMMouseScroll', 'mousewheel'];

  if ($.event.fixHooks) {
    for (var i = types.length; i;) {
      $.event.fixHooks[ types[--i] ] = $.event.mouseHooks;
    }
  }

  $.event.special.mousewheel = {
    setup: function () {
      if (this.addEventListener) {
        for (var i = types.length; i;) {
          this.addEventListener(types[--i], handler, false);
        }
      } else {
        this.onmousewheel = handler;
      }
    },

    teardown: function () {
      if (this.removeEventListener) {
        for (var i = types.length; i;) {
          this.removeEventListener(types[--i], handler, false);
        }
      } else {
        this.onmousewheel = null;
      }
    }
  };

  $.fn.extend({
    mousewheel: function (fn) {
      return fn ? this.bind("mousewheel", fn) : this.trigger("mousewheel");
    },

    unmousewheel: function (fn) {
      return this.unbind("mousewheel", fn);
    }
  });


  function handler(event) {
    var orgEvent = event || window.event, args = [].slice.call(arguments, 1), delta = 0, returnValue = true, deltaX = 0, deltaY = 0;
    event = $.event.fix(orgEvent);
    event.type = "mousewheel";

    // Old school scrollwheel delta
    if (orgEvent.wheelDelta) {
      delta = orgEvent.wheelDelta / 120;
    }
    if (orgEvent.detail) {
      delta = -orgEvent.detail / 3;
    }

    // New school multidimensional scroll (touchpads) deltas
    deltaY = delta;

    // Gecko
    if (orgEvent.axis !== undefined && orgEvent.axis === orgEvent.HORIZONTAL_AXIS) {
      deltaY = 0;
      deltaX = delta;
    }

    // Webkit
    if (orgEvent.wheelDeltaY !== undefined) {
      deltaY = orgEvent.wheelDeltaY / 120;
    }
    if (orgEvent.wheelDeltaX !== undefined) {
      deltaX = orgEvent.wheelDeltaX / 120;
    }

    // Add event and delta to the front of the arguments
    args.unshift(event, delta, deltaX, deltaY);

    return ($.event.dispatch || $.event.handle).apply(this, args);
  }

})(jQuery);

/**
 * Copyright 2014 Google Inc. All rights reserved.
 *
 * Use of this source code is governed by a BSD-style
 * license that can be found in the LICENSE file.
 *
 * @fileoverview Description of this file.
 *
 * A polyfill for HTML Canvas features, including
 * Path2D support.
 */
if (typeof Path2D !== 'function') {
  (function() {

    // Include the SVG path parser.
    parser = (function() {
      /*
       * Generated by PEG.js 0.8.0.
       *
       * http://pegjs.majda.cz/
       */
    
      function peg$subclass(child, parent) {
        function ctor() { this.constructor = child; }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
      }
    
      function SyntaxError(message, expected, found, offset, line, column) {
        this.message  = message;
        this.expected = expected;
        this.found    = found;
        this.offset   = offset;
        this.line     = line;
        this.column   = column;
    
        this.name     = "SyntaxError";
      }
    
      peg$subclass(SyntaxError, Error);
    
      function parse(input) {
        var options = arguments.length > 1 ? arguments[1] : {},
    
            peg$FAILED = {},
    
            peg$startRuleFunctions = { svg_path: peg$parsesvg_path },
            peg$startRuleFunction  = peg$parsesvg_path,
    
            peg$c0 = peg$FAILED,
            peg$c1 = [],
            peg$c2 = null,
            peg$c3 = function(d) { return ops; },
            peg$c4 = /^[Mm]/,
            peg$c5 = { type: "class", value: "[Mm]", description: "[Mm]" },
            peg$c6 = function(ch, args) {
                  var moveCh = ch
                  // If this is the first move cmd then force it to be absolute.
                  if (firstSubPath) {
                    moveCh = 'M';
                    firstSubPath = false;
                  }
                  ops.push({type: 'moveTo', args: makeAbsolute(moveCh, args[0])});
                  for (var i=1; i < args.length; i++) {
                    // The lineTo args are either abs or relative, depending on the
                    // original moveto command.
                    ops.push({type: 'lineTo', args: makeAbsolute(ch, args[i])});
                  }
                },
            peg$c7 = function(one, rest) { return concatSequence(one, rest); },
            peg$c8 = /^[Zz]/,
            peg$c9 = { type: "class", value: "[Zz]", description: "[Zz]" },
            peg$c10 = function() { ops.push({type: 'closePath', args: []}); },
            peg$c11 = /^[Ll]/,
            peg$c12 = { type: "class", value: "[Ll]", description: "[Ll]" },
            peg$c13 = function(ch, args) {
                  for (var i=0; i < args.length; i++) {
                    ops.push({type: 'lineTo', args: makeAbsolute(ch, args[i])});
                  }
                },
            peg$c14 = /^[Hh]/,
            peg$c15 = { type: "class", value: "[Hh]", description: "[Hh]" },
            peg$c16 = function(ch, args) {
                for (var i=0; i < args.length; i++) {
                  ops.push({type: 'lineTo', args: makeAbsoluteFromX(ch, args[i])});
                }
              },
            peg$c17 = /^[Vv]/,
            peg$c18 = { type: "class", value: "[Vv]", description: "[Vv]" },
            peg$c19 = function(ch, args) {
                for (var i=0; i < args.length; i++) {
                  ops.push({type: 'lineTo', args: makeAbsoluteFromY(ch, args[i])});
                }
              },
            peg$c20 = /^[Cc]/,
            peg$c21 = { type: "class", value: "[Cc]", description: "[Cc]" },
            peg$c22 = function(ch, args) {
                for (var i=0; i < args.length; i++) {
                  ops.push({type: 'bezierCurveTo', args: makeAbsoluteMultiple(ch, args[i])});
                }
              },
            peg$c23 = function(cp1, cp2, last) { return cp1.concat(cp2, last); },
            peg$c24 = /^[Ss]/,
            peg$c25 = { type: "class", value: "[Ss]", description: "[Ss]" },
            peg$c26 = function(ch, args) {
                for (var i=0; i < args.length; i++) {
                  ops.push({type: 'bezierCurveTo', args: makeReflected().concat(makeAbsoluteMultiple(ch, args[i]))});
                }
              },
            peg$c27 = function(cp1, last) { return cp1.concat(last); },
            peg$c28 = /^[Qq]/,
            peg$c29 = { type: "class", value: "[Qq]", description: "[Qq]" },
            peg$c30 = function(ch, args) {
                for (var i=0; i < args.length; i++) {
                  ops.push({type: 'quadraticCurveTo', args: makeAbsoluteMultiple(ch, args[i])});
                }
              },
            peg$c31 = /^[Tt]/,
            peg$c32 = { type: "class", value: "[Tt]", description: "[Tt]" },
            peg$c33 = function(ch, args) {
                for (var i=0; i < args.length; i++) {
                  var reflected = makeReflected();
                  ops.push({type: 'quadraticCurveTo', args: reflected.concat(makeAbsoluteMultiple(ch, args[i]))});
                  lastControl = reflected.slice(0);
                }
              },
            peg$c34 = /^[Aa]/,
            peg$c35 = { type: "class", value: "[Aa]", description: "[Aa]" },
            peg$c36 = function(ch, args) {
                for (var i=0; i < args.length; i++) {
                  var x1 = [lastCoord.slice()];
                  var x2 = [makeAbsolute(ch, args[i].slice(-2))];
                  absArgs = x1.concat(args[i].slice(0, -2), x2);
                  ellipseFromEllipticalArc.apply(this, absArgs);
                }
              },
            peg$c37 = function(rx, ry, xrot, large, sweep, last) { return [parseFloat(rx), parseFloat(ry), parseFloat(xrot.join('')), parseInt(large), parseInt(sweep), last[0], last[1]]; },
            peg$c38 = function(x, y) { return [x, y] },
            peg$c39 = function(number) { return parseFloat(number.join('')) },
            peg$c40 = "0",
            peg$c41 = { type: "literal", value: "0", description: "\"0\"" },
            peg$c42 = "1",
            peg$c43 = { type: "literal", value: "1", description: "\"1\"" },
            peg$c44 = ",",
            peg$c45 = { type: "literal", value: ",", description: "\",\"" },
            peg$c46 = ".",
            peg$c47 = { type: "literal", value: ".", description: "\".\"" },
            peg$c48 = /^[eE]/,
            peg$c49 = { type: "class", value: "[eE]", description: "[eE]" },
            peg$c50 = "+",
            peg$c51 = { type: "literal", value: "+", description: "\"+\"" },
            peg$c52 = "-",
            peg$c53 = { type: "literal", value: "-", description: "\"-\"" },
            peg$c54 = /^[0-9]/,
            peg$c55 = { type: "class", value: "[0-9]", description: "[0-9]" },
            peg$c56 = function(digits) { return digits.join('') },
            peg$c57 = /^[ \t\n\r]/,
            peg$c58 = { type: "class", value: "[ \\t\\n\\r]", description: "[ \\t\\n\\r]" },
    
            peg$currPos          = 0,
            peg$reportedPos      = 0,
            peg$cachedPos        = 0,
            peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
            peg$maxFailPos       = 0,
            peg$maxFailExpected  = [],
            peg$silentFails      = 0,
    
            peg$result;
    
        if ("startRule" in options) {
          if (!(options.startRule in peg$startRuleFunctions)) {
            throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
          }
    
          peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
        }
    
        function text() {
          return input.substring(peg$reportedPos, peg$currPos);
        }
    
        function offset() {
          return peg$reportedPos;
        }
    
        function line() {
          return peg$computePosDetails(peg$reportedPos).line;
        }
    
        function column() {
          return peg$computePosDetails(peg$reportedPos).column;
        }
    
        function expected(description) {
          throw peg$buildException(
            null,
            [{ type: "other", description: description }],
            peg$reportedPos
          );
        }
    
        function error(message) {
          throw peg$buildException(message, null, peg$reportedPos);
        }
    
        function peg$computePosDetails(pos) {
          function advance(details, startPos, endPos) {
            var p, ch;
    
            for (p = startPos; p < endPos; p++) {
              ch = input.charAt(p);
              if (ch === "\n") {
                if (!details.seenCR) { details.line++; }
                details.column = 1;
                details.seenCR = false;
              } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
                details.line++;
                details.column = 1;
                details.seenCR = true;
              } else {
                details.column++;
                details.seenCR = false;
              }
            }
          }
    
          if (peg$cachedPos !== pos) {
            if (peg$cachedPos > pos) {
              peg$cachedPos = 0;
              peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
            }
            advance(peg$cachedPosDetails, peg$cachedPos, pos);
            peg$cachedPos = pos;
          }
    
          return peg$cachedPosDetails;
        }
    
        function peg$fail(expected) {
          if (peg$currPos < peg$maxFailPos) { return; }
    
          if (peg$currPos > peg$maxFailPos) {
            peg$maxFailPos = peg$currPos;
            peg$maxFailExpected = [];
          }
    
          peg$maxFailExpected.push(expected);
        }
    
        function peg$buildException(message, expected, pos) {
          function cleanupExpected(expected) {
            var i = 1;
    
            expected.sort(function(a, b) {
              if (a.description < b.description) {
                return -1;
              } else if (a.description > b.description) {
                return 1;
              } else {
                return 0;
              }
            });
    
            while (i < expected.length) {
              if (expected[i - 1] === expected[i]) {
                expected.splice(i, 1);
              } else {
                i++;
              }
            }
          }
    
          function buildMessage(expected, found) {
            function stringEscape(s) {
              function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }
    
              return s
                .replace(/\\/g,   '\\\\')
                .replace(/"/g,    '\\"')
                .replace(/\x08/g, '\\b')
                .replace(/\t/g,   '\\t')
                .replace(/\n/g,   '\\n')
                .replace(/\f/g,   '\\f')
                .replace(/\r/g,   '\\r')
                .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
                .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
                .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
                .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
            }
    
            var expectedDescs = new Array(expected.length),
                expectedDesc, foundDesc, i;
    
            for (i = 0; i < expected.length; i++) {
              expectedDescs[i] = expected[i].description;
            }
    
            expectedDesc = expected.length > 1
              ? expectedDescs.slice(0, -1).join(", ")
                  + " or "
                  + expectedDescs[expected.length - 1]
              : expectedDescs[0];
    
            foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";
    
            return "Expected " + expectedDesc + " but " + foundDesc + " found.";
          }
    
          var posDetails = peg$computePosDetails(pos),
              found      = pos < input.length ? input.charAt(pos) : null;
    
          if (expected !== null) {
            cleanupExpected(expected);
          }
    
          return new SyntaxError(
            message !== null ? message : buildMessage(expected, found),
            expected,
            found,
            pos,
            posDetails.line,
            posDetails.column
          );
        }
    
        function peg$parsesvg_path() {
          var s0, s1, s2, s3, s4;
    
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parsewsp();
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parsewsp();
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parsemoveTo_drawTo_commandGroups();
            if (s2 === peg$FAILED) {
              s2 = peg$c2;
            }
            if (s2 !== peg$FAILED) {
              s3 = [];
              s4 = peg$parsewsp();
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$parsewsp();
              }
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c3(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parsemoveTo_drawTo_commandGroups() {
          var s0, s1, s2, s3, s4;
    
          s0 = peg$currPos;
          s1 = peg$parsemoveTo_drawTo_commandGroup();
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            s3 = [];
            s4 = peg$parsewsp();
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parsewsp();
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parsemoveTo_drawTo_commandGroups();
              if (s4 !== peg$FAILED) {
                s3 = [s3, s4];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
            if (s2 === peg$FAILED) {
              s2 = peg$c2;
            }
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parsemoveTo_drawTo_commandGroup() {
          var s0, s1, s2, s3, s4;
    
          s0 = peg$currPos;
          s1 = peg$parsemoveto();
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            s3 = [];
            s4 = peg$parsewsp();
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parsewsp();
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parsedrawto_commands();
              if (s4 !== peg$FAILED) {
                s3 = [s3, s4];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
            if (s2 === peg$FAILED) {
              s2 = peg$c2;
            }
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parsedrawto_commands() {
          var s0, s1, s2, s3, s4;
    
          s0 = peg$currPos;
          s1 = peg$parsedrawto_command();
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            s3 = [];
            s4 = peg$parsewsp();
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parsewsp();
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parsedrawto_commands();
              if (s4 !== peg$FAILED) {
                s3 = [s3, s4];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
            if (s2 === peg$FAILED) {
              s2 = peg$c2;
            }
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parsedrawto_command() {
          var s0;
    
          s0 = peg$parseclosepath();
          if (s0 === peg$FAILED) {
            s0 = peg$parselineto();
            if (s0 === peg$FAILED) {
              s0 = peg$parsehorizontal_lineto();
              if (s0 === peg$FAILED) {
                s0 = peg$parsevertical_lineto();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsecurveto();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parsesmooth_curveto();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parsequadratic_bezier_curveto();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parsesmooth_quadratic_bezier_curveto();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseelliptical_arc();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
    
          return s0;
        }
    
        function peg$parsemoveto() {
          var s0, s1, s2, s3;
    
          s0 = peg$currPos;
          if (peg$c4.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c5); }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parsewsp();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parsewsp();
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsemoveto_argument_sequence();
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c6(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parsemoveto_argument_sequence() {
          var s0, s1, s2, s3, s4;
    
          s0 = peg$currPos;
          s1 = peg$parsecoordinate_pair();
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parsecomma_wsp();
            if (s3 === peg$FAILED) {
              s3 = peg$c2;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parselineto_argument_sequence();
              if (s4 !== peg$FAILED) {
                s3 = [s3, s4];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
            if (s2 === peg$FAILED) {
              s2 = peg$c2;
            }
            if (s2 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c7(s1, s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parseclosepath() {
          var s0, s1;
    
          s0 = peg$currPos;
          if (peg$c8.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c9); }
          }
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c10();
          }
          s0 = s1;
    
          return s0;
        }
    
        function peg$parselineto() {
          var s0, s1, s2, s3;
    
          s0 = peg$currPos;
          if (peg$c11.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c12); }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parsewsp();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parsewsp();
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parselineto_argument_sequence();
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c13(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parselineto_argument_sequence() {
          var s0, s1, s2, s3, s4;
    
          s0 = peg$currPos;
          s1 = peg$parsecoordinate_pair();
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parsecomma_wsp();
            if (s3 === peg$FAILED) {
              s3 = peg$c2;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parselineto_argument_sequence();
              if (s4 !== peg$FAILED) {
                s3 = [s3, s4];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
            if (s2 === peg$FAILED) {
              s2 = peg$c2;
            }
            if (s2 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c7(s1, s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parsehorizontal_lineto() {
          var s0, s1, s2, s3;
    
          s0 = peg$currPos;
          if (peg$c14.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c15); }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parsewsp();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parsewsp();
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsecoordinate_sequence();
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c16(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parsecoordinate_sequence() {
          var s0, s1, s2, s3, s4;
    
          s0 = peg$currPos;
          s1 = peg$parsecoordinate();
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parsecomma_wsp();
            if (s3 === peg$FAILED) {
              s3 = peg$c2;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parsecoordinate_sequence();
              if (s4 !== peg$FAILED) {
                s3 = [s3, s4];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
            if (s2 === peg$FAILED) {
              s2 = peg$c2;
            }
            if (s2 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c7(s1, s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parsevertical_lineto() {
          var s0, s1, s2, s3;
    
          s0 = peg$currPos;
          if (peg$c17.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c18); }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parsewsp();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parsewsp();
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsecoordinate_sequence();
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c19(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parsecurveto() {
          var s0, s1, s2, s3;
    
          s0 = peg$currPos;
          if (peg$c20.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c21); }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parsewsp();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parsewsp();
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsecurveto_argument_sequence();
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c22(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parsecurveto_argument_sequence() {
          var s0, s1, s2, s3, s4;
    
          s0 = peg$currPos;
          s1 = peg$parsecurveto_argument();
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parsecomma_wsp();
            if (s3 === peg$FAILED) {
              s3 = peg$c2;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parsecurveto_argument_sequence();
              if (s4 !== peg$FAILED) {
                s3 = [s3, s4];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
            if (s2 === peg$FAILED) {
              s2 = peg$c2;
            }
            if (s2 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c7(s1, s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parsecurveto_argument() {
          var s0, s1, s2, s3, s4, s5;
    
          s0 = peg$currPos;
          s1 = peg$parsecoordinate_pair();
          if (s1 !== peg$FAILED) {
            s2 = peg$parsecomma_wsp();
            if (s2 === peg$FAILED) {
              s2 = peg$c2;
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsecoordinate_pair();
              if (s3 !== peg$FAILED) {
                s4 = peg$parsecomma_wsp();
                if (s4 === peg$FAILED) {
                  s4 = peg$c2;
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$parsecoordinate_pair();
                  if (s5 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c23(s1, s3, s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parsesmooth_curveto() {
          var s0, s1, s2, s3;
    
          s0 = peg$currPos;
          if (peg$c24.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c25); }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parsewsp();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parsewsp();
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsesmooth_curveto_argument_sequence();
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c26(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parsesmooth_curveto_argument_sequence() {
          var s0, s1, s2, s3, s4;
    
          s0 = peg$currPos;
          s1 = peg$parsesmooth_curveto_argument();
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parsecomma_wsp();
            if (s3 === peg$FAILED) {
              s3 = peg$c2;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parsesmooth_curveto_argument_sequence();
              if (s4 !== peg$FAILED) {
                s3 = [s3, s4];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
            if (s2 === peg$FAILED) {
              s2 = peg$c2;
            }
            if (s2 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c7(s1, s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parsesmooth_curveto_argument() {
          var s0, s1, s2, s3;
    
          s0 = peg$currPos;
          s1 = peg$parsecoordinate_pair();
          if (s1 !== peg$FAILED) {
            s2 = peg$parsecomma_wsp();
            if (s2 === peg$FAILED) {
              s2 = peg$c2;
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsecoordinate_pair();
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c27(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parsequadratic_bezier_curveto() {
          var s0, s1, s2, s3;
    
          s0 = peg$currPos;
          if (peg$c28.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c29); }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parsewsp();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parsewsp();
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsequadratic_bezier_curveto_argument_sequence();
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c30(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parsequadratic_bezier_curveto_argument_sequence() {
          var s0, s1, s2, s3, s4;
    
          s0 = peg$currPos;
          s1 = peg$parsequadratic_bezier_curveto_argument();
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parsecomma_wsp();
            if (s3 === peg$FAILED) {
              s3 = peg$c2;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parsequadratic_bezier_curveto_argument_sequence();
              if (s4 !== peg$FAILED) {
                s3 = [s3, s4];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
            if (s2 === peg$FAILED) {
              s2 = peg$c2;
            }
            if (s2 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c7(s1, s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parsequadratic_bezier_curveto_argument() {
          var s0, s1, s2, s3;
    
          s0 = peg$currPos;
          s1 = peg$parsecoordinate_pair();
          if (s1 !== peg$FAILED) {
            s2 = peg$parsecomma_wsp();
            if (s2 === peg$FAILED) {
              s2 = peg$c2;
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsecoordinate_pair();
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c27(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parsesmooth_quadratic_bezier_curveto() {
          var s0, s1, s2, s3;
    
          s0 = peg$currPos;
          if (peg$c31.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c32); }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parsewsp();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parsewsp();
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsesmooth_quadratic_bezier_curveto_argument_sequence();
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c33(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parsesmooth_quadratic_bezier_curveto_argument_sequence() {
          var s0, s1, s2, s3, s4;
    
          s0 = peg$currPos;
          s1 = peg$parsecoordinate_pair();
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parsecomma_wsp();
            if (s3 === peg$FAILED) {
              s3 = peg$c2;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parsesmooth_quadratic_bezier_curveto_argument_sequence();
              if (s4 !== peg$FAILED) {
                s3 = [s3, s4];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
            if (s2 === peg$FAILED) {
              s2 = peg$c2;
            }
            if (s2 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c7(s1, s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parseelliptical_arc() {
          var s0, s1, s2, s3;
    
          s0 = peg$currPos;
          if (peg$c34.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c35); }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parsewsp();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parsewsp();
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parseelliptical_arc_argument_sequence();
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c36(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parseelliptical_arc_argument_sequence() {
          var s0, s1, s2, s3, s4;
    
          s0 = peg$currPos;
          s1 = peg$parseelliptical_arc_argument();
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parsecomma_wsp();
            if (s3 === peg$FAILED) {
              s3 = peg$c2;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseelliptical_arc_argument_sequence();
              if (s4 !== peg$FAILED) {
                s3 = [s3, s4];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
            if (s2 === peg$FAILED) {
              s2 = peg$c2;
            }
            if (s2 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c7(s1, s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parseelliptical_arc_argument() {
          var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;
    
          s0 = peg$currPos;
          s1 = peg$parsenonnegative_number();
          if (s1 !== peg$FAILED) {
            s2 = peg$parsecomma_wsp();
            if (s2 === peg$FAILED) {
              s2 = peg$c2;
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsenonnegative_number();
              if (s3 !== peg$FAILED) {
                s4 = peg$parsecomma_wsp();
                if (s4 === peg$FAILED) {
                  s4 = peg$c2;
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$parsenumber();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parsecomma_wsp();
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parseflag();
                      if (s7 !== peg$FAILED) {
                        s8 = peg$parsecomma_wsp();
                        if (s8 === peg$FAILED) {
                          s8 = peg$c2;
                        }
                        if (s8 !== peg$FAILED) {
                          s9 = peg$parseflag();
                          if (s9 !== peg$FAILED) {
                            s10 = peg$parsecomma_wsp();
                            if (s10 === peg$FAILED) {
                              s10 = peg$c2;
                            }
                            if (s10 !== peg$FAILED) {
                              s11 = peg$parsecoordinate_pair();
                              if (s11 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c37(s1, s3, s5, s7, s9, s11);
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parsecoordinate_pair() {
          var s0, s1, s2, s3;
    
          s0 = peg$currPos;
          s1 = peg$parsecoordinate();
          if (s1 !== peg$FAILED) {
            s2 = peg$parsecomma_wsp();
            if (s2 === peg$FAILED) {
              s2 = peg$c2;
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsecoordinate();
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c38(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parsecoordinate() {
          var s0, s1;
    
          s0 = peg$currPos;
          s1 = peg$parsenumber();
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c39(s1);
          }
          s0 = s1;
    
          return s0;
        }
    
        function peg$parsenonnegative_number() {
          var s0;
    
          s0 = peg$parsefloating_point_constant();
          if (s0 === peg$FAILED) {
            s0 = peg$parsedigit_sequence();
          }
    
          return s0;
        }
    
        function peg$parsenumber() {
          var s0, s1, s2;
    
          s0 = peg$currPos;
          s1 = peg$parsesign();
          if (s1 === peg$FAILED) {
            s1 = peg$c2;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parsefloating_point_constant();
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsesign();
            if (s1 === peg$FAILED) {
              s1 = peg$c2;
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parsedigit_sequence();
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          }
    
          return s0;
        }
    
        function peg$parseflag() {
          var s0;
    
          if (input.charCodeAt(peg$currPos) === 48) {
            s0 = peg$c40;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c41); }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 49) {
              s0 = peg$c42;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c43); }
            }
          }
    
          return s0;
        }
    
        function peg$parsecomma_wsp() {
          var s0, s1, s2, s3, s4;
    
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parsewsp();
          if (s2 !== peg$FAILED) {
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$parsewsp();
            }
          } else {
            s1 = peg$c0;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parsecomma();
            if (s2 === peg$FAILED) {
              s2 = peg$c2;
            }
            if (s2 !== peg$FAILED) {
              s3 = [];
              s4 = peg$parsewsp();
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$parsewsp();
              }
              if (s3 !== peg$FAILED) {
                s1 = [s1, s2, s3];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsecomma();
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$parsewsp();
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parsewsp();
              }
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          }
    
          return s0;
        }
    
        function peg$parsecomma() {
          var s0;
    
          if (input.charCodeAt(peg$currPos) === 44) {
            s0 = peg$c44;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c45); }
          }
    
          return s0;
        }
    
        function peg$parsefloating_point_constant() {
          var s0, s1, s2;
    
          s0 = peg$currPos;
          s1 = peg$parsefractional_constant();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseexponent();
            if (s2 === peg$FAILED) {
              s2 = peg$c2;
            }
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsedigit_sequence();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseexponent();
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          }
    
          return s0;
        }
    
        function peg$parsefractional_constant() {
          var s0, s1, s2, s3;
    
          s0 = peg$currPos;
          s1 = peg$parsedigit_sequence();
          if (s1 === peg$FAILED) {
            s1 = peg$c2;
          }
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 46) {
              s2 = peg$c46;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c47); }
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsedigit_sequence();
              if (s3 !== peg$FAILED) {
                s1 = [s1, s2, s3];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsedigit_sequence();
            if (s1 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 46) {
                s2 = peg$c46;
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c47); }
              }
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          }
    
          return s0;
        }
    
        function peg$parseexponent() {
          var s0, s1, s2, s3;
    
          s0 = peg$currPos;
          if (peg$c48.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c49); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parsesign();
            if (s2 === peg$FAILED) {
              s2 = peg$c2;
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsedigit_sequence();
              if (s3 !== peg$FAILED) {
                s1 = [s1, s2, s3];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parsesign() {
          var s0;
    
          if (input.charCodeAt(peg$currPos) === 43) {
            s0 = peg$c50;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c51); }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 45) {
              s0 = peg$c52;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c53); }
            }
          }
    
          return s0;
        }
    
        function peg$parsedigit_sequence() {
          var s0, s1, s2;
    
          s0 = peg$currPos;
          s1 = [];
          if (peg$c54.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c55); }
          }
          if (s2 !== peg$FAILED) {
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              if (peg$c54.test(input.charAt(peg$currPos))) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c55); }
              }
            }
          } else {
            s1 = peg$c0;
          }
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c56(s1);
          }
          s0 = s1;
    
          return s0;
        }
    
        function peg$parsewsp() {
          var s0;
    
          if (peg$c57.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c58); }
          }
    
          return s0;
        }
    
    
          // The last coordinate we are at in the path. In absolute coords.
          var lastCoord = [0, 0];
          // The last control point we encountered in the path. In absolute coords.
          var lastControl = [0, 0];
          // The list of operations we've parsed so far.
          var ops = [];
          // Have we parsed the first sub-path yet?
          var firstSubPath = true;
          // The letter of the last parsed command.
          var lastCh = '';
    
          // Convert a position into an absolute position.
          function makeAbsolute(c, coord) {
            if ('mlazhvcsqt'.indexOf(c) === -1) {
              lastCoord = coord;
            } else {
              lastCoord[0] += coord[0];
              lastCoord[1] += coord[1];
            }
            lastCh = c;
            return lastCoord.slice(0);
          }
    
          // Convert a sequence of coordinates into absolute coordinates.
          //
          // For arguments that take multiple coord pairs, such as bezier.
          function makeAbsoluteMultiple(c, seq) {
            var r = [];
            var lastPosCopy = lastCoord.slice(0);
            for (var i=0; i < seq.length; i+=2) {
              // Only the last point should update lastCoord.
              lastCoord = lastPosCopy.slice(0);
              var coord = makeAbsolute(c, seq.slice(i, i+2));
              r = r.concat(coord);
              // Record the last control point, it might be needed for
              // shorthand operations.
              if (i == seq.length-4) {
                lastControl = coord.slice(0);
              }
            }
            return r;
          }
    
          // Find the reflection of the last control point over
          // the last postion in the path.
          function makeReflected() {
            if ('CcSsQqTt'.indexOf(lastCh) == -1) {
              lastControl = lastCoord.slice(0);
            }
            // reflected = 2*lastCoord - lastControl
            // Note the result is absolute, not relative.
            var r = [0, 0];
            r[0] = 2*lastCoord[0] - lastControl[0];
            r[1] = 2*lastCoord[1] - lastControl[1];
            return r;
          }
    
          function makeAbsoluteFromX(c, x) {
            var coord = [x, 0];
            if (c == 'H') {
              coord[1] = lastCoord[1];
            }
            return makeAbsolute(c, coord);
          }
    
          function makeAbsoluteFromY(c, y) {
            var coord = [0, y];
            if (c == 'V') {
              coord[0] = lastCoord[0];
            }
            return makeAbsolute(c, coord);
          }
    
          function concatSequence(one, rest) {
            var r = [one];
            if (rest && rest.length > 1) {
              var rem = rest[1];
              for (var i = 0; i < rem.length; i++) {
                r.push(rem[i]);
              }
            }
            return r;
          }
    
          function mag(v) {
            return Math.sqrt(Math.pow(v[0], 2) + Math.pow(v[1], 2));
          }
    
          function dot(u, v) {
            return (u[0]*v[0] + u[1]*v[1]);
          }
    
          function ratio(u, v) {
            return dot(u,v) / (mag(u)*mag(v))
          }
    
          function angle(u, v) {
            var sign = 1.0;
            if ((u[0]*v[1] - u[1]*v[0]) < 0) {
              sign = -1.0;
            }
            return sign * Math.acos(ratio(u,v));
          }
    
          function rotClockwise(v, angle) {
            var cost = Math.cos(angle);
            var sint = Math.sin(angle);
            return [cost*v[0] + sint*v[1], -1 * sint*v[0] + cost*v[1]];
          }
    
          function rotCounterClockwise(v, angle) {
            var cost = Math.cos(angle);
            var sint = Math.sin(angle);
            return [cost*v[0] - sint*v[1], sint*v[0] + cost*v[1]];
          }
    
          function midPoint(u, v) {
            return [(u[0] - v[0])/2.0, (u[1] - v[1])/2.0];
          }
    
          function meanVec(u, v) {
            return [(u[0] + v[0])/2.0, (u[1] + v[1])/2.0];
          }
    
          function pointMul(u, v) {
            return [u[0]*v[0], u[1]*v[1]];
          }
    
          function scale(c, v) {
            return [c*v[0], c*v[1]];
          }
    
          function sum(u, v) {
            return [u[0] + v[0], u[1] + v[1]];
          }
    
          // Convert an SVG elliptical arc to a series of canvas commands.
          //
          // x1, x2: start and stop coordinates of the ellipse.
          // rx, ry: radii of the ellipse.
          // phi: rotation of the ellipse.
          // fA: large arc flag.
          // fS: sweep flag.
          function ellipseFromEllipticalArc(x1, rx, ry, phi, fA, fS, x2) {
            // Convert from endpoint to center parametrization, as detailed in:
            //   http://www.w3.org/TR/SVG/implnote.html#ArcImplementationNotes
            if (rx == 0 || ry == 0) {
              ops.push({type: 'lineTo', args: x2});
              return;
            }
            var phi = phi * (Math.PI / 180.0);
            rx = Math.abs(rx);
            ry = Math.abs(ry);
            var xPrime = rotClockwise(midPoint(x1, x2), phi);                // F.6.5.1
            var xPrime2 = pointMul(xPrime, xPrime);
            var rx2 = Math.pow(rx, 2);
            var ry2 = Math.pow(ry, 2);
    
            var lambda = Math.sqrt(xPrime2[0]/rx2 + xPrime2[1]/ry2);
            if (lambda > 1) {
              rx *= lambda;
              ry *= lambda;
              rx2 = Math.pow(rx, 2);
              ry2 = Math.pow(ry, 2);
            }
    
            var factor = Math.sqrt((rx2*ry2 - rx2*xPrime2[1] - ry2*xPrime2[0]) /
              (rx2*xPrime2[1] + ry2*xPrime2[0]));
            if (fA == fS) {
              factor *= -1.0;
            }
            var cPrime = scale(factor, [rx*xPrime[1]/ry, -ry*xPrime[0]/rx]); // F.6.5.2
            var c = sum(rotCounterClockwise(cPrime, phi), meanVec(x1, x2));  // F.6.5.3
            var x1UnitVector = [(xPrime[0] - cPrime[0])/rx, (xPrime[1] - cPrime[1])/ry];
            var x2UnitVector = [(-1.0*xPrime[0] - cPrime[0])/rx, (-1.0*xPrime[1] - cPrime[1])/ry];
            var theta = angle([1, 0], x1UnitVector);                         // F.6.5.5
            var deltaTheta = angle(x1UnitVector, x2UnitVector);              // F.6.5.6
            var start = theta;
            var end = theta+deltaTheta;
            ops.push(
              {type: 'save', args: []},
              {type: 'translate', args: [c[0], c[1]]},
              {type: 'rotate', args: [phi]},
              {type: 'scale', args: [rx, ry]},
              {type: 'arc', args: [0, 0, 1, start, end, 1-fS]},
              {type: 'restore', args: []}
              );
          }
    
    
        peg$result = peg$startRuleFunction();
    
        if (peg$result !== peg$FAILED && peg$currPos === input.length) {
          return peg$result;
        } else {
          if (peg$result !== peg$FAILED && peg$currPos < input.length) {
            peg$fail({ type: "end", description: "end of input" });
          }
    
          throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
        }
      }
    
      return {
        SyntaxError: SyntaxError,
        parse:       parse
      };
    })();

    function Path_(arg) {
      this.ops_ = [];
      if (arg == undefined) {
        return;
      }
      if (typeof arg == 'string') {
        try {
          this.ops_ = parser.parse(arg);
        } catch(e) {
          // Treat an invalid SVG path as an empty path.
        }
      } else if (arg.hasOwnProperty('ops_')) {
        this.ops_ = arg.ops_.slice(0);
      } else {
        throw 'Error: ' + typeof arg + 'is not a valid argument to Path';
      }
    };

    // TODO(jcgregorio) test for arcTo and implement via something.

    if (CanvasRenderingContext2D.prototype.ellipse == undefined) {
      CanvasRenderingContext2D.prototype.ellipse = function(x, y, radiusX, radiusY, rotation, startAngle, endAngle, antiClockwise) {
        this.save();
        this.translate(x, y);
        this.rotate(rotation);
        this.scale(radiusX, radiusY);
        this.arc(0, 0, 1, startAngle, endAngle, antiClockwise);
        this.restore();
      }
    }

    // Path methods that map simply to the CanvasRenderingContext2D.
    var simple_mapping = [
      'closePath',
      'moveTo',
      'lineTo',
      'quadraticCurveTo',
      'bezierCurveTo',
      'rect',
      'arc',
      'arcTo',
      'ellipse',
      'isPointInPath',
      'isPointInStroke',
      ];

    function createFunction(name) {
      return function() {
        this.ops_.push({type: name, args: Array.prototype.slice.call(arguments, 0)});
      };
    }

    // Add simple_mapping methods to Path2D.
    for (var i=0; i<simple_mapping.length; i++) {
      var name = simple_mapping[i];
      Path_.prototype[name] = createFunction(name);
    }

    Path_.prototype['addPath'] = function(path, tr) {
      var hasTx = false;
      if (tr
          && tr.hasOwnProperty('a')
          && tr.hasOwnProperty('b')
          && tr.hasOwnProperty('c')
          && tr.hasOwnProperty('d')
          && tr.hasOwnProperty('e')
          && tr.hasOwnProperty('f')) {
        hasTx = true;
        this.ops_.push({type: 'save', args: []});
        this.ops_.push({type: 'transform', args: [tr.a, tr.b, tr.c, tr.d, tr.e, tr.f]});
      }
      this.ops_ = this.ops_.concat(path.ops_);
      if (hasTx) {
        this.ops_.push({type: 'restore', args: []});
      }
    }

    original_fill = CanvasRenderingContext2D.prototype.fill;
    original_stroke = CanvasRenderingContext2D.prototype.stroke;
    original_clip = CanvasRenderingContext2D.prototype.clip;
    original_is_point_in_path = CanvasRenderingContext2D.prototype.isPointInPath;
    original_is_point_in_stroke = CanvasRenderingContext2D.prototype.isPointInStroke;

    // Replace methods on CanvasRenderingContext2D with ones that understand Path2D.
    CanvasRenderingContext2D.prototype.fill = function(arg) {
      if (arg instanceof Path_) {
        this.beginPath();
        for (var i = 0, len = arg.ops_.length; i < len; i++) {
          var op = arg.ops_[i];
          CanvasRenderingContext2D.prototype[op.type].apply(this, op.args);
        }
        original_fill.apply(this, Array.prototype.slice.call(arguments, 1));
      } else {
        original_fill.apply(this, arguments);
      }
    }

    CanvasRenderingContext2D.prototype.stroke = function(arg) {
      if (arg instanceof Path_) {
        this.beginPath();
        for (var i = 0, len = arg.ops_.length; i < len; i++) {
          var op = arg.ops_[i];
          CanvasRenderingContext2D.prototype[op.type].apply(this, op.args);
        }
        original_stroke.call(this);
      } else {
        original_stroke.call(this);
      }
    }

    CanvasRenderingContext2D.prototype.clip = function(arg) {
      if (arg instanceof Path_) {
        // Note that we don't save and restore the context state, since the
        // clip region is part of the state. Not really a problem since the
        // HTML 5 spec doesn't say that clip(path) doesn't affect the current
        // path.
        this.beginPath();
        for (var i = 0, len = arg.ops_.length; i < len; i++) {
          var op = arg.ops_[i];
          CanvasRenderingContext2D.prototype[op.type].apply(this, op.args);
        }
        original_clip.apply(this, Array.prototype.slice.call(arguments, 1));
      } else {
        original_clip.apply(this, arguments);
      }
    }

    CanvasRenderingContext2D.prototype.isPointInPath = function(arg) {
      if (arg instanceof Path_) {
        this.beginPath();
        for (var i = 0, len = arg.ops_.length; i < len; i++) {
          var op = arg.ops_[i];
          CanvasRenderingContext2D.prototype[op.type].apply(this, op.args);
        }
        return original_is_point_in_path.apply(this, Array.prototype.slice.call(arguments, 1));
      } else {
        return original_is_point_in_path.apply(this, arguments);
      }
    }
    CanvasRenderingContext2D.prototype.isPointInStroke = function(arg) {
      if (arg instanceof Path_) {
        this.beginPath();
        for (var i = 0, len = arg.ops_.length; i < len; i++) {
          var op = arg.ops_[i];
          CanvasRenderingContext2D.prototype[op.type].apply(this, op.args);
        }
        return original_is_point_in_stroke.apply(this, Array.prototype.slice.call(arguments, 1));
      } else {
        return original_is_point_in_stroke.apply(this, arguments);
      }
    }

    // Set up externs.
    Path2D = Path_;
  })();
}

// ┌────────────────────────────────────────────────────────────────────┐ \\
// │ Raphaël 2.1.4 - JavaScript Vector Library                          │ \\
// ├────────────────────────────────────────────────────────────────────┤ \\
// │ Copyright © 2008-2012 Dmitry Baranovskiy (http://raphaeljs.com)    │ \\
// │ Copyright © 2008-2012 Sencha Labs (http://sencha.com)              │ \\
// ├────────────────────────────────────────────────────────────────────┤ \\
// │ Licensed under the MIT (http://raphaeljs.com/license.html) license.│ \\
// └────────────────────────────────────────────────────────────────────┘ \\
// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ┌────────────────────────────────────────────────────────────┐ \\
// │ Eve 0.4.2 - JavaScript Events Library                      │ \\
// ├────────────────────────────────────────────────────────────┤ \\
// │ Author Dmitry Baranovskiy (http://dmitry.baranovskiy.com/) │ \\
// └────────────────────────────────────────────────────────────┘ \\

(function (glob) {
    var version = "0.4.2",
        has = "hasOwnProperty",
        separator = /[\.\/]/,
        wildcard = "*",
        fun = function () {},
        numsort = function (a, b) {
            return a - b;
        },
        current_event,
        stop,
        events = {n: {}},
    /*\
     * eve
     [ method ]

     * Fires event with given `name`, given scope and other parameters.

     > Arguments

     - name (string) name of the *event*, dot (`.`) or slash (`/`) separated
     - scope (object) context for the event handlers
     - varargs (...) the rest of arguments will be sent to event handlers

     = (object) array of returned values from the listeners
    \*/
        eve = function (name, scope) {
			name = String(name);
            var e = events,
                oldstop = stop,
                args = Array.prototype.slice.call(arguments, 2),
                listeners = eve.listeners(name),
                z = 0,
                f = false,
                l,
                indexed = [],
                queue = {},
                out = [],
                ce = current_event,
                errors = [];
            current_event = name;
            stop = 0;
            for (var i = 0, ii = listeners.length; i < ii; i++) if ("zIndex" in listeners[i]) {
                indexed.push(listeners[i].zIndex);
                if (listeners[i].zIndex < 0) {
                    queue[listeners[i].zIndex] = listeners[i];
                }
            }
            indexed.sort(numsort);
            while (indexed[z] < 0) {
                l = queue[indexed[z++]];
                out.push(l.apply(scope, args));
                if (stop) {
                    stop = oldstop;
                    return out;
                }
            }
            for (i = 0; i < ii; i++) {
                l = listeners[i];
                if ("zIndex" in l) {
                    if (l.zIndex == indexed[z]) {
                        out.push(l.apply(scope, args));
                        if (stop) {
                            break;
                        }
                        do {
                            z++;
                            l = queue[indexed[z]];
                            l && out.push(l.apply(scope, args));
                            if (stop) {
                                break;
                            }
                        } while (l)
                    } else {
                        queue[l.zIndex] = l;
                    }
                } else {
                    out.push(l.apply(scope, args));
                    if (stop) {
                        break;
                    }
                }
            }
            stop = oldstop;
            current_event = ce;
            return out.length ? out : null;
        };
		// Undocumented. Debug only.
		eve._events = events;
    /*\
     * eve.listeners
     [ method ]

     * Internal method which gives you array of all event handlers that will be triggered by the given `name`.

     > Arguments

     - name (string) name of the event, dot (`.`) or slash (`/`) separated

     = (array) array of event handlers
    \*/
    eve.listeners = function (name) {
        var names = name.split(separator),
            e = events,
            item,
            items,
            k,
            i,
            ii,
            j,
            jj,
            nes,
            es = [e],
            out = [];
        for (i = 0, ii = names.length; i < ii; i++) {
            nes = [];
            for (j = 0, jj = es.length; j < jj; j++) {
                e = es[j].n;
                items = [e[names[i]], e[wildcard]];
                k = 2;
                while (k--) {
                    item = items[k];
                    if (item) {
                        nes.push(item);
                        out = out.concat(item.f || []);
                    }
                }
            }
            es = nes;
        }
        return out;
    };
    
    /*\
     * eve.on
     [ method ]
     **
     * Binds given event handler with a given name. You can use wildcards “`*`” for the names:
     | eve.on("*.under.*", f);
     | eve("mouse.under.floor"); // triggers f
     * Use @eve to trigger the listener.
     **
     > Arguments
     **
     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards
     - f (function) event handler function
     **
     = (function) returned function accepts a single numeric parameter that represents z-index of the handler. It is an optional feature and only used when you need to ensure that some subset of handlers will be invoked in a given order, despite of the order of assignment. 
     > Example:
     | eve.on("mouse", eatIt)(2);
     | eve.on("mouse", scream);
     | eve.on("mouse", catchIt)(1);
     * This will ensure that `catchIt()` function will be called before `eatIt()`.
	 *
     * If you want to put your handler before non-indexed handlers, specify a negative value.
     * Note: I assume most of the time you don’t need to worry about z-index, but it’s nice to have this feature “just in case”.
    \*/
    eve.on = function (name, f) {
		name = String(name);
		if (typeof f != "function") {
			return function () {};
		}
        var names = name.split(separator),
            e = events;
        for (var i = 0, ii = names.length; i < ii; i++) {
            e = e.n;
            e = e.hasOwnProperty(names[i]) && e[names[i]] || (e[names[i]] = {n: {}});
        }
        e.f = e.f || [];
        for (i = 0, ii = e.f.length; i < ii; i++) if (e.f[i] == f) {
            return fun;
        }
        e.f.push(f);
        return function (zIndex) {
            if (+zIndex == +zIndex) {
                f.zIndex = +zIndex;
            }
        };
    };
    /*\
     * eve.f
     [ method ]
     **
     * Returns function that will fire given event with optional arguments.
	 * Arguments that will be passed to the result function will be also
	 * concated to the list of final arguments.
 	 | el.onclick = eve.f("click", 1, 2);
 	 | eve.on("click", function (a, b, c) {
 	 |     console.log(a, b, c); // 1, 2, [event object]
 	 | });
     > Arguments
	 - event (string) event name
	 - varargs (…) and any other arguments
	 = (function) possible event handler function
    \*/
	eve.f = function (event) {
		var attrs = [].slice.call(arguments, 1);
		return function () {
			eve.apply(null, [event, null].concat(attrs).concat([].slice.call(arguments, 0)));
		};
	};
    /*\
     * eve.stop
     [ method ]
     **
     * Is used inside an event handler to stop the event, preventing any subsequent listeners from firing.
    \*/
    eve.stop = function () {
        stop = 1;
    };
    /*\
     * eve.nt
     [ method ]
     **
     * Could be used inside event handler to figure out actual name of the event.
     **
     > Arguments
     **
     - subname (string) #optional subname of the event
     **
     = (string) name of the event, if `subname` is not specified
     * or
     = (boolean) `true`, if current event’s name contains `subname`
    \*/
    eve.nt = function (subname) {
        if (subname) {
            return new RegExp("(?:\\.|\\/|^)" + subname + "(?:\\.|\\/|$)").test(current_event);
        }
        return current_event;
    };
    /*\
     * eve.nts
     [ method ]
     **
     * Could be used inside event handler to figure out actual name of the event.
     **
     **
     = (array) names of the event
    \*/
    eve.nts = function () {
        return current_event.split(separator);
    };
    /*\
     * eve.off
     [ method ]
     **
     * Removes given function from the list of event listeners assigned to given name.
	 * If no arguments specified all the events will be cleared.
     **
     > Arguments
     **
     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards
     - f (function) event handler function
    \*/
    /*\
     * eve.unbind
     [ method ]
     **
     * See @eve.off
    \*/
    eve.off = eve.unbind = function (name, f) {
		if (!name) {
		    eve._events = events = {n: {}};
			return;
		}
        var names = name.split(separator),
            e,
            key,
            splice,
            i, ii, j, jj,
            cur = [events];
        for (i = 0, ii = names.length; i < ii; i++) {
            for (j = 0; j < cur.length; j += splice.length - 2) {
                splice = [j, 1];
                e = cur[j].n;
                if (names[i] != wildcard) {
                    if (e[names[i]]) {
                        splice.push(e[names[i]]);
                    }
                } else {
                    for (key in e) if (e[has](key)) {
                        splice.push(e[key]);
                    }
                }
                cur.splice.apply(cur, splice);
            }
        }
        for (i = 0, ii = cur.length; i < ii; i++) {
            e = cur[i];
            while (e.n) {
                if (f) {
                    if (e.f) {
                        for (j = 0, jj = e.f.length; j < jj; j++) if (e.f[j] == f) {
                            e.f.splice(j, 1);
                            break;
                        }
                        !e.f.length && delete e.f;
                    }
                    for (key in e.n) if (e.n[has](key) && e.n[key].f) {
                        var funcs = e.n[key].f;
                        for (j = 0, jj = funcs.length; j < jj; j++) if (funcs[j] == f) {
                            funcs.splice(j, 1);
                            break;
                        }
                        !funcs.length && delete e.n[key].f;
                    }
                } else {
                    delete e.f;
                    for (key in e.n) if (e.n[has](key) && e.n[key].f) {
                        delete e.n[key].f;
                    }
                }
                e = e.n;
            }
        }
    };
    /*\
     * eve.once
     [ method ]
     **
     * Binds given event handler with a given name to only run once then unbind itself.
     | eve.once("login", f);
     | eve("login"); // triggers f
     | eve("login"); // no listeners
     * Use @eve to trigger the listener.
     **
     > Arguments
     **
     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards
     - f (function) event handler function
     **
     = (function) same return function as @eve.on
    \*/
    eve.once = function (name, f) {
        var f2 = function () {
            eve.unbind(name, f2);
            return f.apply(this, arguments);
        };
        return eve.on(name, f2);
    };
    /*\
     * eve.version
     [ property (string) ]
     **
     * Current version of the library.
    \*/
    eve.version = version;
    eve.toString = function () {
        return "You are running Eve " + version;
    };
    (typeof module != "undefined" && module.exports) ? (module.exports = eve) : (typeof define != "undefined" ? (define("eve", [], function() { return eve; })) : (glob.eve = eve));
})(this);
// ┌─────────────────────────────────────────────────────────────────────┐ \\
// │ "Raphaël 2.1.2" - JavaScript Vector Library                         │ \\
// ├─────────────────────────────────────────────────────────────────────┤ \\
// │ Copyright (c) 2008-2011 Dmitry Baranovskiy (http://raphaeljs.com)   │ \\
// │ Copyright (c) 2008-2011 Sencha Labs (http://sencha.com)             │ \\
// │ Licensed under the MIT (http://raphaeljs.com/license.html) license. │ \\
// └─────────────────────────────────────────────────────────────────────┘ \\

(function (glob, factory) {
    // AMD support
    if (typeof define === "function" && define.amd) {
        // Define as an anonymous module
        define(["eve"], function( eve ) {
            return factory(glob, eve);
        });
    } else {
        // Browser globals (glob is window)
        // Raphael adds itself to window
        factory(glob, glob.eve || (typeof require == "function" && require('eve')) );
    }
}(this, function (window, eve) {
    /*\
     * Raphael
     [ method ]
     **
     * Creates a canvas object on which to draw.
     * You must do this first, as all future calls to drawing methods
     * from this instance will be bound to this canvas.
     > Parameters
     **
     - container (HTMLElement|string) DOM element or its ID which is going to be a parent for drawing surface
     - width (number)
     - height (number)
     - callback (function) #optional callback function which is going to be executed in the context of newly created paper
     * or
     - x (number)
     - y (number)
     - width (number)
     - height (number)
     - callback (function) #optional callback function which is going to be executed in the context of newly created paper
     * or
     - all (array) (first 3 or 4 elements in the array are equal to [containerID, width, height] or [x, y, width, height]. The rest are element descriptions in format {type: type, <attributes>}). See @Paper.add.
     - callback (function) #optional callback function which is going to be executed in the context of newly created paper
     * or
     - onReadyCallback (function) function that is going to be called on DOM ready event. You can also subscribe to this event via Eve’s “DOMLoad” event. In this case method returns `undefined`.
     = (object) @Paper
     > Usage
     | // Each of the following examples create a canvas
     | // that is 320px wide by 200px high.
     | // Canvas is created at the viewport’s 10,50 coordinate.
     | var paper = Raphael(10, 50, 320, 200);
     | // Canvas is created at the top left corner of the #notepad element
     | // (or its top right corner in dir="rtl" elements)
     | var paper = Raphael(document.getElementById("notepad"), 320, 200);
     | // Same as above
     | var paper = Raphael("notepad", 320, 200);
     | // Image dump
     | var set = Raphael(["notepad", 320, 200, {
     |     type: "rect",
     |     x: 10,
     |     y: 10,
     |     width: 25,
     |     height: 25,
     |     stroke: "#f00"
     | }, {
     |     type: "text",
     |     x: 30,
     |     y: 40,
     |     text: "Dump"
     | }]);
    \*/
    function R(first) {
        if (R.is(first, "function")) {
            return loaded ? first() : eve.on("raphael.DOMload", first);
        } else if (R.is(first, array)) {
            return R._engine.create[apply](R, first.splice(0, 3 + R.is(first[0], nu))).add(first);
        } else {
            var args = Array.prototype.slice.call(arguments, 0);
            if (R.is(args[args.length - 1], "function")) {
                var f = args.pop();
                return loaded ? f.call(R._engine.create[apply](R, args)) : eve.on("raphael.DOMload", function () {
                    f.call(R._engine.create[apply](R, args));
                });
            } else {
                return R._engine.create[apply](R, arguments);
            }
        }
    }
    R.version = "2.1.2";
    R.eve = eve;
    var loaded,
        separator = /[, ]+/,
        elements = {circle: 1, rect: 1, path: 1, ellipse: 1, text: 1, image: 1},
        formatrg = /\{(\d+)\}/g,
        proto = "prototype",
        has = "hasOwnProperty",
        g = {
            doc: document,
            win: window
        },
        oldRaphael = {
            was: Object.prototype[has].call(g.win, "Raphael"),
            is: g.win.Raphael
        },
        Paper = function () {
            /*\
             * Paper.ca
             [ property (object) ]
             **
             * Shortcut for @Paper.customAttributes
            \*/
            /*\
             * Paper.customAttributes
             [ property (object) ]
             **
             * If you have a set of attributes that you would like to represent
             * as a function of some number you can do it easily with custom attributes:
             > Usage
             | paper.customAttributes.hue = function (num) {
             |     num = num % 1;
             |     return {fill: "hsb(" + num + ", 0.75, 1)"};
             | };
             | // Custom attribute “hue” will change fill
             | // to be given hue with fixed saturation and brightness.
             | // Now you can use it like this:
             | var c = paper.circle(10, 10, 10).attr({hue: .45});
             | // or even like this:
             | c.animate({hue: 1}, 1e3);
             |
             | // You could also create custom attribute
             | // with multiple parameters:
             | paper.customAttributes.hsb = function (h, s, b) {
             |     return {fill: "hsb(" + [h, s, b].join(",") + ")"};
             | };
             | c.attr({hsb: "0.5 .8 1"});
             | c.animate({hsb: [1, 0, 0.5]}, 1e3);
            \*/
            this.ca = this.customAttributes = {};
        },
        paperproto,
        appendChild = "appendChild",
        apply = "apply",
        concat = "concat",
        supportsTouch = ('ontouchstart' in g.win) || g.win.DocumentTouch && g.doc instanceof DocumentTouch, //taken from Modernizr touch test
        E = "",
        S = " ",
        Str = String,
        split = "split",
        events = "click dblclick mousedown mousemove mouseout mouseover mouseup touchstart touchmove touchend touchcancel"[split](S),
        touchMap = {
            mousedown: "touchstart",
            mousemove: "touchmove",
            mouseup: "touchend"
        },
        lowerCase = Str.prototype.toLowerCase,
        math = Math,
        mmax = math.max,
        mmin = math.min,
        abs = math.abs,
        pow = math.pow,
        PI = math.PI,
        nu = "number",
        string = "string",
        array = "array",
        toString = "toString",
        fillString = "fill",
        objectToString = Object.prototype.toString,
        paper = {},
        push = "push",
        ISURL = R._ISURL = /^url\(['"]?(.+?)['"]?\)$/i,
        colourRegExp = /^\s*((#[a-f\d]{6})|(#[a-f\d]{3})|rgba?\(\s*([\d\.]+%?\s*,\s*[\d\.]+%?\s*,\s*[\d\.]+%?(?:\s*,\s*[\d\.]+%?)?)\s*\)|hsba?\(\s*([\d\.]+(?:deg|\xb0|%)?\s*,\s*[\d\.]+%?\s*,\s*[\d\.]+(?:%?\s*,\s*[\d\.]+)?)%?\s*\)|hsla?\(\s*([\d\.]+(?:deg|\xb0|%)?\s*,\s*[\d\.]+%?\s*,\s*[\d\.]+(?:%?\s*,\s*[\d\.]+)?)%?\s*\))\s*$/i,
        isnan = {"NaN": 1, "Infinity": 1, "-Infinity": 1},
        bezierrg = /^(?:cubic-)?bezier\(([^,]+),([^,]+),([^,]+),([^\)]+)\)/,
        round = math.round,
        setAttribute = "setAttribute",
        toFloat = parseFloat,
        toInt = parseInt,
        upperCase = Str.prototype.toUpperCase,
        availableAttrs = R._availableAttrs = {
            "arrow-end": "none",
            "arrow-start": "none",
            blur: 0,
            "clip-rect": "0 0 1e9 1e9",
            cursor: "default",
            cx: 0,
            cy: 0,
            fill: "#fff",
            "fill-opacity": 1,
            font: '10px "Arial"',
            "font-family": '"Arial"',
            "font-size": "10",
            "font-style": "normal",
            "font-weight": 400,
            gradient: 0,
            height: 0,
            href: "http://raphaeljs.com/",
            "letter-spacing": 0,
            opacity: 1,
            path: "M0,0",
            r: 0,
            rx: 0,
            ry: 0,
            src: "",
            stroke: "#000",
            "stroke-dasharray": "",
            "stroke-linecap": "butt",
            "stroke-linejoin": "butt",
            "stroke-miterlimit": 0,
            "stroke-opacity": 1,
            "stroke-width": 1,
            target: "_blank",
            "text-anchor": "middle",
            title: "Raphael",
            transform: "",
            width: 0,
            x: 0,
            y: 0
        },
        availableAnimAttrs = R._availableAnimAttrs = {
            blur: nu,
            "clip-rect": "csv",
            cx: nu,
            cy: nu,
            fill: "colour",
            "fill-opacity": nu,
            "font-size": nu,
            height: nu,
            opacity: nu,
            path: "path",
            r: nu,
            rx: nu,
            ry: nu,
            stroke: "colour",
            "stroke-opacity": nu,
            "stroke-width": nu,
            transform: "transform",
            width: nu,
            x: nu,
            y: nu
        },
        whitespace = /[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]/g,
        commaSpaces = /[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*,[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*/,
        hsrg = {hs: 1, rg: 1},
        p2s = /,?([achlmqrstvxz]),?/gi,
        pathCommand = /([achlmrqstvz])[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029,]*((-?\d*\.?\d*(?:e[\-+]?\d+)?[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*,?[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*)+)/ig,
        tCommand = /([rstm])[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029,]*((-?\d*\.?\d*(?:e[\-+]?\d+)?[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*,?[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*)+)/ig,
        pathValues = /(-?\d*\.?\d*(?:e[\-+]?\d+)?)[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*,?[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*/ig,
        radial_gradient = R._radial_gradient = /^r(?:\(([^,]+?)[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*,[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*([^\)]+?)\))?/,
        eldata = {},
        sortByKey = function (a, b) {
            return a.key - b.key;
        },
        sortByNumber = function (a, b) {
            return toFloat(a) - toFloat(b);
        },
        fun = function () {},
        pipe = function (x) {
            return x;
        },
        rectPath = R._rectPath = function (x, y, w, h, r) {
            if (r) {
                return [["M", x + r, y], ["l", w - r * 2, 0], ["a", r, r, 0, 0, 1, r, r], ["l", 0, h - r * 2], ["a", r, r, 0, 0, 1, -r, r], ["l", r * 2 - w, 0], ["a", r, r, 0, 0, 1, -r, -r], ["l", 0, r * 2 - h], ["a", r, r, 0, 0, 1, r, -r], ["z"]];
            }
            return [["M", x, y], ["l", w, 0], ["l", 0, h], ["l", -w, 0], ["z"]];
        },
        ellipsePath = function (x, y, rx, ry) {
            if (ry == null) {
                ry = rx;
            }
            return [["M", x, y], ["m", 0, -ry], ["a", rx, ry, 0, 1, 1, 0, 2 * ry], ["a", rx, ry, 0, 1, 1, 0, -2 * ry], ["z"]];
        },
        getPath = R._getPath = {
            path: function (el) {
                return el.attr("path");
            },
            circle: function (el) {
                var a = el.attrs;
                return ellipsePath(a.cx, a.cy, a.r);
            },
            ellipse: function (el) {
                var a = el.attrs;
                return ellipsePath(a.cx, a.cy, a.rx, a.ry);
            },
            rect: function (el) {
                var a = el.attrs;
                return rectPath(a.x, a.y, a.width, a.height, a.r);
            },
            image: function (el) {
                var a = el.attrs;
                return rectPath(a.x, a.y, a.width, a.height);
            },
            text: function (el) {
                var bbox = el._getBBox();
                return rectPath(bbox.x, bbox.y, bbox.width, bbox.height);
            },
            set : function(el) {
                var bbox = el._getBBox();
                return rectPath(bbox.x, bbox.y, bbox.width, bbox.height);
            }
        },
        /*\
         * Raphael.mapPath
         [ method ]
         **
         * Transform the path string with given matrix.
         > Parameters
         - path (string) path string
         - matrix (object) see @Matrix
         = (string) transformed path string
        \*/
        mapPath = R.mapPath = function (path, matrix) {
            if (!matrix) {
                return path;
            }
            var x, y, i, j, ii, jj, pathi;
            path = path2curve(path);
            for (i = 0, ii = path.length; i < ii; i++) {
                pathi = path[i];
                for (j = 1, jj = pathi.length; j < jj; j += 2) {
                    x = matrix.x(pathi[j], pathi[j + 1]);
                    y = matrix.y(pathi[j], pathi[j + 1]);
                    pathi[j] = x;
                    pathi[j + 1] = y;
                }
            }
            return path;
        };

    R._g = g;
    /*\
     * Raphael.type
     [ property (string) ]
     **
     * Can be “SVG”, “VML” or empty, depending on browser support.
    \*/
    R.type = (g.win.SVGAngle || g.doc.implementation.hasFeature("http://www.w3.org/TR/SVG11/feature#BasicStructure", "1.1") ? "SVG" : "VML");
    if (R.type == "VML") {
        var d = g.doc.createElement("div"),
            b;
        d.innerHTML = '<v:shape adj="1"/>';
        b = d.firstChild;
        b.style.behavior = "url(#default#VML)";
        if (!(b && typeof b.adj == "object")) {
            return (R.type = E);
        }
        d = null;
    }
    /*\
     * Raphael.svg
     [ property (boolean) ]
     **
     * `true` if browser supports SVG.
    \*/
    /*\
     * Raphael.vml
     [ property (boolean) ]
     **
     * `true` if browser supports VML.
    \*/
    R.svg = !(R.vml = R.type == "VML");
    R._Paper = Paper;
    /*\
     * Raphael.fn
     [ property (object) ]
     **
     * You can add your own method to the canvas. For example if you want to draw a pie chart,
     * you can create your own pie chart function and ship it as a Raphaël plugin. To do this
     * you need to extend the `Raphael.fn` object. You should modify the `fn` object before a
     * Raphaël instance is created, otherwise it will take no effect. Please note that the
     * ability for namespaced plugins was removed in Raphael 2.0. It is up to the plugin to
     * ensure any namespacing ensures proper context.
     > Usage
     | Raphael.fn.arrow = function (x1, y1, x2, y2, size) {
     |     return this.path( ... );
     | };
     | // or create namespace
     | Raphael.fn.mystuff = {
     |     arrow: function () {…},
     |     star: function () {…},
     |     // etc…
     | };
     | var paper = Raphael(10, 10, 630, 480);
     | // then use it
     | paper.arrow(10, 10, 30, 30, 5).attr({fill: "#f00"});
     | paper.mystuff.arrow();
     | paper.mystuff.star();
    \*/
    R.fn = paperproto = Paper.prototype = R.prototype;
    R._id = 0;
    R._oid = 0;
    /*\
     * Raphael.is
     [ method ]
     **
     * Handful of replacements for `typeof` operator.
     > Parameters
     - o (…) any object or primitive
     - type (string) name of the type, i.e. “string”, “function”, “number”, etc.
     = (boolean) is given value is of given type
    \*/
    R.is = function (o, type) {
        type = lowerCase.call(type);
        if (type == "finite") {
            return !isnan[has](+o);
        }
        if (type == "array") {
            return o instanceof Array;
        }
        return  (type == "null" && o === null) ||
                (type == typeof o && o !== null) ||
                (type == "object" && o === Object(o)) ||
                (type == "array" && Array.isArray && Array.isArray(o)) ||
                objectToString.call(o).slice(8, -1).toLowerCase() == type;
    };

    function clone(obj) {
        if (typeof obj == "function" || Object(obj) !== obj) {
            return obj;
        }
        var res = new obj.constructor;
        for (var key in obj) if (obj[has](key)) {
            res[key] = clone(obj[key]);
        }
        return res;
    }

    /*\
     * Raphael.angle
     [ method ]
     **
     * Returns angle between two or three points
     > Parameters
     - x1 (number) x coord of first point
     - y1 (number) y coord of first point
     - x2 (number) x coord of second point
     - y2 (number) y coord of second point
     - x3 (number) #optional x coord of third point
     - y3 (number) #optional y coord of third point
     = (number) angle in degrees.
    \*/
    R.angle = function (x1, y1, x2, y2, x3, y3) {
        if (x3 == null) {
            var x = x1 - x2,
                y = y1 - y2;
            if (!x && !y) {
                return 0;
            }
            return (180 + math.atan2(-y, -x) * 180 / PI + 360) % 360;
        } else {
            return R.angle(x1, y1, x3, y3) - R.angle(x2, y2, x3, y3);
        }
    };
    /*\
     * Raphael.rad
     [ method ]
     **
     * Transform angle to radians
     > Parameters
     - deg (number) angle in degrees
     = (number) angle in radians.
    \*/
    R.rad = function (deg) {
        return deg % 360 * PI / 180;
    };
    /*\
     * Raphael.deg
     [ method ]
     **
     * Transform angle to degrees
     > Parameters
     - rad (number) angle in radians
     = (number) angle in degrees.
    \*/
    R.deg = function (rad) {
        return Math.round ((rad * 180 / PI% 360)* 1000) / 1000;
    };
    /*\
     * Raphael.snapTo
     [ method ]
     **
     * Snaps given value to given grid.
     > Parameters
     - values (array|number) given array of values or step of the grid
     - value (number) value to adjust
     - tolerance (number) #optional tolerance for snapping. Default is `10`.
     = (number) adjusted value.
    \*/
    R.snapTo = function (values, value, tolerance) {
        tolerance = R.is(tolerance, "finite") ? tolerance : 10;
        if (R.is(values, array)) {
            var i = values.length;
            while (i--) if (abs(values[i] - value) <= tolerance) {
                return values[i];
            }
        } else {
            values = +values;
            var rem = value % values;
            if (rem < tolerance) {
                return value - rem;
            }
            if (rem > values - tolerance) {
                return value - rem + values;
            }
        }
        return value;
    };

    /*\
     * Raphael.createUUID
     [ method ]
     **
     * Returns RFC4122, version 4 ID
    \*/
    var createUUID = R.createUUID = (function (uuidRegEx, uuidReplacer) {
        return function () {
            return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(uuidRegEx, uuidReplacer).toUpperCase();
        };
    })(/[xy]/g, function (c) {
        var r = math.random() * 16 | 0,
            v = c == "x" ? r : (r & 3 | 8);
        return v.toString(16);
    });

    /*\
     * Raphael.setWindow
     [ method ]
     **
     * Used when you need to draw in `&lt;iframe>`. Switched window to the iframe one.
     > Parameters
     - newwin (window) new window object
    \*/
    R.setWindow = function (newwin) {
        eve("raphael.setWindow", R, g.win, newwin);
        g.win = newwin;
        g.doc = g.win.document;
        if (R._engine.initWin) {
            R._engine.initWin(g.win);
        }
    };
    var toHex = function (color) {
        if (R.vml) {
            // http://dean.edwards.name/weblog/2009/10/convert-any-colour-value-to-hex-in-msie/
            var trim = /^\s+|\s+$/g;
            var bod;
            try {
                var docum = new ActiveXObject("htmlfile");
                docum.write("<body>");
                docum.close();
                bod = docum.body;
            } catch(e) {
                bod = createPopup().document.body;
            }
            var range = bod.createTextRange();
            toHex = cacher(function (color) {
                try {
                    bod.style.color = Str(color).replace(trim, E);
                    var value = range.queryCommandValue("ForeColor");
                    value = ((value & 255) << 16) | (value & 65280) | ((value & 16711680) >>> 16);
                    return "#" + ("000000" + value.toString(16)).slice(-6);
                } catch(e) {
                    return "none";
                }
            });
        } else {
            var i = g.doc.createElement("i");
            i.title = "Rapha\xebl Colour Picker";
            i.style.display = "none";
            g.doc.body.appendChild(i);
            toHex = cacher(function (color) {
                i.style.color = color;
                return g.doc.defaultView.getComputedStyle(i, E).getPropertyValue("color");
            });
        }
        return toHex(color);
    },
    hsbtoString = function () {
        return "hsb(" + [this.h, this.s, this.b] + ")";
    },
    hsltoString = function () {
        return "hsl(" + [this.h, this.s, this.l] + ")";
    },
    rgbtoString = function () {
        return this.hex;
    },
    prepareRGB = function (r, g, b) {
        if (g == null && R.is(r, "object") && "r" in r && "g" in r && "b" in r) {
            b = r.b;
            g = r.g;
            r = r.r;
        }
        if (g == null && R.is(r, string)) {
            var clr = R.getRGB(r);
            r = clr.r;
            g = clr.g;
            b = clr.b;
        }
        if (r > 1 || g > 1 || b > 1) {
            r /= 255;
            g /= 255;
            b /= 255;
        }

        return [r, g, b];
    },
    packageRGB = function (r, g, b, o) {
        r *= 255;
        g *= 255;
        b *= 255;
        var rgb = {
            r: r,
            g: g,
            b: b,
            hex: R.rgb(r, g, b),
            toString: rgbtoString
        };
        R.is(o, "finite") && (rgb.opacity = o);
        return rgb;
    };

    /*\
     * Raphael.color
     [ method ]
     **
     * Parses the color string and returns object with all values for the given color.
     > Parameters
     - clr (string) color string in one of the supported formats (see @Raphael.getRGB)
     = (object) Combined RGB & HSB object in format:
     o {
     o     r (number) red,
     o     g (number) green,
     o     b (number) blue,
     o     hex (string) color in HTML/CSS format: #••••••,
     o     error (boolean) `true` if string can’t be parsed,
     o     h (number) hue,
     o     s (number) saturation,
     o     v (number) value (brightness),
     o     l (number) lightness
     o }
    \*/
    R.color = function (clr) {
        var rgb;
        if (R.is(clr, "object") && "h" in clr && "s" in clr && "b" in clr) {
            rgb = R.hsb2rgb(clr);
            clr.r = rgb.r;
            clr.g = rgb.g;
            clr.b = rgb.b;
            clr.hex = rgb.hex;
        } else if (R.is(clr, "object") && "h" in clr && "s" in clr && "l" in clr) {
            rgb = R.hsl2rgb(clr);
            clr.r = rgb.r;
            clr.g = rgb.g;
            clr.b = rgb.b;
            clr.hex = rgb.hex;
        } else {
            if (R.is(clr, "string")) {
                clr = R.getRGB(clr);
            }
            if (R.is(clr, "object") && "r" in clr && "g" in clr && "b" in clr) {
                rgb = R.rgb2hsl(clr);
                clr.h = rgb.h;
                clr.s = rgb.s;
                clr.l = rgb.l;
                rgb = R.rgb2hsb(clr);
                clr.v = rgb.b;
            } else {
                clr = {hex: "none"};
                clr.r = clr.g = clr.b = clr.h = clr.s = clr.v = clr.l = -1;
            }
        }
        clr.toString = rgbtoString;
        return clr;
    };
    /*\
     * Raphael.hsb2rgb
     [ method ]
     **
     * Converts HSB values to RGB object.
     > Parameters
     - h (number) hue
     - s (number) saturation
     - v (number) value or brightness
     = (object) RGB object in format:
     o {
     o     r (number) red,
     o     g (number) green,
     o     b (number) blue,
     o     hex (string) color in HTML/CSS format: #••••••
     o }
    \*/
    R.hsb2rgb = function (h, s, v, o) {
        if (this.is(h, "object") && "h" in h && "s" in h && "b" in h) {
            v = h.b;
            s = h.s;
            o = h.o;
            h = h.h;
        }
        h *= 360;
        var R, G, B, X, C;
        h = (h % 360) / 60;
        C = v * s;
        X = C * (1 - abs(h % 2 - 1));
        R = G = B = v - C;

        h = ~~h;
        R += [C, X, 0, 0, X, C][h];
        G += [X, C, C, X, 0, 0][h];
        B += [0, 0, X, C, C, X][h];
        return packageRGB(R, G, B, o);
    };
    /*\
     * Raphael.hsl2rgb
     [ method ]
     **
     * Converts HSL values to RGB object.
     > Parameters
     - h (number) hue
     - s (number) saturation
     - l (number) luminosity
     = (object) RGB object in format:
     o {
     o     r (number) red,
     o     g (number) green,
     o     b (number) blue,
     o     hex (string) color in HTML/CSS format: #••••••
     o }
    \*/
    R.hsl2rgb = function (h, s, l, o) {
        if (this.is(h, "object") && "h" in h && "s" in h && "l" in h) {
            l = h.l;
            s = h.s;
            h = h.h;
        }
        if (h > 1 || s > 1 || l > 1) {
            h /= 360;
            s /= 100;
            l /= 100;
        }
        h *= 360;
        var R, G, B, X, C;
        h = (h % 360) / 60;
        C = 2 * s * (l < .5 ? l : 1 - l);
        X = C * (1 - abs(h % 2 - 1));
        R = G = B = l - C / 2;

        h = ~~h;
        R += [C, X, 0, 0, X, C][h];
        G += [X, C, C, X, 0, 0][h];
        B += [0, 0, X, C, C, X][h];
        return packageRGB(R, G, B, o);
    };
    /*\
     * Raphael.rgb2hsb
     [ method ]
     **
     * Converts RGB values to HSB object.
     > Parameters
     - r (number) red
     - g (number) green
     - b (number) blue
     = (object) HSB object in format:
     o {
     o     h (number) hue
     o     s (number) saturation
     o     b (number) brightness
     o }
    \*/
    R.rgb2hsb = function (r, g, b) {
        b = prepareRGB(r, g, b);
        r = b[0];
        g = b[1];
        b = b[2];

        var H, S, V, C;
        V = mmax(r, g, b);
        C = V - mmin(r, g, b);
        H = (C == 0 ? null :
             V == r ? (g - b) / C :
             V == g ? (b - r) / C + 2 :
                      (r - g) / C + 4
            );
        H = ((H + 360) % 6) * 60 / 360;
        S = C == 0 ? 0 : C / V;
        return {h: H, s: S, b: V, toString: hsbtoString};
    };
    /*\
     * Raphael.rgb2hsl
     [ method ]
     **
     * Converts RGB values to HSL object.
     > Parameters
     - r (number) red
     - g (number) green
     - b (number) blue
     = (object) HSL object in format:
     o {
     o     h (number) hue
     o     s (number) saturation
     o     l (number) luminosity
     o }
    \*/
    R.rgb2hsl = function (r, g, b) {
        b = prepareRGB(r, g, b);
        r = b[0];
        g = b[1];
        b = b[2];

        var H, S, L, M, m, C;
        M = mmax(r, g, b);
        m = mmin(r, g, b);
        C = M - m;
        H = (C == 0 ? null :
             M == r ? (g - b) / C :
             M == g ? (b - r) / C + 2 :
                      (r - g) / C + 4);
        H = ((H + 360) % 6) * 60 / 360;
        L = (M + m) / 2;
        S = (C == 0 ? 0 :
             L < .5 ? C / (2 * L) :
                      C / (2 - 2 * L));
        return {h: H, s: S, l: L, toString: hsltoString};
    };
    R._path2string = function () {
        return this.join(",").replace(p2s, "$1");
    };
    function repush(array, item) {
        for (var i = 0, ii = array.length; i < ii; i++) if (array[i] === item) {
            return array.push(array.splice(i, 1)[0]);
        }
    }
    function cacher(f, scope, postprocessor) {
        function newf() {
            var arg = Array.prototype.slice.call(arguments, 0),
                args = arg.join("\u2400"),
                cache = newf.cache = newf.cache || {},
                count = newf.count = newf.count || [];
            if (cache[has](args)) {
                repush(count, args);
                return postprocessor ? postprocessor(cache[args]) : cache[args];
            }
            count.length >= 1e3 && delete cache[count.shift()];
            count.push(args);
            cache[args] = f[apply](scope, arg);
            return postprocessor ? postprocessor(cache[args]) : cache[args];
        }
        return newf;
    }

    var preload = R._preload = function (src, f) {
        var img = g.doc.createElement("img");
        img.style.cssText = "position:absolute;left:-9999em;top:-9999em";
        img.onload = function () {
            f.call(this);
            this.onload = null;
            g.doc.body.removeChild(this);
        };
        img.onerror = function () {
            g.doc.body.removeChild(this);
        };
        g.doc.body.appendChild(img);
        img.src = src;
    };

    function clrToString() {
        return this.hex;
    }

    /*\
     * Raphael.getRGB
     [ method ]
     **
     * Parses colour string as RGB object
     > Parameters
     - colour (string) colour string in one of formats:
     # <ul>
     #     <li>Colour name (“<code>red</code>”, “<code>green</code>”, “<code>cornflowerblue</code>”, etc)</li>
     #     <li>#••• — shortened HTML colour: (“<code>#000</code>”, “<code>#fc0</code>”, etc)</li>
     #     <li>#•••••• — full length HTML colour: (“<code>#000000</code>”, “<code>#bd2300</code>”)</li>
     #     <li>rgb(•••, •••, •••) — red, green and blue channels’ values: (“<code>rgb(200,&nbsp;100,&nbsp;0)</code>”)</li>
     #     <li>rgb(•••%, •••%, •••%) — same as above, but in %: (“<code>rgb(100%,&nbsp;175%,&nbsp;0%)</code>”)</li>
     #     <li>hsb(•••, •••, •••) — hue, saturation and brightness values: (“<code>hsb(0.5,&nbsp;0.25,&nbsp;1)</code>”)</li>
     #     <li>hsb(•••%, •••%, •••%) — same as above, but in %</li>
     #     <li>hsl(•••, •••, •••) — same as hsb</li>
     #     <li>hsl(•••%, •••%, •••%) — same as hsb</li>
     # </ul>
     = (object) RGB object in format:
     o {
     o     r (number) red,
     o     g (number) green,
     o     b (number) blue
     o     hex (string) color in HTML/CSS format: #••••••,
     o     error (boolean) true if string can’t be parsed
     o }
    \*/
    R.getRGB = cacher(function (colour) {
        if (!colour || !!((colour = Str(colour)).indexOf("-") + 1)) {
            return {r: -1, g: -1, b: -1, hex: "none", error: 1, toString: clrToString};
        }
        if (colour == "none") {
            return {r: -1, g: -1, b: -1, hex: "none", toString: clrToString};
        }
        !(hsrg[has](colour.toLowerCase().substring(0, 2)) || colour.charAt() == "#") && (colour = toHex(colour));
        var res,
            red,
            green,
            blue,
            opacity,
            t,
            values,
            rgb = colour.match(colourRegExp);
        if (rgb) {
            if (rgb[2]) {
                blue = toInt(rgb[2].substring(5), 16);
                green = toInt(rgb[2].substring(3, 5), 16);
                red = toInt(rgb[2].substring(1, 3), 16);
            }
            if (rgb[3]) {
                blue = toInt((t = rgb[3].charAt(3)) + t, 16);
                green = toInt((t = rgb[3].charAt(2)) + t, 16);
                red = toInt((t = rgb[3].charAt(1)) + t, 16);
            }
            if (rgb[4]) {
                values = rgb[4][split](commaSpaces);
                red = toFloat(values[0]);
                values[0].slice(-1) == "%" && (red *= 2.55);
                green = toFloat(values[1]);
                values[1].slice(-1) == "%" && (green *= 2.55);
                blue = toFloat(values[2]);
                values[2].slice(-1) == "%" && (blue *= 2.55);
                rgb[1].toLowerCase().slice(0, 4) == "rgba" && (opacity = toFloat(values[3]));
                values[3] && values[3].slice(-1) == "%" && (opacity /= 100);
            }
            if (rgb[5]) {
                values = rgb[5][split](commaSpaces);
                red = toFloat(values[0]);
                values[0].slice(-1) == "%" && (red *= 2.55);
                green = toFloat(values[1]);
                values[1].slice(-1) == "%" && (green *= 2.55);
                blue = toFloat(values[2]);
                values[2].slice(-1) == "%" && (blue *= 2.55);
                (values[0].slice(-3) == "deg" || values[0].slice(-1) == "\xb0") && (red /= 360);
                rgb[1].toLowerCase().slice(0, 4) == "hsba" && (opacity = toFloat(values[3]));
                values[3] && values[3].slice(-1) == "%" && (opacity /= 100);
                return R.hsb2rgb(red, green, blue, opacity);
            }
            if (rgb[6]) {
                values = rgb[6][split](commaSpaces);
                red = toFloat(values[0]);
                values[0].slice(-1) == "%" && (red *= 2.55);
                green = toFloat(values[1]);
                values[1].slice(-1) == "%" && (green *= 2.55);
                blue = toFloat(values[2]);
                values[2].slice(-1) == "%" && (blue *= 2.55);
                (values[0].slice(-3) == "deg" || values[0].slice(-1) == "\xb0") && (red /= 360);
                rgb[1].toLowerCase().slice(0, 4) == "hsla" && (opacity = toFloat(values[3]));
                values[3] && values[3].slice(-1) == "%" && (opacity /= 100);
                return R.hsl2rgb(red, green, blue, opacity);
            }
            rgb = {r: red, g: green, b: blue, toString: clrToString};
            rgb.hex = "#" + (16777216 | blue | (green << 8) | (red << 16)).toString(16).slice(1);
            R.is(opacity, "finite") && (rgb.opacity = opacity);
            return rgb;
        }
        return {r: -1, g: -1, b: -1, hex: "none", error: 1, toString: clrToString};
    }, R);
    /*\
     * Raphael.hsb
     [ method ]
     **
     * Converts HSB values to hex representation of the colour.
     > Parameters
     - h (number) hue
     - s (number) saturation
     - b (number) value or brightness
     = (string) hex representation of the colour.
    \*/
    R.hsb = cacher(function (h, s, b) {
        return R.hsb2rgb(h, s, b).hex;
    });
    /*\
     * Raphael.hsl
     [ method ]
     **
     * Converts HSL values to hex representation of the colour.
     > Parameters
     - h (number) hue
     - s (number) saturation
     - l (number) luminosity
     = (string) hex representation of the colour.
    \*/
    R.hsl = cacher(function (h, s, l) {
        return R.hsl2rgb(h, s, l).hex;
    });
    /*\
     * Raphael.rgb
     [ method ]
     **
     * Converts RGB values to hex representation of the colour.
     > Parameters
     - r (number) red
     - g (number) green
     - b (number) blue
     = (string) hex representation of the colour.
    \*/
    R.rgb = cacher(function (r, g, b) {
        return "#" + (16777216 | b | (g << 8) | (r << 16)).toString(16).slice(1);
    });
    /*\
     * Raphael.getColor
     [ method ]
     **
     * On each call returns next colour in the spectrum. To reset it back to red call @Raphael.getColor.reset
     > Parameters
     - value (number) #optional brightness, default is `0.75`
     = (string) hex representation of the colour.
    \*/
    R.getColor = function (value) {
        var start = this.getColor.start = this.getColor.start || {h: 0, s: 1, b: value || .75},
            rgb = this.hsb2rgb(start.h, start.s, start.b);
        start.h += .075;
        if (start.h > 1) {
            start.h = 0;
            start.s -= .2;
            start.s <= 0 && (this.getColor.start = {h: 0, s: 1, b: start.b});
        }
        return rgb.hex;
    };
    /*\
     * Raphael.getColor.reset
     [ method ]
     **
     * Resets spectrum position for @Raphael.getColor back to red.
    \*/
    R.getColor.reset = function () {
        delete this.start;
    };

    // http://schepers.cc/getting-to-the-point
    function catmullRom2bezier(crp, z) {
        var d = [];
        for (var i = 0, iLen = crp.length; iLen - 2 * !z > i; i += 2) {
            var p = [
                        {x: +crp[i - 2], y: +crp[i - 1]},
                        {x: +crp[i],     y: +crp[i + 1]},
                        {x: +crp[i + 2], y: +crp[i + 3]},
                        {x: +crp[i + 4], y: +crp[i + 5]}
                    ];
            if (z) {
                if (!i) {
                    p[0] = {x: +crp[iLen - 2], y: +crp[iLen - 1]};
                } else if (iLen - 4 == i) {
                    p[3] = {x: +crp[0], y: +crp[1]};
                } else if (iLen - 2 == i) {
                    p[2] = {x: +crp[0], y: +crp[1]};
                    p[3] = {x: +crp[2], y: +crp[3]};
                }
            } else {
                if (iLen - 4 == i) {
                    p[3] = p[2];
                } else if (!i) {
                    p[0] = {x: +crp[i], y: +crp[i + 1]};
                }
            }
            d.push(["C",
                  (-p[0].x + 6 * p[1].x + p[2].x) / 6,
                  (-p[0].y + 6 * p[1].y + p[2].y) / 6,
                  (p[1].x + 6 * p[2].x - p[3].x) / 6,
                  (p[1].y + 6*p[2].y - p[3].y) / 6,
                  p[2].x,
                  p[2].y
            ]);
        }

        return d;
    }
    /*\
     * Raphael.parsePathString
     [ method ]
     **
     * Utility method
     **
     * Parses given path string into an array of arrays of path segments.
     > Parameters
     - pathString (string|array) path string or array of segments (in the last case it will be returned straight away)
     = (array) array of segments.
    \*/
    R.parsePathString = function (pathString) {
        if (!pathString) {
            return null;
        }
        var pth = paths(pathString);
        if (pth.arr) {
            return pathClone(pth.arr);
        }

        var paramCounts = {a: 7, c: 6, h: 1, l: 2, m: 2, r: 4, q: 4, s: 4, t: 2, v: 1, z: 0},
            data = [];
        if (R.is(pathString, array) && R.is(pathString[0], array)) { // rough assumption
            data = pathClone(pathString);
        }
        if (!data.length) {
            Str(pathString).replace(pathCommand, function (a, b, c) {
                var params = [],
                    name = b.toLowerCase();
                c.replace(pathValues, function (a, b) {
                    b && params.push(+b);
                });
                if (name == "m" && params.length > 2) {
                    data.push([b][concat](params.splice(0, 2)));
                    name = "l";
                    b = b == "m" ? "l" : "L";
                }
                if (name == "r") {
                    data.push([b][concat](params));
                } else while (params.length >= paramCounts[name]) {
                    data.push([b][concat](params.splice(0, paramCounts[name])));
                    if (!paramCounts[name]) {
                        break;
                    }
                }
            });
        }
        data.toString = R._path2string;
        pth.arr = pathClone(data);
        return data;
    };
    /*\
     * Raphael.parseTransformString
     [ method ]
     **
     * Utility method
     **
     * Parses given path string into an array of transformations.
     > Parameters
     - TString (string|array) transform string or array of transformations (in the last case it will be returned straight away)
     = (array) array of transformations.
    \*/
    R.parseTransformString = cacher(function (TString) {
        if (!TString) {
            return null;
        }
        var paramCounts = {r: 3, s: 4, t: 2, m: 6},
            data = [];
        if (R.is(TString, array) && R.is(TString[0], array)) { // rough assumption
            data = pathClone(TString);
        }
        if (!data.length) {
            Str(TString).replace(tCommand, function (a, b, c) {
                var params = [],
                    name = lowerCase.call(b);
                c.replace(pathValues, function (a, b) {
                    b && params.push(+b);
                });
                data.push([b][concat](params));
            });
        }
        data.toString = R._path2string;
        return data;
    });
    // PATHS
    var paths = function (ps) {
        var p = paths.ps = paths.ps || {};
        if (p[ps]) {
            p[ps].sleep = 100;
        } else {
            p[ps] = {
                sleep: 100
            };
        }
        setTimeout(function () {
            for (var key in p) if (p[has](key) && key != ps) {
                p[key].sleep--;
                !p[key].sleep && delete p[key];
            }
        });
        return p[ps];
    };
    /*\
     * Raphael.findDotsAtSegment
     [ method ]
     **
     * Utility method
     **
     * Find dot coordinates on the given cubic bezier curve at the given t.
     > Parameters
     - p1x (number) x of the first point of the curve
     - p1y (number) y of the first point of the curve
     - c1x (number) x of the first anchor of the curve
     - c1y (number) y of the first anchor of the curve
     - c2x (number) x of the second anchor of the curve
     - c2y (number) y of the second anchor of the curve
     - p2x (number) x of the second point of the curve
     - p2y (number) y of the second point of the curve
     - t (number) position on the curve (0..1)
     = (object) point information in format:
     o {
     o     x: (number) x coordinate of the point
     o     y: (number) y coordinate of the point
     o     m: {
     o         x: (number) x coordinate of the left anchor
     o         y: (number) y coordinate of the left anchor
     o     }
     o     n: {
     o         x: (number) x coordinate of the right anchor
     o         y: (number) y coordinate of the right anchor
     o     }
     o     start: {
     o         x: (number) x coordinate of the start of the curve
     o         y: (number) y coordinate of the start of the curve
     o     }
     o     end: {
     o         x: (number) x coordinate of the end of the curve
     o         y: (number) y coordinate of the end of the curve
     o     }
     o     alpha: (number) angle of the curve derivative at the point
     o }
    \*/
    R.findDotsAtSegment = function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {
        var t1 = 1 - t,
            t13 = pow(t1, 3),
            t12 = pow(t1, 2),
            t2 = t * t,
            t3 = t2 * t,
            x = t13 * p1x + t12 * 3 * t * c1x + t1 * 3 * t * t * c2x + t3 * p2x,
            y = t13 * p1y + t12 * 3 * t * c1y + t1 * 3 * t * t * c2y + t3 * p2y,
            mx = p1x + 2 * t * (c1x - p1x) + t2 * (c2x - 2 * c1x + p1x),
            my = p1y + 2 * t * (c1y - p1y) + t2 * (c2y - 2 * c1y + p1y),
            nx = c1x + 2 * t * (c2x - c1x) + t2 * (p2x - 2 * c2x + c1x),
            ny = c1y + 2 * t * (c2y - c1y) + t2 * (p2y - 2 * c2y + c1y),
            ax = t1 * p1x + t * c1x,
            ay = t1 * p1y + t * c1y,
            cx = t1 * c2x + t * p2x,
            cy = t1 * c2y + t * p2y,
            alpha = (90 - math.atan2(mx - nx, my - ny) * 180 / PI);
        (mx > nx || my < ny) && (alpha += 180);
        return {
            x: x,
            y: y,
            m: {x: mx, y: my},
            n: {x: nx, y: ny},
            start: {x: ax, y: ay},
            end: {x: cx, y: cy},
            alpha: alpha
        };
    };
    /*\
     * Raphael.bezierBBox
     [ method ]
     **
     * Utility method
     **
     * Return bounding box of a given cubic bezier curve
     > Parameters
     - p1x (number) x of the first point of the curve
     - p1y (number) y of the first point of the curve
     - c1x (number) x of the first anchor of the curve
     - c1y (number) y of the first anchor of the curve
     - c2x (number) x of the second anchor of the curve
     - c2y (number) y of the second anchor of the curve
     - p2x (number) x of the second point of the curve
     - p2y (number) y of the second point of the curve
     * or
     - bez (array) array of six points for bezier curve
     = (object) point information in format:
     o {
     o     min: {
     o         x: (number) x coordinate of the left point
     o         y: (number) y coordinate of the top point
     o     }
     o     max: {
     o         x: (number) x coordinate of the right point
     o         y: (number) y coordinate of the bottom point
     o     }
     o }
    \*/
    R.bezierBBox = function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y) {
        if (!R.is(p1x, "array")) {
            p1x = [p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y];
        }
        var bbox = curveDim.apply(null, p1x);
        return {
            x: bbox.min.x,
            y: bbox.min.y,
            x2: bbox.max.x,
            y2: bbox.max.y,
            width: bbox.max.x - bbox.min.x,
            height: bbox.max.y - bbox.min.y
        };
    };
    /*\
     * Raphael.isPointInsideBBox
     [ method ]
     **
     * Utility method
     **
     * Returns `true` if given point is inside bounding boxes.
     > Parameters
     - bbox (string) bounding box
     - x (string) x coordinate of the point
     - y (string) y coordinate of the point
     = (boolean) `true` if point inside
    \*/
    R.isPointInsideBBox = function (bbox, x, y) {
        return x >= bbox.x && x <= bbox.x2 && y >= bbox.y && y <= bbox.y2;
    };
    /*\
     * Raphael.isBBoxIntersect
     [ method ]
     **
     * Utility method
     **
     * Returns `true` if two bounding boxes intersect
     > Parameters
     - bbox1 (string) first bounding box
     - bbox2 (string) second bounding box
     = (boolean) `true` if they intersect
    \*/
    R.isBBoxIntersect = function (bbox1, bbox2) {
        var i = R.isPointInsideBBox;
        return i(bbox2, bbox1.x, bbox1.y)
            || i(bbox2, bbox1.x2, bbox1.y)
            || i(bbox2, bbox1.x, bbox1.y2)
            || i(bbox2, bbox1.x2, bbox1.y2)
            || i(bbox1, bbox2.x, bbox2.y)
            || i(bbox1, bbox2.x2, bbox2.y)
            || i(bbox1, bbox2.x, bbox2.y2)
            || i(bbox1, bbox2.x2, bbox2.y2)
            || (bbox1.x < bbox2.x2 && bbox1.x > bbox2.x || bbox2.x < bbox1.x2 && bbox2.x > bbox1.x)
            && (bbox1.y < bbox2.y2 && bbox1.y > bbox2.y || bbox2.y < bbox1.y2 && bbox2.y > bbox1.y);
    };
    function base3(t, p1, p2, p3, p4) {
        var t1 = -3 * p1 + 9 * p2 - 9 * p3 + 3 * p4,
            t2 = t * t1 + 6 * p1 - 12 * p2 + 6 * p3;
        return t * t2 - 3 * p1 + 3 * p2;
    }
    function bezlen(x1, y1, x2, y2, x3, y3, x4, y4, z) {
        if (z == null) {
            z = 1;
        }
        z = z > 1 ? 1 : z < 0 ? 0 : z;
        var z2 = z / 2,
            n = 12,
            Tvalues = [-0.1252,0.1252,-0.3678,0.3678,-0.5873,0.5873,-0.7699,0.7699,-0.9041,0.9041,-0.9816,0.9816],
            Cvalues = [0.2491,0.2491,0.2335,0.2335,0.2032,0.2032,0.1601,0.1601,0.1069,0.1069,0.0472,0.0472],
            sum = 0;
        for (var i = 0; i < n; i++) {
            var ct = z2 * Tvalues[i] + z2,
                xbase = base3(ct, x1, x2, x3, x4),
                ybase = base3(ct, y1, y2, y3, y4),
                comb = xbase * xbase + ybase * ybase;
            sum += Cvalues[i] * math.sqrt(comb);
        }
        return z2 * sum;
    }
    function getTatLen(x1, y1, x2, y2, x3, y3, x4, y4, ll) {
        if (ll < 0 || bezlen(x1, y1, x2, y2, x3, y3, x4, y4) < ll) {
            return;
        }
        var t = 1,
            step = t / 2,
            t2 = t - step,
            l,
            e = .01;
        l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);
        while (abs(l - ll) > e) {
            step /= 2;
            t2 += (l < ll ? 1 : -1) * step;
            l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);
        }
        return t2;
    }
    function intersect(x1, y1, x2, y2, x3, y3, x4, y4) {
        if (
            mmax(x1, x2) < mmin(x3, x4) ||
            mmin(x1, x2) > mmax(x3, x4) ||
            mmax(y1, y2) < mmin(y3, y4) ||
            mmin(y1, y2) > mmax(y3, y4)
        ) {
            return;
        }
        var nx = (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4),
            ny = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4),
            denominator = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);

        if (!denominator) {
            return;
        }
        var px = nx / denominator,
            py = ny / denominator,
            px2 = +px.toFixed(2),
            py2 = +py.toFixed(2);
        if (
            px2 < +mmin(x1, x2).toFixed(2) ||
            px2 > +mmax(x1, x2).toFixed(2) ||
            px2 < +mmin(x3, x4).toFixed(2) ||
            px2 > +mmax(x3, x4).toFixed(2) ||
            py2 < +mmin(y1, y2).toFixed(2) ||
            py2 > +mmax(y1, y2).toFixed(2) ||
            py2 < +mmin(y3, y4).toFixed(2) ||
            py2 > +mmax(y3, y4).toFixed(2)
        ) {
            return;
        }
        return {x: px, y: py};
    }
    function inter(bez1, bez2) {
        return interHelper(bez1, bez2);
    }
    function interCount(bez1, bez2) {
        return interHelper(bez1, bez2, 1);
    }
    function interHelper(bez1, bez2, justCount) {
        var bbox1 = R.bezierBBox(bez1),
            bbox2 = R.bezierBBox(bez2);
        if (!R.isBBoxIntersect(bbox1, bbox2)) {
            return justCount ? 0 : [];
        }
        var l1 = bezlen.apply(0, bez1),
            l2 = bezlen.apply(0, bez2),
            n1 = mmax(~~(l1 / 5), 1),
            n2 = mmax(~~(l2 / 5), 1),
            dots1 = [],
            dots2 = [],
            xy = {},
            res = justCount ? 0 : [];
        for (var i = 0; i < n1 + 1; i++) {
            var p = R.findDotsAtSegment.apply(R, bez1.concat(i / n1));
            dots1.push({x: p.x, y: p.y, t: i / n1});
        }
        for (i = 0; i < n2 + 1; i++) {
            p = R.findDotsAtSegment.apply(R, bez2.concat(i / n2));
            dots2.push({x: p.x, y: p.y, t: i / n2});
        }
        for (i = 0; i < n1; i++) {
            for (var j = 0; j < n2; j++) {
                var di = dots1[i],
                    di1 = dots1[i + 1],
                    dj = dots2[j],
                    dj1 = dots2[j + 1],
                    ci = abs(di1.x - di.x) < .001 ? "y" : "x",
                    cj = abs(dj1.x - dj.x) < .001 ? "y" : "x",
                    is = intersect(di.x, di.y, di1.x, di1.y, dj.x, dj.y, dj1.x, dj1.y);
                if (is) {
                    if (xy[is.x.toFixed(4)] == is.y.toFixed(4)) {
                        continue;
                    }
                    xy[is.x.toFixed(4)] = is.y.toFixed(4);
                    var t1 = di.t + abs((is[ci] - di[ci]) / (di1[ci] - di[ci])) * (di1.t - di.t),
                        t2 = dj.t + abs((is[cj] - dj[cj]) / (dj1[cj] - dj[cj])) * (dj1.t - dj.t);
                    if (t1 >= 0 && t1 <= 1.001 && t2 >= 0 && t2 <= 1.001) {
                        if (justCount) {
                            res++;
                        } else {
                            res.push({
                                x: is.x,
                                y: is.y,
                                t1: mmin(t1, 1),
                                t2: mmin(t2, 1)
                            });
                        }
                    }
                }
            }
        }
        return res;
    }
    /*\
     * Raphael.pathIntersection
     [ method ]
     **
     * Utility method
     **
     * Finds intersections of two paths
     > Parameters
     - path1 (string) path string
     - path2 (string) path string
     = (array) dots of intersection
     o [
     o     {
     o         x: (number) x coordinate of the point
     o         y: (number) y coordinate of the point
     o         t1: (number) t value for segment of path1
     o         t2: (number) t value for segment of path2
     o         segment1: (number) order number for segment of path1
     o         segment2: (number) order number for segment of path2
     o         bez1: (array) eight coordinates representing beziér curve for the segment of path1
     o         bez2: (array) eight coordinates representing beziér curve for the segment of path2
     o     }
     o ]
    \*/
    R.pathIntersection = function (path1, path2) {
        return interPathHelper(path1, path2);
    };
    R.pathIntersectionNumber = function (path1, path2) {
        return interPathHelper(path1, path2, 1);
    };
    function interPathHelper(path1, path2, justCount) {
        path1 = R._path2curve(path1);
        path2 = R._path2curve(path2);
        var x1, y1, x2, y2, x1m, y1m, x2m, y2m, bez1, bez2,
            res = justCount ? 0 : [];
        for (var i = 0, ii = path1.length; i < ii; i++) {
            var pi = path1[i];
            if (pi[0] == "M") {
                x1 = x1m = pi[1];
                y1 = y1m = pi[2];
            } else {
                if (pi[0] == "C") {
                    bez1 = [x1, y1].concat(pi.slice(1));
                    x1 = bez1[6];
                    y1 = bez1[7];
                } else {
                    bez1 = [x1, y1, x1, y1, x1m, y1m, x1m, y1m];
                    x1 = x1m;
                    y1 = y1m;
                }
                for (var j = 0, jj = path2.length; j < jj; j++) {
                    var pj = path2[j];
                    if (pj[0] == "M") {
                        x2 = x2m = pj[1];
                        y2 = y2m = pj[2];
                    } else {
                        if (pj[0] == "C") {
                            bez2 = [x2, y2].concat(pj.slice(1));
                            x2 = bez2[6];
                            y2 = bez2[7];
                        } else {
                            bez2 = [x2, y2, x2, y2, x2m, y2m, x2m, y2m];
                            x2 = x2m;
                            y2 = y2m;
                        }
                        var intr = interHelper(bez1, bez2, justCount);
                        if (justCount) {
                            res += intr;
                        } else {
                            for (var k = 0, kk = intr.length; k < kk; k++) {
                                intr[k].segment1 = i;
                                intr[k].segment2 = j;
                                intr[k].bez1 = bez1;
                                intr[k].bez2 = bez2;
                            }
                            res = res.concat(intr);
                        }
                    }
                }
            }
        }
        return res;
    }
    /*\
     * Raphael.isPointInsidePath
     [ method ]
     **
     * Utility method
     **
     * Returns `true` if given point is inside a given closed path.
     > Parameters
     - path (string) path string
     - x (number) x of the point
     - y (number) y of the point
     = (boolean) true, if point is inside the path
    \*/
    R.isPointInsidePath = function (path, x, y) {
        var bbox = R.pathBBox(path);
        return R.isPointInsideBBox(bbox, x, y) &&
               interPathHelper(path, [["M", x, y], ["H", bbox.x2 + 10]], 1) % 2 == 1;
    };
    R._removedFactory = function (methodname) {
        return function () {
            eve("raphael.log", null, "Rapha\xebl: you are calling to method \u201c" + methodname + "\u201d of removed object", methodname);
        };
    };
    /*\
     * Raphael.pathBBox
     [ method ]
     **
     * Utility method
     **
     * Return bounding box of a given path
     > Parameters
     - path (string) path string
     = (object) bounding box
     o {
     o     x: (number) x coordinate of the left top point of the box
     o     y: (number) y coordinate of the left top point of the box
     o     x2: (number) x coordinate of the right bottom point of the box
     o     y2: (number) y coordinate of the right bottom point of the box
     o     width: (number) width of the box
     o     height: (number) height of the box
     o     cx: (number) x coordinate of the center of the box
     o     cy: (number) y coordinate of the center of the box
     o }
    \*/
    var pathDimensions = R.pathBBox = function (path) {
        var pth = paths(path);
        if (pth.bbox) {
            return clone(pth.bbox);
        }
        if (!path) {
            return {x: 0, y: 0, width: 0, height: 0, x2: 0, y2: 0};
        }
        path = path2curve(path);
        var x = 0,
            y = 0,
            X = [],
            Y = [],
            p;
        for (var i = 0, ii = path.length; i < ii; i++) {
            p = path[i];
            if (p[0] == "M") {
                x = p[1];
                y = p[2];
                X.push(x);
                Y.push(y);
            } else {
                var dim = curveDim(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);
                X = X[concat](dim.min.x, dim.max.x);
                Y = Y[concat](dim.min.y, dim.max.y);
                x = p[5];
                y = p[6];
            }
        }
        var xmin = mmin[apply](0, X),
            ymin = mmin[apply](0, Y),
            xmax = mmax[apply](0, X),
            ymax = mmax[apply](0, Y),
            width = xmax - xmin,
            height = ymax - ymin,
                bb = {
                x: xmin,
                y: ymin,
                x2: xmax,
                y2: ymax,
                width: width,
                height: height,
                cx: xmin + width / 2,
                cy: ymin + height / 2
            };
        pth.bbox = clone(bb);
        return bb;
    },
        pathClone = function (pathArray) {
            var res = clone(pathArray);
            res.toString = R._path2string;
            return res;
        },
        pathToRelative = R._pathToRelative = function (pathArray) {
            var pth = paths(pathArray);
            if (pth.rel) {
                return pathClone(pth.rel);
            }
            if (!R.is(pathArray, array) || !R.is(pathArray && pathArray[0], array)) { // rough assumption
                pathArray = R.parsePathString(pathArray);
            }
            var res = [],
                x = 0,
                y = 0,
                mx = 0,
                my = 0,
                start = 0;
            if (pathArray[0][0] == "M") {
                x = pathArray[0][1];
                y = pathArray[0][2];
                mx = x;
                my = y;
                start++;
                res.push(["M", x, y]);
            }
            for (var i = start, ii = pathArray.length; i < ii; i++) {
                var r = res[i] = [],
                    pa = pathArray[i];
                if (pa[0] != lowerCase.call(pa[0])) {
                    r[0] = lowerCase.call(pa[0]);
                    switch (r[0]) {
                        case "a":
                            r[1] = pa[1];
                            r[2] = pa[2];
                            r[3] = pa[3];
                            r[4] = pa[4];
                            r[5] = pa[5];
                            r[6] = +(pa[6] - x).toFixed(3);
                            r[7] = +(pa[7] - y).toFixed(3);
                            break;
                        case "v":
                            r[1] = +(pa[1] - y).toFixed(3);
                            break;
                        case "m":
                            mx = pa[1];
                            my = pa[2];
                        default:
                            for (var j = 1, jj = pa.length; j < jj; j++) {
                                r[j] = +(pa[j] - ((j % 2) ? x : y)).toFixed(3);
                            }
                    }
                } else {
                    r = res[i] = [];
                    if (pa[0] == "m") {
                        mx = pa[1] + x;
                        my = pa[2] + y;
                    }
                    for (var k = 0, kk = pa.length; k < kk; k++) {
                        res[i][k] = pa[k];
                    }
                }
                var len = res[i].length;
                switch (res[i][0]) {
                    case "z":
                        x = mx;
                        y = my;
                        break;
                    case "h":
                        x += +res[i][len - 1];
                        break;
                    case "v":
                        y += +res[i][len - 1];
                        break;
                    default:
                        x += +res[i][len - 2];
                        y += +res[i][len - 1];
                }
            }
            res.toString = R._path2string;
            pth.rel = pathClone(res);
            return res;
        },
        pathToAbsolute = R._pathToAbsolute = function (pathArray) {
            var pth = paths(pathArray);
            if (pth.abs) {
                return pathClone(pth.abs);
            }
            if (!R.is(pathArray, array) || !R.is(pathArray && pathArray[0], array)) { // rough assumption
                pathArray = R.parsePathString(pathArray);
            }
            if (!pathArray || !pathArray.length) {
                return [["M", 0, 0]];
            }
            var res = [],
                x = 0,
                y = 0,
                mx = 0,
                my = 0,
                start = 0;
            if (pathArray[0][0] == "M") {
                x = +pathArray[0][1];
                y = +pathArray[0][2];
                mx = x;
                my = y;
                start++;
                res[0] = ["M", x, y];
            }
            var crz = pathArray.length == 3 && pathArray[0][0] == "M" && pathArray[1][0].toUpperCase() == "R" && pathArray[2][0].toUpperCase() == "Z";
            for (var r, pa, i = start, ii = pathArray.length; i < ii; i++) {
                res.push(r = []);
                pa = pathArray[i];
                if (pa[0] != upperCase.call(pa[0])) {
                    r[0] = upperCase.call(pa[0]);
                    switch (r[0]) {
                        case "A":
                            r[1] = pa[1];
                            r[2] = pa[2];
                            r[3] = pa[3];
                            r[4] = pa[4];
                            r[5] = pa[5];
                            r[6] = +(pa[6] + x);
                            r[7] = +(pa[7] + y);
                            break;
                        case "V":
                            r[1] = +pa[1] + y;
                            break;
                        case "H":
                            r[1] = +pa[1] + x;
                            break;
                        case "R":
                            var dots = [x, y][concat](pa.slice(1));
                            for (var j = 2, jj = dots.length; j < jj; j++) {
                                dots[j] = +dots[j] + x;
                                dots[++j] = +dots[j] + y;
                            }
                            res.pop();
                            res = res[concat](catmullRom2bezier(dots, crz));
                            break;
                        case "M":
                            mx = +pa[1] + x;
                            my = +pa[2] + y;
                        default:
                            for (j = 1, jj = pa.length; j < jj; j++) {
                                r[j] = +pa[j] + ((j % 2) ? x : y);
                            }
                    }
                } else if (pa[0] == "R") {
                    dots = [x, y][concat](pa.slice(1));
                    res.pop();
                    res = res[concat](catmullRom2bezier(dots, crz));
                    r = ["R"][concat](pa.slice(-2));
                } else {
                    for (var k = 0, kk = pa.length; k < kk; k++) {
                        r[k] = pa[k];
                    }
                }
                switch (r[0]) {
                    case "Z":
                        x = mx;
                        y = my;
                        break;
                    case "H":
                        x = r[1];
                        break;
                    case "V":
                        y = r[1];
                        break;
                    case "M":
                        mx = r[r.length - 2];
                        my = r[r.length - 1];
                    default:
                        x = r[r.length - 2];
                        y = r[r.length - 1];
                }
            }
            res.toString = R._path2string;
            pth.abs = pathClone(res);
            return res;
        },
        l2c = function (x1, y1, x2, y2) {
            return [x1, y1, x2, y2, x2, y2];
        },
        q2c = function (x1, y1, ax, ay, x2, y2) {
            var _13 = 1 / 3,
                _23 = 2 / 3;
            return [
                    _13 * x1 + _23 * ax,
                    _13 * y1 + _23 * ay,
                    _13 * x2 + _23 * ax,
                    _13 * y2 + _23 * ay,
                    x2,
                    y2
                ];
        },
        a2c = function (x1, y1, rx, ry, angle, large_arc_flag, sweep_flag, x2, y2, recursive) {
            // for more information of where this math came from visit:
            // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes
            var _120 = PI * 120 / 180,
                rad = PI / 180 * (+angle || 0),
                res = [],
                xy,
                rotate = cacher(function (x, y, rad) {
                    var X = x * math.cos(rad) - y * math.sin(rad),
                        Y = x * math.sin(rad) + y * math.cos(rad);
                    return {x: X, y: Y};
                });
            if (!recursive) {
                xy = rotate(x1, y1, -rad);
                x1 = xy.x;
                y1 = xy.y;
                xy = rotate(x2, y2, -rad);
                x2 = xy.x;
                y2 = xy.y;
                var cos = math.cos(PI / 180 * angle),
                    sin = math.sin(PI / 180 * angle),
                    x = (x1 - x2) / 2,
                    y = (y1 - y2) / 2;
                var h = (x * x) / (rx * rx) + (y * y) / (ry * ry);
                if (h > 1) {
                    h = math.sqrt(h);
                    rx = h * rx;
                    ry = h * ry;
                }
                var rx2 = rx * rx,
                    ry2 = ry * ry,
                    k = (large_arc_flag == sweep_flag ? -1 : 1) *
                        math.sqrt(abs((rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x))),
                    cx = k * rx * y / ry + (x1 + x2) / 2,
                    cy = k * -ry * x / rx + (y1 + y2) / 2,
                    f1 = math.asin(((y1 - cy) / ry).toFixed(9)),
                    f2 = math.asin(((y2 - cy) / ry).toFixed(9));

                f1 = x1 < cx ? PI - f1 : f1;
                f2 = x2 < cx ? PI - f2 : f2;
                f1 < 0 && (f1 = PI * 2 + f1);
                f2 < 0 && (f2 = PI * 2 + f2);
                if (sweep_flag && f1 > f2) {
                    f1 = f1 - PI * 2;
                }
                if (!sweep_flag && f2 > f1) {
                    f2 = f2 - PI * 2;
                }
            } else {
                f1 = recursive[0];
                f2 = recursive[1];
                cx = recursive[2];
                cy = recursive[3];
            }
            var df = f2 - f1;
            if (abs(df) > _120) {
                var f2old = f2,
                    x2old = x2,
                    y2old = y2;
                f2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1);
                x2 = cx + rx * math.cos(f2);
                y2 = cy + ry * math.sin(f2);
                res = a2c(x2, y2, rx, ry, angle, 0, sweep_flag, x2old, y2old, [f2, f2old, cx, cy]);
            }
            df = f2 - f1;
            var c1 = math.cos(f1),
                s1 = math.sin(f1),
                c2 = math.cos(f2),
                s2 = math.sin(f2),
                t = math.tan(df / 4),
                hx = 4 / 3 * rx * t,
                hy = 4 / 3 * ry * t,
                m1 = [x1, y1],
                m2 = [x1 + hx * s1, y1 - hy * c1],
                m3 = [x2 + hx * s2, y2 - hy * c2],
                m4 = [x2, y2];
            m2[0] = 2 * m1[0] - m2[0];
            m2[1] = 2 * m1[1] - m2[1];
            if (recursive) {
                return [m2, m3, m4][concat](res);
            } else {
                res = [m2, m3, m4][concat](res).join()[split](",");
                var newres = [];
                for (var i = 0, ii = res.length; i < ii; i++) {
                    newres[i] = i % 2 ? rotate(res[i - 1], res[i], rad).y : rotate(res[i], res[i + 1], rad).x;
                }
                return newres;
            }
        },
        findDotAtSegment = function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {
            var t1 = 1 - t;
            return {
                x: pow(t1, 3) * p1x + pow(t1, 2) * 3 * t * c1x + t1 * 3 * t * t * c2x + pow(t, 3) * p2x,
                y: pow(t1, 3) * p1y + pow(t1, 2) * 3 * t * c1y + t1 * 3 * t * t * c2y + pow(t, 3) * p2y
            };
        },
        curveDim = cacher(function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y) {
            var a = (c2x - 2 * c1x + p1x) - (p2x - 2 * c2x + c1x),
                b = 2 * (c1x - p1x) - 2 * (c2x - c1x),
                c = p1x - c1x,
                t1 = (-b + math.sqrt(b * b - 4 * a * c)) / 2 / a,
                t2 = (-b - math.sqrt(b * b - 4 * a * c)) / 2 / a,
                y = [p1y, p2y],
                x = [p1x, p2x],
                dot;
            abs(t1) > "1e12" && (t1 = .5);
            abs(t2) > "1e12" && (t2 = .5);
            if (t1 > 0 && t1 < 1) {
                dot = findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t1);
                x.push(dot.x);
                y.push(dot.y);
            }
            if (t2 > 0 && t2 < 1) {
                dot = findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t2);
                x.push(dot.x);
                y.push(dot.y);
            }
            a = (c2y - 2 * c1y + p1y) - (p2y - 2 * c2y + c1y);
            b = 2 * (c1y - p1y) - 2 * (c2y - c1y);
            c = p1y - c1y;
            t1 = (-b + math.sqrt(b * b - 4 * a * c)) / 2 / a;
            t2 = (-b - math.sqrt(b * b - 4 * a * c)) / 2 / a;
            abs(t1) > "1e12" && (t1 = .5);
            abs(t2) > "1e12" && (t2 = .5);
            if (t1 > 0 && t1 < 1) {
                dot = findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t1);
                x.push(dot.x);
                y.push(dot.y);
            }
            if (t2 > 0 && t2 < 1) {
                dot = findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t2);
                x.push(dot.x);
                y.push(dot.y);
            }
            return {
                min: {x: mmin[apply](0, x), y: mmin[apply](0, y)},
                max: {x: mmax[apply](0, x), y: mmax[apply](0, y)}
            };
        }),
        path2curve = R._path2curve = cacher(function (path, path2) {
            var pth = !path2 && paths(path);
            if (!path2 && pth.curve) {
                return pathClone(pth.curve);
            }
            var p = pathToAbsolute(path),
                p2 = path2 && pathToAbsolute(path2),
                attrs = {x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null},
                attrs2 = {x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null},
                processPath = function (path, d, pcom) {
                    var nx, ny, tq = {T:1, Q:1};
                    if (!path) {
                        return ["C", d.x, d.y, d.x, d.y, d.x, d.y];
                    }
                    !(path[0] in tq) && (d.qx = d.qy = null);
                    switch (path[0]) {
                        case "M":
                            d.X = path[1];
                            d.Y = path[2];
                            break;
                        case "A":
                            path = ["C"][concat](a2c[apply](0, [d.x, d.y][concat](path.slice(1))));
                            break;
                        case "S":
                            if (pcom == "C" || pcom == "S") { // In "S" case we have to take into account, if the previous command is C/S.
                                nx = d.x * 2 - d.bx;          // And reflect the previous
                                ny = d.y * 2 - d.by;          // command's control point relative to the current point.
                            }
                            else {                            // or some else or nothing
                                nx = d.x;
                                ny = d.y;
                            }
                            path = ["C", nx, ny][concat](path.slice(1));
                            break;
                        case "T":
                            if (pcom == "Q" || pcom == "T") { // In "T" case we have to take into account, if the previous command is Q/T.
                                d.qx = d.x * 2 - d.qx;        // And make a reflection similar
                                d.qy = d.y * 2 - d.qy;        // to case "S".
                            }
                            else {                            // or something else or nothing
                                d.qx = d.x;
                                d.qy = d.y;
                            }
                            path = ["C"][concat](q2c(d.x, d.y, d.qx, d.qy, path[1], path[2]));
                            break;
                        case "Q":
                            d.qx = path[1];
                            d.qy = path[2];
                            path = ["C"][concat](q2c(d.x, d.y, path[1], path[2], path[3], path[4]));
                            break;
                        case "L":
                            path = ["C"][concat](l2c(d.x, d.y, path[1], path[2]));
                            break;
                        case "H":
                            path = ["C"][concat](l2c(d.x, d.y, path[1], d.y));
                            break;
                        case "V":
                            path = ["C"][concat](l2c(d.x, d.y, d.x, path[1]));
                            break;
                        case "Z":
                            path = ["C"][concat](l2c(d.x, d.y, d.X, d.Y));
                            break;
                    }
                    return path;
                },
                fixArc = function (pp, i) {
                    if (pp[i].length > 7) {
                        pp[i].shift();
                        var pi = pp[i];
                        while (pi.length) {
                            pcoms1[i]="A"; // if created multiple C:s, their original seg is saved
                            p2 && (pcoms2[i]="A"); // the same as above
                            pp.splice(i++, 0, ["C"][concat](pi.splice(0, 6)));
                        }
                        pp.splice(i, 1);
                        ii = mmax(p.length, p2 && p2.length || 0);
                    }
                },
                fixM = function (path1, path2, a1, a2, i) {
                    if (path1 && path2 && path1[i][0] == "M" && path2[i][0] != "M") {
                        path2.splice(i, 0, ["M", a2.x, a2.y]);
                        a1.bx = 0;
                        a1.by = 0;
                        a1.x = path1[i][1];
                        a1.y = path1[i][2];
                        ii = mmax(p.length, p2 && p2.length || 0);
                    }
                },
                pcoms1 = [], // path commands of original path p
                pcoms2 = [], // path commands of original path p2
                pfirst = "", // temporary holder for original path command
                pcom = ""; // holder for previous path command of original path
            for (var i = 0, ii = mmax(p.length, p2 && p2.length || 0); i < ii; i++) {
                p[i] && (pfirst = p[i][0]); // save current path command

                if (pfirst != "C") // C is not saved yet, because it may be result of conversion
                {
                    pcoms1[i] = pfirst; // Save current path command
                    i && ( pcom = pcoms1[i-1]); // Get previous path command pcom
                }
                p[i] = processPath(p[i], attrs, pcom); // Previous path command is inputted to processPath

                if (pcoms1[i] != "A" && pfirst == "C") pcoms1[i] = "C"; // A is the only command
                // which may produce multiple C:s
                // so we have to make sure that C is also C in original path

                fixArc(p, i); // fixArc adds also the right amount of A:s to pcoms1

                if (p2) { // the same procedures is done to p2
                    p2[i] && (pfirst = p2[i][0]);
                    if (pfirst != "C")
                    {
                        pcoms2[i] = pfirst;
                        i && (pcom = pcoms2[i-1]);
                    }
                    p2[i] = processPath(p2[i], attrs2, pcom);

                    if (pcoms2[i]!="A" && pfirst=="C") pcoms2[i]="C";

                    fixArc(p2, i);
                }
                fixM(p, p2, attrs, attrs2, i);
                fixM(p2, p, attrs2, attrs, i);
                var seg = p[i],
                    seg2 = p2 && p2[i],
                    seglen = seg.length,
                    seg2len = p2 && seg2.length;
                attrs.x = seg[seglen - 2];
                attrs.y = seg[seglen - 1];
                attrs.bx = toFloat(seg[seglen - 4]) || attrs.x;
                attrs.by = toFloat(seg[seglen - 3]) || attrs.y;
                attrs2.bx = p2 && (toFloat(seg2[seg2len - 4]) || attrs2.x);
                attrs2.by = p2 && (toFloat(seg2[seg2len - 3]) || attrs2.y);
                attrs2.x = p2 && seg2[seg2len - 2];
                attrs2.y = p2 && seg2[seg2len - 1];
            }
            if (!p2) {
                pth.curve = pathClone(p);
            }
            return p2 ? [p, p2] : p;
        }, null, pathClone),
        parseDots = R._parseDots = cacher(function (gradient) {
            var dots = [];
            for (var i = 0, ii = gradient.length; i < ii; i++) {
                var dot = {},
                    par = gradient[i].match(/^([^:]*):?([\d\.]*)/);
                dot.color = R.getRGB(par[1]);
                if (dot.color.error) {
                    return null;
                }
                dot.color = dot.color.hex;
                par[2] && (dot.offset = par[2] + "%");
                dots.push(dot);
            }
            for (i = 1, ii = dots.length - 1; i < ii; i++) {
                if (!dots[i].offset) {
                    var start = toFloat(dots[i - 1].offset || 0),
                        end = 0;
                    for (var j = i + 1; j < ii; j++) {
                        if (dots[j].offset) {
                            end = dots[j].offset;
                            break;
                        }
                    }
                    if (!end) {
                        end = 100;
                        j = ii;
                    }
                    end = toFloat(end);
                    var d = (end - start) / (j - i + 1);
                    for (; i < j; i++) {
                        start += d;
                        dots[i].offset = start + "%";
                    }
                }
            }
            return dots;
        }),
        tear = R._tear = function (el, paper) {
            el == paper.top && (paper.top = el.prev);
            el == paper.bottom && (paper.bottom = el.next);
            el.next && (el.next.prev = el.prev);
            el.prev && (el.prev.next = el.next);
        },
        tofront = R._tofront = function (el, paper) {
            if (paper.top === el) {
                return;
            }
            tear(el, paper);
            el.next = null;
            el.prev = paper.top;
            paper.top.next = el;
            paper.top = el;
        },
        toback = R._toback = function (el, paper) {
            if (paper.bottom === el) {
                return;
            }
            tear(el, paper);
            el.next = paper.bottom;
            el.prev = null;
            paper.bottom.prev = el;
            paper.bottom = el;
        },
        insertafter = R._insertafter = function (el, el2, paper) {
            tear(el, paper);
            el2 == paper.top && (paper.top = el);
            el2.next && (el2.next.prev = el);
            el.next = el2.next;
            el.prev = el2;
            el2.next = el;
        },
        insertbefore = R._insertbefore = function (el, el2, paper) {
            tear(el, paper);
            el2 == paper.bottom && (paper.bottom = el);
            el2.prev && (el2.prev.next = el);
            el.prev = el2.prev;
            el2.prev = el;
            el.next = el2;
        },
        /*\
         * Raphael.toMatrix
         [ method ]
         **
         * Utility method
         **
         * Returns matrix of transformations applied to a given path
         > Parameters
         - path (string) path string
         - transform (string|array) transformation string
         = (object) @Matrix
        \*/
        toMatrix = R.toMatrix = function (path, transform) {
            var bb = pathDimensions(path),
                el = {
                    _: {
                        transform: E
                    },
                    getBBox: function () {
                        return bb;
                    }
                };
            extractTransform(el, transform);
            return el.matrix;
        },
        /*\
         * Raphael.transformPath
         [ method ]
         **
         * Utility method
         **
         * Returns path transformed by a given transformation
         > Parameters
         - path (string) path string
         - transform (string|array) transformation string
         = (string) path
        \*/
        transformPath = R.transformPath = function (path, transform) {
            return mapPath(path, toMatrix(path, transform));
        },
        extractTransform = R._extractTransform = function (el, tstr) {
            if (tstr == null) {
                return el._.transform;
            }
            tstr = Str(tstr).replace(/\.{3}|\u2026/g, el._.transform || E);
            var tdata = R.parseTransformString(tstr),
                deg = 0,
                dx = 0,
                dy = 0,
                sx = 1,
                sy = 1,
                _ = el._,
                m = new Matrix;
            _.transform = tdata || [];
            if (tdata) {
                for (var i = 0, ii = tdata.length; i < ii; i++) {
                    var t = tdata[i],
                        tlen = t.length,
                        command = Str(t[0]).toLowerCase(),
                        absolute = t[0] != command,
                        inver = absolute ? m.invert() : 0,
                        x1,
                        y1,
                        x2,
                        y2,
                        bb;
                    if (command == "t" && tlen == 3) {
                        if (absolute) {
                            x1 = inver.x(0, 0);
                            y1 = inver.y(0, 0);
                            x2 = inver.x(t[1], t[2]);
                            y2 = inver.y(t[1], t[2]);
                            m.translate(x2 - x1, y2 - y1);
                        } else {
                            m.translate(t[1], t[2]);
                        }
                    } else if (command == "r") {
                        if (tlen == 2) {
                            bb = bb || el.getBBox(1);
                            m.rotate(t[1], bb.x + bb.width / 2, bb.y + bb.height / 2);
                            deg += t[1];
                        } else if (tlen == 4) {
                            if (absolute) {
                                x2 = inver.x(t[2], t[3]);
                                y2 = inver.y(t[2], t[3]);
                                m.rotate(t[1], x2, y2);
                            } else {
                                m.rotate(t[1], t[2], t[3]);
                            }
                            deg += t[1];
                        }
                    } else if (command == "s") {
                        if (tlen == 2 || tlen == 3) {
                            bb = bb || el.getBBox(1);
                            m.scale(t[1], t[tlen - 1], bb.x + bb.width / 2, bb.y + bb.height / 2);
                            sx *= t[1];
                            sy *= t[tlen - 1];
                        } else if (tlen == 5) {
                            if (absolute) {
                                x2 = inver.x(t[3], t[4]);
                                y2 = inver.y(t[3], t[4]);
                                m.scale(t[1], t[2], x2, y2);
                            } else {
                                m.scale(t[1], t[2], t[3], t[4]);
                            }
                            sx *= t[1];
                            sy *= t[2];
                        }
                    } else if (command == "m" && tlen == 7) {
                        m.add(t[1], t[2], t[3], t[4], t[5], t[6]);
                    }
                    _.dirtyT = 1;
                    el.matrix = m;
                }
            }

            /*\
             * Element.matrix
             [ property (object) ]
             **
             * Keeps @Matrix object, which represents element transformation
            \*/
            el.matrix = m;

            _.sx = sx;
            _.sy = sy;
            _.deg = deg;
            _.dx = dx = m.e;
            _.dy = dy = m.f;

            if (sx == 1 && sy == 1 && !deg && _.bbox) {
                _.bbox.x += +dx;
                _.bbox.y += +dy;
            } else {
                _.dirtyT = 1;
            }
        },
        getEmpty = function (item) {
            var l = item[0];
            switch (l.toLowerCase()) {
                case "t": return [l, 0, 0];
                case "m": return [l, 1, 0, 0, 1, 0, 0];
                case "r": if (item.length == 4) {
                    return [l, 0, item[2], item[3]];
                } else {
                    return [l, 0];
                }
                case "s": if (item.length == 5) {
                    return [l, 1, 1, item[3], item[4]];
                } else if (item.length == 3) {
                    return [l, 1, 1];
                } else {
                    return [l, 1];
                }
            }
        },
        equaliseTransform = R._equaliseTransform = function (t1, t2) {
            t2 = Str(t2).replace(/\.{3}|\u2026/g, t1);
            t1 = R.parseTransformString(t1) || [];
            t2 = R.parseTransformString(t2) || [];
            var maxlength = mmax(t1.length, t2.length),
                from = [],
                to = [],
                i = 0, j, jj,
                tt1, tt2;
            for (; i < maxlength; i++) {
                tt1 = t1[i] || getEmpty(t2[i]);
                tt2 = t2[i] || getEmpty(tt1);
                if ((tt1[0] != tt2[0]) ||
                    (tt1[0].toLowerCase() == "r" && (tt1[2] != tt2[2] || tt1[3] != tt2[3])) ||
                    (tt1[0].toLowerCase() == "s" && (tt1[3] != tt2[3] || tt1[4] != tt2[4]))
                    ) {
                    return;
                }
                from[i] = [];
                to[i] = [];
                for (j = 0, jj = mmax(tt1.length, tt2.length); j < jj; j++) {
                    j in tt1 && (from[i][j] = tt1[j]);
                    j in tt2 && (to[i][j] = tt2[j]);
                }
            }
            return {
                from: from,
                to: to
            };
        };
    R._getContainer = function (x, y, w, h) {
        var container;
        container = h == null && !R.is(x, "object") ? g.doc.getElementById(x) : x;
        if (container == null) {
            return;
        }
        if (container.tagName) {
            if (y == null) {
                return {
                    container: container,
                    width: container.style.pixelWidth || container.offsetWidth,
                    height: container.style.pixelHeight || container.offsetHeight
                };
            } else {
                return {
                    container: container,
                    width: y,
                    height: w
                };
            }
        }
        return {
            container: 1,
            x: x,
            y: y,
            width: w,
            height: h
        };
    };
    /*\
     * Raphael.pathToRelative
     [ method ]
     **
     * Utility method
     **
     * Converts path to relative form
     > Parameters
     - pathString (string|array) path string or array of segments
     = (array) array of segments.
    \*/
    R.pathToRelative = pathToRelative;
    R._engine = {};
    /*\
     * Raphael.path2curve
     [ method ]
     **
     * Utility method
     **
     * Converts path to a new path where all segments are cubic bezier curves.
     > Parameters
     - pathString (string|array) path string or array of segments
     = (array) array of segments.
    \*/
    R.path2curve = path2curve;
    /*\
     * Raphael.matrix
     [ method ]
     **
     * Utility method
     **
     * Returns matrix based on given parameters.
     > Parameters
     - a (number)
     - b (number)
     - c (number)
     - d (number)
     - e (number)
     - f (number)
     = (object) @Matrix
    \*/
    R.matrix = function (a, b, c, d, e, f) {
        return new Matrix(a, b, c, d, e, f);
    };
    function Matrix(a, b, c, d, e, f) {
        if (a != null) {
            this.a = +a;
            this.b = +b;
            this.c = +c;
            this.d = +d;
            this.e = +e;
            this.f = +f;
        } else {
            this.a = 1;
            this.b = 0;
            this.c = 0;
            this.d = 1;
            this.e = 0;
            this.f = 0;
        }
    }
    (function (matrixproto) {
        /*\
         * Matrix.add
         [ method ]
         **
         * Adds given matrix to existing one.
         > Parameters
         - a (number)
         - b (number)
         - c (number)
         - d (number)
         - e (number)
         - f (number)
         or
         - matrix (object) @Matrix
        \*/
        matrixproto.add = function (a, b, c, d, e, f) {
            var out = [[], [], []],
                m = [[this.a, this.c, this.e], [this.b, this.d, this.f], [0, 0, 1]],
                matrix = [[a, c, e], [b, d, f], [0, 0, 1]],
                x, y, z, res;

            if (a && a instanceof Matrix) {
                matrix = [[a.a, a.c, a.e], [a.b, a.d, a.f], [0, 0, 1]];
            }

            for (x = 0; x < 3; x++) {
                for (y = 0; y < 3; y++) {
                    res = 0;
                    for (z = 0; z < 3; z++) {
                        res += m[x][z] * matrix[z][y];
                    }
                    out[x][y] = res;
                }
            }
            this.a = out[0][0];
            this.b = out[1][0];
            this.c = out[0][1];
            this.d = out[1][1];
            this.e = out[0][2];
            this.f = out[1][2];
        };
        /*\
         * Matrix.invert
         [ method ]
         **
         * Returns inverted version of the matrix
         = (object) @Matrix
        \*/
        matrixproto.invert = function () {
            var me = this,
                x = me.a * me.d - me.b * me.c;
            return new Matrix(me.d / x, -me.b / x, -me.c / x, me.a / x, (me.c * me.f - me.d * me.e) / x, (me.b * me.e - me.a * me.f) / x);
        };
        /*\
         * Matrix.clone
         [ method ]
         **
         * Returns copy of the matrix
         = (object) @Matrix
        \*/
        matrixproto.clone = function () {
            return new Matrix(this.a, this.b, this.c, this.d, this.e, this.f);
        };
        /*\
         * Matrix.translate
         [ method ]
         **
         * Translate the matrix
         > Parameters
         - x (number)
         - y (number)
        \*/
        matrixproto.translate = function (x, y) {
            this.add(1, 0, 0, 1, x, y);
        };
        /*\
         * Matrix.scale
         [ method ]
         **
         * Scales the matrix
         > Parameters
         - x (number)
         - y (number) #optional
         - cx (number) #optional
         - cy (number) #optional
        \*/
        matrixproto.scale = function (x, y, cx, cy) {
            y == null && (y = x);
            (cx || cy) && this.add(1, 0, 0, 1, cx, cy);
            this.add(x, 0, 0, y, 0, 0);
            (cx || cy) && this.add(1, 0, 0, 1, -cx, -cy);
        };
        /*\
         * Matrix.rotate
         [ method ]
         **
         * Rotates the matrix
         > Parameters
         - a (number)
         - x (number)
         - y (number)
        \*/
        matrixproto.rotate = function (a, x, y) {
            a = R.rad(a);
            x = x || 0;
            y = y || 0;
            var cos = +math.cos(a).toFixed(9),
                sin = +math.sin(a).toFixed(9);
            this.add(cos, sin, -sin, cos, x, y);
            this.add(1, 0, 0, 1, -x, -y);
        };
        /*\
         * Matrix.x
         [ method ]
         **
         * Return x coordinate for given point after transformation described by the matrix. See also @Matrix.y
         > Parameters
         - x (number)
         - y (number)
         = (number) x
        \*/
        matrixproto.x = function (x, y) {
            return x * this.a + y * this.c + this.e;
        };
        /*\
         * Matrix.y
         [ method ]
         **
         * Return y coordinate for given point after transformation described by the matrix. See also @Matrix.x
         > Parameters
         - x (number)
         - y (number)
         = (number) y
        \*/
        matrixproto.y = function (x, y) {
            return x * this.b + y * this.d + this.f;
        };
        matrixproto.get = function (i) {
            return +this[Str.fromCharCode(97 + i)].toFixed(4);
        };
        matrixproto.toString = function () {
            return R.svg ?
                "matrix(" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)].join() + ")" :
                [this.get(0), this.get(2), this.get(1), this.get(3), 0, 0].join();
        };
        matrixproto.toFilter = function () {
            return "progid:DXImageTransform.Microsoft.Matrix(M11=" + this.get(0) +
                ", M12=" + this.get(2) + ", M21=" + this.get(1) + ", M22=" + this.get(3) +
                ", Dx=" + this.get(4) + ", Dy=" + this.get(5) + ", sizingmethod='auto expand')";
        };
        matrixproto.offset = function () {
            return [this.e.toFixed(4), this.f.toFixed(4)];
        };
        function norm(a) {
            return a[0] * a[0] + a[1] * a[1];
        }
        function normalize(a) {
            var mag = math.sqrt(norm(a));
            a[0] && (a[0] /= mag);
            a[1] && (a[1] /= mag);
        }
        /*\
         * Matrix.split
         [ method ]
         **
         * Splits matrix into primitive transformations
         = (object) in format:
         o dx (number) translation by x
         o dy (number) translation by y
         o scalex (number) scale by x
         o scaley (number) scale by y
         o shear (number) shear
         o rotate (number) rotation in deg
         o isSimple (boolean) could it be represented via simple transformations
        \*/
        matrixproto.split = function () {
            var out = {};
            // translation
            out.dx = this.e;
            out.dy = this.f;

            // scale and shear
            var row = [[this.a, this.c], [this.b, this.d]];
            out.scalex = math.sqrt(norm(row[0]));
            normalize(row[0]);

            out.shear = row[0][0] * row[1][0] + row[0][1] * row[1][1];
            row[1] = [row[1][0] - row[0][0] * out.shear, row[1][1] - row[0][1] * out.shear];

            out.scaley = math.sqrt(norm(row[1]));
            normalize(row[1]);
            out.shear /= out.scaley;

            // rotation
            var sin = -row[0][1],
                cos = row[1][1];
            if (cos < 0) {
                out.rotate = R.deg(math.acos(cos));
                if (sin < 0) {
                    out.rotate = 360 - out.rotate;
                }
            } else {
                out.rotate = R.deg(math.asin(sin));
            }

            out.isSimple = !+out.shear.toFixed(9) && (out.scalex.toFixed(9) == out.scaley.toFixed(9) || !out.rotate);
            out.isSuperSimple = !+out.shear.toFixed(9) && out.scalex.toFixed(9) == out.scaley.toFixed(9) && !out.rotate;
            out.noRotation = !+out.shear.toFixed(9) && !out.rotate;
            return out;
        };
        /*\
         * Matrix.toTransformString
         [ method ]
         **
         * Return transform string that represents given matrix
         = (string) transform string
        \*/
        matrixproto.toTransformString = function (shorter) {
            var s = shorter || this[split]();
            if (s.isSimple) {
                s.scalex = +s.scalex.toFixed(4);
                s.scaley = +s.scaley.toFixed(4);
                s.rotate = +s.rotate.toFixed(4);
                return  (s.dx || s.dy ? "t" + [s.dx, s.dy] : E) +
                        (s.scalex != 1 || s.scaley != 1 ? "s" + [s.scalex, s.scaley, 0, 0] : E) +
                        (s.rotate ? "r" + [s.rotate, 0, 0] : E);
            } else {
                return "m" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)];
            }
        };
    })(Matrix.prototype);

    var preventDefault = function () {
        this.returnValue = false;
    },
    preventTouch = function () {
        return this.originalEvent.preventDefault();
    },
    stopPropagation = function () {
        this.cancelBubble = true;
    },
    stopTouch = function () {
        return this.originalEvent.stopPropagation();
    },
    getEventPosition = function (e) {
        var scrollY = g.doc.documentElement.scrollTop || g.doc.body.scrollTop,
            scrollX = g.doc.documentElement.scrollLeft || g.doc.body.scrollLeft;

        return {
            x: e.clientX + scrollX,
            y: e.clientY + scrollY
        };
    },
    addEvent = (function () {
        if (g.doc.addEventListener) {
            return function (obj, type, fn, element) {
                var f = function (e) {
                    var pos = getEventPosition(e);
                    return fn.call(element, e, pos.x, pos.y);
                };
                obj.addEventListener(type, f, false);

                if (supportsTouch && touchMap[type]) {
                    var _f = function (e) {
                        var pos = getEventPosition(e),
                            olde = e;

                        for (var i = 0, ii = e.targetTouches && e.targetTouches.length; i < ii; i++) {
                            if (e.targetTouches[i].target == obj) {
                                e = e.targetTouches[i];
                                e.originalEvent = olde;
                                e.preventDefault = preventTouch;
                                e.stopPropagation = stopTouch;
                                break;
                            }
                        }

                        return fn.call(element, e, pos.x, pos.y);
                    };
                    obj.addEventListener(touchMap[type], _f, false);
                }

                return function () {
                    obj.removeEventListener(type, f, false);

                    if (supportsTouch && touchMap[type])
                        obj.removeEventListener(touchMap[type], _f, false);

                    return true;
                };
            };
        } else if (g.doc.attachEvent) {
            return function (obj, type, fn, element) {
                var f = function (e) {
                    e = e || g.win.event;
                    var scrollY = g.doc.documentElement.scrollTop || g.doc.body.scrollTop,
                        scrollX = g.doc.documentElement.scrollLeft || g.doc.body.scrollLeft,
                        x = e.clientX + scrollX,
                        y = e.clientY + scrollY;
                    e.preventDefault = e.preventDefault || preventDefault;
                    e.stopPropagation = e.stopPropagation || stopPropagation;
                    return fn.call(element, e, x, y);
                };
                obj.attachEvent("on" + type, f);
                var detacher = function () {
                    obj.detachEvent("on" + type, f);
                    return true;
                };
                return detacher;
            };
        }
    })(),
    drag = [],
    dragMove = function (e) {
        var x = e.clientX,
            y = e.clientY,
            scrollY = g.doc.documentElement.scrollTop || g.doc.body.scrollTop,
            scrollX = g.doc.documentElement.scrollLeft || g.doc.body.scrollLeft,
            dragi,
            j = drag.length;
        while (j--) {
            dragi = drag[j];
            if (supportsTouch && e.touches) {
                var i = e.touches.length,
                    touch;
                while (i--) {
                    touch = e.touches[i];
                    if (touch.identifier == dragi.el._drag.id) {
                        x = touch.clientX;
                        y = touch.clientY;
                        (e.originalEvent ? e.originalEvent : e).preventDefault();
                        break;
                    }
                }
            } else {
                e.preventDefault();
            }
            var node = dragi.el.node,
                o,
                next = node.nextSibling,
                parent = node.parentNode,
                display = node.style.display;
            g.win.opera && parent.removeChild(node);
            node.style.display = "none";
            o = dragi.el.paper.getElementByPoint(x, y);
            node.style.display = display;
            g.win.opera && (next ? parent.insertBefore(node, next) : parent.appendChild(node));
            o && eve("raphael.drag.over." + dragi.el.id, dragi.el, o);
            x += scrollX;
            y += scrollY;
            eve("raphael.drag.move." + dragi.el.id, dragi.move_scope || dragi.el, x - dragi.el._drag.x, y - dragi.el._drag.y, x, y, e);
        }
    },
    dragUp = function (e) {
        R.unmousemove(dragMove).unmouseup(dragUp);
        var i = drag.length,
            dragi;
        while (i--) {
            dragi = drag[i];
            dragi.el._drag = {};
            eve("raphael.drag.end." + dragi.el.id, dragi.end_scope || dragi.start_scope || dragi.move_scope || dragi.el, e);
        }
        drag = [];
    },
    /*\
     * Raphael.el
     [ property (object) ]
     **
     * You can add your own method to elements. This is usefull when you want to hack default functionality or
     * want to wrap some common transformation or attributes in one method. In difference to canvas methods,
     * you can redefine element method at any time. Expending element methods wouldn’t affect set.
     > Usage
     | Raphael.el.red = function () {
     |     this.attr({fill: "#f00"});
     | };
     | // then use it
     | paper.circle(100, 100, 20).red();
    \*/
    elproto = R.el = {};
    /*\
     * Element.click
     [ method ]
     **
     * Adds event handler for click for the element.
     > Parameters
     - handler (function) handler for the event
     = (object) @Element
    \*/
    /*\
     * Element.unclick
     [ method ]
     **
     * Removes event handler for click for the element.
     > Parameters
     - handler (function) #optional handler for the event
     = (object) @Element
    \*/

    /*\
     * Element.dblclick
     [ method ]
     **
     * Adds event handler for double click for the element.
     > Parameters
     - handler (function) handler for the event
     = (object) @Element
    \*/
    /*\
     * Element.undblclick
     [ method ]
     **
     * Removes event handler for double click for the element.
     > Parameters
     - handler (function) #optional handler for the event
     = (object) @Element
    \*/

    /*\
     * Element.mousedown
     [ method ]
     **
     * Adds event handler for mousedown for the element.
     > Parameters
     - handler (function) handler for the event
     = (object) @Element
    \*/
    /*\
     * Element.unmousedown
     [ method ]
     **
     * Removes event handler for mousedown for the element.
     > Parameters
     - handler (function) #optional handler for the event
     = (object) @Element
    \*/

    /*\
     * Element.mousemove
     [ method ]
     **
     * Adds event handler for mousemove for the element.
     > Parameters
     - handler (function) handler for the event
     = (object) @Element
    \*/
    /*\
     * Element.unmousemove
     [ method ]
     **
     * Removes event handler for mousemove for the element.
     > Parameters
     - handler (function) #optional handler for the event
     = (object) @Element
    \*/

    /*\
     * Element.mouseout
     [ method ]
     **
     * Adds event handler for mouseout for the element.
     > Parameters
     - handler (function) handler for the event
     = (object) @Element
    \*/
    /*\
     * Element.unmouseout
     [ method ]
     **
     * Removes event handler for mouseout for the element.
     > Parameters
     - handler (function) #optional handler for the event
     = (object) @Element
    \*/

    /*\
     * Element.mouseover
     [ method ]
     **
     * Adds event handler for mouseover for the element.
     > Parameters
     - handler (function) handler for the event
     = (object) @Element
    \*/
    /*\
     * Element.unmouseover
     [ method ]
     **
     * Removes event handler for mouseover for the element.
     > Parameters
     - handler (function) #optional handler for the event
     = (object) @Element
    \*/

    /*\
     * Element.mouseup
     [ method ]
     **
     * Adds event handler for mouseup for the element.
     > Parameters
     - handler (function) handler for the event
     = (object) @Element
    \*/
    /*\
     * Element.unmouseup
     [ method ]
     **
     * Removes event handler for mouseup for the element.
     > Parameters
     - handler (function) #optional handler for the event
     = (object) @Element
    \*/

    /*\
     * Element.touchstart
     [ method ]
     **
     * Adds event handler for touchstart for the element.
     > Parameters
     - handler (function) handler for the event
     = (object) @Element
    \*/
    /*\
     * Element.untouchstart
     [ method ]
     **
     * Removes event handler for touchstart for the element.
     > Parameters
     - handler (function) #optional handler for the event
     = (object) @Element
    \*/

    /*\
     * Element.touchmove
     [ method ]
     **
     * Adds event handler for touchmove for the element.
     > Parameters
     - handler (function) handler for the event
     = (object) @Element
    \*/
    /*\
     * Element.untouchmove
     [ method ]
     **
     * Removes event handler for touchmove for the element.
     > Parameters
     - handler (function) #optional handler for the event
     = (object) @Element
    \*/

    /*\
     * Element.touchend
     [ method ]
     **
     * Adds event handler for touchend for the element.
     > Parameters
     - handler (function) handler for the event
     = (object) @Element
    \*/
    /*\
     * Element.untouchend
     [ method ]
     **
     * Removes event handler for touchend for the element.
     > Parameters
     - handler (function) #optional handler for the event
     = (object) @Element
    \*/

    /*\
     * Element.touchcancel
     [ method ]
     **
     * Adds event handler for touchcancel for the element.
     > Parameters
     - handler (function) handler for the event
     = (object) @Element
    \*/
    /*\
     * Element.untouchcancel
     [ method ]
     **
     * Removes event handler for touchcancel for the element.
     > Parameters
     - handler (function) #optional handler for the event
     = (object) @Element
    \*/
    for (var i = events.length; i--;) {
        (function (eventName) {
            R[eventName] = elproto[eventName] = function (fn, scope) {
                if (R.is(fn, "function")) {
                    this.events = this.events || [];
                    this.events.push({name: eventName, f: fn, unbind: addEvent(this.shape || this.node || g.doc, eventName, fn, scope || this)});
                }
                return this;
            };
            R["un" + eventName] = elproto["un" + eventName] = function (fn) {
                var events = this.events || [],
                    l = events.length;
                while (l--){
                    if (events[l].name == eventName && (R.is(fn, "undefined") || events[l].f == fn)) {
                        events[l].unbind();
                        events.splice(l, 1);
                        !events.length && delete this.events;
                    }
                }
                return this;
            };
        })(events[i]);
    }

    /*\
     * Element.data
     [ method ]
     **
     * Adds or retrieves given value asociated with given key.
     **
     * See also @Element.removeData
     > Parameters
     - key (string) key to store data
     - value (any) #optional value to store
     = (object) @Element
     * or, if value is not specified:
     = (any) value
     * or, if key and value are not specified:
     = (object) Key/value pairs for all the data associated with the element.
     > Usage
     | for (var i = 0, i < 5, i++) {
     |     paper.circle(10 + 15 * i, 10, 10)
     |          .attr({fill: "#000"})
     |          .data("i", i)
     |          .click(function () {
     |             alert(this.data("i"));
     |          });
     | }
    \*/
    elproto.data = function (key, value) {
        var data = eldata[this.id] = eldata[this.id] || {};
        if (arguments.length == 0) {
            return data;
        }
        if (arguments.length == 1) {
            if (R.is(key, "object")) {
                for (var i in key) if (key[has](i)) {
                    this.data(i, key[i]);
                }
                return this;
            }
            eve("raphael.data.get." + this.id, this, data[key], key);
            return data[key];
        }
        data[key] = value;
        eve("raphael.data.set." + this.id, this, value, key);
        return this;
    };
    /*\
     * Element.removeData
     [ method ]
     **
     * Removes value associated with an element by given key.
     * If key is not provided, removes all the data of the element.
     > Parameters
     - key (string) #optional key
     = (object) @Element
    \*/
    elproto.removeData = function (key) {
        if (key == null) {
            eldata[this.id] = {};
        } else {
            eldata[this.id] && delete eldata[this.id][key];
        }
        return this;
    };
     /*\
     * Element.getData
     [ method ]
     **
     * Retrieves the element data
     = (object) data
    \*/
    elproto.getData = function () {
        return clone(eldata[this.id] || {});
    };
    /*\
     * Element.hover
     [ method ]
     **
     * Adds event handlers for hover for the element.
     > Parameters
     - f_in (function) handler for hover in
     - f_out (function) handler for hover out
     - icontext (object) #optional context for hover in handler
     - ocontext (object) #optional context for hover out handler
     = (object) @Element
    \*/
    elproto.hover = function (f_in, f_out, scope_in, scope_out) {
        return this.mouseover(f_in, scope_in).mouseout(f_out, scope_out || scope_in);
    };
    /*\
     * Element.unhover
     [ method ]
     **
     * Removes event handlers for hover for the element.
     > Parameters
     - f_in (function) handler for hover in
     - f_out (function) handler for hover out
     = (object) @Element
    \*/
    elproto.unhover = function (f_in, f_out) {
        return this.unmouseover(f_in).unmouseout(f_out);
    };
    var draggable = [];
    /*\
     * Element.drag
     [ method ]
     **
     * Adds event handlers for drag of the element.
     > Parameters
     - onmove (function) handler for moving
     - onstart (function) handler for drag start
     - onend (function) handler for drag end
     - mcontext (object) #optional context for moving handler
     - scontext (object) #optional context for drag start handler
     - econtext (object) #optional context for drag end handler
     * Additionaly following `drag` events will be triggered: `drag.start.<id>` on start,
     * `drag.end.<id>` on end and `drag.move.<id>` on every move. When element will be dragged over another element
     * `drag.over.<id>` will be fired as well.
     *
     * Start event and start handler will be called in specified context or in context of the element with following parameters:
     o x (number) x position of the mouse
     o y (number) y position of the mouse
     o event (object) DOM event object
     * Move event and move handler will be called in specified context or in context of the element with following parameters:
     o dx (number) shift by x from the start point
     o dy (number) shift by y from the start point
     o x (number) x position of the mouse
     o y (number) y position of the mouse
     o event (object) DOM event object
     * End event and end handler will be called in specified context or in context of the element with following parameters:
     o event (object) DOM event object
     = (object) @Element
    \*/
    elproto.drag = function (onmove, onstart, onend, move_scope, start_scope, end_scope) {
        function start(e) {
            (e.originalEvent || e).preventDefault();
            var x = e.clientX,
                y = e.clientY,
                scrollY = g.doc.documentElement.scrollTop || g.doc.body.scrollTop,
                scrollX = g.doc.documentElement.scrollLeft || g.doc.body.scrollLeft;
            this._drag.id = e.identifier;
            if (supportsTouch && e.touches) {
                var i = e.touches.length, touch;
                while (i--) {
                    touch = e.touches[i];
                    this._drag.id = touch.identifier;
                    if (touch.identifier == this._drag.id) {
                        x = touch.clientX;
                        y = touch.clientY;
                        break;
                    }
                }
            }
            this._drag.x = x + scrollX;
            this._drag.y = y + scrollY;
            !drag.length && R.mousemove(dragMove).mouseup(dragUp);
            drag.push({el: this, move_scope: move_scope, start_scope: start_scope, end_scope: end_scope});
            onstart && eve.on("raphael.drag.start." + this.id, onstart);
            onmove && eve.on("raphael.drag.move." + this.id, onmove);
            onend && eve.on("raphael.drag.end." + this.id, onend);
            eve("raphael.drag.start." + this.id, start_scope || move_scope || this, e.clientX + scrollX, e.clientY + scrollY, e);
        }
        this._drag = {};
        draggable.push({el: this, start: start});
        this.mousedown(start);
        return this;
    };
    /*\
     * Element.onDragOver
     [ method ]
     **
     * Shortcut for assigning event handler for `drag.over.<id>` event, where id is id of the element (see @Element.id).
     > Parameters
     - f (function) handler for event, first argument would be the element you are dragging over
    \*/
    elproto.onDragOver = function (f) {
        f ? eve.on("raphael.drag.over." + this.id, f) : eve.unbind("raphael.drag.over." + this.id);
    };
    /*\
     * Element.undrag
     [ method ]
     **
     * Removes all drag event handlers from given element.
    \*/
    elproto.undrag = function () {
        var i = draggable.length;
        while (i--) if (draggable[i].el == this) {
            this.unmousedown(draggable[i].start);
            draggable.splice(i, 1);
            eve.unbind("raphael.drag.*." + this.id);
        }
        !draggable.length && R.unmousemove(dragMove).unmouseup(dragUp);
        drag = [];
    };
    /*\
     * Paper.circle
     [ method ]
     **
     * Draws a circle.
     **
     > Parameters
     **
     - x (number) x coordinate of the centre
     - y (number) y coordinate of the centre
     - r (number) radius
     = (object) Raphaël element object with type “circle”
     **
     > Usage
     | var c = paper.circle(50, 50, 40);
    \*/
    paperproto.circle = function (x, y, r) {
        var out = R._engine.circle(this, x || 0, y || 0, r || 0);
        this.__set__ && this.__set__.push(out);
        return out;
    };
    /*\
     * Paper.rect
     [ method ]
     *
     * Draws a rectangle.
     **
     > Parameters
     **
     - x (number) x coordinate of the top left corner
     - y (number) y coordinate of the top left corner
     - width (number) width
     - height (number) height
     - r (number) #optional radius for rounded corners, default is 0
     = (object) Raphaël element object with type “rect”
     **
     > Usage
     | // regular rectangle
     | var c = paper.rect(10, 10, 50, 50);
     | // rectangle with rounded corners
     | var c = paper.rect(40, 40, 50, 50, 10);
    \*/
    paperproto.rect = function (x, y, w, h, r) {
        var out = R._engine.rect(this, x || 0, y || 0, w || 0, h || 0, r || 0);
        this.__set__ && this.__set__.push(out);
        return out;
    };
    /*\
     * Paper.ellipse
     [ method ]
     **
     * Draws an ellipse.
     **
     > Parameters
     **
     - x (number) x coordinate of the centre
     - y (number) y coordinate of the centre
     - rx (number) horizontal radius
     - ry (number) vertical radius
     = (object) Raphaël element object with type “ellipse”
     **
     > Usage
     | var c = paper.ellipse(50, 50, 40, 20);
    \*/
    paperproto.ellipse = function (x, y, rx, ry) {
        var out = R._engine.ellipse(this, x || 0, y || 0, rx || 0, ry || 0);
        this.__set__ && this.__set__.push(out);
        return out;
    };
    /*\
     * Paper.path
     [ method ]
     **
     * Creates a path element by given path data string.
     > Parameters
     - pathString (string) #optional path string in SVG format.
     * Path string consists of one-letter commands, followed by comma seprarated arguments in numercal form. Example:
     | "M10,20L30,40"
     * Here we can see two commands: “M”, with arguments `(10, 20)` and “L” with arguments `(30, 40)`. Upper case letter mean command is absolute, lower case—relative.
     *
     # <p>Here is short list of commands available, for more details see <a href="http://www.w3.org/TR/SVG/paths.html#PathData" title="Details of a path's data attribute's format are described in the SVG specification.">SVG path string format</a>.</p>
     # <table><thead><tr><th>Command</th><th>Name</th><th>Parameters</th></tr></thead><tbody>
     # <tr><td>M</td><td>moveto</td><td>(x y)+</td></tr>
     # <tr><td>Z</td><td>closepath</td><td>(none)</td></tr>
     # <tr><td>L</td><td>lineto</td><td>(x y)+</td></tr>
     # <tr><td>H</td><td>horizontal lineto</td><td>x+</td></tr>
     # <tr><td>V</td><td>vertical lineto</td><td>y+</td></tr>
     # <tr><td>C</td><td>curveto</td><td>(x1 y1 x2 y2 x y)+</td></tr>
     # <tr><td>S</td><td>smooth curveto</td><td>(x2 y2 x y)+</td></tr>
     # <tr><td>Q</td><td>quadratic Bézier curveto</td><td>(x1 y1 x y)+</td></tr>
     # <tr><td>T</td><td>smooth quadratic Bézier curveto</td><td>(x y)+</td></tr>
     # <tr><td>A</td><td>elliptical arc</td><td>(rx ry x-axis-rotation large-arc-flag sweep-flag x y)+</td></tr>
     # <tr><td>R</td><td><a href="http://en.wikipedia.org/wiki/Catmull–Rom_spline#Catmull.E2.80.93Rom_spline">Catmull-Rom curveto</a>*</td><td>x1 y1 (x y)+</td></tr></tbody></table>
     * * “Catmull-Rom curveto” is a not standard SVG command and added in 2.0 to make life easier.
     * Note: there is a special case when path consist of just three commands: “M10,10R…z”. In this case path will smoothly connects to its beginning.
     > Usage
     | var c = paper.path("M10 10L90 90");
     | // draw a diagonal line:
     | // move to 10,10, line to 90,90
     * For example of path strings, check out these icons: http://raphaeljs.com/icons/
    \*/
    paperproto.path = function (pathString) {
        pathString && !R.is(pathString, string) && !R.is(pathString[0], array) && (pathString += E);
        var out = R._engine.path(R.format[apply](R, arguments), this);
        this.__set__ && this.__set__.push(out);
        return out;
    };
    /*\
     * Paper.image
     [ method ]
     **
     * Embeds an image into the surface.
     **
     > Parameters
     **
     - src (string) URI of the source image
     - x (number) x coordinate position
     - y (number) y coordinate position
     - width (number) width of the image
     - height (number) height of the image
     = (object) Raphaël element object with type “image”
     **
     > Usage
     | var c = paper.image("apple.png", 10, 10, 80, 80);
    \*/
    paperproto.image = function (src, x, y, w, h) {
        var out = R._engine.image(this, src || "about:blank", x || 0, y || 0, w || 0, h || 0);
        this.__set__ && this.__set__.push(out);
        return out;
    };
    /*\
     * Paper.text
     [ method ]
     **
     * Draws a text string. If you need line breaks, put “\n” in the string.
     **
     > Parameters
     **
     - x (number) x coordinate position
     - y (number) y coordinate position
     - text (string) The text string to draw
     = (object) Raphaël element object with type “text”
     **
     > Usage
     | var t = paper.text(50, 50, "Raphaël\nkicks\nbutt!");
    \*/
    paperproto.text = function (x, y, text) {
        var out = R._engine.text(this, x || 0, y || 0, Str(text));
        this.__set__ && this.__set__.push(out);
        return out;
    };
    /*\
     * Paper.set
     [ method ]
     **
     * Creates array-like object to keep and operate several elements at once.
     * Warning: it doesn’t create any elements for itself in the page, it just groups existing elements.
     * Sets act as pseudo elements — all methods available to an element can be used on a set.
     = (object) array-like object that represents set of elements
     **
     > Usage
     | var st = paper.set();
     | st.push(
     |     paper.circle(10, 10, 5),
     |     paper.circle(30, 10, 5)
     | );
     | st.attr({fill: "red"}); // changes the fill of both circles
    \*/
    paperproto.set = function (itemsArray) {
        !R.is(itemsArray, "array") && (itemsArray = Array.prototype.splice.call(arguments, 0, arguments.length));
        var out = new Set(itemsArray);
        this.__set__ && this.__set__.push(out);
        out["paper"] = this;
        out["type"] = "set";
        return out;
    };
    /*\
     * Paper.setStart
     [ method ]
     **
     * Creates @Paper.set. All elements that will be created after calling this method and before calling
     * @Paper.setFinish will be added to the set.
     **
     > Usage
     | paper.setStart();
     | paper.circle(10, 10, 5),
     | paper.circle(30, 10, 5)
     | var st = paper.setFinish();
     | st.attr({fill: "red"}); // changes the fill of both circles
    \*/
    paperproto.setStart = function (set) {
        this.__set__ = set || this.set();
    };
    /*\
     * Paper.setFinish
     [ method ]
     **
     * See @Paper.setStart. This method finishes catching and returns resulting set.
     **
     = (object) set
    \*/
    paperproto.setFinish = function (set) {
        var out = this.__set__;
        delete this.__set__;
        return out;
    };
    /*\
     * Paper.getSize
     [ method ]
     **
     * Obtains current paper actual size.
     **
     = (object)
     \*/
    paperproto.getSize = function () {
        var container = this.canvas.parentNode;
        return {
            width: container.offsetWidth,
            height: container.offsetHeight
                };
        };
    /*\
     * Paper.setSize
     [ method ]
     **
     * If you need to change dimensions of the canvas call this method
     **
     > Parameters
     **
     - width (number) new width of the canvas
     - height (number) new height of the canvas
    \*/
    paperproto.setSize = function (width, height) {
        return R._engine.setSize.call(this, width, height);
    };
    /*\
     * Paper.setViewBox
     [ method ]
     **
     * Sets the view box of the paper. Practically it gives you ability to zoom and pan whole paper surface by
     * specifying new boundaries.
     **
     > Parameters
     **
     - x (number) new x position, default is `0`
     - y (number) new y position, default is `0`
     - w (number) new width of the canvas
     - h (number) new height of the canvas
     - fit (boolean) `true` if you want graphics to fit into new boundary box
    \*/
    paperproto.setViewBox = function (x, y, w, h, fit) {
        return R._engine.setViewBox.call(this, x, y, w, h, fit);
    };
    /*\
     * Paper.top
     [ property ]
     **
     * Points to the topmost element on the paper
    \*/
    /*\
     * Paper.bottom
     [ property ]
     **
     * Points to the bottom element on the paper
    \*/
    paperproto.top = paperproto.bottom = null;
    /*\
     * Paper.raphael
     [ property ]
     **
     * Points to the @Raphael object/function
    \*/
    paperproto.raphael = R;
    var getOffset = function (elem) {
        var box = elem.getBoundingClientRect(),
            doc = elem.ownerDocument,
            body = doc.body,
            docElem = doc.documentElement,
            clientTop = docElem.clientTop || body.clientTop || 0, clientLeft = docElem.clientLeft || body.clientLeft || 0,
            top  = box.top  + (g.win.pageYOffset || docElem.scrollTop || body.scrollTop ) - clientTop,
            left = box.left + (g.win.pageXOffset || docElem.scrollLeft || body.scrollLeft) - clientLeft;
        return {
            y: top,
            x: left
        };
    };
    /*\
     * Paper.getElementByPoint
     [ method ]
     **
     * Returns you topmost element under given point.
     **
     = (object) Raphaël element object
     > Parameters
     **
     - x (number) x coordinate from the top left corner of the window
     - y (number) y coordinate from the top left corner of the window
     > Usage
     | paper.getElementByPoint(mouseX, mouseY).attr({stroke: "#f00"});
    \*/
    paperproto.getElementByPoint = function (x, y) {
        var paper = this,
            svg = paper.canvas,
            target = g.doc.elementFromPoint(x, y);
        if (g.win.opera && target.tagName == "svg") {
            var so = getOffset(svg),
                sr = svg.createSVGRect();
            sr.x = x - so.x;
            sr.y = y - so.y;
            sr.width = sr.height = 1;
            var hits = svg.getIntersectionList(sr, null);
            if (hits.length) {
                target = hits[hits.length - 1];
            }
        }
        if (!target) {
            return null;
        }
        while (target.parentNode && target != svg.parentNode && !target.raphael) {
            target = target.parentNode;
        }
        target == paper.canvas.parentNode && (target = svg);
        target = target && target.raphael ? paper.getById(target.raphaelid) : null;
        return target;
    };

    /*\
     * Paper.getElementsByBBox
     [ method ]
     **
     * Returns set of elements that have an intersecting bounding box
     **
     > Parameters
     **
     - bbox (object) bbox to check with
     = (object) @Set
     \*/
    paperproto.getElementsByBBox = function (bbox) {
        var set = this.set();
        this.forEach(function (el) {
            if (R.isBBoxIntersect(el.getBBox(), bbox)) {
                set.push(el);
            }
        });
        return set;
    };

    /*\
     * Paper.getById
     [ method ]
     **
     * Returns you element by its internal ID.
     **
     > Parameters
     **
     - id (number) id
     = (object) Raphaël element object
    \*/
    paperproto.getById = function (id) {
        var bot = this.bottom;
        while (bot) {
            if (bot.id == id) {
                return bot;
            }
            bot = bot.next;
        }
        return null;
    };
    /*\
     * Paper.forEach
     [ method ]
     **
     * Executes given function for each element on the paper
     *
     * If callback function returns `false` it will stop loop running.
     **
     > Parameters
     **
     - callback (function) function to run
     - thisArg (object) context object for the callback
     = (object) Paper object
     > Usage
     | paper.forEach(function (el) {
     |     el.attr({ stroke: "blue" });
     | });
    \*/
    paperproto.forEach = function (callback, thisArg) {
        var bot = this.bottom;
        while (bot) {
            if (callback.call(thisArg, bot) === false) {
                return this;
            }
            bot = bot.next;
        }
        return this;
    };
    /*\
     * Paper.getElementsByPoint
     [ method ]
     **
     * Returns set of elements that have common point inside
     **
     > Parameters
     **
     - x (number) x coordinate of the point
     - y (number) y coordinate of the point
     = (object) @Set
    \*/
    paperproto.getElementsByPoint = function (x, y) {
        var set = this.set();
        this.forEach(function (el) {
            if (el.isPointInside(x, y)) {
                set.push(el);
            }
        });
        return set;
    };
    function x_y() {
        return this.x + S + this.y;
    }
    function x_y_w_h() {
        return this.x + S + this.y + S + this.width + " \xd7 " + this.height;
    }
    /*\
     * Element.isPointInside
     [ method ]
     **
     * Determine if given point is inside this element’s shape
     **
     > Parameters
     **
     - x (number) x coordinate of the point
     - y (number) y coordinate of the point
     = (boolean) `true` if point inside the shape
    \*/
    elproto.isPointInside = function (x, y) {
        var rp = this.realPath = getPath[this.type](this);
        if (this.attr('transform') && this.attr('transform').length) {
            rp = R.transformPath(rp, this.attr('transform'));
        }
        return R.isPointInsidePath(rp, x, y);
    };
    /*\
     * Element.getBBox
     [ method ]
     **
     * Return bounding box for a given element
     **
     > Parameters
     **
     - isWithoutTransform (boolean) flag, `true` if you want to have bounding box before transformations. Default is `false`.
     = (object) Bounding box object:
     o {
     o     x: (number) top left corner x
     o     y: (number) top left corner y
     o     x2: (number) bottom right corner x
     o     y2: (number) bottom right corner y
     o     width: (number) width
     o     height: (number) height
     o }
    \*/
    elproto.getBBox = function (isWithoutTransform) {
        if (this.removed) {
            return {};
        }
        var _ = this._;
        if (isWithoutTransform) {
            if (_.dirty || !_.bboxwt) {
                this.realPath = getPath[this.type](this);
                _.bboxwt = pathDimensions(this.realPath);
                _.bboxwt.toString = x_y_w_h;
                _.dirty = 0;
            }
            return _.bboxwt;
        }
        if (_.dirty || _.dirtyT || !_.bbox) {
            if (_.dirty || !this.realPath) {
                _.bboxwt = 0;
                this.realPath = getPath[this.type](this);
            }
            _.bbox = pathDimensions(mapPath(this.realPath, this.matrix));
            _.bbox.toString = x_y_w_h;
            _.dirty = _.dirtyT = 0;
        }
        return _.bbox;
    };
    /*\
     * Element.clone
     [ method ]
     **
     = (object) clone of a given element
     **
    \*/
    elproto.clone = function () {
        if (this.removed) {
            return null;
        }
        var out = this.paper[this.type]().attr(this.attr());
        this.__set__ && this.__set__.push(out);
        return out;
    };
    /*\
     * Element.glow
     [ method ]
     **
     * Return set of elements that create glow-like effect around given element. See @Paper.set.
     *
     * Note: Glow is not connected to the element. If you change element attributes it won’t adjust itself.
     **
     > Parameters
     **
     - glow (object) #optional parameters object with all properties optional:
     o {
     o     width (number) size of the glow, default is `10`
     o     fill (boolean) will it be filled, default is `false`
     o     opacity (number) opacity, default is `0.5`
     o     offsetx (number) horizontal offset, default is `0`
     o     offsety (number) vertical offset, default is `0`
     o     color (string) glow colour, default is `black`
     o }
     = (object) @Paper.set of elements that represents glow
    \*/
    elproto.glow = function (glow) {
        if (this.type == "text") {
            return null;
        }
        glow = glow || {};
        var s = {
            width: (glow.width || 10) + (+this.attr("stroke-width") || 1),
            fill: glow.fill || false,
            opacity: glow.opacity || .5,
            offsetx: glow.offsetx || 0,
            offsety: glow.offsety || 0,
            color: glow.color || "#000"
        },
            c = s.width / 2,
            r = this.paper,
            out = r.set(),
            path = this.realPath || getPath[this.type](this);
        path = this.matrix ? mapPath(path, this.matrix) : path;
        for (var i = 1; i < c + 1; i++) {
            out.push(r.path(path).attr({
                stroke: s.color,
                fill: s.fill ? s.color : "none",
                "stroke-linejoin": "round",
                "stroke-linecap": "round",
                "stroke-width": +(s.width / c * i).toFixed(3),
                opacity: +(s.opacity / c).toFixed(3)
            }));
        }
        return out.insertBefore(this).translate(s.offsetx, s.offsety);
    };
    var curveslengths = {},
    getPointAtSegmentLength = function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length) {
        if (length == null) {
            return bezlen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y);
        } else {
            return R.findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, getTatLen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length));
        }
    },
    getLengthFactory = function (istotal, subpath) {
        return function (path, length, onlystart) {
            path = path2curve(path);
            var x, y, p, l, sp = "", subpaths = {}, point,
                len = 0;
            for (var i = 0, ii = path.length; i < ii; i++) {
                p = path[i];
                if (p[0] == "M") {
                    x = +p[1];
                    y = +p[2];
                } else {
                    l = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);
                    if (len + l > length) {
                        if (subpath && !subpaths.start) {
                            point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);
                            sp += ["C" + point.start.x, point.start.y, point.m.x, point.m.y, point.x, point.y];
                            if (onlystart) {return sp;}
                            subpaths.start = sp;
                            sp = ["M" + point.x, point.y + "C" + point.n.x, point.n.y, point.end.x, point.end.y, p[5], p[6]].join();
                            len += l;
                            x = +p[5];
                            y = +p[6];
                            continue;
                        }
                        if (!istotal && !subpath) {
                            point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);
                            return {x: point.x, y: point.y, alpha: point.alpha};
                        }
                    }
                    len += l;
                    x = +p[5];
                    y = +p[6];
                }
                sp += p.shift() + p;
            }
            subpaths.end = sp;
            point = istotal ? len : subpath ? subpaths : R.findDotsAtSegment(x, y, p[0], p[1], p[2], p[3], p[4], p[5], 1);
            point.alpha && (point = {x: point.x, y: point.y, alpha: point.alpha});
            return point;
        };
    };
    var getTotalLength = getLengthFactory(1),
        getPointAtLength = getLengthFactory(),
        getSubpathsAtLength = getLengthFactory(0, 1);
    /*\
     * Raphael.getTotalLength
     [ method ]
     **
     * Returns length of the given path in pixels.
     **
     > Parameters
     **
     - path (string) SVG path string.
     **
     = (number) length.
    \*/
    R.getTotalLength = getTotalLength;
    /*\
     * Raphael.getPointAtLength
     [ method ]
     **
     * Return coordinates of the point located at the given length on the given path.
     **
     > Parameters
     **
     - path (string) SVG path string
     - length (number)
     **
     = (object) representation of the point:
     o {
     o     x: (number) x coordinate
     o     y: (number) y coordinate
     o     alpha: (number) angle of derivative
     o }
    \*/
    R.getPointAtLength = getPointAtLength;
    /*\
     * Raphael.getSubpath
     [ method ]
     **
     * Return subpath of a given path from given length to given length.
     **
     > Parameters
     **
     - path (string) SVG path string
     - from (number) position of the start of the segment
     - to (number) position of the end of the segment
     **
     = (string) pathstring for the segment
    \*/
    R.getSubpath = function (path, from, to) {
        if (this.getTotalLength(path) - to < 1e-6) {
            return getSubpathsAtLength(path, from).end;
        }
        var a = getSubpathsAtLength(path, to, 1);
        return from ? getSubpathsAtLength(a, from).end : a;
    };
    /*\
     * Element.getTotalLength
     [ method ]
     **
     * Returns length of the path in pixels. Only works for element of “path” type.
     = (number) length.
    \*/
    elproto.getTotalLength = function () {
        var path = this.getPath();
        if (!path) {
            return;
        }

        if (this.node.getTotalLength) {
            return this.node.getTotalLength();
        }

        return getTotalLength(path);
    };
    /*\
     * Element.getPointAtLength
     [ method ]
     **
     * Return coordinates of the point located at the given length on the given path. Only works for element of “path” type.
     **
     > Parameters
     **
     - length (number)
     **
     = (object) representation of the point:
     o {
     o     x: (number) x coordinate
     o     y: (number) y coordinate
     o     alpha: (number) angle of derivative
     o }
    \*/
    elproto.getPointAtLength = function (length) {
        var path = this.getPath();
        if (!path) {
            return;
        }

        return getPointAtLength(path, length);
    };
    /*\
     * Element.getPath
     [ method ]
     **
     * Returns path of the element. Only works for elements of “path” type and simple elements like circle.
     = (object) path
     **
    \*/
    elproto.getPath = function () {
        var path,
            getPath = R._getPath[this.type];

        if (this.type == "text" || this.type == "set") {
            return;
        }

        if (getPath) {
            path = getPath(this);
        }

        return path;
    };
    /*\
     * Element.getSubpath
     [ method ]
     **
     * Return subpath of a given element from given length to given length. Only works for element of “path” type.
     **
     > Parameters
     **
     - from (number) position of the start of the segment
     - to (number) position of the end of the segment
     **
     = (string) pathstring for the segment
    \*/
    elproto.getSubpath = function (from, to) {
        var path = this.getPath();
        if (!path) {
            return;
        }

        return R.getSubpath(path, from, to);
    };
    /*\
     * Raphael.easing_formulas
     [ property ]
     **
     * Object that contains easing formulas for animation. You could extend it with your own. By default it has following list of easing:
     # <ul>
     #     <li>“linear”</li>
     #     <li>“&lt;” or “easeIn” or “ease-in”</li>
     #     <li>“>” or “easeOut” or “ease-out”</li>
     #     <li>“&lt;>” or “easeInOut” or “ease-in-out”</li>
     #     <li>“backIn” or “back-in”</li>
     #     <li>“backOut” or “back-out”</li>
     #     <li>“elastic”</li>
     #     <li>“bounce”</li>
     # </ul>
     # <p>See also <a href="http://raphaeljs.com/easing.html">Easing demo</a>.</p>
    \*/
    var ef = R.easing_formulas = {
        linear: function (n) {
            return n;
        },
        "<": function (n) {
            return pow(n, 1.7);
        },
        ">": function (n) {
            return pow(n, .48);
        },
        "<>": function (n) {
            var q = .48 - n / 1.04,
                Q = math.sqrt(.1734 + q * q),
                x = Q - q,
                X = pow(abs(x), 1 / 3) * (x < 0 ? -1 : 1),
                y = -Q - q,
                Y = pow(abs(y), 1 / 3) * (y < 0 ? -1 : 1),
                t = X + Y + .5;
            return (1 - t) * 3 * t * t + t * t * t;
        },
        backIn: function (n) {
            var s = 1.70158;
            return n * n * ((s + 1) * n - s);
        },
        backOut: function (n) {
            n = n - 1;
            var s = 1.70158;
            return n * n * ((s + 1) * n + s) + 1;
        },
        elastic: function (n) {
            if (n == !!n) {
                return n;
            }
            return pow(2, -10 * n) * math.sin((n - .075) * (2 * PI) / .3) + 1;
        },
        bounce: function (n) {
            var s = 7.5625,
                p = 2.75,
                l;
            if (n < (1 / p)) {
                l = s * n * n;
            } else {
                if (n < (2 / p)) {
                    n -= (1.5 / p);
                    l = s * n * n + .75;
                } else {
                    if (n < (2.5 / p)) {
                        n -= (2.25 / p);
                        l = s * n * n + .9375;
                    } else {
                        n -= (2.625 / p);
                        l = s * n * n + .984375;
                    }
                }
            }
            return l;
        }
    };
    ef.easeIn = ef["ease-in"] = ef["<"];
    ef.easeOut = ef["ease-out"] = ef[">"];
    ef.easeInOut = ef["ease-in-out"] = ef["<>"];
    ef["back-in"] = ef.backIn;
    ef["back-out"] = ef.backOut;

    var animationElements = [],
        requestAnimFrame = window.requestAnimationFrame       ||
                           window.webkitRequestAnimationFrame ||
                           window.mozRequestAnimationFrame    ||
                           window.oRequestAnimationFrame      ||
                           window.msRequestAnimationFrame     ||
                           function (callback) {
                               setTimeout(callback, 16);
                           },
        animation = function () {
            var Now = +new Date,
                l = 0;
            for (; l < animationElements.length; l++) {
                var e = animationElements[l];
                if (e.el.removed || e.paused) {
                    continue;
                }
                var time = Now - e.start,
                    ms = e.ms,
                    easing = e.easing,
                    from = e.from,
                    diff = e.diff,
                    to = e.to,
                    t = e.t,
                    that = e.el,
                    set = {},
                    now,
                    init = {},
                    key;
                if (e.initstatus) {
                    time = (e.initstatus * e.anim.top - e.prev) / (e.percent - e.prev) * ms;
                    e.status = e.initstatus;
                    delete e.initstatus;
                    e.stop && animationElements.splice(l--, 1);
                } else {
                    e.status = (e.prev + (e.percent - e.prev) * (time / ms)) / e.anim.top;
                }
                if (time < 0) {
                    continue;
                }
                if (time < ms) {
                    var pos = easing(time / ms);
                    for (var attr in from) if (from[has](attr)) {
                        switch (availableAnimAttrs[attr]) {
                            case nu:
                                now = +from[attr] + pos * ms * diff[attr];
                                break;
                            case "colour":
                                now = "rgb(" + [
                                    upto255(round(from[attr].r + pos * ms * diff[attr].r)),
                                    upto255(round(from[attr].g + pos * ms * diff[attr].g)),
                                    upto255(round(from[attr].b + pos * ms * diff[attr].b))
                                ].join(",") + ")";
                                break;
                            case "path":
                                now = [];
                                for (var i = 0, ii = from[attr].length; i < ii; i++) {
                                    now[i] = [from[attr][i][0]];
                                    for (var j = 1, jj = from[attr][i].length; j < jj; j++) {
                                        now[i][j] = +from[attr][i][j] + pos * ms * diff[attr][i][j];
                                    }
                                    now[i] = now[i].join(S);
                                }
                                now = now.join(S);
                                break;
                            case "transform":
                                if (diff[attr].real) {
                                    now = [];
                                    for (i = 0, ii = from[attr].length; i < ii; i++) {
                                        now[i] = [from[attr][i][0]];
                                        for (j = 1, jj = from[attr][i].length; j < jj; j++) {
                                            now[i][j] = from[attr][i][j] + pos * ms * diff[attr][i][j];
                                        }
                                    }
                                } else {
                                    var get = function (i) {
                                        return +from[attr][i] + pos * ms * diff[attr][i];
                                    };
                                    // now = [["r", get(2), 0, 0], ["t", get(3), get(4)], ["s", get(0), get(1), 0, 0]];
                                    now = [["m", get(0), get(1), get(2), get(3), get(4), get(5)]];
                                }
                                break;
                            case "csv":
                                if (attr == "clip-rect") {
                                    now = [];
                                    i = 4;
                                    while (i--) {
                                        now[i] = +from[attr][i] + pos * ms * diff[attr][i];
                                    }
                                }
                                break;
                            default:
                                var from2 = [][concat](from[attr]);
                                now = [];
                                i = that.paper.customAttributes[attr].length;
                                while (i--) {
                                    now[i] = +from2[i] + pos * ms * diff[attr][i];
                                }
                                break;
                        }
                        set[attr] = now;
                    }
                    that.attr(set);
                    (function (id, that, anim) {
                        setTimeout(function () {
                            eve("raphael.anim.frame." + id, that, anim);
                        });
                    })(that.id, that, e.anim);
                } else {
                    (function(f, el, a) {
                        setTimeout(function() {
                            eve("raphael.anim.frame." + el.id, el, a);
                            eve("raphael.anim.finish." + el.id, el, a);
                            R.is(f, "function") && f.call(el);
                        });
                    })(e.callback, that, e.anim);
                    that.attr(to);
                    animationElements.splice(l--, 1);
                    if (e.repeat > 1 && !e.next) {
                        for (key in to) if (to[has](key)) {
                            init[key] = e.totalOrigin[key];
                        }
                        e.el.attr(init);
                        runAnimation(e.anim, e.el, e.anim.percents[0], null, e.totalOrigin, e.repeat - 1);
                    }
                    if (e.next && !e.stop) {
                        runAnimation(e.anim, e.el, e.next, null, e.totalOrigin, e.repeat);
                    }
                }
            }
            animationElements.length && requestAnimFrame(animation);
        },
        upto255 = function (color) {
            return color > 255 ? 255 : color < 0 ? 0 : color;
        };
    /*\
     * Element.animateWith
     [ method ]
     **
     * Acts similar to @Element.animate, but ensure that given animation runs in sync with another given element.
     **
     > Parameters
     **
     - el (object) element to sync with
     - anim (object) animation to sync with
     - params (object) #optional final attributes for the element, see also @Element.attr
     - ms (number) #optional number of milliseconds for animation to run
     - easing (string) #optional easing type. Accept on of @Raphael.easing_formulas or CSS format: `cubic&#x2010;bezier(XX,&#160;XX,&#160;XX,&#160;XX)`
     - callback (function) #optional callback function. Will be called at the end of animation.
     * or
     - element (object) element to sync with
     - anim (object) animation to sync with
     - animation (object) #optional animation object, see @Raphael.animation
     **
     = (object) original element
    \*/
    elproto.animateWith = function (el, anim, params, ms, easing, callback) {
        var element = this;
        if (element.removed) {
            callback && callback.call(element);
            return element;
        }
        var a = params instanceof Animation ? params : R.animation(params, ms, easing, callback),
            x, y;
        runAnimation(a, element, a.percents[0], null, element.attr());
        for (var i = 0, ii = animationElements.length; i < ii; i++) {
            if (animationElements[i].anim == anim && animationElements[i].el == el) {
                animationElements[ii - 1].start = animationElements[i].start;
                break;
            }
        }
        return element;
        //
        //
        // var a = params ? R.animation(params, ms, easing, callback) : anim,
        //     status = element.status(anim);
        // return this.animate(a).status(a, status * anim.ms / a.ms);
    };
    function CubicBezierAtTime(t, p1x, p1y, p2x, p2y, duration) {
        var cx = 3 * p1x,
            bx = 3 * (p2x - p1x) - cx,
            ax = 1 - cx - bx,
            cy = 3 * p1y,
            by = 3 * (p2y - p1y) - cy,
            ay = 1 - cy - by;
        function sampleCurveX(t) {
            return ((ax * t + bx) * t + cx) * t;
        }
        function solve(x, epsilon) {
            var t = solveCurveX(x, epsilon);
            return ((ay * t + by) * t + cy) * t;
        }
        function solveCurveX(x, epsilon) {
            var t0, t1, t2, x2, d2, i;
            for(t2 = x, i = 0; i < 8; i++) {
                x2 = sampleCurveX(t2) - x;
                if (abs(x2) < epsilon) {
                    return t2;
                }
                d2 = (3 * ax * t2 + 2 * bx) * t2 + cx;
                if (abs(d2) < 1e-6) {
                    break;
                }
                t2 = t2 - x2 / d2;
            }
            t0 = 0;
            t1 = 1;
            t2 = x;
            if (t2 < t0) {
                return t0;
            }
            if (t2 > t1) {
                return t1;
            }
            while (t0 < t1) {
                x2 = sampleCurveX(t2);
                if (abs(x2 - x) < epsilon) {
                    return t2;
                }
                if (x > x2) {
                    t0 = t2;
                } else {
                    t1 = t2;
                }
                t2 = (t1 - t0) / 2 + t0;
            }
            return t2;
        }
        return solve(t, 1 / (200 * duration));
    }
    elproto.onAnimation = function (f) {
        f ? eve.on("raphael.anim.frame." + this.id, f) : eve.unbind("raphael.anim.frame." + this.id);
        return this;
    };
    function Animation(anim, ms) {
        var percents = [],
            newAnim = {};
        this.ms = ms;
        this.times = 1;
        if (anim) {
            for (var attr in anim) if (anim[has](attr)) {
                newAnim[toFloat(attr)] = anim[attr];
                percents.push(toFloat(attr));
            }
            percents.sort(sortByNumber);
        }
        this.anim = newAnim;
        this.top = percents[percents.length - 1];
        this.percents = percents;
    }
    /*\
     * Animation.delay
     [ method ]
     **
     * Creates a copy of existing animation object with given delay.
     **
     > Parameters
     **
     - delay (number) number of ms to pass between animation start and actual animation
     **
     = (object) new altered Animation object
     | var anim = Raphael.animation({cx: 10, cy: 20}, 2e3);
     | circle1.animate(anim); // run the given animation immediately
     | circle2.animate(anim.delay(500)); // run the given animation after 500 ms
    \*/
    Animation.prototype.delay = function (delay) {
        var a = new Animation(this.anim, this.ms);
        a.times = this.times;
        a.del = +delay || 0;
        return a;
    };
    /*\
     * Animation.repeat
     [ method ]
     **
     * Creates a copy of existing animation object with given repetition.
     **
     > Parameters
     **
     - repeat (number) number iterations of animation. For infinite animation pass `Infinity`
     **
     = (object) new altered Animation object
    \*/
    Animation.prototype.repeat = function (times) {
        var a = new Animation(this.anim, this.ms);
        a.del = this.del;
        a.times = math.floor(mmax(times, 0)) || 1;
        return a;
    };
    function runAnimation(anim, element, percent, status, totalOrigin, times) {
        percent = toFloat(percent);
        var params,
            isInAnim,
            isInAnimSet,
            percents = [],
            next,
            prev,
            timestamp,
            ms = anim.ms,
            from = {},
            to = {},
            diff = {};
        if (status) {
            for (i = 0, ii = animationElements.length; i < ii; i++) {
                var e = animationElements[i];
                if (e.el.id == element.id && e.anim == anim) {
                    if (e.percent != percent) {
                        animationElements.splice(i, 1);
                        isInAnimSet = 1;
                    } else {
                        isInAnim = e;
                    }
                    element.attr(e.totalOrigin);
                    break;
                }
            }
        } else {
            status = +to; // NaN
        }
        for (var i = 0, ii = anim.percents.length; i < ii; i++) {
            if (anim.percents[i] == percent || anim.percents[i] > status * anim.top) {
                percent = anim.percents[i];
                prev = anim.percents[i - 1] || 0;
                ms = ms / anim.top * (percent - prev);
                next = anim.percents[i + 1];
                params = anim.anim[percent];
                break;
            } else if (status) {
                element.attr(anim.anim[anim.percents[i]]);
            }
        }
        if (!params) {
            return;
        }
        if (!isInAnim) {
            for (var attr in params) if (params[has](attr)) {
                if (availableAnimAttrs[has](attr) || element.paper.customAttributes[has](attr)) {
                    from[attr] = element.attr(attr);
                    (from[attr] == null) && (from[attr] = availableAttrs[attr]);
                    to[attr] = params[attr];
                    switch (availableAnimAttrs[attr]) {
                        case nu:
                            diff[attr] = (to[attr] - from[attr]) / ms;
                            break;
                        case "colour":
                            from[attr] = R.getRGB(from[attr]);
                            var toColour = R.getRGB(to[attr]);
                            diff[attr] = {
                                r: (toColour.r - from[attr].r) / ms,
                                g: (toColour.g - from[attr].g) / ms,
                                b: (toColour.b - from[attr].b) / ms
                            };
                            break;
                        case "path":
                            var pathes = path2curve(from[attr], to[attr]),
                                toPath = pathes[1];
                            from[attr] = pathes[0];
                            diff[attr] = [];
                            for (i = 0, ii = from[attr].length; i < ii; i++) {
                                diff[attr][i] = [0];
                                for (var j = 1, jj = from[attr][i].length; j < jj; j++) {
                                    diff[attr][i][j] = (toPath[i][j] - from[attr][i][j]) / ms;
                                }
                            }
                            break;
                        case "transform":
                            var _ = element._,
                                eq = equaliseTransform(_[attr], to[attr]);
                            if (eq) {
                                from[attr] = eq.from;
                                to[attr] = eq.to;
                                diff[attr] = [];
                                diff[attr].real = true;
                                for (i = 0, ii = from[attr].length; i < ii; i++) {
                                    diff[attr][i] = [from[attr][i][0]];
                                    for (j = 1, jj = from[attr][i].length; j < jj; j++) {
                                        diff[attr][i][j] = (to[attr][i][j] - from[attr][i][j]) / ms;
                                    }
                                }
                            } else {
                                var m = (element.matrix || new Matrix),
                                    to2 = {
                                        _: {transform: _.transform},
                                        getBBox: function () {
                                            return element.getBBox(1);
                                        }
                                    };
                                from[attr] = [
                                    m.a,
                                    m.b,
                                    m.c,
                                    m.d,
                                    m.e,
                                    m.f
                                ];
                                extractTransform(to2, to[attr]);
                                to[attr] = to2._.transform;
                                diff[attr] = [
                                    (to2.matrix.a - m.a) / ms,
                                    (to2.matrix.b - m.b) / ms,
                                    (to2.matrix.c - m.c) / ms,
                                    (to2.matrix.d - m.d) / ms,
                                    (to2.matrix.e - m.e) / ms,
                                    (to2.matrix.f - m.f) / ms
                                ];
                                // from[attr] = [_.sx, _.sy, _.deg, _.dx, _.dy];
                                // var to2 = {_:{}, getBBox: function () { return element.getBBox(); }};
                                // extractTransform(to2, to[attr]);
                                // diff[attr] = [
                                //     (to2._.sx - _.sx) / ms,
                                //     (to2._.sy - _.sy) / ms,
                                //     (to2._.deg - _.deg) / ms,
                                //     (to2._.dx - _.dx) / ms,
                                //     (to2._.dy - _.dy) / ms
                                // ];
                            }
                            break;
                        case "csv":
                            var values = Str(params[attr])[split](separator),
                                from2 = Str(from[attr])[split](separator);
                            if (attr == "clip-rect") {
                                from[attr] = from2;
                                diff[attr] = [];
                                i = from2.length;
                                while (i--) {
                                    diff[attr][i] = (values[i] - from[attr][i]) / ms;
                                }
                            }
                            to[attr] = values;
                            break;
                        default:
                            values = [][concat](params[attr]);
                            from2 = [][concat](from[attr]);
                            diff[attr] = [];
                            i = element.paper.customAttributes[attr].length;
                            while (i--) {
                                diff[attr][i] = ((values[i] || 0) - (from2[i] || 0)) / ms;
                            }
                            break;
                    }
                }
            }
            var easing = params.easing,
                easyeasy = R.easing_formulas[easing];
            if (!easyeasy) {
                easyeasy = Str(easing).match(bezierrg);
                if (easyeasy && easyeasy.length == 5) {
                    var curve = easyeasy;
                    easyeasy = function (t) {
                        return CubicBezierAtTime(t, +curve[1], +curve[2], +curve[3], +curve[4], ms);
                    };
                } else {
                    easyeasy = pipe;
                }
            }
            timestamp = params.start || anim.start || +new Date;
            e = {
                anim: anim,
                percent: percent,
                timestamp: timestamp,
                start: timestamp + (anim.del || 0),
                status: 0,
                initstatus: status || 0,
                stop: false,
                ms: ms,
                easing: easyeasy,
                from: from,
                diff: diff,
                to: to,
                el: element,
                callback: params.callback,
                prev: prev,
                next: next,
                repeat: times || anim.times,
                origin: element.attr(),
                totalOrigin: totalOrigin
            };
            animationElements.push(e);
            if (status && !isInAnim && !isInAnimSet) {
                e.stop = true;
                e.start = new Date - ms * status;
                if (animationElements.length == 1) {
                    return animation();
                }
            }
            if (isInAnimSet) {
                e.start = new Date - e.ms * status;
            }
            animationElements.length == 1 && requestAnimFrame(animation);
        } else {
            isInAnim.initstatus = status;
            isInAnim.start = new Date - isInAnim.ms * status;
        }
        eve("raphael.anim.start." + element.id, element, anim);
    }
    /*\
     * Raphael.animation
     [ method ]
     **
     * Creates an animation object that can be passed to the @Element.animate or @Element.animateWith methods.
     * See also @Animation.delay and @Animation.repeat methods.
     **
     > Parameters
     **
     - params (object) final attributes for the element, see also @Element.attr
     - ms (number) number of milliseconds for animation to run
     - easing (string) #optional easing type. Accept one of @Raphael.easing_formulas or CSS format: `cubic&#x2010;bezier(XX,&#160;XX,&#160;XX,&#160;XX)`
     - callback (function) #optional callback function. Will be called at the end of animation.
     **
     = (object) @Animation
    \*/
    R.animation = function (params, ms, easing, callback) {
        if (params instanceof Animation) {
            return params;
        }
        if (R.is(easing, "function") || !easing) {
            callback = callback || easing || null;
            easing = null;
        }
        params = Object(params);
        ms = +ms || 0;
        var p = {},
            json,
            attr;
        for (attr in params) if (params[has](attr) && toFloat(attr) != attr && toFloat(attr) + "%" != attr) {
            json = true;
            p[attr] = params[attr];
        }
        if (!json) {
            // if percent-like syntax is used and end-of-all animation callback used
            if(callback){
                // find the last one
                var lastKey = 0;
                for(var i in params){
                    var percent = toInt(i);
                    if(params[has](i) && percent > lastKey){
                        lastKey = percent;
                    }
                }
                lastKey += '%';
                // if already defined callback in the last keyframe, skip
                !params[lastKey].callback && (params[lastKey].callback = callback);
            }
          return new Animation(params, ms);
        } else {
            easing && (p.easing = easing);
            callback && (p.callback = callback);
            return new Animation({100: p}, ms);
        }
    };
    /*\
     * Element.animate
     [ method ]
     **
     * Creates and starts animation for given element.
     **
     > Parameters
     **
     - params (object) final attributes for the element, see also @Element.attr
     - ms (number) number of milliseconds for animation to run
     - easing (string) #optional easing type. Accept one of @Raphael.easing_formulas or CSS format: `cubic&#x2010;bezier(XX,&#160;XX,&#160;XX,&#160;XX)`
     - callback (function) #optional callback function. Will be called at the end of animation.
     * or
     - animation (object) animation object, see @Raphael.animation
     **
     = (object) original element
    \*/
    elproto.animate = function (params, ms, easing, callback) {
        var element = this;
        if (element.removed) {
            callback && callback.call(element);
            return element;
        }
        var anim = params instanceof Animation ? params : R.animation(params, ms, easing, callback);
        runAnimation(anim, element, anim.percents[0], null, element.attr());
        return element;
    };
    /*\
     * Element.setTime
     [ method ]
     **
     * Sets the status of animation of the element in milliseconds. Similar to @Element.status method.
     **
     > Parameters
     **
     - anim (object) animation object
     - value (number) number of milliseconds from the beginning of the animation
     **
     = (object) original element if `value` is specified
     * Note, that during animation following events are triggered:
     *
     * On each animation frame event `anim.frame.<id>`, on start `anim.start.<id>` and on end `anim.finish.<id>`.
    \*/
    elproto.setTime = function (anim, value) {
        if (anim && value != null) {
            this.status(anim, mmin(value, anim.ms) / anim.ms);
        }
        return this;
    };
    /*\
     * Element.status
     [ method ]
     **
     * Gets or sets the status of animation of the element.
     **
     > Parameters
     **
     - anim (object) #optional animation object
     - value (number) #optional 0 – 1. If specified, method works like a setter and sets the status of a given animation to the value. This will cause animation to jump to the given position.
     **
     = (number) status
     * or
     = (array) status if `anim` is not specified. Array of objects in format:
     o {
     o     anim: (object) animation object
     o     status: (number) status
     o }
     * or
     = (object) original element if `value` is specified
    \*/
    elproto.status = function (anim, value) {
        var out = [],
            i = 0,
            len,
            e;
        if (value != null) {
            runAnimation(anim, this, -1, mmin(value, 1));
            return this;
        } else {
            len = animationElements.length;
            for (; i < len; i++) {
                e = animationElements[i];
                if (e.el.id == this.id && (!anim || e.anim == anim)) {
                    if (anim) {
                        return e.status;
                    }
                    out.push({
                        anim: e.anim,
                        status: e.status
                    });
                }
            }
            if (anim) {
                return 0;
            }
            return out;
        }
    };
    /*\
     * Element.pause
     [ method ]
     **
     * Stops animation of the element with ability to resume it later on.
     **
     > Parameters
     **
     - anim (object) #optional animation object
     **
     = (object) original element
    \*/
    elproto.pause = function (anim) {
        for (var i = 0; i < animationElements.length; i++) if (animationElements[i].el.id == this.id && (!anim || animationElements[i].anim == anim)) {
            if (eve("raphael.anim.pause." + this.id, this, animationElements[i].anim) !== false) {
                animationElements[i].paused = true;
            }
        }
        return this;
    };
    /*\
     * Element.resume
     [ method ]
     **
     * Resumes animation if it was paused with @Element.pause method.
     **
     > Parameters
     **
     - anim (object) #optional animation object
     **
     = (object) original element
    \*/
    elproto.resume = function (anim) {
        for (var i = 0; i < animationElements.length; i++) if (animationElements[i].el.id == this.id && (!anim || animationElements[i].anim == anim)) {
            var e = animationElements[i];
            if (eve("raphael.anim.resume." + this.id, this, e.anim) !== false) {
                delete e.paused;
                this.status(e.anim, e.status);
            }
        }
        return this;
    };
    /*\
     * Element.stop
     [ method ]
     **
     * Stops animation of the element.
     **
     > Parameters
     **
     - anim (object) #optional animation object
     **
     = (object) original element
    \*/
    elproto.stop = function (anim) {
        for (var i = 0; i < animationElements.length; i++) if (animationElements[i].el.id == this.id && (!anim || animationElements[i].anim == anim)) {
            if (eve("raphael.anim.stop." + this.id, this, animationElements[i].anim) !== false) {
                animationElements.splice(i--, 1);
            }
        }
        return this;
    };
    function stopAnimation(paper) {
        for (var i = 0; i < animationElements.length; i++) if (animationElements[i].el.paper == paper) {
            animationElements.splice(i--, 1);
        }
    }
    eve.on("raphael.remove", stopAnimation);
    eve.on("raphael.clear", stopAnimation);
    elproto.toString = function () {
        return "Rapha\xebl\u2019s object";
    };

    // Set
    var Set = function (items) {
        this.items = [];
        this.length = 0;
        this.type = "set";
        if (items) {
            for (var i = 0, ii = items.length; i < ii; i++) {
                if (items[i] && (items[i].constructor == elproto.constructor || items[i].constructor == Set)) {
                    this[this.items.length] = this.items[this.items.length] = items[i];
                    this.length++;
                }
            }
        }
    },
    setproto = Set.prototype;
    /*\
     * Set.push
     [ method ]
     **
     * Adds each argument to the current set.
     = (object) original element
    \*/
    setproto.push = function () {
        var item,
            len;
        for (var i = 0, ii = arguments.length; i < ii; i++) {
            item = arguments[i];
            if (item && (item.constructor == elproto.constructor || item.constructor == Set)) {
                len = this.items.length;
                this[len] = this.items[len] = item;
                this.length++;
            }
        }
        return this;
    };
    /*\
     * Set.pop
     [ method ]
     **
     * Removes last element and returns it.
     = (object) element
    \*/
    setproto.pop = function () {
        this.length && delete this[this.length--];
        return this.items.pop();
    };
    /*\
     * Set.forEach
     [ method ]
     **
     * Executes given function for each element in the set.
     *
     * If function returns `false` it will stop loop running.
     **
     > Parameters
     **
     - callback (function) function to run
     - thisArg (object) context object for the callback
     = (object) Set object
    \*/
    setproto.forEach = function (callback, thisArg) {
        for (var i = 0, ii = this.items.length; i < ii; i++) {
            if (callback.call(thisArg, this.items[i], i) === false) {
                return this;
            }
        }
        return this;
    };
    for (var method in elproto) if (elproto[has](method)) {
        setproto[method] = (function (methodname) {
            return function () {
                var arg = arguments;
                return this.forEach(function (el) {
                    el[methodname][apply](el, arg);
                });
            };
        })(method);
    }
    setproto.attr = function (name, value) {
        if (name && R.is(name, array) && R.is(name[0], "object")) {
            for (var j = 0, jj = name.length; j < jj; j++) {
                this.items[j].attr(name[j]);
            }
        } else {
            for (var i = 0, ii = this.items.length; i < ii; i++) {
                this.items[i].attr(name, value);
            }
        }
        return this;
    };
    /*\
     * Set.clear
     [ method ]
     **
     * Removes all elements from the set
    \*/
    setproto.clear = function () {
        while (this.length) {
            this.pop();
        }
    };
    /*\
     * Set.splice
     [ method ]
     **
     * Removes given element from the set
     **
     > Parameters
     **
     - index (number) position of the deletion
     - count (number) number of element to remove
     - insertion… (object) #optional elements to insert
     = (object) set elements that were deleted
    \*/
    setproto.splice = function (index, count, insertion) {
        index = index < 0 ? mmax(this.length + index, 0) : index;
        count = mmax(0, mmin(this.length - index, count));
        var tail = [],
            todel = [],
            args = [],
            i;
        for (i = 2; i < arguments.length; i++) {
            args.push(arguments[i]);
        }
        for (i = 0; i < count; i++) {
            todel.push(this[index + i]);
        }
        for (; i < this.length - index; i++) {
            tail.push(this[index + i]);
        }
        var arglen = args.length;
        for (i = 0; i < arglen + tail.length; i++) {
            this.items[index + i] = this[index + i] = i < arglen ? args[i] : tail[i - arglen];
        }
        i = this.items.length = this.length -= count - arglen;
        while (this[i]) {
            delete this[i++];
        }
        return new Set(todel);
    };
    /*\
     * Set.exclude
     [ method ]
     **
     * Removes given element from the set
     **
     > Parameters
     **
     - element (object) element to remove
     = (boolean) `true` if object was found & removed from the set
    \*/
    setproto.exclude = function (el) {
        for (var i = 0, ii = this.length; i < ii; i++) if (this[i] == el) {
            this.splice(i, 1);
            return true;
        }
    };
    setproto.animate = function (params, ms, easing, callback) {
        (R.is(easing, "function") || !easing) && (callback = easing || null);
        var len = this.items.length,
            i = len,
            item,
            set = this,
            collector;
        if (!len) {
            return this;
        }
        callback && (collector = function () {
            !--len && callback.call(set);
        });
        easing = R.is(easing, string) ? easing : collector;
        var anim = R.animation(params, ms, easing, collector);
        item = this.items[--i].animate(anim);
        while (i--) {
            this.items[i] && !this.items[i].removed && this.items[i].animateWith(item, anim, anim);
            (this.items[i] && !this.items[i].removed) || len--;
        }
        return this;
    };
    setproto.insertAfter = function (el) {
        var i = this.items.length;
        while (i--) {
            this.items[i].insertAfter(el);
        }
        return this;
    };
    setproto.getBBox = function () {
        var x = [],
            y = [],
            x2 = [],
            y2 = [];
        for (var i = this.items.length; i--;) if (!this.items[i].removed) {
            var box = this.items[i].getBBox();
            x.push(box.x);
            y.push(box.y);
            x2.push(box.x + box.width);
            y2.push(box.y + box.height);
        }
        x = mmin[apply](0, x);
        y = mmin[apply](0, y);
        x2 = mmax[apply](0, x2);
        y2 = mmax[apply](0, y2);
        return {
            x: x,
            y: y,
            x2: x2,
            y2: y2,
            width: x2 - x,
            height: y2 - y
        };
    };
    setproto.clone = function (s) {
        s = this.paper.set();
        for (var i = 0, ii = this.items.length; i < ii; i++) {
            s.push(this.items[i].clone());
        }
        return s;
    };
    setproto.toString = function () {
        return "Rapha\xebl\u2018s set";
    };

    setproto.glow = function(glowConfig) {
        var ret = this.paper.set();
        this.forEach(function(shape, index){
            var g = shape.glow(glowConfig);
            if(g != null){
                g.forEach(function(shape2, index2){
                    ret.push(shape2);
                });
            }
        });
        return ret;
    };


    /*\
     * Set.isPointInside
     [ method ]
     **
     * Determine if given point is inside this set’s elements
     **
     > Parameters
     **
     - x (number) x coordinate of the point
     - y (number) y coordinate of the point
     = (boolean) `true` if point is inside any of the set's elements
     \*/
    setproto.isPointInside = function (x, y) {
        var isPointInside = false;
        this.forEach(function (el) {
            if (el.isPointInside(x, y)) {
                isPointInside = true;
                return false; // stop loop
            }
        });
        return isPointInside;
    };

    /*\
     * Raphael.registerFont
     [ method ]
     **
     * Adds given font to the registered set of fonts for Raphaël. Should be used as an internal call from within Cufón’s font file.
     * Returns original parameter, so it could be used with chaining.
     # <a href="http://wiki.github.com/sorccu/cufon/about">More about Cufón and how to convert your font form TTF, OTF, etc to JavaScript file.</a>
     **
     > Parameters
     **
     - font (object) the font to register
     = (object) the font you passed in
     > Usage
     | Cufon.registerFont(Raphael.registerFont({…}));
    \*/
    R.registerFont = function (font) {
        if (!font.face) {
            return font;
        }
        this.fonts = this.fonts || {};
        var fontcopy = {
                w: font.w,
                face: {},
                glyphs: {}
            },
            family = font.face["font-family"];
        for (var prop in font.face) if (font.face[has](prop)) {
            fontcopy.face[prop] = font.face[prop];
        }
        if (this.fonts[family]) {
            this.fonts[family].push(fontcopy);
        } else {
            this.fonts[family] = [fontcopy];
        }
        if (!font.svg) {
            fontcopy.face["units-per-em"] = toInt(font.face["units-per-em"], 10);
            for (var glyph in font.glyphs) if (font.glyphs[has](glyph)) {
                var path = font.glyphs[glyph];
                fontcopy.glyphs[glyph] = {
                    w: path.w,
                    k: {},
                    d: path.d && "M" + path.d.replace(/[mlcxtrv]/g, function (command) {
                            return {l: "L", c: "C", x: "z", t: "m", r: "l", v: "c"}[command] || "M";
                        }) + "z"
                };
                if (path.k) {
                    for (var k in path.k) if (path[has](k)) {
                        fontcopy.glyphs[glyph].k[k] = path.k[k];
                    }
                }
            }
        }
        return font;
    };
    /*\
     * Paper.getFont
     [ method ]
     **
     * Finds font object in the registered fonts by given parameters. You could specify only one word from the font name, like “Myriad” for “Myriad Pro”.
     **
     > Parameters
     **
     - family (string) font family name or any word from it
     - weight (string) #optional font weight
     - style (string) #optional font style
     - stretch (string) #optional font stretch
     = (object) the font object
     > Usage
     | paper.print(100, 100, "Test string", paper.getFont("Times", 800), 30);
    \*/
    paperproto.getFont = function (family, weight, style, stretch) {
        stretch = stretch || "normal";
        style = style || "normal";
        weight = +weight || {normal: 400, bold: 700, lighter: 300, bolder: 800}[weight] || 400;
        if (!R.fonts) {
            return;
        }
        var font = R.fonts[family];
        if (!font) {
            var name = new RegExp("(^|\\s)" + family.replace(/[^\w\d\s+!~.:_-]/g, E) + "(\\s|$)", "i");
            for (var fontName in R.fonts) if (R.fonts[has](fontName)) {
                if (name.test(fontName)) {
                    font = R.fonts[fontName];
                    break;
                }
            }
        }
        var thefont;
        if (font) {
            for (var i = 0, ii = font.length; i < ii; i++) {
                thefont = font[i];
                if (thefont.face["font-weight"] == weight && (thefont.face["font-style"] == style || !thefont.face["font-style"]) && thefont.face["font-stretch"] == stretch) {
                    break;
                }
            }
        }
        return thefont;
    };
    /*\
     * Paper.print
     [ method ]
     **
     * Creates path that represent given text written using given font at given position with given size.
     * Result of the method is path element that contains whole text as a separate path.
     **
     > Parameters
     **
     - x (number) x position of the text
     - y (number) y position of the text
     - string (string) text to print
     - font (object) font object, see @Paper.getFont
     - size (number) #optional size of the font, default is `16`
     - origin (string) #optional could be `"baseline"` or `"middle"`, default is `"middle"`
     - letter_spacing (number) #optional number in range `-1..1`, default is `0`
     - line_spacing (number) #optional number in range `1..3`, default is `1`
     = (object) resulting path element, which consist of all letters
     > Usage
     | var txt = r.print(10, 50, "print", r.getFont("Museo"), 30).attr({fill: "#fff"});
    \*/
    paperproto.print = function (x, y, string, font, size, origin, letter_spacing, line_spacing) {
        origin = origin || "middle"; // baseline|middle
        letter_spacing = mmax(mmin(letter_spacing || 0, 1), -1);
        line_spacing = mmax(mmin(line_spacing || 1, 3), 1);
        var letters = Str(string)[split](E),
            shift = 0,
            notfirst = 0,
            path = E,
            scale;
        R.is(font, "string") && (font = this.getFont(font));
        if (font) {
            scale = (size || 16) / font.face["units-per-em"];
            var bb = font.face.bbox[split](separator),
                top = +bb[0],
                lineHeight = bb[3] - bb[1],
                shifty = 0,
                height = +bb[1] + (origin == "baseline" ? lineHeight + (+font.face.descent) : lineHeight / 2);
            for (var i = 0, ii = letters.length; i < ii; i++) {
                if (letters[i] == "\n") {
                    shift = 0;
                    curr = 0;
                    notfirst = 0;
                    shifty += lineHeight * line_spacing;
                } else {
                    var prev = notfirst && font.glyphs[letters[i - 1]] || {},
                        curr = font.glyphs[letters[i]];
                    shift += notfirst ? (prev.w || font.w) + (prev.k && prev.k[letters[i]] || 0) + (font.w * letter_spacing) : 0;
                    notfirst = 1;
                }
                if (curr && curr.d) {
                    path += R.transformPath(curr.d, ["t", shift * scale, shifty * scale, "s", scale, scale, top, height, "t", (x - top) / scale, (y - height) / scale]);
                }
            }
        }
        return this.path(path).attr({
            fill: "#000",
            stroke: "none"
        });
    };

    /*\
     * Paper.add
     [ method ]
     **
     * Imports elements in JSON array in format `{type: type, <attributes>}`
     **
     > Parameters
     **
     - json (array)
     = (object) resulting set of imported elements
     > Usage
     | paper.add([
     |     {
     |         type: "circle",
     |         cx: 10,
     |         cy: 10,
     |         r: 5
     |     },
     |     {
     |         type: "rect",
     |         x: 10,
     |         y: 10,
     |         width: 10,
     |         height: 10,
     |         fill: "#fc0"
     |     }
     | ]);
    \*/
    paperproto.add = function (json) {
        if (R.is(json, "array")) {
            var res = this.set(),
                i = 0,
                ii = json.length,
                j;
            for (; i < ii; i++) {
                j = json[i] || {};
                elements[has](j.type) && res.push(this[j.type]().attr(j));
            }
        }
        return res;
    };

    /*\
     * Raphael.format
     [ method ]
     **
     * Simple format function. Replaces construction of type “`{<number>}`” to the corresponding argument.
     **
     > Parameters
     **
     - token (string) string to format
     - … (string) rest of arguments will be treated as parameters for replacement
     = (string) formated string
     > Usage
     | var x = 10,
     |     y = 20,
     |     width = 40,
     |     height = 50;
     | // this will draw a rectangular shape equivalent to "M10,20h40v50h-40z"
     | paper.path(Raphael.format("M{0},{1}h{2}v{3}h{4}z", x, y, width, height, -width));
    \*/
    R.format = function (token, params) {
        var args = R.is(params, array) ? [0][concat](params) : arguments;
        token && R.is(token, string) && args.length - 1 && (token = token.replace(formatrg, function (str, i) {
            return args[++i] == null ? E : args[i];
        }));
        return token || E;
    };
    /*\
     * Raphael.fullfill
     [ method ]
     **
     * A little bit more advanced format function than @Raphael.format. Replaces construction of type “`{<name>}`” to the corresponding argument.
     **
     > Parameters
     **
     - token (string) string to format
     - json (object) object which properties will be used as a replacement
     = (string) formated string
     > Usage
     | // this will draw a rectangular shape equivalent to "M10,20h40v50h-40z"
     | paper.path(Raphael.fullfill("M{x},{y}h{dim.width}v{dim.height}h{dim['negative width']}z", {
     |     x: 10,
     |     y: 20,
     |     dim: {
     |         width: 40,
     |         height: 50,
     |         "negative width": -40
     |     }
     | }));
    \*/
    R.fullfill = (function () {
        var tokenRegex = /\{([^\}]+)\}/g,
            objNotationRegex = /(?:(?:^|\.)(.+?)(?=\[|\.|$|\()|\[('|")(.+?)\2\])(\(\))?/g, // matches .xxxxx or ["xxxxx"] to run over object properties
            replacer = function (all, key, obj) {
                var res = obj;
                key.replace(objNotationRegex, function (all, name, quote, quotedName, isFunc) {
                    name = name || quotedName;
                    if (res) {
                        if (name in res) {
                            res = res[name];
                        }
                        typeof res == "function" && isFunc && (res = res());
                    }
                });
                res = (res == null || res == obj ? all : res) + "";
                return res;
            };
        return function (str, obj) {
            return String(str).replace(tokenRegex, function (all, key) {
                return replacer(all, key, obj);
            });
        };
    })();
    /*\
     * Raphael.ninja
     [ method ]
     **
     * If you want to leave no trace of Raphaël (Well, Raphaël creates only one global variable `Raphael`, but anyway.) You can use `ninja` method.
     * Beware, that in this case plugins could stop working, because they are depending on global variable existance.
     **
     = (object) Raphael object
     > Usage
     | (function (local_raphael) {
     |     var paper = local_raphael(10, 10, 320, 200);
     |     …
     | })(Raphael.ninja());
    \*/
    R.ninja = function () {
        oldRaphael.was ? (g.win.Raphael = oldRaphael.is) : delete Raphael;
        return R;
    };
    /*\
     * Raphael.st
     [ property (object) ]
     **
     * You can add your own method to elements and sets. It is wise to add a set method for each element method
     * you added, so you will be able to call the same method on sets too.
     **
     * See also @Raphael.el.
     > Usage
     | Raphael.el.red = function () {
     |     this.attr({fill: "#f00"});
     | };
     | Raphael.st.red = function () {
     |     this.forEach(function (el) {
     |         el.red();
     |     });
     | };
     | // then use it
     | paper.set(paper.circle(100, 100, 20), paper.circle(110, 100, 20)).red();
    \*/
    R.st = setproto;

    eve.on("raphael.DOMload", function () {
        loaded = true;
    });

    // Firefox <3.6 fix: http://webreflection.blogspot.com/2009/11/195-chars-to-help-lazy-loading.html
    (function (doc, loaded, f) {
        if (doc.readyState == null && doc.addEventListener){
            doc.addEventListener(loaded, f = function () {
                doc.removeEventListener(loaded, f, false);
                doc.readyState = "complete";
            }, false);
            doc.readyState = "loading";
        }
        function isLoaded() {
            (/in/).test(doc.readyState) ? setTimeout(isLoaded, 9) : R.eve("raphael.DOMload");
        }
        isLoaded();
    })(document, "DOMContentLoaded");

// ┌─────────────────────────────────────────────────────────────────────┐ \\
// │ Raphaël - JavaScript Vector Library                                 │ \\
// ├─────────────────────────────────────────────────────────────────────┤ \\
// │ SVG Module                                                          │ \\
// ├─────────────────────────────────────────────────────────────────────┤ \\
// │ Copyright (c) 2008-2011 Dmitry Baranovskiy (http://raphaeljs.com)   │ \\
// │ Copyright (c) 2008-2011 Sencha Labs (http://sencha.com)             │ \\
// │ Licensed under the MIT (http://raphaeljs.com/license.html) license. │ \\
// └─────────────────────────────────────────────────────────────────────┘ \\

(function(){
    if (!R.svg) {
        return;
    }
    var has = "hasOwnProperty",
        Str = String,
        toFloat = parseFloat,
        toInt = parseInt,
        math = Math,
        mmax = math.max,
        abs = math.abs,
        pow = math.pow,
        separator = /[, ]+/,
        eve = R.eve,
        E = "",
        S = " ";
    var xlink = "http://www.w3.org/1999/xlink",
        markers = {
            block: "M5,0 0,2.5 5,5z",
            classic: "M5,0 0,2.5 5,5 3.5,3 3.5,2z",
            diamond: "M2.5,0 5,2.5 2.5,5 0,2.5z",
            open: "M6,1 1,3.5 6,6",
            oval: "M2.5,0A2.5,2.5,0,0,1,2.5,5 2.5,2.5,0,0,1,2.5,0z"
        },
        markerCounter = {};
    R.toString = function () {
        return  "Your browser supports SVG.\nYou are running Rapha\xebl " + this.version;
    };
    var $ = function (el, attr) {
        if (attr) {
            if (typeof el == "string") {
                el = $(el);
            }
            for (var key in attr) if (attr[has](key)) {
                if (key.substring(0, 6) == "xlink:") {
                    el.setAttributeNS(xlink, key.substring(6), Str(attr[key]));
                } else {
                    el.setAttribute(key, Str(attr[key]));
                }
            }
        } else {
            el = R._g.doc.createElementNS("http://www.w3.org/2000/svg", el);
            el.style && (el.style.webkitTapHighlightColor = "rgba(0,0,0,0)");
        }
        return el;
    },
    addGradientFill = function (element, gradient) {
        var type = "linear",
            id = element.id + gradient,
            fx = .5, fy = .5,
            o = element.node,
            SVG = element.paper,
            s = o.style,
            el = R._g.doc.getElementById(id);
        if (!el) {
            gradient = Str(gradient).replace(R._radial_gradient, function (all, _fx, _fy) {
                type = "radial";
                if (_fx && _fy) {
                    fx = toFloat(_fx);
                    fy = toFloat(_fy);
                    var dir = ((fy > .5) * 2 - 1);
                    pow(fx - .5, 2) + pow(fy - .5, 2) > .25 &&
                        (fy = math.sqrt(.25 - pow(fx - .5, 2)) * dir + .5) &&
                        fy != .5 &&
                        (fy = fy.toFixed(5) - 1e-5 * dir);
                }
                return E;
            });
            gradient = gradient.split(/\s*\-\s*/);
            if (type == "linear") {
                var angle = gradient.shift();
                angle = -toFloat(angle);
                if (isNaN(angle)) {
                    return null;
                }
                var vector = [0, 0, math.cos(R.rad(angle)), math.sin(R.rad(angle))],
                    max = 1 / (mmax(abs(vector[2]), abs(vector[3])) || 1);
                vector[2] *= max;
                vector[3] *= max;
                if (vector[2] < 0) {
                    vector[0] = -vector[2];
                    vector[2] = 0;
                }
                if (vector[3] < 0) {
                    vector[1] = -vector[3];
                    vector[3] = 0;
                }
            }
            var dots = R._parseDots(gradient);
            if (!dots) {
                return null;
            }
            id = id.replace(/[\(\)\s,\xb0#]/g, "_");

            if (element.gradient && id != element.gradient.id) {
                SVG.defs.removeChild(element.gradient);
                delete element.gradient;
            }

            if (!element.gradient) {
                el = $(type + "Gradient", {id: id});
                element.gradient = el;
                $(el, type == "radial" ? {
                    fx: fx,
                    fy: fy
                } : {
                    x1: vector[0],
                    y1: vector[1],
                    x2: vector[2],
                    y2: vector[3],
                    gradientTransform: element.matrix.invert()
                });
                SVG.defs.appendChild(el);
                for (var i = 0, ii = dots.length; i < ii; i++) {
                    el.appendChild($("stop", {
                        offset: dots[i].offset ? dots[i].offset : i ? "100%" : "0%",
                        "stop-color": dots[i].color || "#fff"
                    }));
                }
            }
        }
        $(o, {
            fill: "url('" + document.location + "#" + id + "')",
            opacity: 1,
            "fill-opacity": 1
        });
        s.fill = E;w
        s.opacity = 1;
        s.fillOpacity = 1;
        return 1;
    },
    updatePosition = function (o) {
        var bbox = o.getBBox(1);
        $(o.pattern, {patternTransform: o.matrix.invert() + " translate(" + bbox.x + "," + bbox.y + ")"});
    },
    addArrow = function (o, value, isEnd) {
        if (o.type == "path") {
            var values = Str(value).toLowerCase().split("-"),
                p = o.paper,
                se = isEnd ? "end" : "start",
                node = o.node,
                attrs = o.attrs,
                stroke = attrs["stroke-width"],
                i = values.length,
                type = "classic",
                from,
                to,
                dx,
                refX,
                attr,
                w = 3,
                h = 3,
                t = 5;
            while (i--) {
                switch (values[i]) {
                    case "block":
                    case "classic":
                    case "oval":
                    case "diamond":
                    case "open":
                    case "none":
                        type = values[i];
                        break;
                    case "wide": h = 5; break;
                    case "narrow": h = 2; break;
                    case "long": w = 5; break;
                    case "short": w = 2; break;
                }
            }
            if (type == "open") {
                w += 2;
                h += 2;
                t += 2;
                dx = 1;
                refX = isEnd ? 4 : 1;
                attr = {
                    fill: "none",
                    stroke: attrs.stroke
                };
            } else {
                refX = dx = w / 2;
                attr = {
                    fill: attrs.stroke,
                    stroke: "none"
                };
            }
            if (o._.arrows) {
                if (isEnd) {
                    o._.arrows.endPath && markerCounter[o._.arrows.endPath]--;
                    o._.arrows.endMarker && markerCounter[o._.arrows.endMarker]--;
                } else {
                    o._.arrows.startPath && markerCounter[o._.arrows.startPath]--;
                    o._.arrows.startMarker && markerCounter[o._.arrows.startMarker]--;
                }
            } else {
                o._.arrows = {};
            }
            if (type != "none") {
                var pathId = "raphael-marker-" + type,
                    markerId = "raphael-marker-" + se + type + w + h + "-obj" + o.id;
                if (!R._g.doc.getElementById(pathId)) {
                    p.defs.appendChild($($("path"), {
                        "stroke-linecap": "round",
                        d: markers[type],
                        id: pathId
                    }));
                    markerCounter[pathId] = 1;
                } else {
                    markerCounter[pathId]++;
                }
                var marker = R._g.doc.getElementById(markerId),
                    use;
                if (!marker) {
                    marker = $($("marker"), {
                        id: markerId,
                        markerHeight: h,
                        markerWidth: w,
                        orient: "auto",
                        refX: refX,
                        refY: h / 2
                    });
                    use = $($("use"), {
                        "xlink:href": "#" + pathId,
                        transform: (isEnd ? "rotate(180 " + w / 2 + " " + h / 2 + ") " : E) + "scale(" + w / t + "," + h / t + ")",
                        "stroke-width": (1 / ((w / t + h / t) / 2)).toFixed(4)
                    });
                    marker.appendChild(use);
                    p.defs.appendChild(marker);
                    markerCounter[markerId] = 1;
                } else {
                    markerCounter[markerId]++;
                    use = marker.getElementsByTagName("use")[0];
                }
                $(use, attr);
                var delta = dx * (type != "diamond" && type != "oval");
                if (isEnd) {
                    from = o._.arrows.startdx * stroke || 0;
                    to = R.getTotalLength(attrs.path) - delta * stroke;
                } else {
                    from = delta * stroke;
                    to = R.getTotalLength(attrs.path) - (o._.arrows.enddx * stroke || 0);
                }
                attr = {};
                attr["marker-" + se] = "url(#" + markerId + ")";
                if (to || from) {
                    attr.d = R.getSubpath(attrs.path, from, to);
                }
                $(node, attr);
                o._.arrows[se + "Path"] = pathId;
                o._.arrows[se + "Marker"] = markerId;
                o._.arrows[se + "dx"] = delta;
                o._.arrows[se + "Type"] = type;
                o._.arrows[se + "String"] = value;
            } else {
                if (isEnd) {
                    from = o._.arrows.startdx * stroke || 0;
                    to = R.getTotalLength(attrs.path) - from;
                } else {
                    from = 0;
                    to = R.getTotalLength(attrs.path) - (o._.arrows.enddx * stroke || 0);
                }
                o._.arrows[se + "Path"] && $(node, {d: R.getSubpath(attrs.path, from, to)});
                delete o._.arrows[se + "Path"];
                delete o._.arrows[se + "Marker"];
                delete o._.arrows[se + "dx"];
                delete o._.arrows[se + "Type"];
                delete o._.arrows[se + "String"];
            }
            for (attr in markerCounter) if (markerCounter[has](attr) && !markerCounter[attr]) {
                var item = R._g.doc.getElementById(attr);
                item && item.parentNode.removeChild(item);
            }
        }
    },
    dasharray = {
        "-": [3, 1],
        ".": [1, 1],
        "-.": [3, 1, 1, 1],
        "-..": [3, 1, 1, 1, 1, 1],
        ". ": [1, 3],
        "- ": [4, 3],
        "--": [8, 3],
        "- .": [4, 3, 1, 3],
        "--.": [8, 3, 1, 3],
        "--..": [8, 3, 1, 3, 1, 3]
    },
    addDashes = function (o, value, params) {
        value = dasharray[Str(value).toLowerCase()];
        if (value) {
            var width = o.attrs["stroke-width"] || "1",
                butt = {round: width, square: width, butt: 0}[o.attrs["stroke-linecap"] || params["stroke-linecap"]] || 0,
                dashes = [],
                i = value.length;
            while (i--) {
                dashes[i] = value[i] * width + ((i % 2) ? 1 : -1) * butt;
            }
            $(o.node, {"stroke-dasharray": dashes.join(",")});
        }
        else {
          $(o.node, {"stroke-dasharray": "none"});
        }
    },
    setFillAndStroke = function (o, params) {
        var node = o.node,
            attrs = o.attrs,
            vis = node.style.visibility;
        node.style.visibility = "hidden";
        for (var att in params) {
            if (params[has](att)) {
                if (!R._availableAttrs[has](att)) {
                    continue;
                }
                var value = params[att];
                attrs[att] = value;
                switch (att) {
                    case "blur":
                        o.blur(value);
                        break;
                    case "title":
                        var title = node.getElementsByTagName("title");

                        // Use the existing <title>.
                        if (title.length && (title = title[0])) {
                          title.firstChild.nodeValue = value;
                        } else {
                          title = $("title");
                          var val = R._g.doc.createTextNode(value);
                          title.appendChild(val);
                          node.appendChild(title);
                        }
                        break;
                    case "href":
                    case "target":
                        var pn = node.parentNode;
                        if (pn.tagName.toLowerCase() != "a") {
                            var hl = $("a");
                            pn.insertBefore(hl, node);
                            hl.appendChild(node);
                            pn = hl;
                        }
                        if (att == "target") {
                            pn.setAttributeNS(xlink, "show", value == "blank" ? "new" : value);
                        } else {
                            pn.setAttributeNS(xlink, att, value);
                        }
                        break;
                    case "cursor":
                        node.style.cursor = value;
                        break;
                    case "transform":
                        o.transform(value);
                        break;
                    case "arrow-start":
                        addArrow(o, value);
                        break;
                    case "arrow-end":
                        addArrow(o, value, 1);
                        break;
                    case "clip-rect":
                        var rect = Str(value).split(separator);
                        if (rect.length == 4) {
                            o.clip && o.clip.parentNode.parentNode.removeChild(o.clip.parentNode);
                            var el = $("clipPath"),
                                rc = $("rect");
                            el.id = R.createUUID();
                            $(rc, {
                                x: rect[0],
                                y: rect[1],
                                width: rect[2],
                                height: rect[3]
                            });
                            el.appendChild(rc);
                            o.paper.defs.appendChild(el);
                            $(node, {"clip-path": "url(#" + el.id + ")"});
                            o.clip = rc;
                        }
                        if (!value) {
                            var path = node.getAttribute("clip-path");
                            if (path) {
                                var clip = R._g.doc.getElementById(path.replace(/(^url\(#|\)$)/g, E));
                                clip && clip.parentNode.removeChild(clip);
                                $(node, {"clip-path": E});
                                delete o.clip;
                            }
                        }
                    break;
                    case "path":
                        if (o.type == "path") {
                            $(node, {d: value ? attrs.path = R._pathToAbsolute(value) : "M0,0"});
                            o._.dirty = 1;
                            if (o._.arrows) {
                                "startString" in o._.arrows && addArrow(o, o._.arrows.startString);
                                "endString" in o._.arrows && addArrow(o, o._.arrows.endString, 1);
                            }
                        }
                        break;
                    case "width":
                        node.setAttribute(att, value);
                        o._.dirty = 1;
                        if (attrs.fx) {
                            att = "x";
                            value = attrs.x;
                        } else {
                            break;
                        }
                    case "x":
                        if (attrs.fx) {
                            value = -attrs.x - (attrs.width || 0);
                        }
                    case "rx":
                        if (att == "rx" && o.type == "rect") {
                            break;
                        }
                    case "cx":
                        node.setAttribute(att, value);
                        o.pattern && updatePosition(o);
                        o._.dirty = 1;
                        break;
                    case "height":
                        node.setAttribute(att, value);
                        o._.dirty = 1;
                        if (attrs.fy) {
                            att = "y";
                            value = attrs.y;
                        } else {
                            break;
                        }
                    case "y":
                        if (attrs.fy) {
                            value = -attrs.y - (attrs.height || 0);
                        }
                    case "ry":
                        if (att == "ry" && o.type == "rect") {
                            break;
                        }
                    case "cy":
                        node.setAttribute(att, value);
                        o.pattern && updatePosition(o);
                        o._.dirty = 1;
                        break;
                    case "r":
                        if (o.type == "rect") {
                            $(node, {rx: value, ry: value});
                        } else {
                            node.setAttribute(att, value);
                        }
                        o._.dirty = 1;
                        break;
                    case "src":
                        if (o.type == "image") {
                            node.setAttributeNS(xlink, "href", value);
                        }
                        break;
                    case "stroke-width":
                        if (o._.sx != 1 || o._.sy != 1) {
                            value /= mmax(abs(o._.sx), abs(o._.sy)) || 1;
                        }
                        node.setAttribute(att, value);
                        if (attrs["stroke-dasharray"]) {
                            addDashes(o, attrs["stroke-dasharray"], params);
                        }
                        if (o._.arrows) {
                            "startString" in o._.arrows && addArrow(o, o._.arrows.startString);
                            "endString" in o._.arrows && addArrow(o, o._.arrows.endString, 1);
                        }
                        break;
                    case "stroke-dasharray":
                        addDashes(o, value, params);
                        break;
                    case "fill":
                        var isURL = Str(value).match(R._ISURL);
                        if (isURL) {
                            el = $("pattern");
                            var ig = $("image");
                            el.id = R.createUUID();
                            $(el, {x: 0, y: 0, patternUnits: "userSpaceOnUse", height: 1, width: 1});
                            $(ig, {x: 0, y: 0, "xlink:href": isURL[1]});
                            el.appendChild(ig);

                            (function (el) {
                                R._preload(isURL[1], function () {
                                    var w = this.offsetWidth,
                                        h = this.offsetHeight;
                                    $(el, {width: w, height: h});
                                    $(ig, {width: w, height: h});
                                });
                            })(el);
                            o.paper.defs.appendChild(el);
                            $(node, {fill: "url(#" + el.id + ")"});
                            o.pattern = el;
                            o.pattern && updatePosition(o);
                            break;
                        }
                        var clr = R.getRGB(value);
                        if (!clr.error) {
                            delete params.gradient;
                            delete attrs.gradient;
                            !R.is(attrs.opacity, "undefined") &&
                                R.is(params.opacity, "undefined") &&
                                $(node, {opacity: attrs.opacity});
                            !R.is(attrs["fill-opacity"], "undefined") &&
                                R.is(params["fill-opacity"], "undefined") &&
                                $(node, {"fill-opacity": attrs["fill-opacity"]});
                        } else if ((o.type == "circle" || o.type == "ellipse" || Str(value).charAt() != "r") && addGradientFill(o, value)) {
                            if ("opacity" in attrs || "fill-opacity" in attrs) {
                                var gradient = R._g.doc.getElementById(node.getAttribute("fill").replace(/^url\(#|\)$/g, E));
                                if (gradient) {
                                    var stops = gradient.getElementsByTagName("stop");
                                    $(stops[stops.length - 1], {"stop-opacity": ("opacity" in attrs ? attrs.opacity : 1) * ("fill-opacity" in attrs ? attrs["fill-opacity"] : 1)});
                                }
                            }
                            attrs.gradient = value;
                            attrs.fill = "none";
                            break;
                        }
                        clr[has]("opacity") && $(node, {"fill-opacity": clr.opacity > 1 ? clr.opacity / 100 : clr.opacity});
                    case "stroke":
                        clr = R.getRGB(value);
                        node.setAttribute(att, clr.hex);
                        att == "stroke" && clr[has]("opacity") && $(node, {"stroke-opacity": clr.opacity > 1 ? clr.opacity / 100 : clr.opacity});
                        if (att == "stroke" && o._.arrows) {
                            "startString" in o._.arrows && addArrow(o, o._.arrows.startString);
                            "endString" in o._.arrows && addArrow(o, o._.arrows.endString, 1);
                        }
                        break;
                    case "gradient":
                        (o.type == "circle" || o.type == "ellipse" || Str(value).charAt() != "r") && addGradientFill(o, value);
                        break;
                    case "opacity":
                        if (attrs.gradient && !attrs[has]("stroke-opacity")) {
                            $(node, {"stroke-opacity": value > 1 ? value / 100 : value});
                        }
                        // fall
                    case "fill-opacity":
                        if (attrs.gradient) {
                            gradient = R._g.doc.getElementById(node.getAttribute("fill").replace(/^url\(#|\)$/g, E));
                            if (gradient) {
                                stops = gradient.getElementsByTagName("stop");
                                $(stops[stops.length - 1], {"stop-opacity": value});
                            }
                            break;
                        }
                    default:
                        att == "font-size" && (value = toInt(value, 10) + "px");
                        var cssrule = att.replace(/(\-.)/g, function (w) {
                            return w.substring(1).toUpperCase();
                        });
                        node.style[cssrule] = value;
                        o._.dirty = 1;
                        node.setAttribute(att, value);
                        break;
                }
            }
        }

        tuneText(o, params);
        node.style.visibility = vis;
    },
    leading = 1.2,
    tuneText = function (el, params) {
        if (el.type != "text" || !(params[has]("text") || params[has]("font") || params[has]("font-size") || params[has]("x") || params[has]("y"))) {
            return;
        }
        var a = el.attrs,
            node = el.node,
            fontSize = node.firstChild ? toInt(R._g.doc.defaultView.getComputedStyle(node.firstChild, E).getPropertyValue("font-size"), 10) : 10;

        if (params[has]("text")) {
            a.text = params.text;
            while (node.firstChild) {
                node.removeChild(node.firstChild);
            }
            var texts = Str(params.text).split("\n"),
                tspans = [],
                tspan;
            for (var i = 0, ii = texts.length; i < ii; i++) {
                tspan = $("tspan");
                i && $(tspan, {dy: fontSize * leading, x: a.x});
                tspan.appendChild(R._g.doc.createTextNode(texts[i]));
                node.appendChild(tspan);
                tspans[i] = tspan;
            }
        } else {
            tspans = node.getElementsByTagName("tspan");
            for (i = 0, ii = tspans.length; i < ii; i++) if (i) {
                $(tspans[i], {dy: fontSize * leading, x: a.x});
            } else {
                $(tspans[0], {dy: 0});
            }
        }
        $(node, {x: a.x, y: a.y});
        el._.dirty = 1;
        var bb = el._getBBox(),
            dif = a.y - (bb.y + bb.height / 2);
        dif && R.is(dif, "finite") && $(tspans[0], {dy: dif});
    },
    getRealNode = function (node) {
        if (node.parentNode && node.parentNode.tagName.toLowerCase() === "a") {
            return node.parentNode;
        } else {
            return node;
        }
    },
    Element = function (node, svg) {
        var X = 0,
            Y = 0;
        /*\
         * Element.node
         [ property (object) ]
         **
         * Gives you a reference to the DOM object, so you can assign event handlers or just mess around.
         **
         * Note: Don’t mess with it.
         > Usage
         | // draw a circle at coordinate 10,10 with radius of 10
         | var c = paper.circle(10, 10, 10);
         | c.node.onclick = function () {
         |     c.attr("fill", "red");
         | };
        \*/
        this[0] = this.node = node;
        /*\
         * Element.raphael
         [ property (object) ]
         **
         * Internal reference to @Raphael object. In case it is not available.
         > Usage
         | Raphael.el.red = function () {
         |     var hsb = this.paper.raphael.rgb2hsb(this.attr("fill"));
         |     hsb.h = 1;
         |     this.attr({fill: this.paper.raphael.hsb2rgb(hsb).hex});
         | }
        \*/
        node.raphael = true;
        /*\
         * Element.id
         [ property (number) ]
         **
         * Unique id of the element. Especially useful when you want to listen to events of the element,
         * because all events are fired in format `<module>.<action>.<id>`. Also useful for @Paper.getById method.
        \*/
        this.id = R._oid++;
        node.raphaelid = this.id;
        this.matrix = R.matrix();
        this.realPath = null;
        /*\
         * Element.paper
         [ property (object) ]
         **
         * Internal reference to “paper” where object drawn. Mainly for use in plugins and element extensions.
         > Usage
         | Raphael.el.cross = function () {
         |     this.attr({fill: "red"});
         |     this.paper.path("M10,10L50,50M50,10L10,50")
         |         .attr({stroke: "red"});
         | }
        \*/
        this.paper = svg;
        this.attrs = this.attrs || {};
        this._ = {
            transform: [],
            sx: 1,
            sy: 1,
            deg: 0,
            dx: 0,
            dy: 0,
            dirty: 1
        };
        !svg.bottom && (svg.bottom = this);
        /*\
         * Element.prev
         [ property (object) ]
         **
         * Reference to the previous element in the hierarchy.
        \*/
        this.prev = svg.top;
        svg.top && (svg.top.next = this);
        svg.top = this;
        /*\
         * Element.next
         [ property (object) ]
         **
         * Reference to the next element in the hierarchy.
        \*/
        this.next = null;
    },
    elproto = R.el;

    Element.prototype = elproto;
    elproto.constructor = Element;

    R._engine.path = function (pathString, SVG) {
        var el = $("path");
        SVG.canvas && SVG.canvas.appendChild(el);
        var p = new Element(el, SVG);
        p.type = "path";
        setFillAndStroke(p, {
            fill: "none",
            stroke: "#000",
            path: pathString
        });
        return p;
    };
    /*\
     * Element.rotate
     [ method ]
     **
     * Deprecated! Use @Element.transform instead.
     * Adds rotation by given angle around given point to the list of
     * transformations of the element.
     > Parameters
     - deg (number) angle in degrees
     - cx (number) #optional x coordinate of the centre of rotation
     - cy (number) #optional y coordinate of the centre of rotation
     * If cx & cy aren’t specified centre of the shape is used as a point of rotation.
     = (object) @Element
    \*/
    elproto.rotate = function (deg, cx, cy) {
        if (this.removed) {
            return this;
        }
        deg = Str(deg).split(separator);
        if (deg.length - 1) {
            cx = toFloat(deg[1]);
            cy = toFloat(deg[2]);
        }
        deg = toFloat(deg[0]);
        (cy == null) && (cx = cy);
        if (cx == null || cy == null) {
            var bbox = this.getBBox(1);
            cx = bbox.x + bbox.width / 2;
            cy = bbox.y + bbox.height / 2;
        }
        this.transform(this._.transform.concat([["r", deg, cx, cy]]));
        return this;
    };
    /*\
     * Element.scale
     [ method ]
     **
     * Deprecated! Use @Element.transform instead.
     * Adds scale by given amount relative to given point to the list of
     * transformations of the element.
     > Parameters
     - sx (number) horisontal scale amount
     - sy (number) vertical scale amount
     - cx (number) #optional x coordinate of the centre of scale
     - cy (number) #optional y coordinate of the centre of scale
     * If cx & cy aren’t specified centre of the shape is used instead.
     = (object) @Element
    \*/
    elproto.scale = function (sx, sy, cx, cy) {
        if (this.removed) {
            return this;
        }
        sx = Str(sx).split(separator);
        if (sx.length - 1) {
            sy = toFloat(sx[1]);
            cx = toFloat(sx[2]);
            cy = toFloat(sx[3]);
        }
        sx = toFloat(sx[0]);
        (sy == null) && (sy = sx);
        (cy == null) && (cx = cy);
        if (cx == null || cy == null) {
            var bbox = this.getBBox(1);
        }
        cx = cx == null ? bbox.x + bbox.width / 2 : cx;
        cy = cy == null ? bbox.y + bbox.height / 2 : cy;
        this.transform(this._.transform.concat([["s", sx, sy, cx, cy]]));
        return this;
    };
    /*\
     * Element.translate
     [ method ]
     **
     * Deprecated! Use @Element.transform instead.
     * Adds translation by given amount to the list of transformations of the element.
     > Parameters
     - dx (number) horisontal shift
     - dy (number) vertical shift
     = (object) @Element
    \*/
    elproto.translate = function (dx, dy) {
        if (this.removed) {
            return this;
        }
        dx = Str(dx).split(separator);
        if (dx.length - 1) {
            dy = toFloat(dx[1]);
        }
        dx = toFloat(dx[0]) || 0;
        dy = +dy || 0;
        this.transform(this._.transform.concat([["t", dx, dy]]));
        return this;
    };
    /*\
     * Element.transform
     [ method ]
     **
     * Adds transformation to the element which is separate to other attributes,
     * i.e. translation doesn’t change `x` or `y` of the rectange. The format
     * of transformation string is similar to the path string syntax:
     | "t100,100r30,100,100s2,2,100,100r45s1.5"
     * Each letter is a command. There are four commands: `t` is for translate, `r` is for rotate, `s` is for
     * scale and `m` is for matrix.
     *
     * There are also alternative “absolute” translation, rotation and scale: `T`, `R` and `S`. They will not take previous transformation into account. For example, `...T100,0` will always move element 100 px horisontally, while `...t100,0` could move it vertically if there is `r90` before. Just compare results of `r90t100,0` and `r90T100,0`.
     *
     * So, the example line above could be read like “translate by 100, 100; rotate 30° around 100, 100; scale twice around 100, 100;
     * rotate 45° around centre; scale 1.5 times relative to centre”. As you can see rotate and scale commands have origin
     * coordinates as optional parameters, the default is the centre point of the element.
     * Matrix accepts six parameters.
     > Usage
     | var el = paper.rect(10, 20, 300, 200);
     | // translate 100, 100, rotate 45°, translate -100, 0
     | el.transform("t100,100r45t-100,0");
     | // if you want you can append or prepend transformations
     | el.transform("...t50,50");
     | el.transform("s2...");
     | // or even wrap
     | el.transform("t50,50...t-50-50");
     | // to reset transformation call method with empty string
     | el.transform("");
     | // to get current value call it without parameters
     | console.log(el.transform());
     > Parameters
     - tstr (string) #optional transformation string
     * If tstr isn’t specified
     = (string) current transformation string
     * else
     = (object) @Element
    \*/
    elproto.transform = function (tstr) {
        var _ = this._;
        if (tstr == null) {
            return _.transform;
        }
        R._extractTransform(this, tstr);

        this.clip && $(this.clip, {transform: this.matrix.invert()});
        this.pattern && updatePosition(this);
        this.node && $(this.node, {transform: this.matrix});

        if (_.sx != 1 || _.sy != 1) {
            var sw = this.attrs[has]("stroke-width") ? this.attrs["stroke-width"] : 1;
            this.attr({"stroke-width": sw});
        }

        return this;
    };
    /*\
     * Element.hide
     [ method ]
     **
     * Makes element invisible. See @Element.show.
     = (object) @Element
    \*/
    elproto.hide = function () {
        if(!this.removed) this.node.style.display = "none";
        return this;
    };
    /*\
     * Element.show
     [ method ]
     **
     * Makes element visible. See @Element.hide.
     = (object) @Element
    \*/
    elproto.show = function () {
        if(!this.removed) this.node.style.display = "";
        return this;
    };
    /*\
     * Element.remove
     [ method ]
     **
     * Removes element from the paper.
    \*/
    elproto.remove = function () {
        var node = getRealNode(this.node);
        if (this.removed || !node.parentNode) {
            return;
        }
        var paper = this.paper;
        paper.__set__ && paper.__set__.exclude(this);
        eve.unbind("raphael.*.*." + this.id);
        if (this.gradient) {
            paper.defs.removeChild(this.gradient);
        }
        R._tear(this, paper);

        node.parentNode.removeChild(node);

        // Remove custom data for element
        this.removeData();

        for (var i in this) {
            this[i] = typeof this[i] == "function" ? R._removedFactory(i) : null;
        }
        this.removed = true;
    };
    elproto._getBBox = function () {
        if (this.node.style.display == "none") {
            this.show();
            var hide = true;
        }
        var canvasHidden = false,
            containerStyle;
        if (this.paper.canvas.parentElement) {
          containerStyle = this.paper.canvas.parentElement.style;
        } //IE10+ can't find parentElement
        else if (this.paper.canvas.parentNode) {
          containerStyle = this.paper.canvas.parentNode.style;
        }

        if(containerStyle && containerStyle.display == "none") {
          canvasHidden = true;
          containerStyle.display = "";
        }
        var bbox = {};
        try {
            bbox = this.node.getBBox();
        } catch(e) {
            // Firefox 3.0.x, 25.0.1 (probably more versions affected) play badly here - possible fix
            bbox = {
                x: this.node.clientLeft,
                y: this.node.clientTop,
                width: this.node.clientWidth,
                height: this.node.clientHeight
            }
        } finally {
            bbox = bbox || {};
            if(canvasHidden){
              containerStyle.display = "none";
            }
        }
        hide && this.hide();
        return bbox;
    };
    /*\
     * Element.attr
     [ method ]
     **
     * Sets the attributes of the element.
     > Parameters
     - attrName (string) attribute’s name
     - value (string) value
     * or
     - params (object) object of name/value pairs
     * or
     - attrName (string) attribute’s name
     * or
     - attrNames (array) in this case method returns array of current values for given attribute names
     = (object) @Element if attrsName & value or params are passed in.
     = (...) value of the attribute if only attrsName is passed in.
     = (array) array of values of the attribute if attrsNames is passed in.
     = (object) object of attributes if nothing is passed in.
     > Possible parameters
     # <p>Please refer to the <a href="http://www.w3.org/TR/SVG/" title="The W3C Recommendation for the SVG language describes these properties in detail.">SVG specification</a> for an explanation of these parameters.</p>
     o arrow-end (string) arrowhead on the end of the path. The format for string is `<type>[-<width>[-<length>]]`. Possible types: `classic`, `block`, `open`, `oval`, `diamond`, `none`, width: `wide`, `narrow`, `medium`, length: `long`, `short`, `midium`.
     o clip-rect (string) comma or space separated values: x, y, width and height
     o cursor (string) CSS type of the cursor
     o cx (number) the x-axis coordinate of the center of the circle, or ellipse
     o cy (number) the y-axis coordinate of the center of the circle, or ellipse
     o fill (string) colour, gradient or image
     o fill-opacity (number)
     o font (string)
     o font-family (string)
     o font-size (number) font size in pixels
     o font-weight (string)
     o height (number)
     o href (string) URL, if specified element behaves as hyperlink
     o opacity (number)
     o path (string) SVG path string format
     o r (number) radius of the circle, ellipse or rounded corner on the rect
     o rx (number) horisontal radius of the ellipse
     o ry (number) vertical radius of the ellipse
     o src (string) image URL, only works for @Element.image element
     o stroke (string) stroke colour
     o stroke-dasharray (string) [“”, “none”, “`-`”, “`.`”, “`-.`”, “`-..`”, “`. `”, “`- `”, “`--`”, “`- .`”, “`--.`”, “`--..`”]
     o stroke-linecap (string) [“`butt`”, “`square`”, “`round`”]
     o stroke-linejoin (string) [“`bevel`”, “`round`”, “`miter`”]
     o stroke-miterlimit (number)
     o stroke-opacity (number)
     o stroke-width (number) stroke width in pixels, default is '1'
     o target (string) used with href
     o text (string) contents of the text element. Use `\n` for multiline text
     o text-anchor (string) [“`start`”, “`middle`”, “`end`”], default is “`middle`”
     o title (string) will create tooltip with a given text
     o transform (string) see @Element.transform
     o width (number)
     o x (number)
     o y (number)
     > Gradients
     * Linear gradient format: “`‹angle›-‹colour›[-‹colour›[:‹offset›]]*-‹colour›`”, example: “`90-#fff-#000`” – 90°
     * gradient from white to black or “`0-#fff-#f00:20-#000`” – 0° gradient from white via red (at 20%) to black.
     *
     * radial gradient: “`r[(‹fx›, ‹fy›)]‹colour›[-‹colour›[:‹offset›]]*-‹colour›`”, example: “`r#fff-#000`” –
     * gradient from white to black or “`r(0.25, 0.75)#fff-#000`” – gradient from white to black with focus point
     * at 0.25, 0.75. Focus point coordinates are in 0..1 range. Radial gradients can only be applied to circles and ellipses.
     > Path String
     # <p>Please refer to <a href="http://www.w3.org/TR/SVG/paths.html#PathData" title="Details of a path’s data attribute’s format are described in the SVG specification.">SVG documentation regarding path string</a>. Raphaël fully supports it.</p>
     > Colour Parsing
     # <ul>
     #     <li>Colour name (“<code>red</code>”, “<code>green</code>”, “<code>cornflowerblue</code>”, etc)</li>
     #     <li>#••• — shortened HTML colour: (“<code>#000</code>”, “<code>#fc0</code>”, etc)</li>
     #     <li>#•••••• — full length HTML colour: (“<code>#000000</code>”, “<code>#bd2300</code>”)</li>
     #     <li>rgb(•••, •••, •••) — red, green and blue channels’ values: (“<code>rgb(200,&nbsp;100,&nbsp;0)</code>”)</li>
     #     <li>rgb(•••%, •••%, •••%) — same as above, but in %: (“<code>rgb(100%,&nbsp;175%,&nbsp;0%)</code>”)</li>
     #     <li>rgba(•••, •••, •••, •••) — red, green and blue channels’ values: (“<code>rgba(200,&nbsp;100,&nbsp;0, .5)</code>”)</li>
     #     <li>rgba(•••%, •••%, •••%, •••%) — same as above, but in %: (“<code>rgba(100%,&nbsp;175%,&nbsp;0%, 50%)</code>”)</li>
     #     <li>hsb(•••, •••, •••) — hue, saturation and brightness values: (“<code>hsb(0.5,&nbsp;0.25,&nbsp;1)</code>”)</li>
     #     <li>hsb(•••%, •••%, •••%) — same as above, but in %</li>
     #     <li>hsba(•••, •••, •••, •••) — same as above, but with opacity</li>
     #     <li>hsl(•••, •••, •••) — almost the same as hsb, see <a href="http://en.wikipedia.org/wiki/HSL_and_HSV" title="HSL and HSV - Wikipedia, the free encyclopedia">Wikipedia page</a></li>
     #     <li>hsl(•••%, •••%, •••%) — same as above, but in %</li>
     #     <li>hsla(•••, •••, •••, •••) — same as above, but with opacity</li>
     #     <li>Optionally for hsb and hsl you could specify hue as a degree: “<code>hsl(240deg,&nbsp;1,&nbsp;.5)</code>” or, if you want to go fancy, “<code>hsl(240°,&nbsp;1,&nbsp;.5)</code>”</li>
     # </ul>
    \*/
    elproto.attr = function (name, value) {
        if (this.removed) {
            return this;
        }
        if (name == null) {
            var res = {};
            for (var a in this.attrs) if (this.attrs[has](a)) {
                res[a] = this.attrs[a];
            }
            res.gradient && res.fill == "none" && (res.fill = res.gradient) && delete res.gradient;
            res.transform = this._.transform;
            return res;
        }
        if (value == null && R.is(name, "string")) {
            if (name == "fill" && this.attrs.fill == "none" && this.attrs.gradient) {
                return this.attrs.gradient;
            }
            if (name == "transform") {
                return this._.transform;
            }
            var names = name.split(separator),
                out = {};
            for (var i = 0, ii = names.length; i < ii; i++) {
                name = names[i];
                if (name in this.attrs) {
                    out[name] = this.attrs[name];
                } else if (R.is(this.paper.customAttributes[name], "function")) {
                    out[name] = this.paper.customAttributes[name].def;
                } else {
                    out[name] = R._availableAttrs[name];
                }
            }
            return ii - 1 ? out : out[names[0]];
        }
        if (value == null && R.is(name, "array")) {
            out = {};
            for (i = 0, ii = name.length; i < ii; i++) {
                out[name[i]] = this.attr(name[i]);
            }
            return out;
        }
        if (value != null) {
            var params = {};
            params[name] = value;
        } else if (name != null && R.is(name, "object")) {
            params = name;
        }
        for (var key in params) {
            eve("raphael.attr." + key + "." + this.id, this, params[key]);
        }
        for (key in this.paper.customAttributes) if (this.paper.customAttributes[has](key) && params[has](key) && R.is(this.paper.customAttributes[key], "function")) {
            var par = this.paper.customAttributes[key].apply(this, [].concat(params[key]));
            this.attrs[key] = params[key];
            for (var subkey in par) if (par[has](subkey)) {
                params[subkey] = par[subkey];
            }
        }
        setFillAndStroke(this, params);
        return this;
    };
    /*\
     * Element.toFront
     [ method ]
     **
     * Moves the element so it is the closest to the viewer’s eyes, on top of other elements.
     = (object) @Element
    \*/
    elproto.toFront = function () {
        if (this.removed) {
            return this;
        }
        var node = getRealNode(this.node);
        node.parentNode.appendChild(node);
        var svg = this.paper;
        svg.top != this && R._tofront(this, svg);
        return this;
    };
    /*\
     * Element.toBack
     [ method ]
     **
     * Moves the element so it is the furthest from the viewer’s eyes, behind other elements.
     = (object) @Element
    \*/
    elproto.toBack = function () {
        if (this.removed) {
            return this;
        }
        var node = getRealNode(this.node);
        var parentNode = node.parentNode;
        parentNode.insertBefore(node, parentNode.firstChild);
        R._toback(this, this.paper);
        var svg = this.paper;
        return this;
    };
    /*\
     * Element.insertAfter
     [ method ]
     **
     * Inserts current object after the given one.
     = (object) @Element
    \*/
    elproto.insertAfter = function (element) {
        if (this.removed || !element) {
            return this;
        }

        var node = getRealNode(this.node);
        var afterNode = getRealNode(element.node || element[element.length - 1].node);
        if (afterNode.nextSibling) {
            afterNode.parentNode.insertBefore(node, afterNode.nextSibling);
        } else {
            afterNode.parentNode.appendChild(node);
        }
        R._insertafter(this, element, this.paper);
        return this;
    };
    /*\
     * Element.insertBefore
     [ method ]
     **
     * Inserts current object before the given one.
     = (object) @Element
    \*/
    elproto.insertBefore = function (element) {
        if (this.removed || !element) {
            return this;
        }

        var node = getRealNode(this.node);
        var beforeNode = getRealNode(element.node || element[0].node);
        beforeNode.parentNode.insertBefore(node, beforeNode);
        R._insertbefore(this, element, this.paper);
        return this;
    };
    elproto.blur = function (size) {
        // Experimental. No Safari support. Use it on your own risk.
        var t = this;
        if (+size !== 0) {
            var fltr = $("filter"),
                blur = $("feGaussianBlur");
            t.attrs.blur = size;
            fltr.id = R.createUUID();
            $(blur, {stdDeviation: +size || 1.5});
            fltr.appendChild(blur);
            t.paper.defs.appendChild(fltr);
            t._blur = fltr;
            $(t.node, {filter: "url(#" + fltr.id + ")"});
        } else {
            if (t._blur) {
                t._blur.parentNode.removeChild(t._blur);
                delete t._blur;
                delete t.attrs.blur;
            }
            t.node.removeAttribute("filter");
        }
        return t;
    };
    R._engine.circle = function (svg, x, y, r) {
        var el = $("circle");
        svg.canvas && svg.canvas.appendChild(el);
        var res = new Element(el, svg);
        res.attrs = {cx: x, cy: y, r: r, fill: "none", stroke: "#000"};
        res.type = "circle";
        $(el, res.attrs);
        return res;
    };
    R._engine.rect = function (svg, x, y, w, h, r) {
        var el = $("rect");
        svg.canvas && svg.canvas.appendChild(el);
        var res = new Element(el, svg);
        res.attrs = {x: x, y: y, width: w, height: h, rx: r || 0, ry: r || 0, fill: "none", stroke: "#000"};
        res.type = "rect";
        $(el, res.attrs);
        return res;
    };
    R._engine.ellipse = function (svg, x, y, rx, ry) {
        var el = $("ellipse");
        svg.canvas && svg.canvas.appendChild(el);
        var res = new Element(el, svg);
        res.attrs = {cx: x, cy: y, rx: rx, ry: ry, fill: "none", stroke: "#000"};
        res.type = "ellipse";
        $(el, res.attrs);
        return res;
    };
    R._engine.image = function (svg, src, x, y, w, h) {
        var el = $("image");
        $(el, {x: x, y: y, width: w, height: h, preserveAspectRatio: "none"});
        el.setAttributeNS(xlink, "href", src);
        svg.canvas && svg.canvas.appendChild(el);
        var res = new Element(el, svg);
        res.attrs = {x: x, y: y, width: w, height: h, src: src};
        res.type = "image";
        return res;
    };
    R._engine.text = function (svg, x, y, text) {
        var el = $("text");
        svg.canvas && svg.canvas.appendChild(el);
        var res = new Element(el, svg);
        res.attrs = {
            x: x,
            y: y,
            "text-anchor": "middle",
            text: text,
            "font-family": R._availableAttrs["font-family"],
            "font-size": R._availableAttrs["font-size"],
            stroke: "none",
            fill: "#000"
        };
        res.type = "text";
        setFillAndStroke(res, res.attrs);
        return res;
    };
    R._engine.setSize = function (width, height) {
        this.width = width || this.width;
        this.height = height || this.height;
        this.canvas.setAttribute("width", this.width);
        this.canvas.setAttribute("height", this.height);
        if (this._viewBox) {
            this.setViewBox.apply(this, this._viewBox);
        }
        return this;
    };
    R._engine.create = function () {
        var con = R._getContainer.apply(0, arguments),
            container = con && con.container,
            x = con.x,
            y = con.y,
            width = con.width,
            height = con.height;
        if (!container) {
            throw new Error("SVG container not found.");
        }
        var cnvs = $("svg"),
            css = "overflow:hidden;",
            isFloating;
        x = x || 0;
        y = y || 0;
        width = width || 512;
        height = height || 342;
        $(cnvs, {
            height: height,
            version: 1.1,
            width: width,
            xmlns: "http://www.w3.org/2000/svg",
            "xmlns:xlink": "http://www.w3.org/1999/xlink"
        });
        if (container == 1) {
            cnvs.style.cssText = css + "position:absolute;left:" + x + "px;top:" + y + "px";
            R._g.doc.body.appendChild(cnvs);
            isFloating = 1;
        } else {
            cnvs.style.cssText = css + "position:relative";
            if (container.firstChild) {
                container.insertBefore(cnvs, container.firstChild);
            } else {
                container.appendChild(cnvs);
            }
        }
        container = new R._Paper;
        container.width = width;
        container.height = height;
        container.canvas = cnvs;
        container.clear();
        container._left = container._top = 0;
        isFloating && (container.renderfix = function () {});
        container.renderfix();
        return container;
    };
    R._engine.setViewBox = function (x, y, w, h, fit) {
        eve("raphael.setViewBox", this, this._viewBox, [x, y, w, h, fit]);
        var paperSize = this.getSize(),
            size = mmax(w / paperSize.width, h / paperSize.height),
            top = this.top,
            aspectRatio = fit ? "xMidYMid meet" : "xMinYMin",
            vb,
            sw;
        if (x == null) {
            if (this._vbSize) {
                size = 1;
            }
            delete this._vbSize;
            vb = "0 0 " + this.width + S + this.height;
        } else {
            this._vbSize = size;
            vb = x + S + y + S + w + S + h;
        }
        $(this.canvas, {
            viewBox: vb,
            preserveAspectRatio: aspectRatio
        });
        while (size && top) {
            sw = "stroke-width" in top.attrs ? top.attrs["stroke-width"] : 1;
            top.attr({"stroke-width": sw});
            top._.dirty = 1;
            top._.dirtyT = 1;
            top = top.prev;
        }
        this._viewBox = [x, y, w, h, !!fit];
        return this;
    };
    /*\
     * Paper.renderfix
     [ method ]
     **
     * Fixes the issue of Firefox and IE9 regarding subpixel rendering. If paper is dependant
     * on other elements after reflow it could shift half pixel which cause for lines to lost their crispness.
     * This method fixes the issue.
     **
       Special thanks to Mariusz Nowak (http://www.medikoo.com/) for this method.
    \*/
    R.prototype.renderfix = function () {
        var cnvs = this.canvas,
            s = cnvs.style,
            pos;
        try {
            pos = cnvs.getScreenCTM() || cnvs.createSVGMatrix();
        } catch (e) {
            pos = cnvs.createSVGMatrix();
        }
        var left = -pos.e % 1,
            top = -pos.f % 1;
        if (left || top) {
            if (left) {
                this._left = (this._left + left) % 1;
                s.left = this._left + "px";
            }
            if (top) {
                this._top = (this._top + top) % 1;
                s.top = this._top + "px";
            }
        }
    };
    /*\
     * Paper.clear
     [ method ]
     **
     * Clears the paper, i.e. removes all the elements.
    \*/
    R.prototype.clear = function () {
        R.eve("raphael.clear", this);
        var c = this.canvas;
        while (c.firstChild) {
            c.removeChild(c.firstChild);
        }
        this.bottom = this.top = null;
        (this.desc = $("desc")).appendChild(R._g.doc.createTextNode("Created with Rapha\xebl " + R.version));
        c.appendChild(this.desc);
        c.appendChild(this.defs = $("defs"));
    };
    /*\
     * Paper.remove
     [ method ]
     **
     * Removes the paper from the DOM.
    \*/
    R.prototype.remove = function () {
        eve("raphael.remove", this);
        this.canvas.parentNode && this.canvas.parentNode.removeChild(this.canvas);
        for (var i in this) {
            this[i] = typeof this[i] == "function" ? R._removedFactory(i) : null;
        }
    };
    var setproto = R.st;
    for (var method in elproto) if (elproto[has](method) && !setproto[has](method)) {
        setproto[method] = (function (methodname) {
            return function () {
                var arg = arguments;
                return this.forEach(function (el) {
                    el[methodname].apply(el, arg);
                });
            };
        })(method);
    }
})();

// ┌─────────────────────────────────────────────────────────────────────┐ \\
// │ Raphaël - JavaScript Vector Library                                 │ \\
// ├─────────────────────────────────────────────────────────────────────┤ \\
// │ VML Module                                                          │ \\
// ├─────────────────────────────────────────────────────────────────────┤ \\
// │ Copyright (c) 2008-2011 Dmitry Baranovskiy (http://raphaeljs.com)   │ \\
// │ Copyright (c) 2008-2011 Sencha Labs (http://sencha.com)             │ \\
// │ Licensed under the MIT (http://raphaeljs.com/license.html) license. │ \\
// └─────────────────────────────────────────────────────────────────────┘ \\

(function(){
    if (!R.vml) {
        return;
    }
    var has = "hasOwnProperty",
        Str = String,
        toFloat = parseFloat,
        math = Math,
        round = math.round,
        mmax = math.max,
        mmin = math.min,
        abs = math.abs,
        fillString = "fill",
        separator = /[, ]+/,
        eve = R.eve,
        ms = " progid:DXImageTransform.Microsoft",
        S = " ",
        E = "",
        map = {M: "m", L: "l", C: "c", Z: "x", m: "t", l: "r", c: "v", z: "x"},
        bites = /([clmz]),?([^clmz]*)/gi,
        blurregexp = / progid:\S+Blur\([^\)]+\)/g,
        val = /-?[^,\s-]+/g,
        cssDot = "position:absolute;left:0;top:0;width:1px;height:1px;behavior:url(#default#VML)",
        zoom = 21600,
        pathTypes = {path: 1, rect: 1, image: 1},
        ovalTypes = {circle: 1, ellipse: 1},
        path2vml = function (path) {
            var total =  /[ahqstv]/ig,
                command = R._pathToAbsolute;
            Str(path).match(total) && (command = R._path2curve);
            total = /[clmz]/g;
            if (command == R._pathToAbsolute && !Str(path).match(total)) {
                var res = Str(path).replace(bites, function (all, command, args) {
                    var vals = [],
                        isMove = command.toLowerCase() == "m",
                        res = map[command];
                    args.replace(val, function (value) {
                        if (isMove && vals.length == 2) {
                            res += vals + map[command == "m" ? "l" : "L"];
                            vals = [];
                        }
                        vals.push(round(value * zoom));
                    });
                    return res + vals;
                });
                return res;
            }
            var pa = command(path), p, r;
            res = [];
            for (var i = 0, ii = pa.length; i < ii; i++) {
                p = pa[i];
                r = pa[i][0].toLowerCase();
                r == "z" && (r = "x");
                for (var j = 1, jj = p.length; j < jj; j++) {
                    r += round(p[j] * zoom) + (j != jj - 1 ? "," : E);
                }
                res.push(r);
            }
            return res.join(S);
        },
        compensation = function (deg, dx, dy) {
            var m = R.matrix();
            m.rotate(-deg, .5, .5);
            return {
                dx: m.x(dx, dy),
                dy: m.y(dx, dy)
            };
        },
        setCoords = function (p, sx, sy, dx, dy, deg) {
            var _ = p._,
                m = p.matrix,
                fillpos = _.fillpos,
                o = p.node,
                s = o.style,
                y = 1,
                flip = "",
                dxdy,
                kx = zoom / sx,
                ky = zoom / sy;
            s.visibility = "hidden";
            if (!sx || !sy) {
                return;
            }
            o.coordsize = abs(kx) + S + abs(ky);
            s.rotation = deg * (sx * sy < 0 ? -1 : 1);
            if (deg) {
                var c = compensation(deg, dx, dy);
                dx = c.dx;
                dy = c.dy;
            }
            sx < 0 && (flip += "x");
            sy < 0 && (flip += " y") && (y = -1);
            s.flip = flip;
            o.coordorigin = (dx * -kx) + S + (dy * -ky);
            if (fillpos || _.fillsize) {
                var fill = o.getElementsByTagName(fillString);
                fill = fill && fill[0];
                o.removeChild(fill);
                if (fillpos) {
                    c = compensation(deg, m.x(fillpos[0], fillpos[1]), m.y(fillpos[0], fillpos[1]));
                    fill.position = c.dx * y + S + c.dy * y;
                }
                if (_.fillsize) {
                    fill.size = _.fillsize[0] * abs(sx) + S + _.fillsize[1] * abs(sy);
                }
                o.appendChild(fill);
            }
            s.visibility = "visible";
        };
    R.toString = function () {
        return  "Your browser doesn\u2019t support SVG. Falling down to VML.\nYou are running Rapha\xebl " + this.version;
    };
    var addArrow = function (o, value, isEnd) {
        var values = Str(value).toLowerCase().split("-"),
            se = isEnd ? "end" : "start",
            i = values.length,
            type = "classic",
            w = "medium",
            h = "medium";
        while (i--) {
            switch (values[i]) {
                case "block":
                case "classic":
                case "oval":
                case "diamond":
                case "open":
                case "none":
                    type = values[i];
                    break;
                case "wide":
                case "narrow": h = values[i]; break;
                case "long":
                case "short": w = values[i]; break;
            }
        }
        var stroke = o.node.getElementsByTagName("stroke")[0];
        stroke[se + "arrow"] = type;
        stroke[se + "arrowlength"] = w;
        stroke[se + "arrowwidth"] = h;
    },
    setFillAndStroke = function (o, params) {
        // o.paper.canvas.style.display = "none";
        o.attrs = o.attrs || {};
        var node = o.node,
            a = o.attrs,
            s = node.style,
            xy,
            newpath = pathTypes[o.type] && (params.x != a.x || params.y != a.y || params.width != a.width || params.height != a.height || params.cx != a.cx || params.cy != a.cy || params.rx != a.rx || params.ry != a.ry || params.r != a.r),
            isOval = ovalTypes[o.type] && (a.cx != params.cx || a.cy != params.cy || a.r != params.r || a.rx != params.rx || a.ry != params.ry),
            res = o;


        for (var par in params) if (params[has](par)) {
            a[par] = params[par];
        }
        if (newpath) {
            a.path = R._getPath[o.type](o);
            o._.dirty = 1;
        }
        params.href && (node.href = params.href);
        params.title && (node.title = params.title);
        params.target && (node.target = params.target);
        params.cursor && (s.cursor = params.cursor);
        "blur" in params && o.blur(params.blur);
        if (params.path && o.type == "path" || newpath) {
            node.path = path2vml(~Str(a.path).toLowerCase().indexOf("r") ? R._pathToAbsolute(a.path) : a.path);
            o._.dirty = 1;
            if (o.type == "image") {
                o._.fillpos = [a.x, a.y];
                o._.fillsize = [a.width, a.height];
                setCoords(o, 1, 1, 0, 0, 0);
            }
        }
        "transform" in params && o.transform(params.transform);
        if (isOval) {
            var cx = +a.cx,
                cy = +a.cy,
                rx = +a.rx || +a.r || 0,
                ry = +a.ry || +a.r || 0;
            node.path = R.format("ar{0},{1},{2},{3},{4},{1},{4},{1}x", round((cx - rx) * zoom), round((cy - ry) * zoom), round((cx + rx) * zoom), round((cy + ry) * zoom), round(cx * zoom));
            o._.dirty = 1;
        }
        if ("clip-rect" in params) {
            var rect = Str(params["clip-rect"]).split(separator);
            if (rect.length == 4) {
                rect[2] = +rect[2] + (+rect[0]);
                rect[3] = +rect[3] + (+rect[1]);
                var div = node.clipRect || R._g.doc.createElement("div"),
                    dstyle = div.style;
                dstyle.clip = R.format("rect({1}px {2}px {3}px {0}px)", rect);
                if (!node.clipRect) {
                    dstyle.position = "absolute";
                    dstyle.top = 0;
                    dstyle.left = 0;
                    dstyle.width = o.paper.width + "px";
                    dstyle.height = o.paper.height + "px";
                    node.parentNode.insertBefore(div, node);
                    div.appendChild(node);
                    node.clipRect = div;
                }
            }
            if (!params["clip-rect"]) {
                node.clipRect && (node.clipRect.style.clip = "auto");
            }
        }
        if (o.textpath) {
            var textpathStyle = o.textpath.style;
            params.font && (textpathStyle.font = params.font);
            params["font-family"] && (textpathStyle.fontFamily = '"' + params["font-family"].split(",")[0].replace(/^['"]+|['"]+$/g, E) + '"');
            params["font-size"] && (textpathStyle.fontSize = params["font-size"]);
            params["font-weight"] && (textpathStyle.fontWeight = params["font-weight"]);
            params["font-style"] && (textpathStyle.fontStyle = params["font-style"]);
        }
        if ("arrow-start" in params) {
            addArrow(res, params["arrow-start"]);
        }
        if ("arrow-end" in params) {
            addArrow(res, params["arrow-end"], 1);
        }
        if (params.opacity != null || 
            params["stroke-width"] != null ||
            params.fill != null ||
            params.src != null ||
            params.stroke != null ||
            params["stroke-width"] != null ||
            params["stroke-opacity"] != null ||
            params["fill-opacity"] != null ||
            params["stroke-dasharray"] != null ||
            params["stroke-miterlimit"] != null ||
            params["stroke-linejoin"] != null ||
            params["stroke-linecap"] != null) {
            var fill = node.getElementsByTagName(fillString),
                newfill = false;
            fill = fill && fill[0];
            !fill && (newfill = fill = createNode(fillString));
            if (o.type == "image" && params.src) {
                fill.src = params.src;
            }
            params.fill && (fill.on = true);
            if (fill.on == null || params.fill == "none" || params.fill === null) {
                fill.on = false;
            }
            if (fill.on && params.fill) {
                var isURL = Str(params.fill).match(R._ISURL);
                if (isURL) {
                    fill.parentNode == node && node.removeChild(fill);
                    fill.rotate = true;
                    fill.src = isURL[1];
                    fill.type = "tile";
                    var bbox = o.getBBox(1);
                    fill.position = bbox.x + S + bbox.y;
                    o._.fillpos = [bbox.x, bbox.y];

                    R._preload(isURL[1], function () {
                        o._.fillsize = [this.offsetWidth, this.offsetHeight];
                    });
                } else {
                    fill.color = R.getRGB(params.fill).hex;
                    fill.src = E;
                    fill.type = "solid";
                    if (R.getRGB(params.fill).error && (res.type in {circle: 1, ellipse: 1} || Str(params.fill).charAt() != "r") && addGradientFill(res, params.fill, fill)) {
                        a.fill = "none";
                        a.gradient = params.fill;
                        fill.rotate = false;
                    }
                }
            }
            if ("fill-opacity" in params || "opacity" in params) {
                var opacity = ((+a["fill-opacity"] + 1 || 2) - 1) * ((+a.opacity + 1 || 2) - 1) * ((+R.getRGB(params.fill).o + 1 || 2) - 1);
                opacity = mmin(mmax(opacity, 0), 1);
                fill.opacity = opacity;
                if (fill.src) {
                    fill.color = "none";
                }
            }
            node.appendChild(fill);
            var stroke = (node.getElementsByTagName("stroke") && node.getElementsByTagName("stroke")[0]),
            newstroke = false;
            !stroke && (newstroke = stroke = createNode("stroke"));
            if ((params.stroke && params.stroke != "none") ||
                params["stroke-width"] ||
                params["stroke-opacity"] != null ||
                params["stroke-dasharray"] ||
                params["stroke-miterlimit"] ||
                params["stroke-linejoin"] ||
                params["stroke-linecap"]) {
                stroke.on = true;
            }
            (params.stroke == "none" || params.stroke === null || stroke.on == null || params.stroke == 0 || params["stroke-width"] == 0) && (stroke.on = false);
            var strokeColor = R.getRGB(params.stroke);
            stroke.on && params.stroke && (stroke.color = strokeColor.hex);
            opacity = ((+a["stroke-opacity"] + 1 || 2) - 1) * ((+a.opacity + 1 || 2) - 1) * ((+strokeColor.o + 1 || 2) - 1);
            var width = (toFloat(params["stroke-width"]) || 1) * .75;
            opacity = mmin(mmax(opacity, 0), 1);
            params["stroke-width"] == null && (width = a["stroke-width"]);
            params["stroke-width"] && (stroke.weight = width);
            width && width < 1 && (opacity *= width) && (stroke.weight = 1);
            stroke.opacity = opacity;
        
            params["stroke-linejoin"] && (stroke.joinstyle = params["stroke-linejoin"] || "miter");
            stroke.miterlimit = params["stroke-miterlimit"] || 8;
            params["stroke-linecap"] && (stroke.endcap = params["stroke-linecap"] == "butt" ? "flat" : params["stroke-linecap"] == "square" ? "square" : "round");
            if ("stroke-dasharray" in params) {
                var dasharray = {
                    "-": "shortdash",
                    ".": "shortdot",
                    "-.": "shortdashdot",
                    "-..": "shortdashdotdot",
                    ". ": "dot",
                    "- ": "dash",
                    "--": "longdash",
                    "- .": "dashdot",
                    "--.": "longdashdot",
                    "--..": "longdashdotdot"
                };
                stroke.dashstyle = dasharray[has](params["stroke-dasharray"]) ? dasharray[params["stroke-dasharray"]] : E;
            }
            newstroke && node.appendChild(stroke);
        }
        if (res.type == "text") {
            res.paper.canvas.style.display = E;
            var span = res.paper.span,
                m = 100,
                fontSize = a.font && a.font.match(/\d+(?:\.\d*)?(?=px)/);
            s = span.style;
            a.font && (s.font = a.font);
            a["font-family"] && (s.fontFamily = a["font-family"]);
            a["font-weight"] && (s.fontWeight = a["font-weight"]);
            a["font-style"] && (s.fontStyle = a["font-style"]);
            fontSize = toFloat(a["font-size"] || fontSize && fontSize[0]) || 10;
            s.fontSize = fontSize * m + "px";
            res.textpath.string && (span.innerHTML = Str(res.textpath.string).replace(/</g, "&#60;").replace(/&/g, "&#38;").replace(/\n/g, "<br>"));
            var brect = span.getBoundingClientRect();
            res.W = a.w = (brect.right - brect.left) / m;
            res.H = a.h = (brect.bottom - brect.top) / m;
            // res.paper.canvas.style.display = "none";
            res.X = a.x;
            res.Y = a.y + res.H / 2;

            ("x" in params || "y" in params) && (res.path.v = R.format("m{0},{1}l{2},{1}", round(a.x * zoom), round(a.y * zoom), round(a.x * zoom) + 1));
            var dirtyattrs = ["x", "y", "text", "font", "font-family", "font-weight", "font-style", "font-size"];
            for (var d = 0, dd = dirtyattrs.length; d < dd; d++) if (dirtyattrs[d] in params) {
                res._.dirty = 1;
                break;
            }
        
            // text-anchor emulation
            switch (a["text-anchor"]) {
                case "start":
                    res.textpath.style["v-text-align"] = "left";
                    res.bbx = res.W / 2;
                break;
                case "end":
                    res.textpath.style["v-text-align"] = "right";
                    res.bbx = -res.W / 2;
                break;
                default:
                    res.textpath.style["v-text-align"] = "center";
                    res.bbx = 0;
                break;
            }
            res.textpath.style["v-text-kern"] = true;
        }
        // res.paper.canvas.style.display = E;
    },
    addGradientFill = function (o, gradient, fill) {
        o.attrs = o.attrs || {};
        var attrs = o.attrs,
            pow = Math.pow,
            opacity,
            oindex,
            type = "linear",
            fxfy = ".5 .5";
        o.attrs.gradient = gradient;
        gradient = Str(gradient).replace(R._radial_gradient, function (all, fx, fy) {
            type = "radial";
            if (fx && fy) {
                fx = toFloat(fx);
                fy = toFloat(fy);
                pow(fx - .5, 2) + pow(fy - .5, 2) > .25 && (fy = math.sqrt(.25 - pow(fx - .5, 2)) * ((fy > .5) * 2 - 1) + .5);
                fxfy = fx + S + fy;
            }
            return E;
        });
        gradient = gradient.split(/\s*\-\s*/);
        if (type == "linear") {
            var angle = gradient.shift();
            angle = -toFloat(angle);
            if (isNaN(angle)) {
                return null;
            }
        }
        var dots = R._parseDots(gradient);
        if (!dots) {
            return null;
        }
        o = o.shape || o.node;
        if (dots.length) {
            o.removeChild(fill);
            fill.on = true;
            fill.method = "none";
            fill.color = dots[0].color;
            fill.color2 = dots[dots.length - 1].color;
            var clrs = [];
            for (var i = 0, ii = dots.length; i < ii; i++) {
                dots[i].offset && clrs.push(dots[i].offset + S + dots[i].color);
            }
            fill.colors = clrs.length ? clrs.join() : "0% " + fill.color;
            if (type == "radial") {
                fill.type = "gradientTitle";
                fill.focus = "100%";
                fill.focussize = "0 0";
                fill.focusposition = fxfy;
                fill.angle = 0;
            } else {
                // fill.rotate= true;
                fill.type = "gradient";
                fill.angle = (270 - angle) % 360;
            }
            o.appendChild(fill);
        }
        return 1;
    },
    Element = function (node, vml) {
        this[0] = this.node = node;
        node.raphael = true;
        this.id = R._oid++;
        node.raphaelid = this.id;
        this.X = 0;
        this.Y = 0;
        this.attrs = {};
        this.paper = vml;
        this.matrix = R.matrix();
        this._ = {
            transform: [],
            sx: 1,
            sy: 1,
            dx: 0,
            dy: 0,
            deg: 0,
            dirty: 1,
            dirtyT: 1
        };
        !vml.bottom && (vml.bottom = this);
        this.prev = vml.top;
        vml.top && (vml.top.next = this);
        vml.top = this;
        this.next = null;
    };
    var elproto = R.el;

    Element.prototype = elproto;
    elproto.constructor = Element;
    elproto.transform = function (tstr) {
        if (tstr == null) {
            return this._.transform;
        }
        var vbs = this.paper._viewBoxShift,
            vbt = vbs ? "s" + [vbs.scale, vbs.scale] + "-1-1t" + [vbs.dx, vbs.dy] : E,
            oldt;
        if (vbs) {
            oldt = tstr = Str(tstr).replace(/\.{3}|\u2026/g, this._.transform || E);
        }
        R._extractTransform(this, vbt + tstr);
        var matrix = this.matrix.clone(),
            skew = this.skew,
            o = this.node,
            split,
            isGrad = ~Str(this.attrs.fill).indexOf("-"),
            isPatt = !Str(this.attrs.fill).indexOf("url(");
        matrix.translate(1, 1);
        if (isPatt || isGrad || this.type == "image") {
            skew.matrix = "1 0 0 1";
            skew.offset = "0 0";
            split = matrix.split();
            if ((isGrad && split.noRotation) || !split.isSimple) {
                o.style.filter = matrix.toFilter();
                var bb = this.getBBox(),
                    bbt = this.getBBox(1),
                    dx = bb.x - bbt.x,
                    dy = bb.y - bbt.y;
                o.coordorigin = (dx * -zoom) + S + (dy * -zoom);
                setCoords(this, 1, 1, dx, dy, 0);
            } else {
                o.style.filter = E;
                setCoords(this, split.scalex, split.scaley, split.dx, split.dy, split.rotate);
            }
        } else {
            o.style.filter = E;
            skew.matrix = Str(matrix);
            skew.offset = matrix.offset();
        }
        if (oldt !== null) { // empty string value is true as well
            this._.transform = oldt;
            R._extractTransform(this, oldt);
        }
        return this;
    };
    elproto.rotate = function (deg, cx, cy) {
        if (this.removed) {
            return this;
        }
        if (deg == null) {
            return;
        }
        deg = Str(deg).split(separator);
        if (deg.length - 1) {
            cx = toFloat(deg[1]);
            cy = toFloat(deg[2]);
        }
        deg = toFloat(deg[0]);
        (cy == null) && (cx = cy);
        if (cx == null || cy == null) {
            var bbox = this.getBBox(1);
            cx = bbox.x + bbox.width / 2;
            cy = bbox.y + bbox.height / 2;
        }
        this._.dirtyT = 1;
        this.transform(this._.transform.concat([["r", deg, cx, cy]]));
        return this;
    };
    elproto.translate = function (dx, dy) {
        if (this.removed) {
            return this;
        }
        dx = Str(dx).split(separator);
        if (dx.length - 1) {
            dy = toFloat(dx[1]);
        }
        dx = toFloat(dx[0]) || 0;
        dy = +dy || 0;
        if (this._.bbox) {
            this._.bbox.x += dx;
            this._.bbox.y += dy;
        }
        this.transform(this._.transform.concat([["t", dx, dy]]));
        return this;
    };
    elproto.scale = function (sx, sy, cx, cy) {
        if (this.removed) {
            return this;
        }
        sx = Str(sx).split(separator);
        if (sx.length - 1) {
            sy = toFloat(sx[1]);
            cx = toFloat(sx[2]);
            cy = toFloat(sx[3]);
            isNaN(cx) && (cx = null);
            isNaN(cy) && (cy = null);
        }
        sx = toFloat(sx[0]);
        (sy == null) && (sy = sx);
        (cy == null) && (cx = cy);
        if (cx == null || cy == null) {
            var bbox = this.getBBox(1);
        }
        cx = cx == null ? bbox.x + bbox.width / 2 : cx;
        cy = cy == null ? bbox.y + bbox.height / 2 : cy;
    
        this.transform(this._.transform.concat([["s", sx, sy, cx, cy]]));
        this._.dirtyT = 1;
        return this;
    };
    elproto.hide = function () {
        !this.removed && (this.node.style.display = "none");
        return this;
    };
    elproto.show = function () {
        !this.removed && (this.node.style.display = E);
        return this;
    };
    // Needed to fix the vml setViewBox issues
    elproto.auxGetBBox = R.el.getBBox;
    elproto.getBBox = function(){
      var b = this.auxGetBBox();
      if (this.paper && this.paper._viewBoxShift)
      {
        var c = {};
        var z = 1/this.paper._viewBoxShift.scale;
        c.x = b.x - this.paper._viewBoxShift.dx;
        c.x *= z;
        c.y = b.y - this.paper._viewBoxShift.dy;
        c.y *= z;
        c.width  = b.width  * z;
        c.height = b.height * z;
        c.x2 = c.x + c.width;
        c.y2 = c.y + c.height;
        return c;
      }
      return b;
    };
    elproto._getBBox = function () {
        if (this.removed) {
            return {};
        }
        return {
            x: this.X + (this.bbx || 0) - this.W / 2,
            y: this.Y - this.H,
            width: this.W,
            height: this.H
        };
    };
    elproto.remove = function () {
        if (this.removed || !this.node.parentNode) {
            return;
        }
        this.paper.__set__ && this.paper.__set__.exclude(this);
        R.eve.unbind("raphael.*.*." + this.id);
        R._tear(this, this.paper);
        this.node.parentNode.removeChild(this.node);
        this.shape && this.shape.parentNode.removeChild(this.shape);
        for (var i in this) {
            this[i] = typeof this[i] == "function" ? R._removedFactory(i) : null;
        }
        this.removed = true;
    };
    elproto.attr = function (name, value) {
        if (this.removed) {
            return this;
        }
        if (name == null) {
            var res = {};
            for (var a in this.attrs) if (this.attrs[has](a)) {
                res[a] = this.attrs[a];
            }
            res.gradient && res.fill == "none" && (res.fill = res.gradient) && delete res.gradient;
            res.transform = this._.transform;
            return res;
        }
        if (value == null && R.is(name, "string")) {
            if (name == fillString && this.attrs.fill == "none" && this.attrs.gradient) {
                return this.attrs.gradient;
            }
            var names = name.split(separator),
                out = {};
            for (var i = 0, ii = names.length; i < ii; i++) {
                name = names[i];
                if (name in this.attrs) {
                    out[name] = this.attrs[name];
                } else if (R.is(this.paper.customAttributes[name], "function")) {
                    out[name] = this.paper.customAttributes[name].def;
                } else {
                    out[name] = R._availableAttrs[name];
                }
            }
            return ii - 1 ? out : out[names[0]];
        }
        if (this.attrs && value == null && R.is(name, "array")) {
            out = {};
            for (i = 0, ii = name.length; i < ii; i++) {
                out[name[i]] = this.attr(name[i]);
            }
            return out;
        }
        var params;
        if (value != null) {
            params = {};
            params[name] = value;
        }
        value == null && R.is(name, "object") && (params = name);
        for (var key in params) {
            eve("raphael.attr." + key + "." + this.id, this, params[key]);
        }
        if (params) {
            for (key in this.paper.customAttributes) if (this.paper.customAttributes[has](key) && params[has](key) && R.is(this.paper.customAttributes[key], "function")) {
                var par = this.paper.customAttributes[key].apply(this, [].concat(params[key]));
                this.attrs[key] = params[key];
                for (var subkey in par) if (par[has](subkey)) {
                    params[subkey] = par[subkey];
                }
            }
            // this.paper.canvas.style.display = "none";
            if (params.text && this.type == "text") {
                this.textpath.string = params.text;
            }
            setFillAndStroke(this, params);
            // this.paper.canvas.style.display = E;
        }
        return this;
    };
    elproto.toFront = function () {
        !this.removed && this.node.parentNode.appendChild(this.node);
        this.paper && this.paper.top != this && R._tofront(this, this.paper);
        return this;
    };
    elproto.toBack = function () {
        if (this.removed) {
            return this;
        }
        if (this.node.parentNode.firstChild != this.node) {
            this.node.parentNode.insertBefore(this.node, this.node.parentNode.firstChild);
            R._toback(this, this.paper);
        }
        return this;
    };
    elproto.insertAfter = function (element) {
        if (this.removed) {
            return this;
        }
        if (element.constructor == R.st.constructor) {
            element = element[element.length - 1];
        }
        if (element.node.nextSibling) {
            element.node.parentNode.insertBefore(this.node, element.node.nextSibling);
        } else {
            element.node.parentNode.appendChild(this.node);
        }
        R._insertafter(this, element, this.paper);
        return this;
    };
    elproto.insertBefore = function (element) {
        if (this.removed) {
            return this;
        }
        if (element.constructor == R.st.constructor) {
            element = element[0];
        }
        element.node.parentNode.insertBefore(this.node, element.node);
        R._insertbefore(this, element, this.paper);
        return this;
    };
    elproto.blur = function (size) {
        var s = this.node.runtimeStyle,
            f = s.filter;
        f = f.replace(blurregexp, E);
        if (+size !== 0) {
            this.attrs.blur = size;
            s.filter = f + S + ms + ".Blur(pixelradius=" + (+size || 1.5) + ")";
            s.margin = R.format("-{0}px 0 0 -{0}px", round(+size || 1.5));
        } else {
            s.filter = f;
            s.margin = 0;
            delete this.attrs.blur;
        }
        return this;
    };

    R._engine.path = function (pathString, vml) {
        var el = createNode("shape");
        el.style.cssText = cssDot;
        el.coordsize = zoom + S + zoom;
        el.coordorigin = vml.coordorigin;
        var p = new Element(el, vml),
            attr = {fill: "none", stroke: "#000"};
        pathString && (attr.path = pathString);
        p.type = "path";
        p.path = [];
        p.Path = E;
        setFillAndStroke(p, attr);
        vml.canvas.appendChild(el);
        var skew = createNode("skew");
        skew.on = true;
        el.appendChild(skew);
        p.skew = skew;
        p.transform(E);
        return p;
    };
    R._engine.rect = function (vml, x, y, w, h, r) {
        var path = R._rectPath(x, y, w, h, r),
            res = vml.path(path),
            a = res.attrs;
        res.X = a.x = x;
        res.Y = a.y = y;
        res.W = a.width = w;
        res.H = a.height = h;
        a.r = r;
        a.path = path;
        res.type = "rect";
        return res;
    };
    R._engine.ellipse = function (vml, x, y, rx, ry) {
        var res = vml.path(),
            a = res.attrs;
        res.X = x - rx;
        res.Y = y - ry;
        res.W = rx * 2;
        res.H = ry * 2;
        res.type = "ellipse";
        setFillAndStroke(res, {
            cx: x,
            cy: y,
            rx: rx,
            ry: ry
        });
        return res;
    };
    R._engine.circle = function (vml, x, y, r) {
        var res = vml.path(),
            a = res.attrs;
        res.X = x - r;
        res.Y = y - r;
        res.W = res.H = r * 2;
        res.type = "circle";
        setFillAndStroke(res, {
            cx: x,
            cy: y,
            r: r
        });
        return res;
    };
    R._engine.image = function (vml, src, x, y, w, h) {
        var path = R._rectPath(x, y, w, h),
            res = vml.path(path).attr({stroke: "none"}),
            a = res.attrs,
            node = res.node,
            fill = node.getElementsByTagName(fillString)[0];
        a.src = src;
        res.X = a.x = x;
        res.Y = a.y = y;
        res.W = a.width = w;
        res.H = a.height = h;
        a.path = path;
        res.type = "image";
        fill.parentNode == node && node.removeChild(fill);
        fill.rotate = true;
        fill.src = src;
        fill.type = "tile";
        res._.fillpos = [x, y];
        res._.fillsize = [w, h];
        node.appendChild(fill);
        setCoords(res, 1, 1, 0, 0, 0);
        return res;
    };
    R._engine.text = function (vml, x, y, text) {
        var el = createNode("shape"),
            path = createNode("path"),
            o = createNode("textpath");
        x = x || 0;
        y = y || 0;
        text = text || "";
        path.v = R.format("m{0},{1}l{2},{1}", round(x * zoom), round(y * zoom), round(x * zoom) + 1);
        path.textpathok = true;
        o.string = Str(text);
        o.on = true;
        el.style.cssText = cssDot;
        el.coordsize = zoom + S + zoom;
        el.coordorigin = "0 0";
        var p = new Element(el, vml),
            attr = {
                fill: "#000",
                stroke: "none",
                font: R._availableAttrs.font,
                text: text
            };
        p.shape = el;
        p.path = path;
        p.textpath = o;
        p.type = "text";
        p.attrs.text = Str(text);
        p.attrs.x = x;
        p.attrs.y = y;
        p.attrs.w = 1;
        p.attrs.h = 1;
        setFillAndStroke(p, attr);
        el.appendChild(o);
        el.appendChild(path);
        vml.canvas.appendChild(el);
        var skew = createNode("skew");
        skew.on = true;
        el.appendChild(skew);
        p.skew = skew;
        p.transform(E);
        return p;
    };
    R._engine.setSize = function (width, height) {
        var cs = this.canvas.style;
        this.width = width;
        this.height = height;
        width == +width && (width += "px");
        height == +height && (height += "px");
        cs.width = width;
        cs.height = height;
        cs.clip = "rect(0 " + width + " " + height + " 0)";
        if (this._viewBox) {
            R._engine.setViewBox.apply(this, this._viewBox);
        }
        return this;
    };
    R._engine.setViewBox = function (x, y, w, h, fit) {
        R.eve("raphael.setViewBox", this, this._viewBox, [x, y, w, h, fit]);
        var paperSize = this.getSize(),
            width = paperSize.width,
            height = paperSize.height,
            H, W;
        if (fit) {
            H = height / h;
            W = width / w;
            if (w * H < width) {
                x -= (width - w * H) / 2 / H;
            }
            if (h * W < height) {
                y -= (height - h * W) / 2 / W;
            }
        }
        this._viewBox = [x, y, w, h, !!fit];
        this._viewBoxShift = {
            dx: -x,
            dy: -y,
            scale: paperSize
        };
        this.forEach(function (el) {
            el.transform("...");
        });
        return this;
    };
    var createNode;
    R._engine.initWin = function (win) {
            var doc = win.document;
            if (doc.styleSheets.length < 31) {
                doc.createStyleSheet().addRule(".rvml", "behavior:url(#default#VML)");
            } else {
                // no more room, add to the existing one
                // http://msdn.microsoft.com/en-us/library/ms531194%28VS.85%29.aspx
                doc.styleSheets[0].addRule(".rvml", "behavior:url(#default#VML)");
            }
            try {
                !doc.namespaces.rvml && doc.namespaces.add("rvml", "urn:schemas-microsoft-com:vml");
                createNode = function (tagName) {
                    return doc.createElement('<rvml:' + tagName + ' class="rvml">');
                };
            } catch (e) {
                createNode = function (tagName) {
                    return doc.createElement('<' + tagName + ' xmlns="urn:schemas-microsoft.com:vml" class="rvml">');
                };
            }
        };
    R._engine.initWin(R._g.win);
    R._engine.create = function () {
        var con = R._getContainer.apply(0, arguments),
            container = con.container,
            height = con.height,
            s,
            width = con.width,
            x = con.x,
            y = con.y;
        if (!container) {
            throw new Error("VML container not found.");
        }
        var res = new R._Paper,
            c = res.canvas = R._g.doc.createElement("div"),
            cs = c.style;
        x = x || 0;
        y = y || 0;
        width = width || 512;
        height = height || 342;
        res.width = width;
        res.height = height;
        width == +width && (width += "px");
        height == +height && (height += "px");
        res.coordsize = zoom * 1e3 + S + zoom * 1e3;
        res.coordorigin = "0 0";
        res.span = R._g.doc.createElement("span");
        res.span.style.cssText = "position:absolute;left:-9999em;top:-9999em;padding:0;margin:0;line-height:1;";
        c.appendChild(res.span);
        cs.cssText = R.format("top:0;left:0;width:{0};height:{1};display:inline-block;position:relative;clip:rect(0 {0} {1} 0);overflow:hidden", width, height);
        if (container == 1) {
            R._g.doc.body.appendChild(c);
            cs.left = x + "px";
            cs.top = y + "px";
            cs.position = "absolute";
        } else {
            if (container.firstChild) {
                container.insertBefore(c, container.firstChild);
            } else {
                container.appendChild(c);
            }
        }
        res.renderfix = function () {};
        return res;
    };
    R.prototype.clear = function () {
        R.eve("raphael.clear", this);
        this.canvas.innerHTML = E;
        this.span = R._g.doc.createElement("span");
        this.span.style.cssText = "position:absolute;left:-9999em;top:-9999em;padding:0;margin:0;line-height:1;display:inline;";
        this.canvas.appendChild(this.span);
        this.bottom = this.top = null;
    };
    R.prototype.remove = function () {
        R.eve("raphael.remove", this);
        this.canvas.parentNode.removeChild(this.canvas);
        for (var i in this) {
            this[i] = typeof this[i] == "function" ? R._removedFactory(i) : null;
        }
        return true;
    };

    var setproto = R.st;
    for (var method in elproto) if (elproto[has](method) && !setproto[has](method)) {
        setproto[method] = (function (methodname) {
            return function () {
                var arg = arguments;
                return this.forEach(function (el) {
                    el[methodname].apply(el, arg);
                });
            };
        })(method);
    }
})();

    // EXPOSE
    // SVG and VML are appended just before the EXPOSE line
    // Even with AMD, Raphael should be defined globally
    oldRaphael.was ? (g.win.Raphael = R) : (Raphael = R);

    if(typeof exports == "object"){
        module.exports = R;
    }
    return R;
}));

var mapLoader = "M119.141,251.902c-0.391,0-0.785-0.009-1.183-0.025c-3.104-0.118-6.358-0.118-9.229-0.118h-0.46 c-5.419,0-11.026,0-16.747-0.629c-22.55-2.484-41.308-21.075-44.604-44.206c-3.051-21.431-6.27-43.207-9.382-64.265l-1.559-10.542 c-0.458-3.076-2.072-5.46-5.235-7.73c-3.084-2.217-5.502-5.248-6.634-8.315C18.26,100.216,12.462,84.058,6.854,68.429L1.999,54.906 c-1.997-5.554-1.483-11.453,1.404-16.182c2.832-4.642,7.722-7.727,13.407-8.468c14.215-1.854,26.831-3.367,38.566-4.621 c0.655-0.069,1.29-0.102,1.907-0.102c4.394,0,10.591,1.718,15.167,9.909c2.68,4.802,5.434,9.56,8.186,14.318 c5.369,9.279,10.919,18.87,15.832,28.677c6.802,13.582,16.436,25.349,30.317,37.034c23.717,19.96,47.585,40.518,70.666,60.399 l3.921,3.379c5.331,4.587,9.789,5.676,15.444,3.794c0.925-0.309,1.944-0.465,3.03-0.465c2.608,0,6.478,0.971,8.785,3.7 c3.552,4.197,7.964,5.832,15.729,5.832c31.316-0.13,62.921-0.146,92.438-0.146l39.817,0.005c11.917,0,23.841-0.003,35.757-0.016 c3.768,0,9.344,0.446,14.515,4.337c4.099,3.072,6.014,7.459,5.543,12.689c-0.677,7.457-3.866,13.685-9.492,18.507 c-12.804,10.987-28.174,16.56-45.685,16.56c-13.955-0.007-27.844-0.01-41.737-0.01l-105.853,0.009 c-25.158,0-50.316-0.006-75.473-0.046c-2.955-0.009-5.785-0.688-7.917-1.279c-4.361-1.205-7.454-0.663-9.986,1.971 C131.617,249.543,126.006,251.902,119.141,251.902z";
var mapPaths = {
  shapes: ["M973.234,629.748 973.408,628.938 973.305,628.214  973.849,628.078 974.409,628.788 973.532,630.138 			 ",
"M965.496,624.565l0.354-0.507l-0.299-0.86l0.351-0.454 l-0.423-0.88l-0.506-0.05l-0.703,1.097l0.229,0.574l0.121,1.03l0.439,0.17L965.496,624.565L965.496,624.565z M965.938,626.373 l0.524,0.051l0.421,0.539l-0.826-0.066l-0.314-0.319L965.938,626.373L965.938,626.373z M970.829,626.913l0.385-0.439 l-0.453-0.911l-0.403,0.37l-0.72,0.171l0.597,0.286L970.829,626.913z ",
"M1022.77,593.016l1.007-0.334l-0.294-0.49l-0.773-0.345 l-0.494,0.612L1022.77,593.016L1022.77,593.016z M980.568,614.538l0.314-0.033l-0.191,0.409L980.568,614.538L980.568,614.538z  M979.384,613.21l0.503-0.596l0.701,0.278l0.407,0.092l-0.216,0.284l-0.918,0.179L979.384,613.21z ",
"M1196.666,513.792l1.039-0.774v-1.256l-0.637-0.388l0.703-0.999 l0.036-0.935l-0.306-0.324l0.306-0.744l-0.203-0.515l-0.904,1l0.167,1.483l-0.268,0.517l0.167,0.612l-0.538,1.936 L1196.666,513.792L1196.666,513.792z M1196.162,519.019l0.671-1.42l-0.101-0.839l-0.331-0.581l0.299-0.967l0.536-0.452v-0.42 l-1.273,0.42v1.29l-0.301,0.582l0.5,1.03l-0.266,0.743L1196.162,519.019L1196.162,519.019z M1193.651,518.082l1.038,0.26 l-0.371-0.615L1193.651,518.082L1193.651,518.082z M1195.326,523.146l0.902-0.03l0.472-1.162l-0.299-1.032l-0.975,0.483 l-0.101,0.968C1195.326,522.372,1195.326,523.082,1195.326,523.146L1195.326,523.146z M1198.04,528.595l-0.869,0.26l0.568,0.289 L1198.04,528.595L1198.04,528.595z M1199.152,532.151l0.652,0.179l0.354,1.194l-0.754-0.693 C1199.405,532.831,1199.136,532.164,1199.152,532.151L1199.152,532.151z M1201.605,532.716l-0.387,0.758l0.403,0.648l0.354-0.39 l-0.034-0.693L1201.605,532.716L1201.605,532.716z M1200.479,535.075l0.623,0.387l0.437-0.289l-0.473-0.872l-0.824,0.158 L1200.479,535.075L1200.479,535.075z M1202.096,537.402l0.719-0.841l-0.535-0.017l-0.488,0.582L1202.096,537.402 L1202.096,537.402z M1202.851,537.612l-0.654,0.629l0.032,0.888c0,0,0.436,0.179,0.489,0.26c0.049,0.08,0.369,0.904,0.369,0.904 l0.536-0.629l-0.267-0.743l0.032-0.842L1202.851,537.612z ",
"M1442.821,498.184l-0.87,0.676l0.705,1.323l-0.034-0.936 l0.468-0.582L1442.821,498.184L1442.821,498.184z M1440.244,504.504l0.836-0.483l0.303,0.549l-0.538,0.063L1440.244,504.504 L1440.244,504.504z M1437.696,508.019l0.435-0.74l0.906-0.226l0.335,0.226l-0.804,1.417l-0.671,0.196l-0.367-0.324 L1437.696,508.019z",
"M1342.073,343.435l-0.091-0.129l-0.79-0.703l0.017-0.013 	l0.191-0.468v-0.51l-0.349-0.219l-0.163-0.775l0.052-0.339l0.536-0.309l1.108,0.113l0.318-0.081l0.017-0.777l-0.134-0.452 	l0.036-0.599l0.232-0.42l-0.034-0.81l-0.065-0.792l-0.539-0.389v-1.538l-0.1-0.744l-0.099-1.085l0.032-0.809l-0.605-0.761 	l-0.301-0.55l-0.216-0.664l-1.096-1.635l-0.335-0.744l0.202-0.404l0.57-0.356l0.538-0.049l0.445-0.566l0.191-0.607l0.859-1.271 	l0.357-0.089l0.747,0.188l0.582,0.223l2.964,0.514l0.451,0.139h0.52l0.371-0.438l-0.119-0.664l-0.286-0.501l-0.066-0.469 	l0.168-0.34l-0.168-0.47l-0.118-0.501l0.406-0.891l0.299-0.324l-0.151-0.695l-0.268-0.452l0.137-0.261l0.635-0.306l-0.233-0.42 	v-0.502l-0.305-0.469l0.186-0.6l0.455-0.323v-0.357l-0.252-0.469l-0.354-0.922l-0.064-1.052l0.3-0.114l0.202-0.194l-0.034-0.34 	l-0.198-0.307l0.047-0.503l-0.419-0.274l-0.286-0.403l0.27-0.647l0.066-0.746l-0.218-0.227l-0.4-0.55v-0.404l0.635-0.744 	l0.707-0.13l0.186-0.35l0.03-0.774l0.203-0.935l-0.57-0.323l-0.437-0.452l-0.098-0.645l-0.773-0.807l-0.167-0.452l0.468-0.418 	l-0.468-0.808l-0.27-0.484l-0.769-0.032l-0.505-0.387l-0.879-0.321l-0.47,0.454l-0.755,0.096l-0.521,0.438l-0.118,0.679 	l-0.47,0.147l-0.487,0.097l-0.25,0.906h-0.94l-0.589,0.081l-0.284,0.648v0.711l-0.604,0.307l-0.218,0.826l0.066,0.484 	l-0.487,0.211l-0.59,0.516l-1.308,0.228l-0.455,0.162l-0.653-0.162l-0.385,0.372l-0.572,0.21l-0.235-0.597l-0.42-0.584 	l-0.652-0.015l-0.624,0.436l-0.72,0.195l-0.237-0.454l-0.739-0.904l-0.401-0.244l-0.891-1.068v-0.646l0.22-0.26l0.15-0.84 	l-0.287-0.729l-0.184-0.794l-0.77,0.049l-0.085-0.519l-0.034-0.615l0.402-0.55l0.102-0.582l-0.354-0.161l-0.371,0.08 	l-0.485,0.355l-0.551,0.049l-0.491,0.146l-0.635-0.114l-0.47-0.355l-0.453-0.049l-0.235-0.21l-1.007-0.437l-0.119-0.438 	l-0.419-0.421l-0.252,0.018l-0.487-0.389l-0.136-0.438l-0.503-0.065l-0.484-0.533l-0.186-0.502l-0.354-0.323l-0.469,0.064 	l-0.186,0.534l-0.489-0.13l-0.462,0.176l-0.133,0.355l-0.57-0.355l-0.302-0.354l-0.468-0.226l-1.038-0.098l-0.302-0.258 	l0.368-0.387v-0.225h-0.637l-0.505,0.386l-0.972-0.129l-0.368,0.195l-0.468-0.259l-0.468,0.162l-0.604-0.098l-0.336-0.581 	l-0.771-0.257l-1.038-1.032l-0.505-0.869l0.103-0.614l-0.202-0.775l-0.501-0.096l-0.538-0.291l-0.066-0.903l-0.335-0.291 	l-0.169-0.902l-0.299-0.839l-1.678-1.032l-0.889-1.149l-0.115-0.55l-0.437-0.696l-0.455,0.209l-0.269-0.145l0.137-0.503 	l0.031-0.387l-0.587-0.421l-0.302-0.743l-0.472-0.227l-0.169-0.648l-0.568-0.696l-0.389-0.743l-1.055-0.616l-0.101-0.486 	l0.267-0.598l-0.137-0.501l-1.188-0.066l-0.186-0.291v-0.437l-0.233-0.534l-0.054-0.615l-0.318-0.518l-0.452-0.242l-0.016-0.42 	l-0.32-0.292l-0.456,0.064l-0.771-0.21l-0.217-0.388l0.252-0.437l-0.151-0.421l-0.641-0.113l-0.468,0.356l-0.22-0.339 	l-0.518-0.017l-0.151-0.454l0.115-0.468l-0.286-0.406l-0.601-0.225l-0.472,0.054l-0.478-0.51l-0.336,0.154h-0.671l-0.403-0.16 	l-0.434,0.257l0.067,0.549l-0.371,0.162l-0.836-0.387l-0.303-0.292l-0.603,0.194h-1.075l-0.167-0.388l-0.603-0.483l-1.476-0.129 	l-0.635-0.451l-0.736-0.065l-0.538-0.127l-0.234,0.127l-1.34,0.162l-0.27,0.678h-0.367l-0.402,0.354l-0.972-0.031l-0.568,0.096 	l-1.009-0.162l-0.536,0.581h-0.804l-0.367,0.678l-0.703,0.29l-0.671-0.066l-0.169,0.164l-0.601,0.032l-0.57,0.193l-1.207,0.129 	l-0.503,0.417v0.549l-0.673,0.774l-0.265,0.839l-0.372,0.451v0.451l-0.299,0.387v1.096l0.299,0.355l0.473,0.066l1.038-0.613 	l0.639-0.259l0.566,0.129l0.671,1.064l0.37,0.839l0.669,0.483v0.679l0.202,0.547l-0.066,1.065l-0.57,0.418l-0.604,0.871 	l-0.201,1.033l-0.568,0.451l-0.538,0.904l-0.066,0.741l0.472,0.741l-0.168,0.483l0.14,0.976l0.552,0.551l-0.101,0.842 	l-0.554,0.292l-0.168,0.518l0.335,0.792l0.02,1.295l-0.252,0.373l0.083,1.246l0.468,0.083l0.338,0.258l0.369-0.258l0.353,0.209 	l0.184,0.921l-0.267,0.859l-0.725,0.679l-1.663,0.276l-1.056,0.711l-2.216,2.022l-0.523,0.081l-0.671-0.55l-1.358-0.179 	l-0.84,0.147l-0.149-0.309l-0.653-0.098l-0.521,0.166l-0.439-0.454l-1.746-0.515l-1.539,0.258l-0.035,0.452l-1.039,0.579 	l-0.84,0.034l-0.468-0.354l-0.872,0.45l-0.701-0.257l-0.536-0.774l-1.108-0.678l-0.87-0.096l-1.372,0.354l-0.305-0.258h-0.804 	l-0.703,0.646l-0.368,0.934l-0.671,0.678l-0.972,0.419l-0.57,0.903v0.388l-0.302,0.87l-0.905,0.807l-2.144-0.032l-0.77,0.097 	l-0.739,0.838l-1.072-0.034l-1.742,0.969l-0.737,1.097l-0.536,0.063l-0.872-0.451h-1.038l-0.469,0.355l-1.175,0.161l-2.78,0.032 	l-1.844-0.516l-2.111,0.193l-0.703-0.032l-0.805-0.838l-0.602-0.129l-0.57-0.323l-0.939-0.613l-0.502-1.418l-0.473-0.419 	l-0.968,0.225l-1.342,0.033l-1.642-0.613l-0.938-1.289l-1.812,0.032l-1.374-0.13l-1.048-0.562l-1.156,0.324l-1.211,0.049 	l-0.953,0.55l-1.85,0.129l-1.326,0.404l-0.806,0.841l-0.604,0.181l-0.57-0.194l-0.69-0.034l-0.637,0.42l-1.412-0.064 	l-0.333,0.306l-0.656-0.031l-1.425-0.711l-1.372-0.381l-0.27-0.483l-0.938-0.807l-0.57-0.033l-0.568-0.45l0.03-0.808l-0.469-1 	l-0.434-0.483v-0.645l-0.468-0.614v-0.581l-0.338-0.708l-0.737-0.291l-1.961,0.066l-0.806-0.13l-0.656-0.308l-1.189-0.112 	l-0.438-0.404l-0.639-0.406l-1.677,0.049l-1.162-0.098l-1.072-0.356l-0.169-0.307l-1.239-0.567l-1.229-0.306l-0.619-0.405 	l-0.908-0.048l-0.587,0.5l-0.135,0.697l0.276,0.749l-0.335,0.743l-0.47-0.162l-0.77,0.259l-0.469,0.74v0.678l-0.938,1.032 	l-0.034,2.193l0.335,1.097l1.374,0.354l0.467,0.582l0.873,0.29l0.167,0.58l-0.268,1.453l-0.035,1.354l0.941,0.613l0.5,0.548 	l-0.871,1.355l-1.573,0.193l-0.872-0.162l-0.202,0.226l-0.87,0.098l-0.771-0.355l-2.011-0.032l-0.737,0.225l-0.703-0.483 	l-0.871-0.227l-0.804,0.098l-1.009,0.71l-0.936,0.322l-0.604,0.323l-1.677-0.742l-0.872-0.678l-2.275-1.257l-0.271-0.581 	l-0.167-0.742l-0.301-0.708l-1.477,0.097l-0.703,0.452l-0.836-0.065l-0.504,0.162l-0.972,0.063l-0.535-0.547l-0.103-0.516 	l-0.57-0.741l-0.232-0.034l-0.703,0.419l-1.075-0.065l-0.77,0.033l-0.905,0.225l-1.642,0.193l-0.737,0.29l-0.47,1.163 	l-0.639,0.322l-1.539-0.418l-0.299,0.387l0.03,0.645l0.504,0.355l-0.402,0.355l-0.637,0.87l-0.772,0.193l-0.77,0.71 	l-0.034,0.613l-1.207,0.548l-0.332,0.903l-0.068,0.903l-1.477,0.517l-0.804,0.838l-0.301,0.452l-2.144-0.097l-0.84,0.419 	l-0.737,1.644l0.023,0.111l-0.4-0.008l-0.939-0.323l-0.572-0.007l-0.224-0.257l-1.374-0.452l-1.037-0.87l-0.671-0.161 	l-0.269-0.743l0.401-1.096l-0.502-0.225l-0.902,0.483l-0.47,0.774l-1.007,0.29l-2.202,0.144l-0.74,0.389l-0.252,0.404 	l-0.703-0.325l-0.928-0.371l-0.418,0.017l-0.203-0.228l-0.451-0.422l-0.252-0.599l-0.018-0.711l0.167-0.437l-0.049-0.519 	l-0.688-0.307h-0.335l-1.094-0.663l-0.972-0.259l-0.455-0.032l-0.485-1.035l-0.756-1.295l-1.378-0.972l-1.408-0.354h-1.646 	l-1.545,0.21l-0.169,0.469l0.306,0.47l-0.235,0.404l-0.909,0.339l-0.771-0.161l-1.009,0.436l-1.191-0.63l-0.771,0.13 	l-0.637,0.403l-0.826-0.016l-0.667-0.664l-1.06-0.274l-0.084-0.615l0.133-0.615l-1.344-0.615l-0.72,0.339l0.032,0.987 	l0.235,0.195l-0.201,0.533l-0.754,0.47l-1.142,0.188l-11.412-13.761l-8.367-6.041l-0.372-0.665l0.741-0.178l0.77-0.824 	l0.036-0.793l-0.521-0.307l-1.191,0.355l-1.007,0.259l-0.718,0.713l-0.739,0.259l-1.029,0.97l-0.083,0.663l-0.703,0.551 	l-0.389,0.778l-0.872,0.565l-1.358,0.178l-0.874,0.308l0.186,1.019l-0.574,0.389l-0.45-0.292l-1.865-0.437l-1.058,0.273 	l-0.538,0.633l-0.637,0.049l-0.622-0.795l0.018-1.164l0.57-0.485l0.387-0.875l-0.521-0.275l-0.688,0.551h-0.604l-1.746-0.811 	l-1.023,0.21l0.252,0.502l0.52,0.225l-0.671,0.697l-0.555,0.048l-0.604-1.116l-0.187-1.441l-1.594-1.116l-0.301,0.195 	l0.353,0.905l-0.118,0.697h-0.57l-0.305-0.907l-0.586,0.244l-0.169,0.856l-0.521,0.178l-0.721-0.566l-1.024,0.599l-0.554-0.388 	l-0.421-0.841l0.724-0.194l0.05-0.339l-0.186-0.842l0.236-0.777l-0.101-0.5l-0.623-0.324l-0.635-0.777l-0.336-0.923 	l-0.371-0.274l-0.389-1.102l-0.955-0.081l-1.023,0.42l-1.108,0.017l-1.116-0.724l-1.273,0.13l-1.142-0.453l-0.701,0.225 	l-0.57-0.095l-0.838,0.451l-0.267,0.872l-1.243,0.064l-0.501,0.257l0.438,0.678l0.032,0.645l-1.241,0.257l-0.604-0.162 	l-0.637,0.808l-1.104,0.191l-0.438,0.291h-0.435l-1.979,1.29l-1.038,0.324l-0.872,0.484l-0.671-0.13l-0.5-0.452l-0.604,0.484 	l-0.135,0.581h-1.006l-0.535,0.451l0.034,0.937l-0.371,0.323l-0.635-0.26l-0.669,0.066l-0.737,0.482l-1.142,0.033l-1.241,0.742 	l-0.234,0.387l-1.237,0.096l-1.176,0.55l-1.07,0.097l-1.609,0.482l-0.102,0.646l-0.435,0.579l-0.536-0.805l-0.838-0.034 	l-0.804,0.484v0.549l-0.371,0.451l-0.836-0.581l-1.072,0.13l-0.302-0.485l-0.671-0.032l-0.47,0.548l-1.005,0.064l-0.335,0.289 	l0.504,1.065l-0.436,0.451l0.838,0.227l1.173-0.161l0.365,0.967l-1.237,0.032l-0.401,0.354l0.101,0.581l1.173,0.034l0.936,0.385 	l0.571-0.419l0.738-0.032l0.737,0.709l0.902,0.258l-0.03,0.903l-0.536,0.355l-0.773-0.259l-1.944,0.193l-1.069,0.936 	l-1.04,1.453l0.066,0.966l0.703,0.096l0.235,1.033l-0.703,0.806l-0.167,0.936l-0.838,0.098l-0.137,0.449l0.306,0.55l0.066,0.579 	h1.104l0.637,0.581l1.039,0.226l0.168,0.483l0.87,0.678l1.376,0.033l0.432,0.321l0.235,3.515l-0.434,0.743l-1.577,0.515 	l-1.304-0.129l-1.442-0.836l-0.468,0.418l-0.066,0.87l-0.468,0.936l-1.043,0.193l-1.641-0.871l-1.406,0.065l-0.639-0.354 	l-0.404,0.257l-0.836-0.257l-0.905-1.032l0.703-0.355l0.303-0.612l-0.671-0.324l-1.104-0.58l-0.504,0.612l-1.039-0.097 	l-0.737,0.226l0.167,1.096l-1.308,0.129l-0.266-0.484l-1.344-1.194l-1.07,0.164l-0.401,0.74l-0.535-0.677l-0.739,0.226 	l-0.069,0.839l-0.969,0.097l-0.101,1.677l-1.141,0.838l-0.737-0.29l-0.536-0.838l-1.775-0.259l-0.638-0.87l-0.905,0.517 	l0.101,1.127l-0.601,0.872l-0.539-0.161l-0.066-1.032l-0.367-0.612l-0.737-0.066l-1.31-0.934l-0.735-0.936h-1.004l-0.94-1.162 	l-0.538-0.032l-0.468-0.679l-0.77-0.032l-1.676,0.516l-1.038-0.678l-0.505-1.193l-0.839,0.034l-0.969,0.645l-0.906,0.096 	l-0.132,0.549l-0.604,0.613l-0.032-0.774l-0.637,0.387l-0.237,0.677l-0.872,0.485l-0.468-0.452l0.637-0.743l0.137-0.581 	l-1.109-0.451l-1.374-0.774l-0.234,0.58l0.234,0.806l-0.134,0.807l-0.973-0.258l-0.703,0.516l-0.436,1.193l-0.637,0.032 	l-1.372,0.839l-0.306,1.032l0.673,0.806v1.064h-1.507l-1.441,0.162l1.07,3.579l-0.57,0.453l0.169,1.355l-1.442,0.128 	l-1.406-0.839l-0.302-0.806l-2.479-2.161l-0.671,0.838v1.128l-1.239,1.485l-0.906,0.417l0.235,2.194l0.703,0.677l-0.402,2.773 	l-0.703,1.548l1.909,0.71l0.805,1.257l-0.301,0.678l1.509,1.226l0.367-0.679l3.018,0.809l2.143,1.934l1.88,3.032h-1.777 	l-0.103,0.74l1.712,1.098l1.207-0.387l1.139,0.705v0.011l-0.037,0.003l-0.05,0.354l-0.051,0.472l-0.703,0.128l0.401,0.338 	l0.018,0.503l-0.505,0.032l0.438,0.274v0.535l-0.741-0.177l-0.336,0.113l-0.856-0.228l-0.604,0.13l1.344,0.745l0.184,0.501 	l-0.335,0.291l-0.435-0.42c0,0-0.604,0.179-0.724,0.179c-0.117,0-0.419-0.179-0.419-0.179l-0.436,0.033l0.671,0.244l0.135,0.371 	l-0.639,0.454h-0.622l-0.451,0.338l-0.389-0.372l-0.2,0.518l-0.37,0.195l-0.454-0.356l-0.469-0.161l-0.034,0.567l-0.413,0.704 	l-0.203,1.001l-0.502,0.322l-0.299,0.936l-0.372,0.709v1.646l-0.504,0.354l-0.3,0.806l0.437,1.547l0.77,0.097l0.57-0.159 	l0.603,0.708l0.874,0.257v1.484l1.07,0.645l0.468-0.42l0.539-0.031l-0.37,0.74l-0.235,0.839l-0.468-0.193l-0.103,0.774h0.637 	l0.137,0.483l0.266,0.612l0.103,1.291l0.703,0.774l0.301,1.29l1.743,2.064l2.481,1.936l0.419,0.287l-0.042,0.082l-1.569,1.828 	l-1.344,0.71l-0.401,0.776l-2.147-0.194l-0.604-1.098l-2.151-1.68l-1.338-0.128l-0.472,1.614l1.209,0.71l0.671,0.905 	l-0.269,1.615l-1.678-0.84l-1.745-0.064l-2.619-1.421l-1.744,0.646l-0.079,0.749l0.883,0.8l-1.139-1.033l-2.619,0.064 	l-0.604-0.13l-2.081,0.453l-1.444,0.479l-0.071-0.076l-0.838-0.193l-1.944-1.58l-0.77-0.193l-0.671,0.547l-0.57,0.098 	l-1.205-0.452l-0.438,0.547l-0.536-0.159l-0.199-0.809l-0.578-0.062l-0.005-0.021l0.134-0.182l-0.214-0.778l0.318-0.509 	l-0.809-1.421l-0.247-1.861l-0.561-0.678l-0.987-1.489l-1.126-0.136l-0.068-0.576l-1.195-0.981l-0.495,0.305l-0.457-0.237 	l-0.915-0.136l-0.737-1.049h-0.492l-0.88-0.339l-0.284-0.609l-0.737-0.035l-0.737-0.608l-0.28-0.542l-0.845-0.272l-0.6-1.083 	l-2.988-2.097l-1.232-0.305l-1.794-1.05l-1.725,0.135l-1.02-1.017l-0.072-0.677l-1.264-1.015l-0.529,0.034l-1.09-0.136 	l0.632-0.508l0.706-0.305l-0.353-0.643l0.034-0.405l1.021,0.236l0.737,0.542l0.211-0.136l0.915,0.136l0.21-1.287l-0.456-0.305 	v-0.914l0.987-0.948v-0.341l0.385-0.337l0.633,0.102l0.389-0.542l0.597-0.135v-0.372l-0.949-0.271l-0.247-0.474l-0.492,0.407 	l-0.667-0.644l-0.635-1.32l1.582-0.203l1.126,0.203l0.599-0.643h-0.599l-0.457-0.44l1.021-0.677l2.428-1.253l0.246-0.677 	l-0.284-0.473l-1.228,0.169l-1.023,0.677l-0.949-0.169l-0.185,0.063l-0.017-0.046l0.26-2.019l0.604-0.258l1.004-1.548 	l2.246-0.129l0.84-0.613l-0.169-1.129l0.57-1.644l-0.203-1.292l-1.34-0.901l0.302-1.936l0.972-0.194l0.771-1l-0.034-1.193 	l-0.637-0.355l-0.401-1.031l-0.703,0.678l-1.408-0.258l-1.207-0.71l-1.005,0.162l-0.871-0.515l-1.241-0.032l-1.676-0.355 	l-0.637,0.613l-0.436-0.872l-1.438-0.871l-1.043-2.193l-0.733,0.097l-1.578,1.161l-1.003-0.193l-1.074,0.291l-1.304-0.678 	l-0.84,0.903l-2.113-1.967l-0.5-1.451v-1.227l-0.874-0.127l-0.133-0.937l-0.938-0.774l-2.581,0.356l-1.273-1.614l0.536-1 	l-0.973-0.774l-0.703-2.063l-1.07-0.064l-1.175,0.612h-2.379l-2.312-0.741l-0.706,0.613l0.102,0.935l-1.07,0.226l-0.751-0.167 	v-1.134l-1.072-1.164l0.133-1.226l-0.94-1.42l-0.065-1.099l0.401-0.711l1.006,0.904l2.417-0.322l0.939-1.486l0.54-0.452 	l-1.211-0.775l-0.133-0.839l-1.745-1.485l-1.545-0.388l-0.401-1.486l-0.94-0.647l-1.211-1.615l-0.534-1.227l-1.072-1.099v-1.355 	l-0.81-0.905l0.338-1.162l-0.268-1.034l-2.015-0.71h-0.671l-0.538-0.646l-1.342,0.387l-1.207,0.904l-0.874-1.486l-1.008-0.129 	l-1.14,0.517l-0.941-1.421l-1.005,0.582l-0.805-0.516l-0.374,0.083l-0.159-1.264l-0.637-0.84l-0.504-1.29l-0.303-0.418 	l-0.602-1.097l0.133-0.579l-0.267-0.742l-0.402-0.355l0.201-0.42l-0.135-0.773l-0.925-0.129l0.689-1l-0.13-0.839l0.733-0.612 	v-0.904l-2.144-3.741l0.335-3.354l0.544-0.359l0.318-1.279l0.731-0.892l0.121-0.285l-0.055-0.145l-0.424-0.696l-0.02-0.084 	l0.294-0.977l-0.423-0.678v-0.508l0.423-0.137l0.385,0.746l0.845-0.27l-0.069-0.882l0.526-0.405l0.915,0.542l1.124-0.812 	l0.246-0.778l0.565-0.204l1.372,0.439l0.561-0.676l-0.807-1.119h-0.739l-0.421,0.171h-1.058l-0.599-0.846l-1.09-0.068 	l-1.088-1.151l0.173-0.577l1.021,0.813v-0.777l-0.315-0.576l0.666-0.543l-1.02,0.169c0,0-1.09,0.611-1.303,0.677 	c-0.061,0.02-0.138,0.115-0.216,0.239l-0.015-0.004l-0.167-1.23l2.146-1.966l1.106-0.517l1.237-2.128l1.308-1.872l0.973-2.224 	l1.876-3.065l1.342-3.192l-0.302-1.355l-2.011-2.224l-1.207-0.387l-2.146-2.903l0.37-1.321l0.871-1.163l-0.102-1.321 	l-1.406-0.936l-0.503-1.033l-0.067-1.645l0.367-0.417l-0.401-0.84l-1.138-0.193l-0.604-0.743v-1.482l0.637-0.808l-0.905-0.225 	l-0.032-0.774l0.2-2.902l0.838-0.193l-2.077-4.645l-1.914-3.386l-0.399-1.259l-1.107-1.16l0.773-2.129l0.938-1.451l0.436-1.322 	l-0.57-0.517l-2.111-1.291l-0.367-0.838l-0.705-1.032l-1.273-0.679l-0.637-0.096l-0.806-2.03l-0.637-0.743l0.335-1.516 	l0.203-1.193l-0.747-0.241l0.757-0.5l1.226-0.47l-0.002-0.039l0.556-0.09l0.034-1.57l1.241-1.15l1.112-0.144l0.719-0.939 	l-0.101-1.279l0.772-0.064l0.957,0.372l0.571-0.697l-0.044-0.918l0.017-0.029l1.005,0.119l0.389,0.336l-0.02,0.879l0.404,0.557 	l0.121-1.114l0.369-0.59l0.614,0.066l0.401-0.202l-0.786-0.524l0.018-0.337l0.526,0.102l0.56-0.119v-0.337l-0.283-0.084 	l-0.314-0.506l0.195-0.287l0.876,0.085l0.929,0.422l0.492,0.659l0.491,0.404l0.367-0.337l0.705,0.287l0.228,0.305l0.562,0.337 	l0.069,0.473l-0.807,0.608l-0.701-0.304l-1.088,0.135l-0.703-0.692l-0.052-0.557l-0.492,0.624l-0.018,0.979l0.264,0.793 	l0.631-0.59l0.37,0.252l0.228,0.792l0.734-0.607l0.775,0.254l0.086,0.657l0.246-0.067l0.409-0.539l0.246,0.271l-0.104,0.338 	v0.575l0.772-0.947l0.425-0.406l0.387,0.203l-0.246,0.338l-0.177,0.508h0.703l0.318,0.373l-0.564,0.338l-0.562,0.847 	l0.984-0.102l0.599-1.083l-0.177-0.575l0.349-0.34l0.954-0.101l0.633,0.44l0.14-0.407l-0.492-0.644l0.034-0.238l0.881,0.374 	l0.599,0.778l1.336,0.068l0.916,0.338l0.701-0.372l-0.103-0.439l1.126,0.236l0.983,0.576l0.141-0.372l1.091,0.44l4.748,2.438 	l3.2,2.032l0.669,0.743l0.88,0.272l1.092,1.557l0.703,0.169l-0.177-0.508v-0.372h0.459l1.338,1.186l0.737,0.067l1.159,1.015 	l0.67-0.271l-0.737-1.049l-0.213-0.44h0.493l0.983,0.948l-0.07,0.846l1.865,1.253l-0.104,0.576l1.056,0.475l0.21-0.407 	l0.81,0.168l0.985,0.983l0.314,1.117l0.565,0.338l0.737,1.119l0.352-0.103l0.353,0.338l0.034,1.119l0.034,1.048l-0.208,1.32 	l-0.318,0.678v0.609l-1.018,1.253l-0.177,0.61l-1.761,2.301l-1.266,0.644l-1.514,0.272l-0.67,0.506h-1.37l-0.28,0.373 	l-2.113,0.237l-2.687-0.143l-1.53-0.422l-1.104-0.759l-0.683,0.472l-0.772-0.22l-1.279-0.011l-0.175-0.44l-0.775-0.237 	l-0.701,0.473l-1.161-1.083l0.036-0.541l-0.916,0.135l-0.809-0.102l0.387-0.203l-1.479-0.033l-0.423,0.439l-0.915-0.034v-0.508 	l-0.349-0.271l0.561-0.373l-0.595-0.643l-0.179,0.373h-1.512l-0.949-0.645l-0.177,0.305l-0.633-0.067l-2.007-1.592l-0.177-0.846 	l-1.193-0.102l-0.247-0.27l-0.845,0.034l-0.212,0.271l0.987,0.644l0.208,1.285l1.094,0.678l0.246,0.677l1.372,0.305l0.28,0.305 	l-0.915,0.439l-0.423,0.542l0.213,0.237l1.514-0.373l0.629-0.407l0.636,0.441l-0.67,0.271v0.271l1.021,0.102l-0.246,0.677 	l-0.913,0.137l-0.389,0.507l1.092,0.17l0.387-0.271h0.739l0.456,0.475l0.562-0.407l2.113,0.846l1.018,1.355l0.494,0.1 	l-0.318,0.542l-0.068,0.609l0.318,0.103l0.068,0.879l-0.142,1.422l-0.701,0.236l-0.179,0.78l0.737,0.203l0.074,1.015 	l1.264,1.185l-0.034,0.746l0.914,0.643v0.846l0.182,1.042l-0.387,0.708l0.439,0.438l0.419,0.727l1.861,0.657l0.86-0.675 	l0.367,0.051l0.63,0.827l0.807,0.49l0.104,1.097l0.423,0.321l1.455,0.016l0.596,0.489l1.334,0.036l0.826,0.741l0.508,0.035 	l0.999-1.047l0.772-0.067l0.562-0.236l0.07-1.401l-0.703-0.592l0.314-0.438l-0.053-0.339l-1.023-0.375l-0.104-0.709 	l-0.737,0.508l-0.53-0.035l-0.88,0.373l-1.126-0.542l-0.809-1.05l-1.265-0.577l-0.246-0.981l-0.669-1.219l0.915,0.069l0.6-0.578 	l-0.318-0.472l0.21-0.509l-0.28-0.575l0.212-0.575l1.056-0.035l1.054,0.676l1.302,0.238l0.633,0.947l0.846,0.678l1.618,0.066 	l0.314,0.577l1.021,0.102l2.955,1.353l1.231,1.152l0.493-0.744l0.807-0.645l-0.032-0.948l0.701-0.033l0.705-0.779l-1.233-1.759 	l-2.039-2.032l-0.493-1.321l0.106-0.779l1.266-0.981l1.02-1.321l0.283-1.15l0.772-0.712l1.092-0.204l1.513-1.185l1.056-2.166 	l0.635-0.474l1.16,0.169l0.913,0.711l1.338-0.169l1.442,0.169l0.49,0.61l-0.138,0.948l1.124-1.017l1.161,0.847l0.353,1.117 	l0.597,0.509l-0.14-1.625l-0.633-1.185l0.387-0.508l-0.036-2.064l0.318-0.644l-0.423-0.304l-0.036-0.508l0.177-0.44 	l-0.177-0.609l0.177-0.441l-0.668-0.711l-1.021-0.575l-1.372,0.068l-0.386-1.117l0.352-1.151v-2.032l0.352-0.271l-0.213-0.643 	l0.038-0.845l0.385-0.306l-0.493-0.609v-1.017l-0.703-1.895l-1.336-0.915l-2.285-1.793l-0.034-0.475h1.052l1.9,1.219 	l1.126-0.035l0.739-0.371l1.725-0.136l2.496,0.237l1.161,0.71l-0.036,0.812l0.984,1.118l1.058,0.137l0.176,0.709l1.302,1.592 	l-0.176,0.677l-1.652-0.034l-0.423,0.61l-1.444,0.034l-0.457,0.472l0.143,0.509l-0.389,0.643l-0.491-0.271l-0.246,0.508 	l-0.07,1.32l0.669,0.34l1.934,1.558l1.864,2.335h0.844l1.231-0.847l0.563,0.982l0.421-0.542h0.987l0.246-0.473l1.652-0.711 	l0.314-0.948l-0.419-1.354l0.598-1.017l-0.036-0.812l-0.703-0.847l0.492-0.337l2.5-0.304l0.385-0.509l1.513,0.542l-0.211-0.677 	l-1.229-0.882l-0.389-0.88h0.457l0.705,0.644l0.771-0.406l1.725-2.031l0.531-0.137l1.896-2.233v-0.509l0.558-0.281l1.018,0.185 	l1.264-0.574l0.226-0.573l1.811-0.542l0.102,0.677l0.334,0.034l0.176,0.692l-0.331,0.523l0.506,0.337l1.071-1.012l0.104-0.642 	l-0.542-0.236l-0.689-0.684l-0.062-0.402l1.719-1.629l0.286-0.008l0.149,0.562l-0.324,0.177l-0.311,0.419l0.862,0.906 	l0.566-0.161l0.516-0.654l-0.345-0.535l-0.28-0.826l-0.334-0.407l0.735-0.573l2.456-1.013l1.668-0.237l0.176,0.355l-0.932,0.456 	l-0.699,0.052l-1.719,0.775l0.314,0.424l0.633,0.135l0.524-0.272l1.071,0.964l-0.596,0.32l-0.212,0.354l0.631,0.944 	l-0.385,0.642l-0.932,0.034l-0.946,0.878l0.193,0.726l0.773,0.151l0.612-0.168l0.615,0.017l0.646-0.406l0.965,0.356v1.062 	l0.457-1.096l0.966-1.082l0.455-0.066l0.405,0.606l0.753,0.542l0.298-0.372l-0.193-0.524l0.228-0.556l-0.683-0.474l-0.019-0.404 	l0.792-0.829l0.945-0.152l0.264-0.472l1.226-0.741l0.544,0.403l0.616,0.035l0.421-0.22l0.683,0.252h2.02l0.719-0.505v-0.574 	l0.49-0.523l1.158-0.101l0.085-0.489l0.86-0.726l0.721-0.151l1.228-1.165l0.491-0.034l0.701-0.354l0.176,0.303l-0.704,0.777 	l0.722,0.27l0.929,0.877l0.017,0.49l-0.752,0.676l0.438,0.894l-0.195,0.692l0.546,0.658l2.353,0.102l0.49-0.523l0.016-0.541 	l-0.351-0.322l-0.98-1.129l0.068-0.506l0.66-0.495l1.268,0.541l0.881-0.575l0.383-1.49l0.707-0.068l0.421,0.374l1.231,0.204 	l-1.268-1.319l-1.054-0.272l-0.106-0.812l-0.772-1.457l-0.563-0.067l-0.178,0.778l-0.457-0.745l-0.492-1.625l-0.634-0.338 	l-0.667-1.015v-0.373l0.985-0.338v-0.745l-0.456-0.949l0.561-0.507l0.775,0.168l0.385-0.203l0.776,0.509l0.914-0.137 	l0.879,0.272l3.52-0.474l4.467,0.237l1.338,0.88l2.955,1.049l0.244,0.61l-0.314,0.474l0.457,0.982l0.877-0.745l1.34-0.473 	l0.771,0.676l0.703,0.069l0.178,0.844l1.547,0.205l2.567,1.422l2.462,0.202l0.987,0.779l0.6,1.252l1.44,0.271l1.268,0.916 	l1.092,1.996l0.983,0.204l0.068-0.575l-0.247-1.253l0.565-0.034l0.212-0.474l-0.635-0.948l0.28-0.608l-0.034-2.405l0.846-0.643 	l-0.846,0.067l-0.142-0.373h-0.88l-0.703,0.441l-0.949-0.271l-1.9-2.167l-0.527-0.103l-0.703-0.846v-1.591l-0.491-0.44 	l-0.879,1.186l-0.987-0.643l-1.088-0.034l-0.846-0.542l-0.456,0.71l-0.318-1.523l-0.703-0.61l-0.773-1.928v-0.679l0.635,0.475 	l0.737-0.644v-1.016l-1.41-0.982l-0.104-1.116l0.669-0.847l0.67,0.17l-0.846-0.747l-1.058-0.066l-0.667-1.625l-0.633-0.577 	l-0.598,0.373l-1.125-1.016l0.142-1.49l0.525-0.778l-0.599-0.881l-0.177-0.744l0.635-0.407l1.617-2.438l1.021-0.675l0.28-0.542 	l-0.423-1.119l-0.103-0.845l0.633-1.117l-0.703-1.05l-0.107-1.355l0.354-0.71l-0.318-0.678l0.038-1.048l-0.565-0.544 	l0.457-1.658l0.314-0.338l-0.806-1.017l0.281-1.523l-0.143-1.861l0.741-0.203l0.771,0.373l-0.315,0.404l0.315,0.374l1.058-0.439 	l1.302-0.034l1.159-0.576l0.81,0.035l0.808,0.372l0.53-0.439l1.088,0.033l2.78,1.083l1.304,0.034l0.947,0.203l0.351,0.814 	l-0.736,0.302l0.599,1.017v1.083l0.49,0.508l0.034,1.591l0.602,1.387l-0.423,2.439l0.49,0.711l-0.21,0.609l0.423,0.745 	l-0.247,0.845l-0.561,0.305l0.351,1.051l0.985,0.879l0.631,1.151l1.092,0.306v0.237l0.705-0.272l0.493,0.374l0.386,1.692 	l1.124,0.746l0.6,0.913l0.353,2.741l0.772,0.78l-0.034,0.61l-0.282,0.643l0.983,1.05v1.354l1.444,2.031l-0.353,1.186 	l0.564,0.981l0.984,0.575l-0.493,0.779l0.527,0.474l0.388,1.896l1.863,2.302l1.479,0.475l0.633,0.745l0.669,0.135l1.406,1.32 	v0.711l-0.457-0.171l-0.034,0.982l-0.246,1.219l0.599,1.693l1.054,1.015l0.143,1.388l-0.846,0.71l0.068,0.441l-0.633,0.743 	l0.387,0.508l-0.034,1.93l-1.018,0.508l0.21,0.373l0.705-0.17l0.137,0.509l-1.09,0.609l-0.068,1.86l-0.423,0.576l-1.161-0.542 	v0.608l0.949,1.017l0.106,0.676l-0.985,0.442l-0.703,0.879l-1.725,0.102l-0.876-0.71l1.404-0.746l0.036-0.676h-0.987 	l-0.246,0.574l-0.667,0.068l-2.111-1.151l-0.457,0.576l-2.64,0.338l-1.37,0.101l-0.67,1.186l0.636,0.103l0.314,0.337l0.53-0.848 	l1.44-0.269l0.423,0.878l1.229,1.119l3.449,0.541l1.479,0.406l1.721-0.271l1.62-0.032l0.316,0.473l1.793,0.371l1.408-0.778 	l-0.036-0.88l-0.562-0.643v-1.118l0.599-0.778l0.877-0.407l0.07-0.644l1.305-1.253l0.105-0.813l0.808-2.098l-0.808-1.32 	l0.246-1.489l1.44-2.438l0.143-0.813l-1.406-3.283l-1.937-1.083l-0.565-0.778l-0.136-2.573l1.439-1.084l0.741-1.049l1.23-0.17 	l1.9-1.76l1.265-0.068l1.478,1.388v1.22l1.515,0.709l0.387,0.677h0.42l1.164,1.389l-0.178,1.084l0.807,0.507l0.25,1.015 	l0.876,1.05l0.177,1.118l-0.457,0.407l0.703,1.015l1.126,0.068l1.233,0.846l1.266-0.271l0.773-0.237l1.406-0.137l0.318-0.506 	l0.527-0.305l-0.636-0.236l-0.913,0.236l-0.314-0.677l-0.703,1.15h-1.338l-0.599-0.812l-1.056,0.034l-0.562-0.812l0.314-0.747 	l-0.561-0.336l-0.669-1.287l0.104-1.49l0.915-0.236l0.737-0.61l-0.669-0.508l-0.209-0.712l-0.282-0.168l-0.316-0.712 	l-1.406-0.778l-0.072-0.711l-1.056-1.354l-1.58,0.034l-2.217-0.88l-0.563-1.016l-0.983,0.339l-1.69-0.949l-0.812,0.272 	l-1.159-0.338l-1.126,1.117l-0.314,1.219l-0.633,0.508l-1.656-0.508l-1.373,0.812l-1.302-0.373l-0.49-0.61l0.14-1.15 	l-0.14-0.949l-1.761-1.76l-0.562-1.048l0.177-1.998l-1.056-1.591l0.246-1.116l0.28-2.912l-0.845-1.828l-1.018-1.05h-1.196 	l-0.46-1.253l-2.144-1.76l-1.761-0.949l-0.034-1.118l0.633-1.727l-0.28-1.387l-0.705-0.643l-0.034-0.509l0.983-0.948 	l1.551-1.727l0.492-1.962l-0.599-2.405l-1.971-3.622l0.599-0.338l1.336,0.915l0.213,1.185l0.633,0.169l0.419,0.474l0.107,1.422 	l1.021,0.948l-0.107,1.963l0.738,1.22l-0.42,1.117l0.562,0.982l1.406,1.185v0.744l0.81,0.644v0.644l-0.81,0.541l0.457,0.71 	l1.125-0.202l1.267,0.778h1.656l0.879-0.371l0.842,0.574l0.318,0.71l0.843-0.981l1.057-0.102l0.879-0.439l0.811,0.202 	l1.265,1.355l0.879,0.102l1.234,0.676l1.935-0.303l0.665-0.847l-0.808,0.542l-1.9-0.17l-0.246-0.88l-0.596-0.204l-0.53-1.319 	h-1.582l-0.175-0.711l-0.423-0.069l-0.562,0.61l-2.287-0.168l-0.88-0.679l-1.546-0.101l-1.619-1.353l-0.353-1.118l-0.561-0.07 	l-1.41-2.029l0.669-0.237l0.423-0.509l1.302-0.912h0.703l1.268,1.421l2.109,0.846l1.302-0.271l1.021-1.795l-0.845-1.624 	l-1.725-0.406l-1.548,0.948l-0.598-0.644l0.246-0.542l0.459,0.305l0.525-0.338l0.104-1.017l1.13-1.693l1.054-0.609l0.913,0.408 	l3.239-0.069l1.126,1.152l1.159,0.744l2.709,0.305l0.21,0.88l1.056,0.542l1.937,1.895l1.334,0.069l2.462-0.338l1.971-1.152 	l0.703,0.677l0.389-0.101l1.092,0.101l-0.246,1.591l0.176,0.88l-0.035,0.678l-1.375,0.778l-0.033,1.186l0.599,1.016l0.034,1.489 	l1.514,1.151l0.106,1.015l-0.633,0.78l0.423,2.811l0.595-0.07l0.284-0.913l-0.284-0.61l0.564-0.676l-0.142-1.116l0.703-0.273 	l0.53-1.421l0.737,0.509l0.564,1.557l0.139,2.099l0.246,0.71l-0.635,0.406v1.051l-0.421,0.338l1.683,1.069l1.486-0.088 	l1.44,0.338l0.879,1.152l-0.069,0.949l1.02,0.743l1.9,0.035l1.863,1.861l-0.177-0.643l0.038-1.253l1.406-1.422l1.018-0.034 	l2.009,1.524h1.406l0.737,0.88l0.457,1.658l-0.211-1.792l-0.561-1.152l-0.846-0.034l-1.268-0.439l-1.759-1.118l-1.513,0.271 	l-1.51,1.151l-0.705-0.236l-0.177,0.168l-1.616-0.644l-1.725-1.793l-0.915-0.644l-1.585-0.135l-0.877-1.32l0.737,0.27 	l0.564-0.101l1.054-1.963l-0.351-0.913l-1.268-1.084l-0.562-1.998l-1.478-2.065l-0.916-0.609l-1.021-1.219l0.247-1.049 	l-0.314-0.949l-0.247-2.301l-0.949-1.085h-0.633l-1.62-1.015l-2.428-0.068l-0.739-1.252l-1.406-0.711l0.036-1.15l-0.423-0.746 	V135.6l-1.126,0.678l-3.201-0.136l-1.089,0.102l-1.339-0.846l-0.176-1.22h-0.423l-0.388-0.744l0.107-1.592l-1.195-2.031 	l-1.655-0.949l0.353-0.677l-0.21-0.541l-0.741-0.033l-0.561-0.577l0.28-0.913l0.034-0.982l-1.088-0.812l0.703-0.542l1.302-0.034 	l1.16-1.118h1.128l2.531-0.542l3.552-1.251l1.338-1.118l1.126-0.237l0.913,0.338l1.126-0.441l0.492-1.082l1.689-0.608 	l3.238-1.322l0.314,0.374l-0.524,0.949l0.104,0.675l-0.703,0.474l-0.881,1.828l0.036,0.982l1.935,1.489l1.723-0.033l-1.02-0.44 	l-1.616-1.558l-0.036-0.608l0.739-0.984l1.863-1.083l0.668-1.625l-0.668-1.286h-1.126l-1.338-0.88l0.284-0.778l-1.444-0.068 	l-0.457,0.542l-0.564-0.44l-0.457-1.218l-1.548,0.067l-0.737,0.304l-1.092-1.252l0.457-0.305l0.142-0.711l0.527-0.271 	l0.879,0.78l1.126-0.033l0.949-0.475l-0.351-0.542l-0.49,0.237l-0.88,0.237l-0.915-0.677l-0.177-0.847l-1.058-0.135 	l-1.474-0.439l-0.914,0.405l-0.601-0.913l0.527-0.576l-0.068-0.812l-0.6-0.543l0.211-0.338l0.669,0.136l0.983,1.32l0.846-0.237 	l1.02,1.388l0.14-0.847l-0.174-0.643l0.843-0.574l0.177-1.795l-0.703-0.542l0.21-0.338l0.949,0.169l0.493-0.677l-2.18-0.507 	l-0.456,0.609l-0.707-0.033l0.038-0.88l0.879-0.711l1.583-0.067l1.161-0.373l-0.142-0.812l0.913-0.982v-0.846l0.318-0.339 	l-0.142-0.441l0.881-1.218h0.353l0.423,0.609l0.49-0.237l0.282-0.813l0.387-0.034l-0.564-0.778l0.354-0.508l1.193-0.372 	l0.529-0.237l0.246-0.812l0.493-0.101l0.845,0.339l1.583-0.339l-0.353-0.542l0.14-0.712l2.041-0.303l1.126-0.644l0.457-0.948 	l2.604-1.05l0.213-0.88l-0.565-0.135l-1.582,0.947l-0.527-0.507l-1.056,1.017l-0.564-0.542l0.036-1.964l0.528-0.338l0.387-0.813 	l0.351,0.137l0.143,0.438l0.314,0.169l0.703-0.677l-1.052-0.948l1.193-0.167l0.81,0.506l0.81,0.169l1.336-0.948l0.915,0.305 	l2.464-0.846l1.02,0.167l0.387,0.711l-0.951,2.1v0.542l0.987,0.677l0.349-1.287l0.846-1.354l-0.211-0.847l0.211-0.372 	l0.74,0.847l0.175,1.388h0.774l0.352-0.983l-0.352-0.946l0.67-0.508l0.388,0.101l0.173,0.948l1.374-0.982l0.175-0.541 	l-0.632-0.746l1.02,0.034l0.525-0.542l-0.983-0.338l1.058-0.981l1.193-0.068l0.88-0.506l0.526,0.203l0.038,0.576l0.351,0.236 	l1.442,0.103v1.286l0.526,0.542l-0.774,2.065l1.302-0.61l0.915-1.861l-1.054-1.829l-1.197-0.709l-0.882-1.185l-0.981,0.609 	l-0.562-0.407l-1.09,0.202l-0.213-0.745l-0.951-0.304l-0.174-0.338l0.665-0.711l1.902,0.035l0.633-0.677h0.846l0.913,0.204 	l0.916-0.373l0.633,0.406l2.109-0.847l1.125,0.542l0.703-0.101l0.812,0.169l0.775-0.543l-0.353-0.542l-1.48-0.099l-1.44-0.577 	l-1.159,0.44l-1.69-0.135v-0.677l-0.423-1.083l1.338-0.846l-1.268-0.272l-1.054-1.32l-0.914,0.069l-0.881-1.085l-0.141-1.083 	h0.846v-1.049l-1.128-0.981l0.143-4.131l0.985-1.119l-0.354-1.082l0.212-1.49l0.88-0.847l-0.598-0.914l0.842-0.237l0.212-0.744 	l1.303-1.083l0.635,0.033l1.123,1.253l0.882-0.846l0.81-0.035l0.492,1.289l1.264,0.202l1.234-1.015l0.422,0.135l0.103,1.286 	l0.353,0.406l1.408,0.338l0.106,0.373l-0.917,0.542l-0.034,0.407l-0.459,0.779l0.284,0.948l-0.987,1.455l-1.018,0.203 	l-0.741,1.185l0.741,0.204l2.144-0.812l1.514-2.165l0.669,0.133l0.034,0.645l-0.667,0.914l0.07,0.643h0.878l0.809-1.185 	l0.916-0.475l0.456,0.407l1.16-0.103l0.246-1.015l0.495-0.067l0.635,0.407l0.737-0.407l1.229,1.185v0.88l0.564,1.354 	l-0.352,0.541l-0.036,0.846l-0.634,1.287l1.126,1.796l-0.104,1.015l-0.736,0.271l-0.777,0.611l0.635,0.135l1.793-0.407 	l1.092-1.049l1.406-0.068l0.635-1.251l-0.135-1.602l-0.474-1.214l-0.51,0.083l-0.699-0.27l-0.074-0.912l0.405-0.32h0.683 	l0.439,0.32l0.633-0.219l1.579-0.388l1.158-1.182l0.665,0.135h1.264l0.334-0.877l0.841-0.742l0.334,0.201l0.716-0.675 	l0.95-0.202l0.385,0.337l0.966-0.202l0.157,0.557l-0.316,0.472l0.177,0.727l2.052-0.153l0.247,0.27l0.929,0.322l3.488,1.941 	l0.808,0.167l0.51,0.946l-0.053,0.658l1.61,1.806l0.406-0.202l0.035-0.66l0.527-0.337l0.139-0.472l-0.598-0.404l-0.841-0.051 	l-0.018-0.845l0.755-0.507l0.633,0.017l0.49,0.71l0.703,0.591v0.761l1.331,1.18l0.195,0.98l0.611,0.253l0.511-0.305l0.367-0.067 	l0.597,0.372l0.612,0.861l0.108,0.844l0.752,0.945l-0.104,0.675l-0.351-0.05l-0.125-0.49l-0.385-0.524l-0.349,0.035 	l-0.422,0.456l-0.736-0.659l-1.598-0.608l-1.244,0.067l-0.193,0.27l0.631,0.81l1.209,0.136l0.439,0.304l-0.193,0.254 	l0.562,1.062l0.51,0.355l0.385-0.32l0.51-1.014h0.28l0.439,0.692l0.648,0.371l0.474-0.27l0.526,0.153l0.209,0.624l-0.28,0.491 	l0.841,1.4l0.318,1.537l-0.035,1.722l-0.65,1.435l-0.385,0.135l-0.369,0.725l0.229,0.845l-0.701,1.114l0.07,0.422l0.596,0.606 	l0.053,0.727l-1.175,0.541l-0.368,0.893l0.244,0.456l-0.701,1.435l-0.526,0.592l0.142,0.489l-0.424,0.896l-0.822,0.387 	l-1.086,0.878l-0.984,0.017l1.054,0.32l0.733-0.033l0.563-0.607h0.298l0.49,1.282l-0.754,1.519l-0.719,0.962l-0.544,2.144 	l0.51,0.963l0.139,0.743l-0.824,1.975l-1.243,0.422l-0.368-0.152l-0.614,0.085l-0.335,0.557l0.28,0.506l0.527,1.771 	l-0.351,0.793l-0.912,0.54l-0.439,1.199l0.439,1.25l0.087,1.081l-0.401,0.474l0.104,0.725l0.631,0.422l-0.631,2.363 	l-0.756,0.575l-0.209,0.826l0.316-0.557l0.876-0.067l0.877-0.861l0.419-0.827l-0.208-0.371l0.316-0.607l1.226-0.051l0.669-0.205 	l-0.703-0.183l-1.563-1.561l-0.456-1.185l0.526-0.982l1.582-0.135l1.655-0.202l1.372-1.151l0.703-0.034l0.526-0.441 	l-0.526-0.744l1.372-1.049l0.669-1.05l-0.493-0.948l-0.034-0.338l0.984,0.541l1.125-0.338l0.669-0.981l-0.526-0.678l1.725-1.251 	l0.104-0.982l-0.388-0.677l-1.725,0.948l-0.139,0.609l-1.372,0.982l-1.021-0.475l-0.669-1.15l0.741-1.016l-0.215-1.489 	l0.918-0.745l1.338-0.069l1.582,1.017l0.633-0.711l-0.071-1.016l1.268-0.507l0.139,0.709l-0.527,0.577l0.072,0.879l2.532,1.963 	l1.229,0.103l0.635-0.372l1.759-0.305l0.775-0.813l-0.143-0.947l-1.444-1.592l-0.034-0.541l0.495,0.1l1.795,1.694l0.633,0.1 	l0.983,0.847l-0.21,0.677l0.21,0.643l1.23,0.948l0.178,1.692l0.353,0.306l-0.072-0.475l0.844-0.88l0.492-0.101l0.457-0.677 	l-0.385-0.271l-0.741,0.34l-0.667-0.204l-0.597-1.118l1.195-1.083l0.986-0.542l0.454-0.61h0.599l0.389-0.643l1.936-0.339 	l3.059-0.777l3.695-0.135l2.851-1.218l1.406-0.035l1.302,0.473l-0.072,0.712l-0.351,0.169l-0.599,1.05l0.529,1.691l1.229,0.948 	l4.118,0.17l0.808,0.236l0.318-0.167l1.485,0.025l1.124,0.355l2.877-0.455l2.033-1.064l0.72,0.235l0.965-0.067l0.544-0.861 	l-0.367-0.624l0.875-0.202l0.827,0.219l1.26-0.354l0.301,0.693l0.455,0.135l0.596-0.879l-0.298-0.675l-0.773-0.708l0.108-0.878 	l-0.457-0.675l-1.036-0.203l-0.155-1.166l-0.493-0.202l-0.229-0.894l-0.629-0.694l-0.141-1.13l0.489-0.844l0.159,0.524 	l0.438,0.27l1.035-0.811l-0.211-0.354l-0.208-0.777l0.735-0.084l1.088,0.828l0.561-0.39l0.195-0.742l0.349,0.522l1.209-0.05 	l0.705-0.151l0.298-0.541l0.842,0.862l0.79,0.253l0.578,0.726l0.559-0.422l-0.034-0.829l0.824,0.169l0.527,0.862l-0.58,0.472 	l-0.401,0.76l0.316,0.254l1.032-0.221l0.279,0.135v-0.659l0.422-0.219l0.614,0.153l-0.314-0.93l-0.51-0.405l0.21-0.405 	l0.844,0.033l1.368-0.388l0.455,0.406l0.544-0.288h1.264l0.036,0.626l0.278,1.181l0.229-0.556l0.438-0.053l0.807-0.742 	l0.351,1.25l0.544,0.017l0.858-0.624l0.878,0.708l0.297,1.721l0.612-1.08l0.565-0.439l0.42,0.389l-0.51,1.167l0.687,0.54 	l0.314,0.387l0.86,0.018l0.264,0.843l0.385-0.337l0.367-0.101l0.314,0.98l-0.699,0.742l0.104,1.048l1.264-1.216l0.771,0.05 	l0.141,0.658l-1.753,1.52l0.121,1.215l1.491,0.204l0.404-0.491l0.629-0.389l0.546,0.286l0.193,0.76l0.665-0.387l1.036,1.081 	l-0.327,1.34l0.879-0.135l0.212,0.677l0.737-0.305l0.108,0.678l-0.812,1.387l-1.018,0.408l-0.845-0.61l-1.795-0.441h-2.039 	l0.808,0.508l0.353,0.949l1.794,0.203l0.353,0.677l1.721,1.254l1.725,0.439l1.092-0.71l0.07-0.915l-0.881-0.812l-0.281-0.577 	h0.281l1.057,1.015l1.09,0.508l0.633,0.407l-0.809-0.069l-1.829,1.66l0.423,0.542l0.808,0.102l0.599-0.44h0.599l3.028,2.675 	l0.771,0.303l0.949,1.187l2.216,0.202l1.338,1.49l1.37,0.305l0.318-0.576l-0.353-0.609l0.493-0.338l0.809,0.812l0.213,0.711 	l0.561,0.813l0.562-0.035l0.249-1.015l-0.95-4.74l-0.987-2.133l-1.298-2.675l-0.284-2.369l-0.703-1.456l-0.104-0.677 	l0.842,0.337l0.564,1.152l1.021,1.05l1.126,0.27l0.983,1.082l1.725,0.17l3.658-0.406l0.809,0.305l0.703-0.34l0.915,0.746 	l0.177-0.236l-0.703-1.017l0.208-0.574l-0.703-0.646l0.389-0.439l0.141-0.846l3.131-1.253l0.492,0.237l0.771-0.136l0.987,0.543 	h1.442l1.09,1.048l1.092,0.306l0.599,0.947l1.549,0.035l0.49,0.88h2.075l-1.302-0.71l-0.068-0.441l1.266,0.34l0.844-0.643 	l-1.02-0.508l0.737-0.611l-0.808-0.812l-1.197,0.61l-1.053-0.272l-0.144-1.422l-0.421-1.015l0.564-0.439l0.562,0.473l0.81-0.508 	l-0.495-0.71l0.707-0.238l1.44,1.05l0.387,0.981l0.601-0.202l0.526,0.44l0.562-0.306l-0.314-1.049l0.981-0.372l0.707,0.474 	l0.246-0.812l-1.444-1.626l-1.125-0.101l-1.126-1.118l0.21-1.015l-0.49-0.711l-0.987,0.407l-0.948-0.237l1.16-0.643 	l-0.423-0.778l0.211-0.238l-0.737-1.083l1.582-0.034l0.316-1.625l-1.723,0.507l-0.985,0.948l-0.174,0.981l-1.657-0.439 	l-0.983-1.726l0.527-0.847l0.178-1.251l1.581-0.577l0.987,0.137l1.618-1.457l0.103-0.643l-0.948-1.083l-0.879,0.135 	l-0.881-0.338h-1.581l-1.02-1.185l1.334-0.509l1.831-0.27l2.075,0.88l1.935-0.373l3.133-0.069l5.38-0.371l0.882-0.508 	l3.972-0.067l1.797,0.204l1.338-0.204l2.252,0.033l-1.2,0.372l-3.095,1.321l-1.02-0.508l-0.494,0.169l-0.984-0.373l-0.597,1.896 	l0.95,1.015l-0.775,0.304l-0.211,0.678l0.916,0.543l1.372-0.949l0.069-0.948l2.428-1.592l3.131-1.185l0.457,1.626l0.143,2.3 	l-0.285,0.51l-0.561-1.457l-0.913-0.846l-0.036-0.949l-0.951,0.813l-0.635-0.236l0.601,1.59l0.949,0.373l0.353,1.795 	l-0.669,1.421l-0.633-0.272l-0.669,0.542l1.092,0.711l-0.07,0.61l0.42,0.439h0.775l1.194-0.914v-1.185l0.917-1.32l-0.353-0.846 	l0.104-1.219l-0.351-4.57l1.618-1.254l2.462-0.507l2.708-0.678l2.498,0.305l3.095,1.083l1.548,1.963l-0.142,1.017l-0.771,0.542 	l-1.687-1.254l-0.176,0.272l0.314,0.947l-0.07,0.881l0.212,0.847l-0.812,0.643l0.67,0.27l1.021-0.608l1.582-0.102l0.949-0.915 	l0.423,1.32l0.526,0.948l0.143,1.118l0.562,0.575l0.598-1.015l-0.179-0.61l1.128-0.981l1.126,0.542l0.423,1.116l-0.423,0.61 	l-0.351,1.253l0.28,0.44l0.669-0.339l0.494-1.117l0.491-0.204l0.385,0.678l-0.034-1.016l0.915-1.793l0.387-0.373l0.703,0.338 	l2.184,1.422l2.354,0.541l1.302,1.489l-0.21,0.779l-1.511,0.881l-1.021,1.016l1.336-0.644l1.972-0.407l1.302,0.443l1.548-0.374 	l1.126-0.982l1.056-0.474l1.863-1.49l0.915-0.338l1.515-1.455l1.298-0.306l3.485-1.692l1.723-0.576l1.02,0.204l0.106-0.373 	l1.971-1.252l1.088-0.203l2.394,0.066l4.54,1.457l1.934,1.963l1.969,0.982l1.652,1.828l0.88,1.592l0.108,0.846l0.422,0.473 	l-0.07,1.289l0.95,1.76l0.104,0.846l-0.669,0.948l1.058-0.239l1.09-1.251h1.267l0.599,0.575l0.071-0.643l1.265-0.169 	l1.021,0.575l0.423,1.084l0.21-0.847l-0.389-1.388l0.808-0.102l0.707,1.185l1.548,1.421l0.28,1.625h0.846l1.37,1.66 	l-0.034-0.509l-0.457-1.421l-0.917-0.406l-0.172-0.813l0.981,0.543l0.777-0.102l0.949,0.915l1.266,1.692l-0.244-1.354 	l-1.727-2.336l0.07-2.099l-0.023-1.702l1.126-1.25l1.857-0.185l0.858-0.659l1.598-0.625l-0.106-0.674l0.314-0.355l0.634,0.033 	l0.93,0.844l0.791,0.237l1.348-0.271l1.246-0.929l0.683,0.221l1.668-0.59l1.946,0.151l0.86-0.558l0.439-0.033l0.121,0.539 	l0.598,0.591l0.405-0.944l1.088-1.453l-0.177-0.641v-1.198l0.103-0.997l0.493-0.422l1.472,0.338l0.483,1.017l0.213,0.542 	l1.193,0.135l0.846,0.644l-0.034,1.083l1.336,1.421l0.669,0.439l1.406-0.203l2.218,0.475l0.316-0.272l0.669,0.102l1.548,2.032 	v0.982l0.598,0.542l1.546,0.205l0.739-0.51l1.164-0.135l-0.145-0.71l1.092-0.677l0.635,0.202l0.385-0.371l-0.631-0.846 	l0.418-0.374l-0.28-0.542l0.108-0.608l-0.915-1.118l-1.337-0.438l-0.318-1.424l-1.687-1.592l-0.669-0.169l-0.423-0.675 	l-1.654-0.747l-0.843,0.712l-0.529-0.033l-0.034-1.151l0.387-0.542l-0.703-1.354l-0.28-0.912l-0.564-0.408l-0.6-1.456 	l-1.286-0.91l0.21-0.253l2.087-0.32l0.614,0.37l2.527-0.24l2.109,0.034l0.108-0.643l1.092-0.372l1.229,0.778l0.775-0.339 	l0.631,0.067l-0.036-0.845l1.302-0.137l0.354,0.61l0.349-0.035l0.493-1.015l0.88,0.305l0.071-0.88l3.729-0.948l0.455,0.847 	l0.214-0.712l0.596-0.745l0.354,0.237l1.302-0.168l0.631-0.102l0.81,0.677l1.725,0.035l0.879-0.374l0.457,0.575l0.669,0.236 	l0.526-0.609l1.515-0.169l2.885,0.882l1.056,0.473l0.665-0.203l-0.314-0.27l0.983-0.238l0.74,0.508l-0.528,0.475l0.461,0.304 	l1.368-0.339l3.203,0.339l2.708,1.761l-0.143,0.407l-0.841-0.407l-1.619-0.577l-0.105,0.338l2.779,0.949l1.406,0.067l0.314-0.71 	l1.196-0.1l1.34,0.067l-0.244-0.746l0.559-0.27l0.846,0.643l0.881,0.27l0.491,0.306l0.034-0.476l0.142-0.236l1.372,0.339 	l0.034,0.574l1.515,0.508l1.091-0.405l3.975,0.745l-0.423-0.711l1.338-0.034l0.385,0.778l0.775,0.236l-0.177-0.846l0.352-0.135 	l1.512,0.271l-0.28,0.44l0.737,0.88l1.304-0.338v-0.475l-0.493-0.304l1.479,0.067l0.459,0.304l-0.213,0.643l0.846,0.814 	l1.616,0.642l1.265-0.473l-1.755-0.61l-0.812-0.439l-0.184-0.593l0.945-0.202l1.088,0.118l1.844,0.979l0.419,0.979l0.402,0.271 	l0.284-0.744l-0.264-0.338l0.752,0.153l0.598,0.522l-0.157,0.389l0.945,1.03l1.473,2.566l1.616,0.507l0.279,0.978l0.843,0.708 	l0.562,0.93l-0.419,0.455l0.297,0.962l0.717,0.286l0.929-0.81l1.213,0.168l0.752,1.266l0.808,0.203l0.159-0.288l-0.423-0.286 	l-0.26-0.828l0.523-0.76l0.58,0.237l0.524,1.13l0.844,0.845l-0.051-0.389l-0.614-1.435l-0.054-0.792l-0.684-0.761l-1.175,0.607 	l-1.229,0.22l-0.193-0.727l0.631-0.692l-0.282-1.046l-1.666-1.131l-0.877-0.761l-0.419-0.912h-0.597l-1.211,0.93l-0.157-0.473 	l0.945-0.759l0.687-1.316l1.191-1.64l0.614-0.151l-0.121,0.507l0.718,1.654l0.946,0.253l0.246-0.355l-0.842-0.675l-0.316-0.794 	l0.476-0.067l1.069-0.658l0.333-0.642h-1.157l0.492-0.387l0.438-0.237l0.91-0.204l0.808-1.282l0.807,0.103l0.368,0.522 	l0.476-0.152l0.824,0.203l0.121,0.421l0.808,0.742l1.352,0.254l0.631-0.337l2.857,0.489l-0.208,0.946l0.244,0.422l0.562-0.22 	l0.071-0.658l0.823,0.084l0.038,1.13l0.769-0.556l0.896-0.979l0.895,0.303l-0.057,0.659l-0.506,0.675l-0.193,0.539l0.79,2.397 	l-0.331,1.166l0.102,0.524l0.878-0.205l0.578,0.946l1.02,0.438l0.367,0.946l-0.51,0.558l-1.473-0.051l-1.56,0.253l2.087,0.456 	l0.561,0.793l-0.229,0.759l-1.053,0.236l-0.877,1.502l-0.316-0.489l-1.122,0.877l-1.245-0.034l-0.981,0.844l1.315-0.202 	l0.703,0.321l0.472,0.692l0.72-0.709l0.438,0.034l0.088,0.777l0.875,1.147l-0.77,0.473l-0.21,1.401l1.104-1.097l1.158-0.119 	l1.237,1.011l-0.142,0.645l0.707,1.15l-1.092,0.745l0.562,0.27l0.245,1.354l-1.019,0.44l-0.071,0.644l0.387,0.576l0.071-0.712 	l0.81-0.203l0.562,0.609l-0.176,1.151l1.056-0.237l0.351,0.643l0.072-0.746l0.562-0.473l0.667,0.338l0.949,0.135v1.119 	l-0.703,0.303l-0.845-0.506l-0.595,0.778l1.051,0.609l0.777-0.135l0.633,1.219l-0.034,0.608l-1.302,0.577l-1.023-1.456 	l-0.314-0.204l0.493,1.66l-0.705,0.644l-0.457-0.069l-0.244-0.372l-0.735,0.09l-0.598-0.372l-2.154-0.171l-0.79,0.438h-0.912 	l0.243-0.64l-0.368-0.606l-0.703-0.119l0.213,1.166l-0.562-0.019l-0.174,0.27l0.438,0.727l-0.735,0.843h-0.282v-0.438 	l-0.353-0.237l-1.944,0.455l-0.51-0.27l0.07-0.505l-0.385-1.133l-0.332-0.22l-2.246-1.586l-0.284-0.338l0.228-0.32l-1.575-0.507 	l-0.212,0.929l-1.578,0.404l-0.789,0.777l-0.544,0.102l-0.104-1.148l-0.49-0.878l0.26,0.861l-0.191,1.789l0.401,0.997 	l-0.331,1.046l-1.702,2.312l-0.858-0.016l-0.053-1.604l-1.003-0.372l-0.838,0.491l-2.28-1.671l0.139-0.709l-0.333-2.16 	l-0.858-0.305l-0.315-0.607l-0.51-0.557l-0.474,0.438l0.314,0.693l-0.087,0.74l0.578,0.625l-0.246,0.625l-1.454-0.794 	l-1.036-1.216l-0.191,0.102l0.526,1.164l-0.599,0.44l0.423,0.354l1.104,0.017l0.614,0.71l-0.368,0.962l-1.368,0.083 	l-0.142,0.573l0.615,0.306l2.58,2.953l1.874,0.491l1.07-0.423l1.176,0.574l0.331,1.248l-0.189,0.018l-0.843-1.081l-0.44-0.033 	l0.598,1.35l1.334,0.979l0.351,1.113l0.875,1l-0.004,1.909l-0.764,2.94l0.459,1.729l-0.036,1.217l0.282,0.61l-1.125,1.66v1.083 	l-0.808,0.574l0.246-0.846l-0.246-0.338l-2.147,1.559l-0.526-0.61l-0.987,0.676l-0.703-0.168l-0.493-0.846l-0.981-0.102 	l-1.338-1.355l-1.09-0.732l-1.201-0.146l-0.759-0.483l-0.811,0.208l-0.838,1.084l-1.02-0.027l1.025,0.45l1.302,0.035 	l0.601-0.914l2.472,1l0.456,0.812l-1.228,0.813l-0.812-0.508l-1.056,0.034l-0.035,0.915l-0.88-0.982l-0.844,0.1l0.421,0.069 	l0.457,1.185l1.41,0.711l-0.353,1.287l0.562,1.558l0.882,0.439l-0.531-0.507l0.108-1.863l0.633-0.372l0.808,0.204v-0.509 	l1.443-1.253l0.773-0.202l0.6,0.474v0.574l1.159,1.727l1.16,0.305l1.126,1.05l1.304-0.17l0.387-0.743l-0.247-0.643l0.423,0.102 	l2.426,1.895l0.421,0.746l-0.914-0.135l-0.104,0.846l1.687,1.591l0.633-0.067l-0.034-0.374l0.074-1.32l1.334,0.982l1.865,2.811 	l-0.707-0.61h-0.596l-0.21,0.305l0.701,0.914l-0.947,0.643l-0.106,0.982l0.353,0.577l0.947-0.305l0.177-1.016l0.354-0.271 	l0.667,0.271l0.246-0.847l0.773,1.321l2.075,1.319l2.111,0.474l1.229,1.05l-0.667,0.676l1.198,1.625l1.018,0.238l1.231,1.828 	l0.104,2.675l-0.633,0.203v0.44l0.917,0.542l0.493,1.15l-0.459,0.17l-0.599-0.508h-3.411l-1.021-0.61l-0.67,0.407l-0.843-0.271 	l-0.175-0.777l-0.53-0.305l-0.244,0.371l0.422,0.679l-1.478,0.88l-1.162-0.035l-0.351,0.373l0.669,0.407l-1.586,1.388 	l-0.842,0.033l-0.034,0.813l0.595,0.202l-1.405,1.726l-0.527,0.508l-0.14-0.236l-0.773-0.034v1.287l0.595,1.287l-0.947,0.88 	l-0.527-0.542l-0.176,0.913l0.423,0.644l-1.058,1.05l-0.771,0.203l0.491,0.44l-0.247,0.476l-0.353,0.777l-0.561-0.271 	l-0.705,0.339l0.562,0.644l0.07,0.71l-0.949,0.711l0.457,0.643l-0.211,0.71l-0.635,0.136l-0.491-0.474l-0.599,0.204l0.495,0.709 	l1.372,0.61l-0.459,0.983l-1.302,0.101v0.474l0.633,0.338l0.669,1.457l-0.562,0.439l0.353,0.609l-0.987,1.354l0.246,0.71 	l-0.631,1.558l-0.353,2.1l-0.527,0.779l-0.106,0.812l0.598,0.203l0.282,0.541l-0.354,0.543l1.374,1.726l0.036,0.744 	l-0.741-0.236l-1.088,0.169l-0.812-0.78l-0.49,0.441l-1.336-1.456l0.422-0.305l-0.46-0.237l-0.808,0.17l-0.703-0.102 	l-0.178-0.779l-2.462-1.387l-1.302-0.236l-1.549,0.947l-0.49-0.372l-0.986,0.271l-0.985,1.218l-0.915,0.035l-0.457,1.659 	l-0.633,0.576l-0.915-0.474l0.703,1.219l-0.525,0.746l0.211,1.015l-0.318,0.78l-0.315,2.369l-0.458,0.372l-0.599-0.711 	l-1.126-2.878l-0.07-0.982l-0.843-0.439l-0.703-0.88l-0.104,1.017l-1.13,1.895l-0.737,0.439l-0.176,0.882l1.021,0.372 	l-0.987,1.998l-0.703-0.983l-0.491-0.034l-0.458-0.644l-0.703,0.103l-0.387,1.287l-0.527,0.168l-0.938-0.503l-0.67,0.018 	l-0.121,0.574l0.614,0.86l-0.474,0.338l-0.3,0.777l-0.121,0.758l0.842,0.912l0.229,1.062l-0.457,0.17l0.228,0.607l0.964,0.288 	l0.703,0.708l0.173,0.575h-0.349l-0.3,0.606l0.739,0.642l0.683,0.557l-0.07,0.372l-0.841-0.54l-0.648,0.219l-0.123,0.355 	l0.909,0.962l0.493-0.286v0.929l-0.264,1.012l0.087,0.793l-0.561,0.726l0.474,1.351l-0.332,0.625l0.475,0.91l-0.038,0.523 	l0.017,0.946l0.756,1.604l-0.367,0.438l0.72,0.474l0.84,0.827l1.247,1.586l1.141,0.506l0.385-0.303l0.141-0.793l-1.16-1.265 	l-0.07-0.625l0.669-0.524l0.965,0.067l1.579,1.15l0.77-0.152l0.651,0.32l0.054,0.793l-0.229,0.523l0.595,0.676l-0.561,0.826 	l0.246,0.744l-0.334,0.268l-0.667,0.777l0.858,1.66l0.67,0.982l-0.07,1.591l0.983,0.677l0.494-0.338l-0.036-0.475l0.739-0.54 	l0.282-0.373l0.245,0.236l0.987,0.475l-0.036,2.064l2.077,1.76l0.737,1.423l-0.423,0.575l-0.07,1.219l-0.633,0.237l-1.195-0.846 	l-1.408-0.508l-0.104-1.287l0.423-0.915l0.102-1.117l-0.244-0.846l-0.599,0.541l0.318,0.339v0.676l-0.915,0.169l-0.88,1.253 	l0.247,0.542l1.089-0.238v0.915l-0.667,1.016l0.385,1.422l-0.21,0.407l0.105,3.147l0.669,0.643l-0.069,0.745l2.39,3.419h0.707 	l1.58,2.132l1.056,0.577l-0.635,0.711l0.108,1.152l-2.744,1.015l-0.211-0.475l-1.514,0.915l-0.703-0.169l0.385,0.439 	l-0.842,1.727l-0.177,1.187l-0.599,0.542l0.775,0.778l-0.564,2.268l0.881,2.573l1.266,0.679l-0.07,1.116l1.339,0.644l0.669,0.88 	l-1.058-0.102l-0.316-0.304l-0.882,0.541l-0.771,0.711l-0.703-0.136l-1.371,1.219l-0.918-0.71l-0.492,0.879l0.564,0.475 	l0.983-0.069l-0.246,0.983l-0.21,0.576l0.913,0.88l-0.351,0.439l-0.529-0.169l0.633,1.286l-0.314,0.678l0.598,0.136l0.528-0.271 	l0.846,0.847l-0.775,0.675l-0.104,1.321l0.527,0.812l-0.316,1.929l-0.389,0.748l0.212,0.406l-0.212,0.812l-1.124,0.948 	l-0.108,0.914l-0.28,0.169l-0.491,1.963l-0.985,2.065l0.175-0.947l-0.246-0.677l0.035-0.914l-0.282-0.609l-1.826-0.204 	l-0.987-1.389l-0.209-1.591l-1.795-3.825l-1.197-1.828l0.669,0.066l0.775-0.407l0.351-0.743l-0.737,0.338l-1.23-0.033 	l-1.656-0.815l-3.576-6.253l-3.284-3.698l-0.07-1.355l-1.193-1.287l-2.568-3.897l-2.464-4.747l-2.047-4.475v-1.56l-1.268-1.966 	l-0.423-3.119l-0.774-1.559l0.204-1.848l1.037-1.197l0.244-1.532l0.739-0.27l-0.526-0.611l0.386-0.542l0.106-2.201l-1.761-2.334 	h-1.195l-0.07-0.643l0.913-0.813l1.831,0.846l1.02-1.083l-0.244-0.71v-1.727l1.582-0.204l0.88,0.237l-0.775-1.048l1.443-2.676 	l-0.599-1.658l0.034-1.761l-0.561-0.949l0.771-0.812v-1.116l-0.314-0.51l0.289-1.501l0.717,0.018l-0.858-0.828l-0.191-0.708 	l0.298-0.406l0.225-1.721l-0.401-0.354l0.142-0.894l1.067-0.389l0.441-0.625l-0.299-1.435l0.316-1.907l-0.493-0.287 	l-0.174-0.576l0.805-1.4l0.072-1.232l-0.669,0.219l-0.367-1.114l0.492-0.692l0.104-0.86l0.72-0.254l0.191-0.438l1.071-0.624 	l0.107-0.861l1.156-1.063l0.298,0.016l0.878-0.642l0.543,0.018l0.191-0.575l-0.227-0.354l-0.876-0.119l-0.595,0.372 	l-0.723-0.523l0.036-1.723l0.544-1.35l-0.351-0.558l-0.526-0.911l-0.332-0.068l-0.334,0.607l-0.335-0.117l-0.21-2.128 	l0.386-0.455l0.018-0.506l-0.245-1.064l-0.964-0.389l0.226-0.37l-0.121-0.102l-0.052-0.471l-1.036-1.149l-0.139-0.675 	l-0.58-0.506l-0.072-0.928l-0.506-1.114l0.104-0.677l1.243-1.249l1.07,0.236l0.948-0.321l-0.58-0.438l1.179-0.656l-0.562,0.134 	l-0.948-0.101l-0.508-0.237l-1.281,0.051l-1.351-1.064l-0.368,0.321l-1.192-0.05l-0.843,0.947l-0.965,0.065l-1.228,1.114 	l0.424,0.457l-0.125,0.742l1.035,0.792l0.212,0.929l-0.371,0.371l0.298,1.301l0.877,0.641l0.072,0.489l0.613,0.338l0.473,1.841 	l1.368,0.641l-0.175,0.929l0.598,0.64l-0.353,0.542l-0.701-0.558l-0.332-0.708l-1.266,0.286l-0.717,0.523l-0.51,1.35l0.562,0.54 	l-0.247,1.351l-0.331,0.237l-0.034,0.304l0.331,0.218l-0.051,0.708l-0.773,0.71l0.648,0.574l-0.614,0.624l-0.051,2.263 	l-0.351,0.539l-0.018,0.541l-0.669,0.405l-0.557,1.334l-0.302-0.996l-0.826-0.71l0.773-1.315l-0.402-0.49l-0.631-0.068 	l-0.824,0.726l-0.038,0.692l-0.472,0.354l-0.157-1.587l-0.931-0.22l-0.314-0.625l-0.808,0.726l-0.298-0.439l0.262-0.354 	l0.404-0.575l-0.264-0.371v-0.692l0.264-0.067l-0.264-0.945l-0.421-0.253l0.614-0.643l-0.298-0.809l-0.401-0.457l0.28-0.388 	l-0.074-1.082l-0.979-0.657l-0.264-0.743l-0.405,0.066l-0.191,1.081l-0.612,0.169l0.087,1.113l-0.772,0.929h-0.352l-0.543-1.099 	l-0.352-0.083l-0.422,0.287l-0.189-0.843h-1.09l-0.314,0.303h-0.406l-0.191,0.862l-0.701,0.186l-0.123,0.422l-1.701,0.083 	l-0.491,0.675l-0.648-0.219l-0.544,0.388l-1.104-0.152l-1.02,1.586l-0.578,0.322l0.125,1.214l-0.826,0.608l-0.068,0.438 	l0.631,0.438l0.173,1.166l0.949,1.265l-0.754,0.625l-0.476,3.14l1.159,1.266l-0.947,0.338l0.264,0.151l0.017,0.996l-0.895,0.911 	l-0.087,1.369l-0.687,0.809l-0.034,0.997l-0.438,1.553l0.86,1.148l-0.739,0.557l1.245,1.637l-0.436,0.237l-0.246,0.775 	l0.737,0.389l0.367-0.319l0.876,0.016l-0.086-0.457l0.245-0.136l0.822,0.424h0.527l-0.07-0.372l0.105-0.187l0.525,0.338 	l0.949,0.374l0.07,0.471l-0.176,0.321l0.807,0.844l-0.178,0.439l-0.612-0.102l-0.58,0.372l-0.648-0.254l-0.72,0.439 	l-0.104,0.286l0.58,0.491l-1.228,1.147l-0.634-0.32l-0.121-0.692l-0.492-0.422l-0.648,0.372l-0.544-0.389l-0.631,0.235 	l0.157,0.592l-0.054,0.777h-0.28l-0.454,0.59l-0.616,0.437l0.423,0.405l-0.423,0.578l-0.669-0.103l-1.16-1.152h-0.562 	l0.705,0.949l-0.951,0.439l0.21,0.338l-0.597,0.746l-1.408,0.406l-0.389,0.439l-1.23-1.624h-0.736l-0.387-0.237l0.244-0.441 	h0.775l-0.106-0.914l0.353-0.472h1.442l1.616-1.152l-0.208-0.542l-0.741-0.137l-0.808,0.747l-1.161-0.205l-0.07-0.405 	l-0.882-0.643l-0.843-0.104l-1.336-0.236l-1.372,0.068l0.386,0.643l-0.599,0.169l-0.595-0.407l0.104-0.439l-1.269,0.102 	l-1.652-0.407l-0.737,0.373l-0.707-0.508l-1.336-0.068l-1.229,1.422l-0.6,0.034l-0.035,0.574l1.231,0.746l-1.334,0.509 	l-0.212-0.644l-0.703,1.048l1.125,0.577l0.385-0.305l0.564,0.305v0.677l-1.794,0.678l-0.634-0.746l-1.514-0.066l-0.561,0.406 	l0.246,0.744l-0.703-0.101l-0.529,0.542h-0.458l-0.314-0.643l-1.901-0.104l-0.773,0.442l-1.792-0.237l-1.058,0.542v0.439 	l1.336,0.982l-0.737,0.611l-0.457,0.879l-0.845-0.778l-0.669-0.238l0.388-0.982l-0.811-0.506l-0.421,0.677l-0.81,0.102 	l-0.809-0.036l-0.949,0.645l-0.952-0.068l-1.372,0.812l-1.37,0.068l-1.618,1.253l-0.987,0.169l-0.633-0.644l-0.597,0.068 	l-0.247,0.88l-1.688,1.219l-0.246,0.948l-0.88,0.779l-0.176,1.015l1.197,1.794l-0.318,1.727l-1.372,1.488l-0.669,1.423 	l0.282,1.116l-0.069,1.762l0.422,0.677l0.034,0.981l-0.422-0.034l-0.596,0.338l-0.038,1.051l-0.454,0.337l0.526,1.523 	l-0.913,0.644l-0.143,1.151l-1.268,1.49l0.21,0.981l-0.737,0.372l-0.246,1.66h-0.353l-0.526,2.167l0.07,1.624l-0.317,0.542 	l0.387,1.016l-0.667,0.982l-0.176,1.016l-0.88,1.319l0.07,0.474l-0.457,0.169l-0.036,1.15l-1.406,1.119l-0.071,1.488 	l-1.298,1.152v0.678l-0.902,1.357l-0.262,0.946l-0.476,0.793l0.51,0.827l0.86,0.557l0.898-0.317l0.776,0.677l0.914,0.067 	l1.159-0.811l0.703-0.237l0.777-0.508l0.421,0.102l1.02-0.271v2.303l1.056,1.353l0.389,1.388l-0.177,1.152l1.194,0.981 	l0.633-0.745l0.246,0.068l0.565-0.373l0.42-0.879l0.634-0.237l0.352,0.508l0.527-0.475l1.021,0.102l-0.389,0.373l-0.422,0.677 	l0.107,1.286h-0.53l-0.737,0.677l0.284,0.407l2.075-0.306l1.086-0.643l0.389-1.355l-0.177-0.879l0.353-0.642l0.562,1.217 	l-0.174,1.117l0.07,1.117l0.599-0.373l0.353-1.221l-0.51-1.502l0.389-0.775l-0.791-0.829l-0.456-1.518l0.913-0.034l0.878,0.49 	l-0.072,0.406l0.353,0.404h0.523l0.388-0.557l0.895-0.104l1.071-0.792l1.054,0.827l1.066,0.086l0.685,0.589l0.528,1.081 	l0.562,0.371l1.277,0.168l0.476,0.607l2.017,0.708l0.264,0.592l0.752,0.118l0.597,0.708l0.546-0.034l0.773,1.426l-0.493,0.745 	l-0.071,0.744l-0.63,0.374l0.914,0.982l0.667-0.035l1.229,1.525l0.074,0.812l-0.53,0.61l-0.034,0.981l0.949,0.779l0.775,0.203 	l0.595-0.508l0.178,0.78l-0.422,0.509l0.14,1.081l0.773,0.679l-0.561,0.439l-0.108,0.644l0.389,0.78l-0.493,0.913l0.389,0.303 	l-0.072,0.61l-0.212,0.441l0.494,0.303l-0.562,0.645l0.737,2.132l-0.314,0.61l0.176,1.659l0.139,0.642l-0.034,0.746l0.951,2.945 	l0.737,0.136l0.846-0.578l0.104,0.407l-0.702,1.152l-0.389,0.406l0.458,0.778h0.423l1.302,1.388l-0.104,1.693l0.317,0.608 	l-0.108,0.576l0.318,2.167l0.703-0.067l-0.036,1.048l-0.318,0.339l0.074,1.354l0.456,0.848l0.068,1.185l-1.336,1.354 	l-0.104,1.286l-0.599,1.422l0.177,1.49l0.246,0.134l-0.106,1.321l-0.879,0.814l0.036,1.15l-0.669,1.456l0.387,0.068l0.071,0.676 	l-0.811,0.948l0.492,1.998l-0.983,0.948l0.314,1.185l0.457,0.135l-0.068,0.915l-1.126,1.32l-0.21,1.05l-0.951,0.812 	l-0.072,0.812l-0.949,1.186l-0.88,3.826l-0.524,0.305l-0.177,1.049l0.387,0.338l-0.176,0.441l-1.269,0.812l-0.034,0.915 	l-0.845,0.44l0.107,1.388l-0.492,0.135l0.457,0.846l-1.09,1.49l-0.072-0.236l-0.705-0.204l0.353,0.947v1.05l-1.09,0.475 	l0.28,0.474l-1.548,1.829l-0.703,1.15l-0.669,0.034l-0.177,0.61l-1.302,0.204l-1.054,1.049l-0.562-0.576l-0.527,0.508 	l-1.443-0.88l-1.44-0.373l-0.108-1.59l-0.526-0.441l-1.126,0.475l-0.983-0.61l-0.284,0.473l0.037,0.814l-0.843,0.643 	l-0.108,1.625l-0.595,0.407l-0.389,1.49l-0.389-0.406l-1.193,0.204l-0.318,1.319L1342.073,343.435L1342.073,343.435z 	 M1020.96,346.526l-1.146-0.779l-5.492,1.001L1020.96,346.526L1020.96,346.526z M1410.642,327.601l0.423,0.146l0.822-0.536 	l0.149-0.662l-0.689,0.275L1410.642,327.601L1410.642,327.601z M897.177,62.454l-0.603-0.968l-0.137-1.29l-0.499-0.58 	l-0.54-0.195l-0.401-0.87l0.972-0.838l0.739-0.904l1.34-0.127l0.537-0.517l0.603,0.26l0.504,0.934l1.038,0.45l1.039-0.127 	l0.169-0.323l0.502-0.258l-0.572-0.614l-1.071-0.227l-2.378-1.387l-2.045-0.321l-1.31,0.096l-1.742,1.484l-0.637,1.257 	l-1.038,0.292l-1.139,0.968l0.068,2.323l0.701,0.482l1.139-0.644l0.84,0.612l0.434,0.581l0.538,0.291l0.401-0.678v-0.484 	l0.537-0.482l0.604,0.612l0.468,1.323l0.77,0.483L897.177,62.454L897.177,62.454z M904.503,49.331l0.184-0.986l0.622-0.745 	h0.387l0.083,0.825l0.421,0.503l-0.186,0.646h-1.192C904.821,49.574,904.486,49.347,904.503,49.331L904.503,49.331z 	 M902.538,67.194l0.421,0.021l0.538-0.341l0.436-0.728l-0.07-0.648l0.169-0.403l0.405,0.274l0.654-0.355l0.202-1.198 	l-0.168-1.214l-0.739-0.695l-0.117-0.372l0.955-0.42l0.772,0.049l1.396-0.293l0.367-0.226v-0.357l-0.284-0.257l-0.301-0.567 	l-0.556-0.048l-0.186-0.259l0.036-0.921l0.367-0.342l0.489,0.082l0.149,0.324l0.521,0.146l0.568-0.195l0.856-0.873l0.624-0.422 	l0.083-0.339l-0.502-0.89l-0.054-0.42l-0.923-0.599l-0.202-0.777l-0.402-0.08l-1.008,0.501l-0.622,0.906l-0.485,0.274 	l-0.049-0.453l0.216-0.824l0.656-0.583l0.403-1.052l0.115-1.1l-0.132-0.325l-1.043,1.101l-0.553,1.215l-0.304,0.113l-0.083-0.42 	l0.186-0.858l-0.235-0.47l-0.322,0.356l-0.436,1.085l-0.739,0.274v0.81l0.322,0.259l0.703-0.146l0.451,0.17l-0.034,0.549 	l-0.703,0.259l-0.671,0.613l0.133,0.967l-0.336,0.613l-0.669,0.16l-0.671,0.937l-0.77,0.45l-0.869-0.419l-0.739,0.13 	l-0.973-0.419l-0.468-0.517l-0.47,0.389l-0.034,0.611l-0.201,0.45l-0.034,0.744l0.773,0.162l0.637-0.582l0.733,0.485 	l0.205,1.031l0.769,0.129l0.37,0.322l-0.604,0.291h-1.071l-0.805,0.645l0.333,2.162l0.438,0.71l-0.202,0.515l0.236,0.517 	l0.637-0.291l0.77,0.032l0.402-0.645l0.068-0.935h0.502l0.703,0.774L902.538,67.194L902.538,67.194z M908.604,65.551l0.2-0.775 	l0.435-0.742l-0.03-0.839l-1.039-0.323l-0.805-0.451l-0.199,1.129l-0.203,0.515l0.302,0.774L908.604,65.551L908.604,65.551z 	 M909.979,67.905c0.066,0,0.803-0.098,0.803-0.098l0.707-0.419l1.374,0.032l0.368-0.517l-0.235-0.644l-1.038-0.161l-0.101-0.903 	l-1.005-1.45l-0.236,0.419l-0.032,1.481l-0.302,0.549h-1.104l-0.338,0.259l0.938,0.678L909.979,67.905L909.979,67.905z 	 M922.015,36.19l0.889-0.697h0.839l0.287-0.372l0.352-0.259l-0.286-0.469l-0.216-1.003l-0.587-0.355l-0.606,0.404l-1.19,0.292 	l-0.808,0.436v0.325l0.489,0.387l0.318,0.729C921.495,35.608,921.963,36.207,922.015,36.19L922.015,36.19z M922.938,37.761 	l-0.101-0.616l0.389-0.34l0.198,0.55L922.938,37.761L922.938,37.761z M923.172,40.608l0.437-0.712l0.486-0.307l0.27-0.502 	l-0.419-0.307l-0.401,0.113h-0.893l-0.571-0.421l-0.67-0.08l-0.789,0.469l-0.873,0.729l-0.086,0.518l0.286,0.501l0.806,0.339 	l0.874-0.469l0.452,0.518l0.554,0.064L923.172,40.608L923.172,40.608z M925.336,40.787l-0.182-1.036l0.421-0.55l0.502-0.098 	l0.554,0.388l0.237,0.584l-0.187,0.599l-0.655,0.305L925.336,40.787L925.336,40.787z M921.574,45.458l0.938-1.355l0.57-1.162 	l0.804-0.677l-0.034-0.354l-0.703-0.354l-1.074,0.645l-0.902-0.42l-1.108-0.098l-0.233,0.742l-0.436,0.678l0.301,0.194 	l0.703-0.098l0.336,1.097l0.234,0.322l-1.104,0.162l-1.543,0.581l-0.265,0.482l0.331,0.517l1.007,0.161l0.938-0.774 	C920.333,45.747,921.54,45.521,921.574,45.458L921.574,45.458z M924.224,45.554l-0.907-0.064l-0.469,0.354l-0.637-0.321 	l0.505-0.774l0.869-0.581l0.235-0.612l0.77,0.773l-0.233,0.452L924.224,45.554L924.224,45.554z M926.968,47.264l-1.406-0.84 	l-0.335-0.838l0.335-0.579h0.368l0.335,0.645l1.039-0.032l0.673,0.547l-0.103,0.84L926.968,47.264L926.968,47.264z 	 M925.664,49.907l-0.707-0.934l-1.808-1.259l-1.509-0.582h-0.905L920.2,46.78l0.235-0.323l0.906-0.291l1.237,0.065l1.511,0.677 	l1.372,1.193H926l0.566-0.483l0.235,0.29l-0.199,0.645l-0.27,1.034L925.664,49.907L925.664,49.907z M926.333,52.262l0.201-1.258 	l-0.637-0.872h-0.804l-1.44-0.451l-1.442-1.031l-0.468-0.032l-0.57-0.419l-1.175,0.032l-0.77-0.388l-2.178-0.033l-1.004,0.291 	l0.198,0.774l-0.101,0.387l0.605,0.355l1.308,0.45l0.5-0.612l0.436-0.065l0.739,0.645l0.368,0.774l0.502,0.032l0.502-0.193 	l0.502,0.967l1.109,0.26l1.07-0.196l1.207,0.518l0.904,0.291L926.333,52.262L926.333,52.262z M919.513,53.798 	c-0.034,0.031-0.554-0.291-0.554-0.291l-0.555-0.356l-0.973,0.064l-0.604-0.695l-0.101-0.438l0.52-0.308l0.973-0.276l1.076,0.13 	l0.385-0.274l0.455,0.857l0.57,0.015l0.234-0.242l0.502,0.146l0.221,0.47l-0.221,0.403L919.513,53.798L919.513,53.798z 	 M917.519,58.583l-0.536-0.774l-0.066-1.257l-0.504-0.193l-0.199,1.323l-0.301,0.289l0.369,0.549l0.836,0.355L917.519,58.583 	L917.519,58.583z M918.425,58.261l0.436,0.065l0.235-0.518l-0.336-0.806l-0.672-0.934l-0.501,0.095v0.838L918.425,58.261 	L918.425,58.261z M920.301,57.358c-0.101,0,0.872,0.257,0.872,0.257l0.103-0.418l-0.604-0.741l-0.771-0.162l-0.304,0.289 	L920.301,57.358L920.301,57.358z M919.998,59.584l0.371-0.259l0.266-0.934l-0.066-0.517l-0.737-0.291l-0.201,0.387l0.066,0.484 	l-0.269,0.614L919.998,59.584L919.998,59.584z M918.826,61.873l-0.2-0.774l-0.671,0.032l-0.737-0.806l-0.536,0.033l-0.671,0.417 	l0.468,0.71v0.645l-0.804,0.58l0.402,0.517l1.376,0.323l0.936-0.646L918.826,61.873L918.826,61.873z M919.529,60.389 	l0.034,0.742l0.302,0.774l0.57,0.226l0.032-0.871l-0.403-0.677L919.529,60.389L919.529,60.389z M926.949,50.399l0.034-0.614 	l0.335-0.357l0.318-1.004l0.455-0.371l0.402,0.064l0.488,0.761l0.101,0.614l-0.353,0.228l-0.117,0.598l-0.47,0.356h-0.842 	L926.949,50.399L926.949,50.399z M921.393,60.125l0.235,0.583l0.974,0.259l0.671-0.146l0.288-0.5l-0.137-0.697l-0.401-0.518 	l-0.455,0.178l-0.534,0.647L921.393,60.125L921.393,60.125z M921.864,58.49l0.351-0.113l0.353-0.501l0.054-0.598l-0.558,0.291 	L921.864,58.49L921.864,58.49z M923.208,57.762l0.101,0.324l0.586,0.162l0.673-0.209l0.284-0.487l-0.302-0.34l-0.621,0.017 	l-0.187,0.323L923.208,57.762L923.208,57.762z M923.407,54.155l-0.504,0.614l-0.671,0.048l-0.504-0.355l-0.084-0.955 	l0.773-0.906l1.06-0.291l0.701,0.194l0.421,0.485l0.839,0.309v0.694l-0.434,0.406l-1.01,0.016L923.407,54.155L923.407,54.155z 	 M926.934,53.781l0.671,0.647l0.654,0.114l0.724-0.471l0.116-0.548l-0.451-0.47l-0.538,0.178l-0.438,0.55H926.934 	L926.934,53.781z M929.015,62.261l0.066-0.581l-0.57-0.774l-0.133-1.032l0.133-0.742l-0.703-1.129l-0.671-0.515l-0.434,0.418 	l-1.142,0.13l-1.038,0.645l-0.233,0.71l0.77,1.064l0.27,1.482l0.601,0.548l0.637,0.226l1.342-0.514L929.015,62.261 	L929.015,62.261z M931.394,61.519l0.034-0.483l-0.635-0.548v-0.42l0.667-0.387l0.371-0.903l0.167-0.581l1.207-0.645l0.57-0.064 	l0.199-0.356l-0.703-0.257l-0.739,0.226l-1.739-1l-1.041-0.872l-0.57,0.323l-0.84,0.227l-0.265-0.065l-0.07,0.773l1.008,1.839 	l-0.034,1.258l0.637,1.451l1.039,0.548L931.394,61.519L931.394,61.519z M934.34,61.55l-0.064,0.548l1.039,0.549l0.771,0.774 	l1.141,0.098l0.77-1.322l-0.369-1.323l-0.802-0.419l-1.176,0.289L934.34,61.55L934.34,61.55z M934.041,63.421l-0.101,0.613 	l0.94,0.289l0.434,0.227l0.401-0.291l-0.835-0.838H934.041L934.041,63.421z M934.219,34.75l0.474-0.292l0.602-0.017l0.74-0.695 	l0.654,0.032l0.318,0.34l0.756,0.066l0.084,0.582l-0.804,0.728l-0.588,0.066l-0.606-0.357l-1.358-0.096L934.219,34.75 	L934.219,34.75z M936.018,47.292l0.485-1.069l0.486-0.42l0.018-0.42l-0.688-0.486l-0.403-0.664l-0.84-0.081l-1.243,0.405 	l-1.207,0.697l-0.316,0.614l0.149,0.502l1.577,1.068l0.957,0.227L936.018,47.292L936.018,47.292z M938.297,45.779l-0.301,0.581 	v1l-0.84,0.646l-0.266-0.259l-0.637,0.064l-1.275,1.033l-0.871,0.032l-0.566-0.485l-0.605,0.292v0.774l0.336,0.967l-0.066,2.483 	l0.57,1.355l1.136,1.517l0.871-0.032l1.477-0.549l1.141-0.095l0.87-0.581l1.374-0.259l-0.066-0.613l-0.737-0.677l-0.57-0.872 	l-1.004-0.387l-0.571-1.096l0.099-0.614l0.773-0.515l1.072-0.032l0.836-0.483v-0.583l-0.804-0.966l-0.871-0.516L938.297,45.779 	L938.297,45.779z M942.654,47.585l-0.771-0.516l-0.099-0.678l-0.606-0.613l-0.936,0.097l-0.773-0.709l-0.03-0.646l0.365-0.677 	l-0.5-1.194l-0.237-1.062l0.304-1.193l0.806-0.517l0.835-1.063v-0.549l0.27-0.647l0.637-0.094l0.637,0.321l0.836,0.225 	l0.335,0.871l-0.066,1.453l0.27,0.453l0.806,0.322l1.068,1.063h0.606v0.484l-1.476,0.839l-1.44,0.58l-0.302,0.613l0.27,0.806 	l-0.133,1.065L942.654,47.585L942.654,47.585z M1341.723,72.798l0.353-0.114l0.199-0.535l-0.485-0.387l-0.336,0.387 	L1341.723,72.798L1341.723,72.798z M1338.195,72.102l0.569-0.082l0.339-0.503l-1.143-0.291l-0.216,0.421L1338.195,72.102 	L1338.195,72.102z M1334.688,73.298l0.385-0.032l0.336-0.292l-0.203-0.777l-0.686-0.194l-0.406,0.599L1334.688,73.298 	L1334.688,73.298z M1415.412,168.342l-0.285,0.146l0.318,0.906l0.402-0.502l0.034-0.533l-0.286-0.259L1415.412,168.342 	L1415.412,168.342z M1414.168,166.593l0.973,0.892l0.421-0.13l0.051-0.403l-0.639-0.843l-0.619,0.048L1414.168,166.593 	L1414.168,166.593z M953.83,112.218l0.353-0.096l0.252-0.454l1.259-0.826l0.168-0.615l-0.301-0.032l-1.011,0.696l-0.583,0.179 	l-0.507,0.598L953.83,112.218L953.83,112.218z M948.15,140.955l1.374,0.032l1.34-0.645l1.108-0.484l0.872,0.193l0.432,0.516 	l1.041,0.226l0.703-0.387l-0.402-0.483l0.068-0.646l0.401,0.129l0.437,0.87l0.771,0.389h1.34l0.232-0.485l0.705-0.161 	l0.469-1.098l-0.066-0.965l0.604-0.968l0.133-0.806l-0.635-0.549l-0.505-1.098l-0.871-0.193h-0.638l-0.335-0.418l0.534-0.258 	l0.739,0.193l0.604-0.193l0.5,0.708v0.548l0.473,0.259l0.434-0.58l-0.367-1.323l-0.973-1.258l-0.906-1.225l0.27-0.484 	l0.637,0.71l0.133,0.645l0.872,0.387l0.804,0.226l0.234-0.517l-0.099-0.58l-0.371-0.355l0.068-0.547l0.538-0.903l-0.103-0.839 	l-0.703-0.838l-0.97-1.161l0.67-0.098l0.734,0.646l0.637-0.161l0.371-0.968l-0.235-0.259l-0.604-0.032l0.066-1.129l0.57-0.161 	l0.804,0.547l1.207,0.452l0.37-0.516l-0.671-0.419l-0.101-0.485l0.737,0.033l0.536,0.258l0.671-0.58l0.066-0.903l-0.302-0.323 	l0.169-0.355l1.205-0.548l0.235-0.645l-0.773-0.484l-0.365-0.645l0.468-0.773l0.436,0.773l0.57-0.452l1.306-1.612l0.336-1 	l0.538-0.484l0.133-1.097l1.34-0.805l0.737-1.259l0.536-1.612l0.737-0.063l1.709-1.227l1.877-2.063l1.51-1.161l0.535-0.095 	l1.239-1.033l1.476-0.42l0.87-0.679l1.308-1.546l0.739-0.451l0.504,0.095l0.699-0.29l0.07-0.58l-0.269-0.42l0.436-0.839 	l-0.137-0.74v-1.227l-0.299-0.225l-0.603-0.097l-0.103-1.129l0.47-1.096l-0.266-0.389l-0.941-0.13l-0.468-0.483l-0.872-0.129 	l-0.502-0.644l-0.048-0.728l-0.353-0.469l-1.06,0.648l-0.186,0.452l-0.57-0.194l-0.721-0.323l-0.771,0.209l-1.145,0.713 	l-0.253,0.776l-0.553,0.421l-0.669,0.128l-0.538,0.552l-0.103,0.63l-0.688,0.729l-0.083,0.454l0.554,0.89l0.051,0.598h-0.79 	l-0.402,0.452v0.647l-0.454,0.309l-0.537,0.663l-1.61,1.021l-0.572,0.452l-0.368-0.161l-0.772-0.018l-0.705,0.503l-0.757,1.115 	l-0.688,0.439l-0.371-0.244l-0.302-0.646h-0.369l-0.133,0.582l0.133,0.988l-0.3,0.307l-0.288-0.777l-0.436-0.745l-1.41,0.145 	l-1.744,0.455l-0.354,0.324l-0.68,0.123l-0.27,0.461l0.529,1.142l0.387,0.363l-0.103,0.386l-0.437,0.162l-0.57,0.777 	l-0.367-0.129l0.049-0.502l0.336-0.356v-0.631h-0.588l-0.754,1.003l-0.675,0.469l0.034,0.631l0.587,0.292l-0.468,0.355 	l-0.369,0.712l-1.025,0.016l-0.57,0.454l-0.133,0.533l-0.844,0.275l-0.518,0.518l-0.184,1.247l0.252,0.29l0.552,0.099 	l-0.671,0.631l-1.378,0.017l-0.504,0.387l-0.182,1.167l0.133,0.679l0.438,0.015l0.671-0.112l0.286,0.373l-0.153,0.453 	l0.102,0.744l-0.623,0.485l-0.568-0.192l-1.108-0.245l-0.991,0.503l-0.251,0.616l0.018,0.63l-0.405,0.76l-0.838,0.681 	l-0.656-0.34l-0.484-0.598l-0.235-0.615l-0.353,0.177l-0.252,1.133l0.184,0.972l0.822,0.646l0.588-0.178l0.302,0.114 	l0.051,0.582l-0.436,0.938l0.134,0.422l0.572,0.291l0.469-0.534l0.401-0.018l0.37,0.276l0.925,0.017l0.587-0.389l0.268,0.227 	l-0.316,0.613l-0.725,0.164l-1.108-0.017l-0.419,0.519l-0.534-0.21l-0.339,0.566l0.303,0.939l0.721,0.388l0.604,0.129 	l0.623-0.243l0.282,0.276l-0.216,0.339l-1.025,0.42l-1.09-0.032l-0.538,0.372l-0.083,0.486l0.436,0.307l0.808-0.113l0.923,0.081 	v0.308l-0.57,0.211l-0.925,0.145l0.051,0.469l0.302,0.178l1.143,0.146l1.294,0.792l0.737,0.275v0.259l0.084,0.567l-0.622-0.681 	l-0.923-0.39l-0.822-0.048l-0.757-0.453l-0.805-0.017l-0.538,0.5l-0.152,0.583l-0.367,0.324l0.032,0.485l0.335,0.39 	l-0.115,0.404l-0.436,0.161l-0.421-0.081l-0.538,0.648l-0.284,0.711l0.151,0.323l-0.27,0.355l-0.771,0.195l-0.035,0.292 	l1.01,0.97l0.84,0.421l0.385-0.243l0.234-0.518l0.639-0.339l1.192-0.906l0.939-0.325l0.955,0.097l0.438,0.389l-0.032,0.436 	l-0.406,0.034l-0.57-0.454h-0.521l-0.318,0.518l-1.241,0.713l-0.507,0.727l-0.182,0.777l0.252,0.745l-0.202,0.355 	C948.223,140.523,948.173,140.978,948.15,140.955L948.15,140.955z M952.341,165.176l0.367,0.162l0.068-0.518l-0.436-0.548 	l0.436-0.708l-0.304-0.677l-1.038-0.324l-0.199-0.58l-0.606-0.323l-1.068,0.097l-0.639,0.613l0.134,0.483l0.638,0.323 	l0.468-0.161l0.671,0.258l0.066,0.806l0.771,0.163L952.341,165.176L952.341,165.176z M969.027,165.077l-1.009-0.711l-0.536,0.26 	l-0.739-0.196l-0.671-1.161h-0.939l-1.543-1.164l-0.538-0.904h-1.007l-1.141-1.938l-1.61-1.872l-0.604-1.938l-0.872-1.421 	l-0.066-2.198l-0.675-1.292l-0.401-2.456l-0.199-0.58l0.423-0.747l-0.103-0.547l-0.804-0.195l-0.703,0.325l-0.57-0.42 	l0.203-0.29l1.271,0.096l1.04-0.613l0.167-1.708l-0.203-0.776l-0.803,0.161l-0.836,0.228l0.335-0.389l1.237-0.452l0.235-0.514 	l-0.367-0.388h-1.71l-2.246-0.323l-0.871-0.549h-0.737l-1.642,1.033h-1.576l-0.566,0.451l-1.212,0.838l-0.097,1l-0.301,0.581 	l0.234,0.87l0.804,0.098l0.336,0.323l-0.203,0.483l-0.839-0.032l-0.969,0.291l-0.773,1.289l-0.066,1l0.438,0.484l0.737-0.225 	l1.174-0.613l0.198,0.387l-0.836,0.71l-0.168,0.742h0.5l0.604-0.71l0.603-0.162l0.201,0.388l-0.737,0.645l-0.167,0.644 	l0.671,0.71h0.938l-0.536,0.29l-0.637,0.033l-0.604,0.549l0.034,0.613l0.504,0.902l-0.402,0.323l-0.472-0.226l-0.836,0.226 	l-0.671-0.355l-0.603,0.066l-0.806,0.967l0.032,0.902l0.27,1.129l-0.203,1l0.237,0.806l1.239,1l0.034,0.549l1.239,0.935 	l0.84,0.323l0.468-0.258l0.737-0.193l0.77-1.129l-0.3-1.194l0.199-0.871l0.57-0.807l-0.434,1.033l-0.036,0.645l0.403,0.613 	l0.336,1.161l0.57,0.162l0.601-0.419v-0.613l0.504-0.904l0.235,0.452l-0.135,0.386l0.032,0.808l0.906,1.353l1.074,0.614 	l0.735-0.033l0.635-0.418l0.438,0.227l-0.235,0.354h-0.502l-0.302,0.548l-0.637,0.388l-0.169,0.515l0.84,0.709l0.066,0.646 	l-0.538,0.032l-0.534-0.163l0.034,0.55l0.5,0.483l1.374,0.129l0.941,0.419l0.937-0.227l1.173,0.452l-0.066-0.806l0.534,0.161 	l0.304,0.547l0.362,1.23l0.724,0.566l0.62-0.048l0.639-0.729l-0.203-0.921l-1.205-0.52l-0.423-0.258l0.403-0.227l0.671,0.146 	l0.906,0.534l0.403,0.647l0.419,0.891l0.336-0.033l0.22-0.762l0.371-0.145l0.534,0.713l1.025,0.485l0.656-0.065v-0.534 	l-0.771-0.616v-0.371l0.385-0.162l0.939,0.486l0.353,0.42l0.27,0.018l0.301,0.841l0.552,0.371l0.425-0.226l0.167-0.712 	l-0.37-0.679l-0.57-0.033l-0.472-0.357l0.167-0.307l0.454,0.196h0.521l0.604-0.746l0.235-0.55L969.027,165.077L969.027,165.077z 	 M899.104,221.071l-0.434-0.753l0.318-0.373l-0.112-0.534l-0.603-0.129l-0.587,0.607l0.026,0.615l0.695,0.615l0.209,0.388 	l0.379-0.015L899.104,221.071L899.104,221.071z M923.208,206.34l0.451-0.066l-0.068-0.467l-0.502-0.566l-0.468,0.08l-0.02,0.47 	L923.208,206.34L923.208,206.34z M941.917,186.914l0.973-0.065l1.237-0.999l0.84-1v-1.548l0.57-0.58l0.335,0.774l-0.269,1.227 	l0.672-1.129v-1.033l-0.871-0.968l-3.354-1.354l-1.539-0.258l-0.972,0.582l-0.571,1.839l-0.034,2.225l0.571,1l0.269,1.128 	l0.302-0.225l0.703,0.387l-0.268,0.613h0.703L941.917,186.914L941.917,186.914z M950.271,188.587h0.318l0.237-0.274l1.038-0.193 	l0.489-0.325l-1.173-0.113l-0.86,0.42L950.271,188.587L950.271,188.587z M963.685,188.313l0.306,0.355l0.653-0.841l-0.036-0.647 	l-0.604,0.112l-0.365,0.583L963.685,188.313L963.685,188.313z M961.888,188.506l0.673,0.081l0.419-0.517l-0.318-0.454 	l-0.451,0.179L961.888,188.506L961.888,188.506z M972.971,183.992l0.385,0.112l0.504-0.371l1.31-0.406l0.338-0.437l-0.84-0.228 	l-1.226,0.599L972.971,183.992L972.971,183.992z M968.506,183.068l0.402,0.486l0.587,0.017l0.135-0.454l-0.69-0.34 	L968.506,183.068L968.506,183.068z M965.686,182.875l0.618,0.179l0.405,0.403l0.854,0.195l-0.366-0.875l-0.826-0.339 	L965.686,182.875L965.686,182.875z M964.272,182.939l0.136,0.26l0.554,0.015l0.389-0.468l-0.438-0.163L964.272,182.939 	L964.272,182.939z M1063.733,153.826l0.019,1.004l0.455,0.55l0.199-0.858l-0.318-0.63L1063.733,153.826L1063.733,153.826z 	 M1061.906,151.139l0.018,1.571l0.45,0.97l-0.115,1.455l0.284,0.326l0.52-0.81l-0.233-2.427l-0.606-1.116L1061.906,151.139 	L1061.906,151.139z M1060.631,149.44l0.453,0.937l0.504,0.228l0.014-0.711l-0.602-0.6L1060.631,149.44L1060.631,149.44z 	 M975.967,176.4l0.37-0.161l0.133-0.677l-0.469-0.258L975.967,176.4L975.967,176.4z M980.491,180.013 	c-0.034-0.034,0.57-0.678,0.57-0.678l-0.737,0.129L980.491,180.013L980.491,180.013z M979.688,178.689l-0.167-1l-1.477-0.743 	l-0.603-0.611l-0.203,0.451l0.942,0.87L979.688,178.689L979.688,178.689z M982.065,174.368l0.469-0.872l-0.233-1.418 	l-1.708-1.031l-1.072-1.161l-0.938-0.097l-1.006-0.999l-0.975-0.517l-0.299-0.612l-1.173-0.839l-0.637-0.033l-0.505,0.387 	l0.068,0.485l-0.637,0.516l0.534,0.741l0.773,0.129l-0.169,0.419l-0.468,0.161l-0.671-0.548l-0.367,0.064l0.331,0.742 	l1.609,1.742l0.905,0.483l0.605,0.805l0.434,0.066l0.068-1l0.671,0.29l0.804-0.097l0.269,0.354l0.302,1.097l-0.169,0.387 	l0.536,0.517l1.207,0.192l0.469-0.613L982.065,174.368L982.065,174.368z M1004.182,136.349l0.353,0.064l-0.218-0.518 	l0.068-0.518l0.538-0.049l0.385,0.826l0.502-0.21l0.372,0.177l0.688-0.162l0.336-0.728l0.871-0.729l0.926-0.307l0.134-0.47 	l-0.47-0.938l-1.243-0.616l-0.169-0.696l-0.804-0.971l-0.538-0.307l-0.689,0.292l-0.82,0.761l-0.757,0.063l-0.923,0.762 	l0.05,0.68l0.604,0.84l0.135,0.842l-0.135,1.247L1004.182,136.349L1004.182,136.349z M1006.996,174.018 	c-0.017-0.009,0.203,0.387,0.203,0.387l0.646,0.203l0.521-0.639l-0.102-0.671l-0.455-0.478l-0.568,0.349v0.436L1006.996,174.018 	L1006.996,174.018z M1024.415,195.287l0.064,0.405l0.623,0.178l0.066,0.55l1.025,0.631l0.957-0.306l0.353-0.39l-0.353-0.841 	l-0.739-0.194l-0.722,0.194l-0.654-0.227H1024.415L1024.415,195.287z M1021.256,135.815l-0.185-0.875l-0.486-0.485l0.019-0.614 	l0.468-0.389l-0.301-0.599l-0.821-0.227l-0.706,0.356l-0.27,1.52l0.336,0.631l0.772,0.083l0.503,0.566L1021.256,135.815 	L1021.256,135.815z M1019.697,129.325l0.84-0.858l0.552,0.258l0.824-0.582l-0.184-0.484l0.149-0.486l0.504-0.276l-0.252-0.242 	l-0.689,0.065l-1.275,0.905l-0.504,1.02L1019.697,129.325L1019.697,129.325z M1023.742,130.361l0.939,0.792l1.211,0.178 	l0.62-0.145l-0.032-0.517l-1.326-0.179l-0.874-0.356L1023.742,130.361L1023.742,130.361z M1032.71,136.768l0.099,0.858 	l-0.604,0.809l-0.538,0.374l-0.149,0.825l0.451,0.566l0.504-0.083l0.925-0.777l0.586-0.274l0.639-1.004l0.737-0.324l0.807-1.003 	l-0.083-0.696l-0.455-0.242l-0.939-0.113l-1.361,0.355L1032.71,136.768L1032.71,136.768z M1036.059,128.602l-0.806,1.034 	l-0.235,1.417l-0.57,1.097l0.135,0.646l1.072,0.162l0.368,0.449l0.938,0.098l0.771,0.323l0.771-0.257l0.034-0.581l-0.737-1.291 	l-0.202-1.226l-1.071-0.903L1036.059,128.602L1036.059,128.602z M1029.686,113.643l-0.235-0.728l0.068-0.55l-0.654-0.259 	l-0.993,0.178l-0.218,0.42l0.487,0.309l0.186,0.662l0.737,0.34L1029.686,113.643L1029.686,113.643z M1032.473,102.444 	l-0.421-0.178l-0.385-0.421l0.084,1.683l0.606,0.211l0.485-0.406l0.371,0.259l0.101,0.939l0.451,0.501l0.083-0.889l-0.3-1.003 	l0.635-0.405v-0.5l-0.651-0.6v-0.565l-0.235-0.746l-0.657,0.389h-0.419l-0.301,0.372l0.689,0.696L1032.473,102.444 	L1032.473,102.444z M1031.014,97.138l-1.192-0.292l-0.32-0.534l-0.553-0.162l-0.404,0.372l0.135,0.566l1.074,0.453l0.908,0.049 	L1031.014,97.138L1031.014,97.138z M1031.163,96.231c-0.017,0.017,0.421,0.209,0.421,0.209l1.072-0.178l0.69,0.064l0.82-0.325 	l0.119-0.338l-1.427-0.211l-0.621-0.373l-0.571,0.161L1031.163,96.231L1031.163,96.231z M1041.69,117.771l0.723-1.003 	l-0.368-0.405l-0.79,0.048l-0.587,0.518l0.335,0.729L1041.69,117.771L1041.69,117.771z M1044.46,117.073l0.623-0.55l0.167-0.582 	l-0.989-0.163l-0.405,0.309l-0.721,0.275l0.336,0.405L1044.46,117.073L1044.46,117.073z M1048.589,117.657l0.423-0.291 	l-0.923-0.455l-1.143,0.421l0.353,0.26L1048.589,117.657L1048.589,117.657z M1055.273,115.601l0.385,1.118l0.472,0.242 	l0.419-0.486l-0.554-0.582L1055.273,115.601L1055.273,115.601z M1051.379,114.971l1.006-0.049l0.539-0.68l-0.806-0.275 	l-0.554,0.162l0.084,0.421L1051.379,114.971L1051.379,114.971z M1048.354,111.167l0.021-0.411l-0.518-0.048l-1.103,0.792 	l-0.01,0.503l0.866,0.363l0.22-0.315l-0.177-0.309l0.112-0.251L1048.354,111.167L1048.354,111.167z M1050.809,110.537 	l-0.184-0.552l-0.977-0.048l-0.27,0.405l0.167,0.761l0.673,0.032l0.489-0.306L1050.809,110.537L1050.809,110.537z 	 M1051.193,110.973l0.22,0.209l0.367-0.144l0.874-0.713l0.068-0.599l-0.438-0.501l-0.84,0.032l-0.101,0.648l0.149,0.518 	L1051.193,110.973L1051.193,110.973z M1048.391,108.287l0.688-0.86l-0.22-0.354l-0.601-0.162l-0.69,0.274l-0.771,0.178 	l0.047,0.244l1.145,0.34L1048.391,108.287L1048.391,108.287z M1052.771,106.2l0.404-0.179l-0.066-0.308l-0.353-0.503l0.72-0.144 	l0.05-0.373l-0.603-0.646l-1.111-0.146l-0.468,0.291l0.083,0.584l-0.252,0.063l-0.688-0.388l-0.27,0.177l0.455,0.761l0.52,0.324 	l0.907,0.032L1052.771,106.2L1052.771,106.2z M1049.431,67.682l0.438-0.096l-0.034-0.6l-0.641-0.258l-0.385,0.242 	L1049.431,67.682L1049.431,67.682z M1044.243,75.516l0.169,0.534l0.469,0.065l0.822-0.357l0.303-0.583l-0.085-1.182 	l-0.671-0.549l-0.586-0.047l-0.455,0.467l0.101,0.777L1044.243,75.516L1044.243,75.516z M1064.878,73.897l0.451,0.016 	l0.841-0.291l0.62-0.68l0.421-0.064l0.068,0.404l-0.286,0.486l0.957-0.632l0.806-0.89l0.066-0.777l0.521-0.339l-0.032-1.02 	l-0.32-0.291l-0.487,0.193l-0.318,0.421l-0.856,0.696l-1.125,0.551l-0.906,1.213L1064.878,73.897L1064.878,73.897z 	 M1073.995,74.577l1.007-0.196l0.47-0.646l-0.671-0.163l-0.756,0.308l-0.252,0.454L1073.995,74.577L1073.995,74.577z 	 M1075.439,76.568l0.402-0.017l0.385-0.21l0.186-0.502l-0.773-0.275l-0.402-0.665l-0.371-0.032l-0.064,0.388l0.47,0.518 	L1075.439,76.568L1075.439,76.568z M1067.378,78.671l0.974-0.34l-0.083-0.468l-0.604-0.422l-0.402,0.583l-1.006,0.355 	l0.266,0.373L1067.378,78.671L1067.378,78.671z M1071.996,78.817l0.401-0.438l0.084-0.696l-0.336-0.257l0.07-1.004h-0.556 	l-0.438,0.404l-0.252,0.696l-0.771,0.567l0.167,0.323l0.504-0.177l0.57-0.503l0.32,0.259L1071.996,78.817L1071.996,78.817z 	 M1072.397,83.284l0.688-0.129l0.49,0.419l0.854-0.016l0.587-0.209l0.944,0.129l0.703-0.161l0.335-0.584v-0.354l-0.286-0.083 	l0.171-0.42l-0.256-0.777l-0.737,0.031l-0.485,0.453l0.149,0.454l-0.335,0.178l-0.455-0.129l-0.318-0.404l-0.353-0.017 	l-0.403,0.534l-0.468,0.227l-0.688-0.098l-0.419,0.615L1072.397,83.284L1072.397,83.284z M988.887,56.823l0.939,0.163 	l0.671,0.565l0.491-0.016l1.306-0.583l0.119-0.485l-0.502-0.211l-1.211,0.292l-0.755-0.226l-0.553-0.372l-0.572,0.13 	l-0.169,0.468L988.887,56.823L988.887,56.823z M986.673,37.776l-0.335-0.389l0.031-0.647l1.174-0.956l1.546-0.095l1.293,0.323 	l0.401,0.891l-0.538,0.695l-1.156,0.339l-1.729-0.016C987.359,37.922,986.637,37.761,986.673,37.776L986.673,37.776z 	 M1015.599,23.421l0.875-0.889l0.521-0.76l1.342-0.113l1.124,0.291l-0.387,0.567l-0.115,0.614l-0.789,0.73l-1.127,0.225 	l-0.94-0.225L1015.599,23.421L1015.599,23.421z M1036.394,36.04l1.573-0.872l0.637-0.902l0.103-0.872l1.135-1.064l1.812-1.256 	l1.239-0.679l0.436-0.773l-0.101-0.936l-1.574-0.838l-1.408-1.29l-0.838-1.451l0.068-0.968l0.502-0.934l0.032-0.741 	l-0.434-0.258l-2.312,0.032l-1.745-0.517l-1.204-0.837l-1.876-2.194l-1.376-1.032l-1.542-0.742l-0.669-0.065l-0.256,0.406 	l-0.219,0.728l0.201,0.68l-0.034,1.215l-0.788,1.067l-0.822,1.343l-0.975,1.166l-0.151,0.905l0.159,3.553l0.637,0.903 	l0.834,0.481l0.115,0.874l-0.318,2.459l-0.47,0.955l-0.284,0.776l0.268,0.616l0.47-0.145l0.555-0.908l1.208-0.437l0.403,0.308 	l0.268,0.875l1.362,0.938h0.737l0.438-0.438l0.773,0.147l1.205,0.694l1.179,0.178L1036.394,36.04L1036.394,36.04z 	 M1032.086,42.26l0.068,0.386l0.854,0.486l0.975,0.08l0.925-0.662l1.056-0.89l0.641-0.34l0.401-1.23l0.538-1.328l-0.2-0.615 	l-1.968-1.003l-1.643-0.259l-1.412,0.276l-0.822,0.388l-0.854-0.342l-0.571,0.017l-0.824,0.647l-1.141,0.016l-0.27,0.243 	l0.353,0.599l1.158,0.242l0.472,0.745l0.973,0.453l0.587,0.875l1.176,0.405l1.713-0.048l0.621,0.21l-0.388,0.274l-1.306,0.356 	L1032.086,42.26L1032.086,42.26z M1063.604,44.988v0.727l-1.104,1.417l-1.344,0.356l-1.102,1.032l-0.875,0.646l-0.836,0.096 	l-0.94-0.742l-0.57-0.515l-0.872,0.096l-0.733-0.258l-0.939,0.258l-2.246-0.161l-1.173-0.645l-0.57-0.418l-1.271,0.418 	l-1.107,0.548l-0.838-0.225l-1.004-0.612l-1.141-0.129l-0.637-0.646l-0.604-1.71l-0.667-0.871l-0.607-0.096l-0.803,0.418 	l-0.804-0.613l-0.77-0.354l-0.235,0.453l0.235,0.645l-0.504,0.193l-0.336-0.354l-0.97-0.581l0.168-0.451l1.039-0.646 	l0.165-0.581l-0.368-1.386l0.235-0.839l1.104-0.935l-0.367-0.582h-0.604l-0.902-0.515l-0.103-0.742l0.469-1.387l0.805-0.708 	l1.241-0.291l0.099-0.708l0.402-0.646l1.175-0.451l1.507-0.967l0.369-1.066l0.369-0.257l1.776,0.161l1.239,0.87l1.573,2.033 	l0.403,0.87l-0.502,1.419l0.47,0.387l-0.269,0.806l-0.471,0.743l0.133,0.678l0.47-0.355l0.571-1.193l0.202-1.097l0.032-0.774 	l0.37-0.71l-0.101-0.581l-1.207-1.354l-0.169-0.614l0.169-0.58l1.572-0.226l1.778,0.193l2.85,2.321l0.469,0.099l0.504,0.354 	l0.066,1.031l0.77,0.484l0.234,1.226v1.194l1.374,1.353l1.007,1.323l-0.068,0.516l-0.872,0.032l-0.603-0.387l-0.534,0.032 	l0.133,1.064l1.04,0.678l1.237,0.193l1.105,1.175l0.671,0.193L1063.604,44.988L1063.604,44.988z M1233.719,19.978l0.438-1.709 	l1.271-1.225l0.302,0.259l0.067,0.772l0.3,0.355l-0.737,0.485l-0.566,0.677L1233.719,19.978L1233.719,19.978z M1243.74,35.297 	l0.401,1.646l1.609,1.998l0.468,0.872l3.184,1.063l2.381,0.227l1.641,0.742l1.573,0.064l1.211-0.387l1.372,0.419l0.838-0.322 	l1.81-1.096l0.37-1.161l0.703-0.968l-0.368-1.258l-0.804-0.323l-0.637,0.097l-0.269-0.676l0.065-0.517l-0.468-0.516 	l-0.773,0.451l-1.405-0.355l-2.246,0.42l-1.406,0.967l-0.94,0.225l-0.333-0.516l-0.233-0.742l-0.637,0.033l-1.042,0.225h-1.507 	l-0.705-0.258v0.742l-0.635,0.646l-1.712-0.387l-0.637-0.613l-0.1-0.613L1243.74,35.297L1243.74,35.297z M1207.848,50.681 	l-0.973-2.16l-0.234-1.097l-0.804-0.58l-1.645-0.13l-0.77-1.161l-0.804-0.613l-0.536-0.193l0.2,0.71l0.87,1.322l1.308,1.193 	l1.308,1.838l0.739,1.837l0.87,0.42l0.536-0.355L1207.848,50.681L1207.848,50.681z M1226.045,52.649l-0.608,0.082l-0.556-0.421 	l-0.083-0.647l0.216-0.471l0.508,0.325l0.385,0.55l0.891,0.308l0.368,0.631l-0.05,0.405l0.737-0.097l0.806-1.212l0.872-1.677 	l1.54-1.516l1.105-0.194l0.84-0.612l0.403,0.226l-0.371,0.646l0.939,0.127l0.703,0.388l0.737-0.388l0.034-0.774l1.408-0.709 	l0.737-0.773l-0.437-0.355l-1.207,0.096l-1.44,0.613l-1.239-0.774l-1.576-0.386l-0.501-0.615l-1.141-0.095l-0.167-0.454 	l-1.442-1.353l-0.736-0.42l-0.389-1.476l-0.167-0.695l-0.703-0.793l-0.203-0.922l-0.989-0.485v-0.438l0.521-0.227l-0.472-0.616 	l0.521-0.371l0.287-0.202l-0.05-0.659l-0.434-0.277l-0.773-0.515l-1.708,0.032l-1.104-0.257l-0.84-0.744h-1.006l-0.969-0.353 	l-0.305,0.257l1.409,1.194l0.737,0.193l0.402,0.485h-1.14l-0.301-0.194h-0.773l-0.502,0.677l0.236,1l0.535,0.936l0.301,1.257 	l1.477,1.419l0.3,0.581l-0.437,0.323l-1.07,0.161l-1.039-1.064l-0.47-1.29l-0.705-0.387l-0.937,0.226l-0.47,0.291l-0.369-0.291 	l-0.872-0.193l-0.066-0.935l-0.301-0.709l-0.938-0.128l-0.972-0.839l-1.339-0.128l-0.54-0.323l-0.401-0.806l-1.039,0.388 	l-0.738,0.578l0.067,1.323l-0.301,0.258l0.101,1.226l-0.336,1.064l-1.038,0.807l-0.101,0.548l1.139,1.548l0.604,0.064 	l0.637,0.484l-0.369,0.323l-0.603,0.096l0.169,0.902l0.703,0.196l0.401,0.805l-0.032,0.583l0.536,0.482l1.071,0.322l0.335,0.517 	l-0.201,0.355l0.435,0.418l0.438-0.225l0.637,0.098l0.368,0.483l-0.638,0.451l-0.301-0.193h-0.671l-0.268,0.484l0.334,0.806 	l2.784,1.807l1.506,0.581l1.34-0.13l0.804,0.614l0.84,0.548l0.302,0.87l0.871,0.776l1.273-0.034l1.408-0.483l1.207,0.098 	l0.902,0.547l0.84-0.161l0.403-0.806v-0.806l-0.536-1.031L1226.045,52.649L1226.045,52.649z M1226.496,35.247l1.356-0.014 	l1.477-0.065l0.973,0.129l2.245,1.097l1.071,0.096l0.804-0.193l2.213,0.26l2.347,0.676l0.032,0.452l-1.039,0.257l-0.601,0.646 	v0.902l0.937,1.033l1.106,0.29l0.04,1.122l0.182,0.68l-0.468,0.776l-0.218,1.198l-0.789,0.745l-0.318,0.599l-0.891-0.662 	l-0.504,0.048l-1.008,0.695l-0.975,0.047l-2.081-0.972l-1.108-0.969l-2.083-1.667l-0.301-1.215l0.269-0.792l0.084-0.825 	l0.234-0.47l-0.486-0.792l-0.52-0.307l-0.169-0.889l-0.57-0.276l-0.618-0.749L1226.496,35.247L1226.496,35.247z 	 M1071.782,58.422c-0.103,0,1.207-0.386,1.207-0.386l0.604-1.195l1.002-1.354l0.703-0.386l-0.166-0.549l0.137-0.742l2.043-1.321 	l0.769-0.129l0.538,0.451l0.67-0.096l0.436-0.838l0.401-0.678l1.039-0.356l1.509-1.161l0.234-0.74l0.635-0.42l0.806-1.741 	l-0.266-0.969l-1.207-1.385l-0.538-1.065l-0.066-0.806l-1.473-0.935l-0.905-0.097l-0.404,0.258l-0.701-0.419l-1.106-0.42 	l-1.139-1.063l-0.505-0.128l-0.234,0.388l-0.671-0.227l-0.235-0.645l-0.703-0.774l-0.601,0.033l-0.169,0.805l-0.436-0.063 	l-0.938-1.128l-0.538-0.355l-0.032,0.452l0.669,0.774l0.101,0.58l-0.637,0.483l0.066,0.838l-0.5-0.062l-0.37-0.614l-0.169-2.936 	l-0.936-0.388l-0.906-0.193l-1.207-0.549h-0.637l-0.536,0.71l0.2,0.838l0.94,0.581l0.669,0.806l-0.401,0.387l-0.735-0.064 	l-0.336-0.548l-0.637-0.484l-0.371,0.032l0.168,0.613l0.302,0.741l-0.268,0.258v1l0.469,0.484l0.705,0.16l0.369,0.518 	l-0.167,0.741l1.003,2.258l0.703,0.678h0.839l-0.57,0.516l-0.869,0.162l-0.469,1.516l0.804,1.581l0.334,1.161l-0.068,1.097 	l0.504,0.386l0.133,0.84l-0.332,0.482l0.601,1.322l0.505,1.387l0.804,0.709l-0.034,0.871L1071.782,58.422L1071.782,58.422z 	 M1089.746,48.521l0.77-0.678l0.034-0.419l-0.368-0.258l0.334-0.451l0.468-0.161l-0.235-0.516l-0.703,0.097l-0.666,0.837 	l0.096,0.485l-0.534,0.162l-0.169,0.709l0.471,0.355L1089.746,48.521L1089.746,48.521z M1090.917,48.587l0.438-0.646 	l1.205,0.129l0.534-0.872l0.806,0.034l0.301-0.26l0.637,0.161l0.37,1.033l-0.504,0.871l-0.636-0.547l-0.504,0.547l-1.239,0.163 	l-1.374-0.098L1090.917,48.587L1090.917,48.587z M1100.336,57.068v0.709l0.87,1.064l-0.199,0.354l0.099,0.389l0.872-0.357 	l0.303-0.935l-0.604-1.29l-0.938-0.128L1100.336,57.068L1100.336,57.068z M1187.005,84.141l0.453-0.259l0.169-1.004 	l-0.101-0.728l-1.241,0.551l-0.287,0.274l0.199,0.777l0.437,0.032L1187.005,84.141L1187.005,84.141z M1175.404,96.57h1.208 	l0.353-0.291l0.387,0.063l0.049-0.373l-0.588-0.565l-0.957-0.647l-0.72-0.048l-0.421,0.371l0.049,0.406l0.641,0.405 	C1175.404,95.891,1175.404,96.537,1175.404,96.57L1175.404,96.57z M1143.066,91.029l1.038,0.227l0.534,0.29l0.673-0.354 	l0.167-0.71l0.468-0.387v-0.547l-0.502-0.516l-0.034-1.516l-0.568-0.582l-0.436-0.935l-0.036-0.58l-0.703-0.162l-1.708,0.484 	l-1.643,0.967l-0.872,0.033l-0.233,0.418l0.27,0.936l0.77,0.452l0.202,0.741l-0.405,0.452l-0.87-0.064l-0.168,0.258l0.436,0.514 	l1.31,0.066L1143.066,91.029L1143.066,91.029z M1237.809,63.873l0.436-0.354l-0.203-0.324l0.336-0.869l0.504-0.743l-0.203-0.872 	l-1.237-1.225l-0.438-1.064l-0.669-0.129l-1.073,0.258l-0.871,0.839l0.099,0.772l0.637,0.968l-0.133,0.484l0.335,0.547 	l0.77,0.226l0.84,1.098L1237.809,63.873L1237.809,63.873z M1240.521,70.549l0.605-0.322l0.703-1.033l1.406-0.806l1.409,0.291 	l1.874,0.032l1.276-0.258l2.144,0.032l0.871-0.548l1.473-0.13l0.941,0.226l0.836-0.708l-0.836-0.679l-0.401-0.838l-1.106-1.387 	l-1.878-1.451l-1.241-0.098l-1.274-0.321l-0.901-0.872h-0.84l-0.601,0.388l-1.308-0.517h-0.703l-0.739,0.968l-1.038,1.42 	l0.301,0.967l-0.034,1.872l-0.603,2.127l-0.938,0.775l-0.067,0.774L1240.521,70.549L1240.521,70.549z M1218.338,66.131 	l0.335,0.805l0.534,0.678l0.973-0.032l0.871,0.645l1.073,0.098l0.938,0.838l0.57,0.032l0.066-0.613l-1.309-1.226l-0.97-0.323 	l-1.073-0.031l-1.141-0.969l-0.671-0.162L1218.338,66.131L1218.338,66.131z M1247.928,94.448l0.838,1.064l0.737,0.257 	l0.103-0.483l1.241-0.355l0.266-0.419l-0.336-0.58l-0.367-1l-0.372,0.16l-0.162,0.743l-0.876,0.58 	C1248.999,94.415,1247.996,94.512,1247.928,94.448L1247.928,94.448z M1351.83,86.699l0.335-0.034l0.184-0.711l-0.301-0.729 	l-0.471-0.048l-0.151,0.356L1351.83,86.699L1351.83,86.699z M1351.142,87.41l0.451,0.21l-0.05-0.68l-0.42-0.711l-0.586-0.016 	l-0.068,0.42L1351.142,87.41L1351.142,87.41z M1350.352,87.863l0.754,0.971l0.455,0.857l0.27-0.388l-0.336-1.167l-0.84-0.646 	l-0.369,0.015L1350.352,87.863L1350.352,87.863z M1348.001,87.312l0.505,0.938l0.587,0.391l0.27-0.487l0.267-0.113l-0.267-0.954 	l-0.556-0.276l-0.135,0.244L1348.001,87.312L1348.001,87.312z M1373.904,77.064l0.973,0.485l1.074-0.26l0.536-0.87l-0.169-0.967 	l-0.737-0.838l0.302-0.292l-0.369-0.838l-0.973-0.644l-0.199,0.387l-0.77-0.066l-0.839-0.417l-0.938-0.033l-0.137,0.387 	l-0.57,0.096l0.137,0.323l-0.701,0.065l-0.306,0.775l0.07,1.515l0.435,0.258l0.869-0.127l1.142,0.225L1373.904,77.064 	L1373.904,77.064z M1379.648,74.997l0.572-0.518l0.149-0.662l-0.806,0.226l-0.301,0.437L1379.648,74.997L1379.648,74.997z 	 M1386.039,315.083l-0.137-1l0.171-0.967l-0.404-0.838l-0.303-1.034l0.202-1.451l0.836-0.708l0.438,0.191v0.646l0.534,0.353 	l1.812-0.161l0.199-0.418l0.438-0.097l0.302,0.451l-0.235,0.323l0.066,0.679l0.972,0.999l0.133,0.806l0.539,0.547l0.031-0.613 	l-0.198-0.483l0.066-0.936v-1.031l-0.872-0.71l-0.233-1.193l-0.335-0.742l-0.673,0.324h-0.601l-1.273-0.774l-0.203-1.323 	l-0.601-1.032l-1.142-0.967l-0.703-0.163l-0.736-0.87l-0.404-1.548l-0.703-1.161l-0.335-1.097l0.032-1.451l-0.169-1.742 	l-0.566-0.903l0.218-1.504l-0.085-0.889l-0.654-1.133l0.438-0.582l0.169-0.665l-0.019-0.518l0.438-0.063l0.521,0.113 	l1.091-0.243l1.09,0.13l0.989,0.631l0.641,1.279l0.971,0.354l0.856,0.536l0.84,1.261l0.521,0.227l-0.45-1.149l-0.938-1.139 	l-1.342-0.936l-0.735-1.226l-0.806-1.097v-0.58l-0.534-0.452l-0.874-1.58l-0.401-1.034l-0.637-0.322l-0.133-0.87l-1.376-1.581 	l-1.273-2.193l-0.3-1.097l-1.645-2.097l-0.836-1.548l-0.671-0.451v-0.935l-0.534-0.839l-0.606-0.225l-0.032,0.387l-0.568-0.064 	l-0.203-0.355l0.203-0.742l-0.27-0.646l-0.871-0.515l-0.836-0.967l-0.473-1.227l-0.468-0.676l-0.135-0.967l0.235-0.71 	l0.203,0.161l-0.237-1.29l-0.201-1.452l-0.232-1l-0.942-0.387l-0.969-1.032l-0.1-0.58l-0.505-0.485v-0.452l0.402-0.097 	l0.872,0.838l0.869,1.227l-0.401-1.129l-1.071-1.548l-1.072-1.097h-0.403l-0.27-0.773l-1.874-1.452l-0.637-1l0.066-1.482 	l-0.535-0.583l-1.409-0.516l-0.636-1.256l-0.335-0.387l-0.334,0.451l0.334,0.387l0.034,0.646l-0.536,0.191l-0.671-0.451 	l-0.77,0.065l1.207,1.225l1.605,0.903l0.472,0.71l-0.137,1l0.437-0.387l0.536-0.065l0.234,0.613l-0.367,0.42l-0.637,0.258 	l0.167,0.58l0.705,0.032l0.232,0.904l-0.737,0.419l-0.703-0.129l-0.57-0.741l-0.603,0.548l-0.504,1.192l0.838,0.904l0.269,1.064 	l0.94,1.097l0.802,1.419l0.101,1.903l0.335,0.419l0.201,1.418l0.604,2.129l0.739,1.419l1.002,0.515l0.103,0.42l-0.438,0.289 	l2.281,2.163l0.77,0.258l1.072,1.515l0.302,1.485l-0.099,1.161l0.735,1.193v0.904l0.773,0.515l0.87,0.936l-0.27,0.258 	l0.101,0.679l1.038,1.578l0.235,1l0.47,1.227l0.135,1.646l0.334,0.579l-0.133,0.872l0.199,1.482l0.736,1.742l-0.198,0.645 	l0.133,1.194l0.905,0.773l1.712,2.064v0.87l0.701,1.226l-0.167,1.871l0.234,1.482l0.77,1.388l0.233,0.935l1.243,1.547 	l0.133,0.679l-0.27,1.419l-0.133,1.87l0.402,1.129l0.973,0.677l0.67,1.354L1386.039,315.083L1386.039,315.083z 	 M1338.582,251.719l0.302-0.113l0.117-0.439l0.284-0.29l0.423,0.113l0.586,0.63l0.758,0.21l0.518-0.501l0.269-0.518 	l-0.318-0.486l0.018-0.549l0.538-0.486l0.151-0.421l-0.756,0.018l-0.149,0.389l-0.508,0.307l-0.183-0.243l0.385-0.567 	l0.05-0.338l-0.252-0.195l-0.989,0.195l-0.637-0.324l-0.507,0.437l-0.252,0.809l-0.587,0.502v0.664L1338.582,251.719 	L1338.582,251.719z M1335.527,251.039l0.336-0.147v-0.225l0.284-0.309l0.538,0.324l0.318-0.225l-0.284-0.632l0.367-0.518 	l-0.202-0.55l-0.285,0.032l-0.521,0.566l-0.906,0.34l-0.034,0.729L1335.527,251.039L1335.527,251.039z M1341.872,254 	l0.187,0.227l0.538-0.388l0.198-0.552l-0.504-0.403l-0.133,0.21l0.086,0.323L1341.872,254L1341.872,254z M1340.898,252.948 	l-0.016,0.518l0.368,0.583l0.202-0.437l-0.049-0.663l-0.236-0.211L1340.898,252.948L1340.898,252.948z M1341.13,257.062 	l0.534-0.838l0.504-0.129l0.304-0.708l-0.203-0.259l0.235-0.548l-1.374,0.323l-0.771,1.032l0.103,0.646L1341.13,257.062 	L1341.13,257.062z M1376.762,204.722l0.419,0.048l0.639-0.907l0.05-0.63l-0.57,0.114l-0.471,0.679L1376.762,204.722 	L1376.762,204.722z M1433.645,199.01l0.302,0.113l-0.116-0.988l-0.436-0.841l0.282-0.422v-0.631l0.472-1.051l0.721-0.793 	l1.145-0.81l0.451-0.226l-0.252-0.971l-0.487-1.116l-1.072-1.182l-0.521-0.162l-0.487,0.486l-0.134,0.452l-0.385,0.244 	l-1.144,1.293l-0.454,0.195l-0.554,0.858l0.521-0.049l0.856-0.307l0.115,0.129l-0.267,0.794l0.318,1.424l0.486,0.663 	l0.066,1.004l-0.419,0.565l0.167,0.502L1433.645,199.01L1433.645,199.01z M1467.14,227.293l0.472,0.71l0.866,0.032l1.009,0.87 	l1.406,0.419l0.504,0.419l1.241-0.258l-0.372-0.323l-1.406-0.547l-0.604-0.485l-0.938-0.096l-0.635-0.743l-1.142-0.289 	L1467.14,227.293L1467.14,227.293z M1457.489,225.101l0.737,0.321l0.77-0.032l0.504,0.517l-0.066,0.321l0.902,1.098l0.673,0.127 	l0.77,0.84l0.436,0.063l0.402-0.193l0.872,0.839l1.004,0.128l0.201-0.355l-0.539-1l-0.968-0.323l-1.273-0.902l-0.336-0.839 	l-0.871-0.064l-0.838-1.226v-0.321l0.436-0.388l-0.972-0.098l-0.568,0.194h-0.638l-0.671,0.774L1457.489,225.101 	L1457.489,225.101z M1434.583,271.332h0.389l0.369-0.421l-0.186-0.776l-0.502-0.55l-0.658,0.501v0.566L1434.583,271.332 	L1434.583,271.332z M1429.705,270.155l-0.066,0.71l0.401,0.355l0.938-0.066l0.167-0.611l-0.906-0.71L1429.705,270.155 	L1429.705,270.155z M1432.286,277.627l0.335,0.049l0.016-1.02l0.135-0.697l0.756-0.372l0.536-0.81l-0.051-0.938l0.136-0.711 	l0.521-0.436l-0.286-0.875l-1.478-1.246l-0.201,0.711l0.135,1.57l-0.12,0.89l-0.788,0.275l-0.52,0.84l-0.574,0.049l-0.083,0.259 	l0.707,0.792v0.68l-0.536,0.292l0.218,0.274l0.839-0.047L1432.286,277.627L1432.286,277.627z M1431.414,283.121 	c-0.034-0.064,0.438-0.547,0.438-0.547l-0.438-0.872l-0.034-0.774l-0.265-0.128v0.807l-0.302,0.87L1431.414,283.121 	L1431.414,283.121z M1431.629,284.862l0.438-0.195l-0.152-0.549l-0.67-0.244l-0.27,0.178l0.169,0.388L1431.629,284.862 	L1431.629,284.862z M1429.969,286.14l0.252-0.113l-0.169-0.291l-0.353-0.114l-0.186,0.389L1429.969,286.14L1429.969,286.14z 	 M1430.607,288.228l0.333-0.21l0.353-0.438l0.051-0.792l-0.284-0.339l-0.271,0.664L1430.607,288.228L1430.607,288.228z 	 M1429.369,293.7l0.37-0.258l-0.437-0.289l-0.301,0.16L1429.369,293.7L1429.369,293.7z M1429.103,296.861l0.267-0.677 	l-0.199-0.485l-0.301,0.419L1429.103,296.861L1429.103,296.861z M1428.869,297.539l0.167,0.547l0.301-0.516L1428.869,297.539 	L1428.869,297.539z M1428.021,299.086l0.102,0.324l0.419,0.128l0.116-0.468l-0.451-0.194L1428.021,299.086L1428.021,299.086z 	 M1427.266,302.873l0.349-0.485l0.137-1.473l-0.318-0.064l-0.101,0.759l-0.389,1.149L1427.266,302.873L1427.266,302.873z 	 M1419.221,313.037l0.491,0.162l0.987-0.938l0.673-1.069l0.585-0.42l0.036-0.89l0.284-0.972l0.957-1.246l-0.454,0.242 	l-0.953,0.162l-0.455,0.906l-0.372,0.325l-0.265,0.809l-0.353,0.372l-0.169,0.534l-0.689,0.711L1419.221,313.037 	L1419.221,313.037z M1410.526,322.892l0.454-0.177l0.266-0.957l0.641-0.549l-0.137-1.15l0.437-0.404l0.053-0.468l0.436-0.341 	l0.487,0.211l0.637-0.584l0.688-1.326l0.906-1.068l1.043-0.097l0.722-0.437l-0.064-0.906l-0.306-0.874l-0.587,0.161 	l-0.989,1.085l-0.203,0.695l-0.57,0.048l-0.655,0.437l-0.487-0.176l-0.318-0.681l-0.22,0.097l-0.318,0.76l0.288,0.486 	l-0.354,0.599l-0.554,0.907l-0.403-0.017l0.066,0.501l-0.249,0.875l-0.742,0.389l-0.101,0.518l0.438,0.452l-0.371,0.309 	l-0.167,0.695L1410.526,322.892L1410.526,322.892z M1406.683,328.823c-0.034-0.098,0.032-1.258,0.032-1.258l0.401-2.129 	l0.404-0.191l1.139-1.034l0.201-0.967h-0.268l-0.671,0.161l-0.504-0.161l-0.468-0.419l-0.268,0.323l-0.167,1.063l-0.236,0.937 	l-0.165,1.322l-0.472,0.87l0.2,0.549L1406.683,328.823L1406.683,328.823z M876.125,257.023c-0.034,0-0.335,0.793-0.335,0.793 	l0.923,0.469l0.301-0.453L876.125,257.023z",
"M1138.239,315.193l1.308,0.017l0.939,0.323l0.808,0.017 l40.962,1.171l72.898-7.624l8.996-9.042l1.877-0.593l0.653,0.098l0.149,0.309l0.84-0.147l1.358,0.179l0.671,0.55l0.523-0.081 l2.216-2.022l1.056-0.711l1.663-0.276l0.725-0.679l0.267-0.859l-0.184-0.921l-0.353-0.209l-0.369,0.258l-0.338-0.258 l-0.468-0.083l-0.083-1.246l0.252-0.373l-0.02-1.295l-0.335-0.792l0.168-0.518l0.554-0.292l0.101-0.842l-0.552-0.551l-0.14-0.976 l0.168-0.483l-0.472-0.741l0.066-0.741l0.538-0.904l0.568-0.451l0.201-1.033l0.604-0.871l0.57-0.418l0.066-1.065l-0.202-0.547 v-0.679l-0.669-0.483l-0.37-0.839l-0.671-1.064l-0.566-0.129l-0.639,0.259l-1.038,0.613l-0.473-0.066l-0.299-0.355v-1.096 l0.299-0.387v-0.451l0.372-0.451l0.265-0.839l0.673-0.774v-0.549l0.503-0.417l1.207-0.129l0.57-0.193l0.601-0.032l0.169-0.164 l0.671,0.066l0.703-0.29l0.367-0.678h0.804l0.536-0.581l1.009,0.162l0.568-0.096l0.972,0.031l0.402-0.354h0.367l0.27-0.678 l1.34-0.162l0.234-0.127l0.538,0.127l0.736,0.065l0.635,0.451l1.476,0.129l0.603,0.483l0.167,0.388h1.075l0.603-0.194 l0.303,0.292l0.836,0.387l0.371-0.162l-0.067-0.549l0.434-0.257l0.403,0.16h0.671l0.336-0.154l0.478,0.51l0.472-0.054 l0.601,0.225l0.286,0.406l-0.115,0.468l0.151,0.454l0.518,0.017l0.22,0.339l0.468-0.356l0.641,0.113l0.151,0.421l-0.252,0.437 l0.217,0.388l0.771,0.21l0.456-0.064l0.32,0.292l0.016,0.42l0.452,0.242l0.318,0.518l0.054,0.615l0.233,0.534v0.437l0.186,0.291 l1.188,0.066l0.137,0.501l-0.267,0.598l0.101,0.486l1.055,0.616l0.389,0.743l0.568,0.696l0.169,0.648l0.472,0.227l0.302,0.743 l0.587,0.421l-0.031,0.387l-0.137,0.503l0.269,0.145l0.455-0.209l0.437,0.696l0.115,0.55l0.889,1.149l1.678,1.032l0.299,0.839 l0.169,0.902l0.335,0.291l0.066,0.903l0.538,0.291l0.501,0.096l0.202,0.775l-0.103,0.614l0.505,0.869l1.038,1.032l0.771,0.257 l0.336,0.581l0.604,0.098l0.468-0.162l0.468,0.259l0.368-0.195l0.972,0.129l0.505-0.386h0.637v0.225l-0.368,0.387l0.302,0.258 l1.038,0.098l0.468,0.226l0.302,0.354l0.57,0.355l0.133-0.355l0.462-0.176l0.489,0.13l0.186-0.534l0.469-0.064l0.354,0.323 l0.186,0.502l0.484,0.533l0.503,0.065l0.136,0.438l0.487,0.389l0.252-0.018l0.419,0.421l0.119,0.438l1.007,0.437l0.235,0.21 l0.453,0.049l0.47,0.355l0.635,0.114l0.491-0.146l0.551-0.049l0.485-0.355l0.371-0.08l0.354,0.161l-0.102,0.582l-0.402,0.55 l0.034,0.615l0.085,0.519l0.77-0.049l0.184,0.794l0.287,0.729l-0.15,0.84l-0.22,0.26v0.646l0.891,1.068l0.401,0.244l0.739,0.904 l0.237,0.454l0.72-0.195l0.624-0.436l0.652,0.015l0.42,0.584l0.235,0.597l0.572-0.21l0.385-0.372l0.653,0.162l0.455-0.162 l1.308-0.228l0.59-0.516l0.487-0.211l-0.066-0.484l0.218-0.826l0.604-0.307v-0.711l0.284-0.648l0.589-0.081h0.94l0.25-0.906 l0.487-0.097l0.47-0.147l0.118-0.679l0.521-0.438l0.755-0.096l0.47-0.454l0.879,0.321l0.505,0.387l0.769,0.032l0.27,0.484 l0.468,0.808l-0.468,0.418l0.167,0.452l0.773,0.807l0.098,0.645l0.437,0.452l0.57,0.323l-0.203,0.935l-0.03,0.774l-0.186,0.35 l-0.707,0.13l-0.635,0.744v0.404l0.4,0.55l0.218,0.227l-0.066,0.746l-0.27,0.647l0.286,0.403l0.419,0.274l-0.047,0.503 l0.198,0.307l0.034,0.34l-0.202,0.194l-0.3,0.114l0.064,1.052l0.354,0.922l0.252,0.469v0.357l-0.455,0.323l-0.186,0.6 l0.305,0.469v0.502l0.233,0.42l-0.635,0.306l-0.137,0.261l0.268,0.452l0.151,0.695l-0.299,0.324l-0.406,0.891l0.118,0.501 l0.168,0.47l-0.168,0.34l0.066,0.469l0.286,0.501l0.119,0.664l-0.371,0.438h-0.52l-0.451-0.139l-2.964-0.514l-0.582-0.223 l-0.747-0.188l-0.357,0.089l-0.859,1.271l-0.191,0.607l-0.445,0.566l-0.538,0.049l-0.57,0.356l-0.202,0.404l0.335,0.744 l1.096,1.635l0.216,0.664l0.301,0.55l0.605,0.761l-0.032,0.809l0.099,1.085l0.1,0.744v1.538l0.539,0.389l0.065,0.792l0.034,0.81 l-0.232,0.42l-0.036,0.599l0.134,0.452l-0.017,0.777l-0.318,0.081l-1.108-0.113l-0.536,0.309l-0.052,0.339l0.163,0.775 l0.349,0.219v0.51l-0.191,0.468l-4.027,3.07l-1.209,6.848l-13.56,9.173l-2.274,1.018l-0.111,0.01l-0.34-0.831l-1.336,1.489 l-1.021,0.066l-0.528,0.169l-0.491-0.405l-1.231,0.846h-1.058l-0.177,0.914l-0.597-0.067l-2.039,1.49l-1.16,0.846l0.385,0.88 l-0.138,0.357l-1.317,0.547l-0.747,1.091l-0.55-0.016l-0.555,0.696l-0.582,0.089l-0.119-0.717l-0.731-0.473l0.381-0.676 l0.762-0.047l0.476-0.619l1.05,0.13l0.385-0.26l0.104-0.507l-0.527-0.103l-0.105-0.439l0.879-0.577l0.421-0.812l-1.09,0.812 l-1.02,0.339l-0.423-0.475v-0.542l0.387-0.168l0.072-0.61l-1.021-0.981l0.21-1.152l-0.104-0.338l0.879-0.034l0.104-1.116 l0.987-1.219l0.212-0.611l0.562-0.305l-0.108-0.745l-2.075-1.184l-1.44-1.66l-0.318,0.88h-0.808l-0.422-0.271l-1.056,0.035 l-0.598,0.981l-0.387,0.203l-0.176,1.015l-0.949,1.017l-0.108,1.76l-0.491,0.103l-0.736,1.217l-0.987,0.034l-1.653,0.88 l-0.492,2.268l-0.353,0.509l0.28,0.236l0.176,1.083h-0.667l0.281,0.441l-0.457,0.947l-1.196,0.034l-1.512,0.035l-1.761-0.61 l-0.104,0.508l-0.564,0.405l-0.103,0.916l-0.142,0.474l0.033,0.44l-0.42,0.372l0.492,1.049l0.104,0.981l0.983,0.543l1.549,1.017 l0.176,0.541l0.703,1.152l0.034-0.407l0.318,0.473l0.389-0.542h0.526l0.07,0.441l0.495-0.271l1.229-0.035l0.211,0.847v1.219 l1.268,2.371l1.229,0.034l0.88-0.508l0.913,0.338l0.425-0.372l0.492-0.847l-0.422-0.541l-0.211-0.136l1.265-0.474l0.635-0.509 v-0.812l-0.385-0.304l1.122-0.034l2.111-0.948l0.282,0.372l0.526,0.203l0.529,0.78l0.561,0.236l0.599,0.506l2.955-0.101 l0.388-0.405l1.019-0.034l-0.068,0.373l1.302-0.034l1.09-0.204l0.599,0.273l-1.021,0.303l-0.068,0.508l0.771,1.049h-0.491 l-0.599,0.304l0.106,0.948l0.737,0.135v0.407l-1.158,0.948l-1.128-0.745l-0.104-0.474l-0.421,0.506l-0.354-0.542l-0.985,1.254 h-0.597l-0.846,0.677l-0.846-0.034l-0.206,0.542l-0.777-0.576l-1.056,0.135l1.056,0.644l0.104,0.711l-1.16,0.204l-0.035,0.948 l-1.404-0.068l-0.739,0.778l0.421,0.541l0.879,0.508l-0.846,0.948l-0.454-0.271l-0.846,1.321l-0.667,0.203l-0.32-0.203 l-0.244,1.287l0.387,1.016l-0.387,1.524l0.034,2.235l0.353-0.035l2.392,1.085v0.642l0.671-0.372l2.565,1.253l1.406,2.81 l0.318,0.068l-0.456,1.049l0.915,0.305l0.103,1.32l1.725,1.22l0.035,1.319l1.232,1.693l0.915,0.373l0.948-0.067l0.492,0.373 v0.336l1.092,1.287l0.599,0.237l0.667,1.288l-0.524,0.305l-1.903-0.679l-1.336,0.745l-0.913-0.914l-0.705-0.035l-1.021-0.677 l-1.475-0.204l-0.599,0.779h-0.916l-0.599-0.474l-0.561-1.354l-1.233,0.474l-0.703-0.271l-0.245,0.271h-0.599l-0.562-0.169 l-0.844,0.406l-1.092,2.031l1.302-1.523l1.021-0.338l1.197,0.136l1.054-0.406l0.491,0.203l0.037,0.472l1.194,1.051l0.739,0.17 l1.512-1.017l0.916,0.034l1.866,1.761l1.547,0.847l2.392,1.422l1.126,1.76l-0.036,0.643l-1.268,0.137l-1.088,1.218l-0.563-0.067 l-0.458,0.406l-0.068,0.778l-0.812,0.373l-1.124-0.542l-0.635,0.44l-0.595-0.034l-1.058,0.845l-0.106,1.05l0.284-0.777 l0.948-0.746l0.949-0.203l0.949,1.32l0.741,0.238l1.44-1.185l1.092,0.167l1.512,1.861l0.247-0.405l0.387,0.474h0.915l0.138,0.272 l-2.074,1.862l-1.267,0.236v0.813l0.633,0.101l1.198-0.981l0.985,0.202v-0.405l-0.179-0.237l0.565-0.542l0.492,0.304l0.127,1.327 l0.281,0.557l-0.58,0.439l-0.052-0.32l-0.561-0.289l-0.125,0.458l-0.28,0.203l-0.895-0.219l-0.98,0.811l-0.091,0.404l1.529-0.068 l0.508,0.456l-0.123,0.373l-0.316-0.068l-0.631,0.557l0.58,0.286l0.419,0.439l-0.523,0.473l-0.635-0.118l-0.385,0.303 l0.403,0.373l0.876,0.066l0.51,0.827l-0.648,0.405l-0.176,0.895l-0.247-0.321l-0.155-0.725l-0.756,0.101l-0.701,1.588 l-0.524,0.403l-1.283-0.387l0.896,0.491v0.474l0.352,0.542l-0.528,0.34l-0.068,0.608l0.385,0.508l-0.316,0.338l0.036,0.778 l-0.773,0.373l-0.633-0.644l-0.212,0.779l0.703,0.068l0.633,0.743l-1.056-0.067l-0.068,0.542l-1.162,1.184h-0.599l0.07-0.88 l-0.493,0.069l-0.28-0.069l-0.176,0.746l-0.599-0.136l0.388,0.474l-0.492,0.406l0.737,0.067l0.635,0.813h-0.984l1.122,0.947 l0.565-0.508l0.49,0.508l-1.535,0.65l-0.964,0.642l-0.159,0.692l0.351-0.338l0.72-0.05l0.527,0.506l-1.071,0.861l0.77,0.237 l-0.115,0.592l-0.632,0.171l0.179,0.506h0.453l0.353,0.645l-0.068,1.083l-0.493-0.744h-0.491v-0.61l-0.706-0.61l-0.315,0.543 h-0.492l-0.072,0.71l0.81,0.575l-0.034,0.744l-0.318-0.438h-0.457l-0.351-0.441l-0.669,0.171l0.493,0.371l0.142,0.813h0.631 l0.108,0.237l-0.528,0.608l-0.951-0.645l-0.139,0.577l0.314,0.439l0.775,0.237l-0.353,0.948l-1.269-0.745l-0.49,0.44 l-0.351-0.338l-0.705,0.948l-1.55,0.066l1.163,0.846l0.669-0.235l0.808,0.167l-0.349,0.712l-0.531,0.068l-0.14,0.915l-0.529-0.61 l-0.561,0.812l-0.28,0.169l-0.072-0.371l-0.423,0.031l-0.138,0.712h-0.459l-0.211,1.05h-0.879l-0.108-0.406l-1.159,0.17 l-0.314,0.474l-0.459-0.136l0.423,0.915l-0.318,0.946l-0.387,0.542l0.353,0.576l-0.775,0.338l-0.492-0.135l-0.315,0.407 l-0.107-0.509l-0.419,0.372l-0.564,0.541l-1.056,0.136l-0.104,0.441h-0.777l-0.068-0.272h-0.492l-0.141,0.779l-0.459,0.373 l-0.703-0.745l-0.352-0.541l-0.211,0.44l-0.739,0.169l-0.069,0.608l-0.739,0.171l-0.737-0.407l-0.423,0.371l-0.844,0.271 l-0.105,0.88l-1.653,0.779l-0.105-0.372l0.599-0.271l0.457-0.644l-0.61,0.153l-0.949-0.894l-0.141-0.573l-1.158-0.56 l-0.454-0.387l0.21,0.489l-0.07,0.643l0.209,0.793l0.159,1.078l-0.737,0.373l-0.421,0.675l-0.439,0.321l-0.385-0.305 l-0.245-0.219l-0.089,0.354l-0.595,0.776l-0.896,0.847l-1.016,0.489l-0.544,0.15l-0.912-0.304l-0.895,0.254l-0.788-0.017 l0.349,0.59l-1.001,0.523l-0.839,0.286l-0.757-0.27l-0.349,0.657l-0.897,0.137l-0.489,0.487l-0.246-0.031l0.194-0.236 l-0.422-0.069l-0.054-0.2l0.159-0.137h-0.248l-0.208-0.338l-0.089-0.236l-0.315,0.32l-0.228,0.034l0.141,0.473l-0.157,0.59 l-0.652,0.508l-0.206,0.354l0.351,0.827h0.542l0.492,0.896v0.254l0.368,0.067l0.229,0.402l-0.808,0.98h-0.528l-0.018-0.253 l-1.018-0.187l-0.367,0.609l-0.193,0.184l-0.139-0.96l0.034-0.423l-0.669-0.388l-1.12-1.487l0.017-0.523l0.65-0.791l0.155-0.776 l0.687-0.087l-0.054-0.304l-0.49-0.204l-0.665,0.204l-0.67-0.59l-0.472,0.777l-0.633-0.051l-0.489,0.151l-1.145-0.912 l-0.453,0.15l-0.859-0.843l-0.457-0.812l-0.211,0.881l0.036,0.47l-0.754,0.304l-0.562-0.233l-0.351,0.184l-0.297-0.066 l0.017,0.033l-0.214-0.126l-0.56-0.026l-4.518,0.398l-9.853-3.74l-16.079,7.839l-11.814-3.619l-27.161-19.361l-58.02-5.171 l-30.62-27.656l-58.821-24.299l4.835-47.82l38.676-20.162l44.657-9.014L1138.239,315.193L1138.239,315.193z M1304.199,458.264 l0.133,0.421l0.82,0.031l0.322-0.257l-0.574-0.534L1304.199,458.264L1304.199,458.264z M1314.118,446.671l0.202,0.999 l0.469-0.161l0.034-0.646l-0.336-0.354L1314.118,446.671L1314.118,446.671z M1321.321,420.897l0.218,0.615l0.924,0.275 l0.657,0.436l0.017-0.729l-0.891-0.516l-0.538,0.064L1321.321,420.897L1321.321,420.897z M1316.252,412.126l-0.101,0.356 l0.554,0.55l0.989,0.016l0.993,0.42l-0.119-0.954l-0.773,0.049l-0.419-0.26L1316.252,412.126L1316.252,412.126z  M1321.941,466.222l0.669-0.226l0.671,0.226l-0.203-0.902l0.235-1.065l-0.468-1.323l0.771-0.999l1.173-1.71l0.031-1.095 l0.335-0.324l-0.434-0.162l0.267-1.708l0.103-1.192l-0.201-1.291l0.501-0.936l0.236-2.32l0.302-1.194l0.335-0.066l-0.168-0.773 l-0.804-0.582h-0.304l-0.5-0.999l-1.039-0.355l-0.604,0.322l0.1,0.614l-0.839,0.29l-1.005,1.097l-0.937,1.548l0.233,0.419 l-0.167,0.612l-0.403,0.355l-1.006,1.71l-0.505,1.773l-0.331,0.258l0.301,0.419l0.03,1.743l0.137,1.805l0.468,0.29l0.135,0.517 l-0.199,0.065l-0.035,0.547l0.504,0.742l0.502,0.13l0.135,0.579l1.308,0.42l0.671,0.968l-0.07,1.031L1321.941,466.222 L1321.941,466.222z M1275.042,471.122l0.403,0.438l0.639-0.048l0.908,0.161V471.3l-0.838-0.339L1275.042,471.122 L1275.042,471.122z M1275.193,475.647l-0.941,0.194l-0.489-0.13l-0.653,0.421h-0.859l-0.915,0.442l-0.838,0.127l-0.2,0.838 l-1.408,0.809l-1.209,1.225l0.438,0.71l0.032,1.677l0.538,0.872l-0.068,0.515l0.838,0.71h0.973l0.637,0.484l0.671-0.033 l0.837,0.548l0.568-0.288l0.235-0.809l0.739-0.128l0.77,0.192l0.57-0.71l0.064-0.515l0.872-0.162l0.671-0.677l-0.167-0.774 l0.468-1.386l0.473-0.354l0.198-0.646l0.705-1.098l-0.403-1.161l-0.973-0.612l-1.004-0.354l-0.671,0.451 C1275.69,476.025,1275.156,475.669,1275.193,475.647z ",
"M854.897,70.988c0.084-0.065,0.521-0.55,0.521-0.55l0.907-0.242 l0.69-0.502l0.804-0.938l0.905-0.486l0.84,0.018l0.256,0.323l-0.087,0.405l-1.31,0.89l-0.671,0.325l-1.192,1.002l-1.023,0.259 l-0.421-0.145L854.897,70.988L854.897,70.988z M843.165,71.781l0.468,0.809l0.538,0.018l0.389-0.437l-0.305-0.696l-0.604-0.356 l-0.37,0.21L843.165,71.781L843.165,71.781z M820.904,64.984l1.475,1.101l0.673,0.146l0.389-0.275l0.401-0.614l-0.421-0.357 l-0.957,0.147l-0.991-0.552l-0.705-0.225l-0.216,0.306L820.904,64.984L820.904,64.984z M816.494,72.608l-0.754-0.461 l-0.146-0.446l0.146-0.533l0.561-0.405l0.473,0.177l0.441,0.722l-0.066,0.478l-0.353,0.395L816.494,72.608L816.494,72.608z  M820.745,79.485c0.04,0,0.375-0.065,0.375-0.065l1.025-0.712l0.536-0.195l1.646-0.145l1.294,0.048l0.703-0.485l0.506-0.063 l0.385,0.258l0.018,0.373l-0.304,0.323l-0.301,0.518l-0.502,0.275l-0.977-0.211l-1.092,0.033l-0.839-0.178l-0.201,0.323 l0.387,0.275l1.378,0.339l0.468,0.34v0.405l-0.451,0.049l-0.957-0.356l-0.235,0.307l-0.506,0.032l-0.905-0.662l-0.889-0.161 l-1.144,0.323l0.101,0.468l0.554,0.291l1.664,1.424l0.536,0.129l0.758-0.389l0.469,0.147l0.384,0.855v0.697l0.639,0.194 l0.859-0.26l1.256-0.085l1.277-0.479l0.923-0.015l1.192-0.235l0.089,0.47l-0.149,0.752l0.202,0.842l0.967,0.68l1.029,0.113 l1.386-0.397l0.295-0.421l-0.107-0.379l-0.068-0.488l0.354-0.582l0.838-0.794l0.57-0.113l0.587,0.486l0.724,0.436l0.857-0.015 l0.972-0.68l0.286-0.405l-0.202-1.183l-0.219-0.694l0.505-0.55l0.653-0.583l0.69-1.392l0.585-0.745l0.977-1.1l0.25-0.713 l-0.034-0.645l-0.3-0.729l-0.119-0.648l0.27-0.484l0.049-0.502l-0.318-0.209l-1.259-0.049l-0.736-0.616l-0.489-0.097 l-1.577,0.114l-0.856-0.129l-0.655-0.405l-0.825,0.05l-0.653-0.389l-0.101-0.404l-0.302-0.26l-0.771,0.485l-0.052-0.389 l0.082-0.614l-0.099-0.469l-0.52,0.372l-0.268,0.747l-0.401,0.193l-0.169-1l-0.198-0.096l-0.406,0.418l0.203,0.322l-0.169,0.421 l-0.57,0.612v0.772l-0.167,0.581l-0.637-0.289l-0.301-0.517l-0.233-0.064v0.517l-0.201,0.514l-0.269-0.482l-0.066-0.646 l0.234-0.935v-1.387l-0.168-0.614l-0.94-0.515l-0.434-0.613l-0.302,0.063l-0.167,0.58l0.503,0.518l0.234,0.549l-0.671-0.162 l-0.367-0.452l-0.402,0.291l0.066,0.87l0.669,0.71l0.066,0.837l-0.166,0.775l0.031,1.032l0.505,1.226l-0.302,0.741h-0.365 l-0.306-0.838l-0.804-0.677l-0.837-0.484l-0.137-0.579l0.371-0.613v-0.421l-0.538-0.289l-0.836,0.484l-0.367-0.065l-0.235,0.323 l-0.737,0.484l-0.637-0.29l0.032-0.452l-0.103-0.388l-0.5,0.097l-0.538-0.709l-0.266-0.808l-0.637-0.259l-0.371,0.163 l-0.534-0.547l0.202-0.679l-0.305-0.74l-0.366-0.162l-0.47,0.514l-0.135,1.228l0.167,0.935l0.538,0.935l0.266,1.162l-0.402,0.226 l-0.534-0.58l-0.268-0.775l-0.303-0.291l-0.103,0.743l0.203,0.967l0.47,0.646l-0.068,0.644l-0.232,0.646l-0.302-0.162 l-0.401-1.031l-0.336-0.387l-1.609,0.193l-0.637-0.452l-0.401,0.452l0.335,0.87l0.604-0.063l0.502,0.483l-0.302,0.484 l0.235,0.321h0.806l0.232,0.324l-1.241,0.774l-0.066,0.483l0.973,1.452l0.671,0.257l0.802,0.484l1.139,0.064l0.739-0.289 L820.745,79.485L820.745,79.485z M846.976,89.469l0.705-1.295l0.854-0.566h0.507l0.603-0.372l0.25,0.468l1.328,0.161l0.588-0.064 l-0.27,0.616l-0.803,0.421l-1.094-0.583h-0.603l-0.455,0.323l-0.485,0.018l-0.773,0.921L846.976,89.469L846.976,89.469z  M843.466,92.366l-0.068-0.68l-0.468-0.745v-0.743l0.252-0.227l0.252-0.373l0.27,0.082l0.182,1.004l0.688,0.597l-0.014,0.487 l-0.641,0.728L843.466,92.366L843.466,92.366z M826.912,99.902l0.434-0.904l0.838-0.71l1.808-0.388L831,97.805l1.171-0.968 L833.48,96l0.336,1l0.733,1.064l-0.064,0.451l-0.705,0.194l-0.3,0.419l0.199,1.097l1.072,1.097l1.071,0.645l0.606-0.517 l1.072-0.549l0.77,0.389l0.402,0.483l0.871,0.386l-0.335,0.323l-1.005,0.389l-0.84,1.289l-0.132,0.807l-0.603,1.806l-0.737,0.193 l-0.84,0.483l-0.468,0.678v0.741l-0.703,0.55l-0.537-0.033l-0.303-0.743l0.502-0.676l-0.167-1.032l0.402-1.29v-0.936l-0.402,0.29 l-0.667-0.13l-0.474,0.323l-0.534,1.032l-0.603,0.485l-0.671-0.034l-0.87,0.807l-0.872,0.096l-0.773,0.388l-0.367-0.067 l-0.101-0.676l0.27-0.45l-0.101-0.807l0.671-0.483l0.201-1.323l0.669-1.161l0.032-0.872l0.202-0.547l-0.168-0.484h-0.804 l-0.737-0.743L826.912,99.902L826.912,99.902z M822.641,86.913l0.26,0.841l0.553,0.64l0.813,0.048l0.824-0.242l0.006-0.793 l-0.534-0.6l-1.63-0.331l-0.292,0.154V86.913L822.641,86.913z M824.327,94.809l0.79,0.389l0.94,0.016l0.367,0.76l0.306,0.469 l-0.086,0.485l0.438,0.275l-0.406,0.694l0.59-0.095l0.47,0.194l0.353-0.356l1.225-0.712l0.604,0.018l0.587-0.502l-0.132-0.486 l0.132-1.133l0.538-0.339l0.318-0.729l-0.335-0.694l-0.724-0.098l-0.314-0.501l-0.34-0.146l-0.438,0.389l-1.342,0.599 l-0.115-0.454l-0.406-0.176l-0.653,0.435l-0.101,0.503l-0.385,0.307l-0.722-0.146l-0.52,0.63L824.327,94.809L824.327,94.809z  M798.591,98.87l-0.453-1.099l-0.318-0.162l-0.318-0.843l-0.84-0.631l-0.69-0.099l-0.453-0.678l-0.103-1.474l-0.402-0.823 l-0.521-0.649l-0.083-1.099l0.353-0.47l0.455,0.146l0.906,1.037l0.049,0.84l-0.116,0.907l0.703,1.019l0.504,0.438h0.335 l0.135,0.259l0.354,0.049l0.318,0.89l0.737,1.148l0.269,0.843l-0.118,0.55l-0.434,0.129 C798.862,99.097,798.523,98.887,798.591,98.87L798.591,98.87z M815.952,119.09l-0.502-0.516l-0.356,0.12l-0.252,0.404 l-0.318,0.065l-0.153-0.646l0.083-1.167l-0.318-0.436l-0.451-0.227l-1.451-1.37v-0.451l0.806-0.613l0.399-0.031l0.338-0.357 l0.1-0.547l-0.303-0.194l-0.5,0.065l-0.302-0.355h-0.37l-0.337,0.646l-0.969,0.322l-1.006-0.773l-0.036-0.645l-0.332-0.13 l-0.504-0.581l-0.57-0.146l-0.233,0.017l-0.438-0.487l-0.034-0.436l-0.536-0.502l-0.32,0.05l-0.135-0.26l-0.066-0.583 l-0.653-0.388l-0.119-0.325l0.035-0.353l-0.186-0.1l0.201-0.55l-0.032-0.453l-0.472-0.535l0.017-0.259l1.092-0.712l0.472,0.032 l0.502,0.729l0.385,0.308h0.237l0.252-0.372l0.806,0.194l0.401,0.227l0.707-0.114l1.575-0.113l0.07-0.42l-0.858-0.582 l-0.739,0.048l-1.223-0.195l-0.84-0.356v-0.275l0.721-0.178l0.653-0.017l1.497-0.631l0.755-0.47l1.191,0.082l0.604-0.292 l0.351-0.032l0.203,0.179l0.101-0.617l0.455-0.338l0.013-0.452l-0.383-0.13l-0.673,0.437l-0.472,0.42h-1.81l-0.504,0.049 l-0.187-0.277h-0.754l-0.322,0.245l-0.248,0.065l-0.657,0.809l-0.737,0.129l-0.554-0.082l-0.405,0.259l-0.953,0.114l-0.675,0.355 l-0.671,0.031l-0.266-0.226l-0.053-1.181l-0.284-1.295l0.132-0.388l0.036-0.423l0.535-0.273l0.604-0.274l0.305,0.29l0.182,0.583 l0.32-0.064l0.201-0.745l0.79-0.437l0.402,0.132l0.555-0.731l0.771-0.825l0.872-0.323l-0.133-0.55l0.286-0.422l1.175-0.468 l1.458-0.082l0.724-0.631l0.822-0.291l0.485-0.453l0.019-0.404h-0.519l-0.656,0.632l-0.739,0.145l-0.653-0.325l0.015-0.629 l0.438-0.876l0.047-1.002l-0.401-0.631l-0.421-0.017l-0.25,0.452l0.034,0.972l-0.286,0.841l-1.291,1.278l-0.741,0.178 l-0.419-0.242l-0.2-1.166l0.115-0.42l0.523-0.566v-0.519l-0.304-0.452l-0.117-1.1l-0.304-0.503l-0.284,0.018l-0.354,0.565 l0.205,1.393l-0.153,0.615l-0.554,0.534l-0.119-0.453l0.103-0.323l-0.438-0.762l-0.451-0.209l-0.353,0.209l-0.035,0.616 l0.186,0.598l0.019,0.956l0.437,0.776l0.401,0.891l0.017,0.549l-0.653-0.064l-0.536,0.211l-0.404,0.987l-0.035,0.614l-0.604,0.47 l-1.695,0.13l-0.94-0.098l0.133-0.405l0.269-0.387l-0.385-0.664l-1.072-1.02l-0.689-0.193l-0.252,0.081l-0.489-0.843l-0.099-0.76 l1.058-0.032l0.536-0.373l-0.201-0.259l-0.689-0.047l-0.436,0.113l-0.654-0.308l-0.235-0.55l-0.539-0.372l-0.805-0.406 l-0.485-0.55l0.402-0.437l-0.017-0.227l-0.487-0.467l-0.639-0.309l-0.587-0.793l0.068-0.582l0.32-0.115l1.122,0.86l0.322,0.419 l0.015,0.308l0.37-0.018l0.705-0.5l0.066-0.728l-0.267-0.194l-0.57,0.098l-0.421-0.244v-0.274l-0.788-0.647l-0.036-0.599 l0.167-0.146l0.339-1.149l0.453-0.875l-0.218-0.161l-0.604,0.341l-0.521-0.47l-0.37,0.066l-0.134,0.922l0.134,0.793l-0.453,0.582 l-0.588,0.291l-0.1-0.792l-0.923-1.311l-0.117-0.986l-0.284-1.119v-0.743l0.551-0.129l0.724-0.616l0.248-0.162v-0.76 l-0.265-0.437l-0.051-0.954l0.822-0.859l0.622,0.032l0.519,1.199l0.37,0.777l0.739,0.112l0.218-0.373l-0.957-1.181v-0.873 l0.387-0.195l0.538,0.323l0.083,0.535l0.352,0.339l0.703-0.323l1.882-1.408l0.94-0.209l0.521,0.419l0.552,1.004l-0.167,0.646 l-0.5,0.536l-0.574-0.049l-0.269-0.228l-0.437,0.063l-0.973,0.746l-0.136,0.404l-0.385,0.098l-0.203,0.533l0.504,0.355 l0.722-0.453l1.092-0.436l0.436,0.226l-0.017,0.308l-0.84,0.648l-0.101,0.419l0.472,0.212l0.284-0.34l0.318,0.048l0.37,0.582 l0.369,0.292l-0.064,0.549l0.199,0.987l0.472,0.549l0.402,0.179l-0.217-1.263l-0.54-1.002l-0.134-1.021l0.236-1.02l0.923-1.39 l0.169-0.875l0.419-0.373l0.451,0.195l0.807,0.905l1.007,0.665l0.103,0.501v1.716l0.754,1.828v0.743l-0.216,0.568l-0.675,0.615 l0.087,0.357l0.336,0.13l0.637-0.389l0.472,0.096l0.57,0.811l0.604,1.423l0.419,0.39l0.62-0.032l0.17-0.713l-0.891-1.004 l-0.151-0.906l-0.771-1.213l-0.337-0.988l-0.018-1.262l0.034-2.669l-0.268-0.535l-0.403-0.242l0.218-0.923l-0.066-0.841 l0.402-0.762l-0.119-1.326l0.557-0.923l0.534-0.244l0.353,0.163l0.857,1.133l0.186,1.037l0.454,0.29l0.402-0.677l0.653-0.406 l0.725,0.47l0.889,1.278l0.387,0.987l0.049,1.004l-0.371,0.452l-0.03,1.909l0.017,1.134l-0.07,0.437l0.336,0.162l0.57-0.518 l-0.014-1.101l-0.168-1.65l0.234-0.809l0.604-0.453l1.158,0.956l0.705,1.666l0.588,2.022l0.017,0.599l0.554,0.6l0.957,0.064 l0.455,0.21l1.108,1.262l0.534,0.436l1.209,1.231l0.993,0.517l2.015,0.485l0.653,0.195l0.034,1.002l-0.286,0.502l-0.149,0.583 l-0.389,0.097l-0.504-0.825l-0.923,0.405l-0.654-0.098l-1.275,0.971l-0.873,0.065l-0.152,0.323l0.285,0.485l-0.05,0.519 l-1.006,0.824l-0.15,0.471l0.233,1.068l0.05,1.634L821.138,99l0.101,1.03l0.21,0.34l-0.421,0.663l-0.847-0.363l-0.353,0.257 l-0.084,0.938l0.639,1.099l0.016,0.955l-0.284,0.987l0.017,1.166l-0.083,0.89l-0.354,0.016l-0.974-0.113l-0.755,0.632 l0.838,0.406l-0.149,0.357l-0.588,0.565v0.646l-0.117,0.744l-0.099,2.8l-0.354,0.729l-0.419,0.534l0.115,1.02l0.419,1.133 l-0.013,0.582l-0.237,0.225l-0.117,0.938l-0.568,0.794L815.952,119.09L815.952,119.09z M826.425,141.963l0.353-0.533l0.119-1.214 l-0.641-0.648l-0.854-0.047l-0.252,0.534l0.237,0.696l0.587,0.452l0.12,0.567L826.425,141.963z ",
"M1364.527,383.359l0.411,0.429l-0.336,0.179l-0.234-0.113 L1364.527,383.359L1364.527,383.359z M1365.34,383.401l-0.286-0.34l0.37-0.598l0.553-0.064l0.15,0.694l-0.37,0.34 L1365.34,383.401L1365.34,383.401z M1336.144,453.793l-0.237-0.551l-0.536,0.018l-0.184,0.825h0.637L1336.144,453.793 L1336.144,453.793z M1336.748,453.033l0.504-0.503l0.436,0.373l-0.25,0.825l-0.49-0.13L1336.748,453.033L1336.748,453.033z  M1341.108,449.973l-0.101,0.935l0.368,0.322l0.635,0.064l0.169-0.837L1341.108,449.973L1341.108,449.973z M1351.227,442.105 l-0.365-1.194l0.869-0.581l0.133-0.42l-0.198-0.32l0.803-0.453l0.471-0.902l0.401,0.902l-0.438,0.549l-0.03,0.773l-1.142,0.678 l-0.031,0.805L1351.227,442.105L1351.227,442.105z M1355.467,433.064l0.605,0.47l0.148,0.728l-0.268,0.195l-0.673-0.536 l-0.047-0.55L1355.467,433.064L1355.467,433.064z M1357.379,431.413l-0.385-0.29l-0.755-0.034l-0.252-0.195l0.318-0.631 l0.808-0.356l0.266-0.064l0.155-0.275l0.519-0.033l0.285-0.179l0.67-0.178l-0.521,0.891l-0.84,0.534l-0.047,0.55 L1357.379,431.413L1357.379,431.413z M1381.488,342.459l-0.387-0.437l-0.098-0.678l0.736-0.647l0.505-0.162l-0.187,0.809 l-0.032,0.745L1381.488,342.459L1381.488,342.459z M1387.097,346.876l-0.773-0.452l-0.37-0.743l0.287-0.195l-0.287-1.602 l-0.57-1.538l-0.705-0.631l-0.788-0.517l-0.556-0.018l-0.115-0.598l0.099-1.213l-0.233-0.89l0.336-0.728l0.538-0.293l0.149-0.403 l0.622-0.112l0.401-0.892l0.338-0.436l-0.103-0.389l-0.94-0.678l-0.354-0.049l-0.265-0.324l0.335-0.68l0.671-0.146l1.459,0.776 l1.564,0.244l0.519-0.406l0.068-0.664l0.286-0.289l-0.286-0.649l-0.421-0.225l-0.166-0.437l-0.521-0.794l-0.268-0.824 l0.703-0.776l0.389-0.049l0.099-0.372l-0.351-0.875l-0.467-1.361l0.169-0.612l-0.103-1.678l-0.367-1.032l-1.609-2.385 l-0.269-1.065l-0.402-0.581l0.235-0.289h0.436l0.471-0.549l-0.103-0.387h1.038l0.338,0.677l1.506,1.193l1.274,0.258l0.637,1.194 l2.11,1.999l1.174,0.807l0.369,0.645l0.902,0.194l0.81,0.838l1.37,0.646l1.141,0.128l0.904,0.84l0.705-0.13l0.335,0.227 l1.173-0.162l1.497-0.982l0.761-0.956l0.182-0.792l0.218-0.26l0.252,0.372v0.762l-0.489,1.327l-0.013,1.214l0.316,0.42 l1.126,0.68l0.772,0.926l0.066,0.677l-0.099,0.452h0.705l0.435-0.678l0.669-0.612l0.57-0.065l-0.3,0.646l-0.438,0.258 l-0.066,0.872l-0.57,0.42l-0.804,0.321l-0.169,0.678l-0.333,0.483l-0.635,0.033l-0.336-0.258l-0.637,0.482l0.066,0.453h-1.175 l-0.902-0.225l-0.772,0.225l-1.24,1.676l-0.468,1.807l-0.203,1.483l0.27,1l-0.167,0.742l0.066,0.677l-0.806-0.323l-0.468-0.611 l-1.44-0.356l-1.408-0.709l-1.241-1.065l-0.804-0.87l-0.836,0.127l-0.739-0.16l-0.369-0.355l-0.87-0.032l-1.04,0.742 l-1.104,1.452l-0.469-0.29l-1.173-0.709l-0.637,0.064l-0.604,0.515v0.871l0.301,0.71l0.973,0.516l1.008-0.257l1.172,1.258 l1.004,0.257h1.073l0.367,0.518l-0.703,0.902l-0.234,0.645l-0.637-0.483l-1.238-0.064l-0.47,0.323l0.099,0.645l-0.332,0.742 L1387.097,346.876L1387.097,346.876z M1385.586,371.654l0.049-0.859l0.286-0.518l-0.202-0.128l-0.568,0.323l-0.086-0.566 l0.404-1.488l0.318-0.308l0.149,0.631l-0.064,0.648l0.637,0.195l0.151,0.484l-0.234,0.989l-0.505,0.484L1385.586,371.654 L1385.586,371.654z M1351.303,401.962l0.504,0.372l0.302-0.179l-0.57-0.372l-0.27,0.016L1351.303,401.962L1351.303,401.962z  M1351.067,402.561l0.151,0.242l0.15-0.209L1351.067,402.561L1351.067,402.561z M1350.513,403.093l0.371,0.164l0.184-0.259 L1350.513,403.093L1350.513,403.093z M1349.942,403.547l0.102,0.405l0.538-0.291L1349.942,403.547L1349.942,403.547z  M1349.271,405.765l-0.318-0.955l0.031-0.583l0.485-0.226l0.07,0.534l0.536,0.274l0.34,0.616l-0.54,0.42L1349.271,405.765 L1349.271,405.765z M1356.34,406.314l-0.068-0.484l0.286-0.292l0.336,0.178l-0.084,0.551L1356.34,406.314L1356.34,406.314z  M1355.55,407.724l0.371-0.389l0.266,0.128l-0.335,0.535L1355.55,407.724L1355.55,407.724z M1355.197,405.408l-0.353,0.422 l0.137,0.856l0.335,0.616l0.435,0.016l0.186-0.743l-0.52-0.859l-0.017-0.274L1355.197,405.408L1355.197,405.408z  M1375.21,394.583l-0.421-0.89l0.02-0.711l0.316-0.485l0.486-0.081l0.187,0.566l-0.116,0.646l0.15,0.374l-0.137,0.566 L1375.21,394.583L1375.21,394.583z M1371.903,393.791l0.737-0.68l0.587,0.129l-0.032,0.438l-0.586,0.289L1371.903,393.791 L1371.903,393.791z M1367.683,403.209l0.367,0.163l0.302-0.323l0.57,0.193l0.438-0.129l-0.068-0.549l-0.837-0.871l0.401-0.773 l0.402-1.29l1.104-0.646l0.301-0.483l1.043,0.13l1.304,0.804l0.369,0.613l0.57-0.257l0.437-1.58l1.038-0.935l0.101-0.58 l-0.335-0.324l-0.203-0.612l-1.003-0.773l-0.703-0.033l-0.671-0.483l-1.209-0.063l-1.139,0.902v0.548l-0.434,0.645l-0.84,0.259 l-0.703,0.483l-0.434-0.129l-0.539-1.192l-0.434,0.034l-1.241,1.353l-0.03,0.807l-0.806,0.548l-0.203,0.903l1.308,0.323 l0.235,0.87l-0.269,0.257v0.454l0.736,1.063l1.142,0.129L1367.683,403.209L1367.683,403.209z M1361.627,418.386l-0.57-0.679 l-0.587,0.114l-0.22,0.534l0.521,0.891l0.791,0.145l0.232-0.404L1361.627,418.386L1361.627,418.386z M1362.4,417.383l-0.2-1.439 l0.032-0.6l0.521,0.437l0.084,0.763l-0.217,0.598L1362.4,417.383L1362.4,417.383z M1360.754,414.876l0.864-0.507l0.903-1.226 l-0.837-0.806l-0.034-0.484l0.438-0.194l0.669,0.194l0.401,0.29l0.233-0.903l-0.03-1.419l-0.269-0.709l0.065-2.547l-0.1-1.354 l0.502-0.806l0.87-0.84l-0.199-0.677l-0.472-0.129l-0.032-0.838l-0.503-0.097l0.167-0.581l-1.531,0.022l-0.216-0.324l0.737-0.437 l0.252-0.566l-0.233-1.167l-0.606-0.356l-0.737,0.131v0.291l-0.621,0.437l-0.654-0.098l-1.025-1.067l0.152-0.632l1.429-0.695 l1.273-0.227l1.376,0.469l0.707,0.308l0.133-0.372l-0.032-0.616l0.067-0.906l-0.134-0.615l0.267-0.485l0.639-0.048l0.372,0.534 l0.603,0.032l0.771-0.404l1.527-0.274l1.461-0.455l0.94-0.032l0.371,0.145l0.5-0.226l0.034-0.291l0.957-0.52l0.235-0.484 l1.076-0.858l1.106-0.354l1.396,0.242l0.806-0.21l0.367,0.323v0.745l-0.688,0.954l-0.199,0.761l0.419,0.275l0.101,0.809 l0.067,0.842l-0.136,0.338l0.234,0.842l0.94,0.405l1.294,1.164l0.872,0.244l0.57-0.291l0.906-1.312l0.083-0.857l0.504-0.308 l0.137-0.436l-0.186-0.6l0.604-1.083l0.804-0.114h0.724l0.252-0.453l-0.22-0.324l-0.199-0.923l-1.662-0.693l-0.218-0.455 l0.37-1.197l0.534-0.454l0.354-0.113l-0.186,0.373l0.1,0.971l0.322,0.258l0.415-0.275l0.205-0.259l0.639,0.147l0.468,0.307 l0.489-0.146l0.318,0.081l-0.186,0.372l-0.838,0.209l-0.103,0.228l0.302,0.145l0.707-0.192l1.146-0.586l2.344,0.194l1.208-0.129 l-0.336-0.291l-0.235-0.902l0.235-1.032l1.008-0.484l0.77,0.13l0.167,0.904l-0.269,0.838l0.371,0.645l0.703-0.066l0.703-0.934 l-0.536-1.548l0.269-0.967l1.141-0.838l0.634-0.032l0.202-0.419l-0.436-0.517l0.233-1.063l0.57-0.354l0.873,0.161l0.199,0.483 l-0.436,0.612l-0.235,1.226l0.27,2.548l0.434,0.194l0.606-0.388l0.4-0.837l0.769-0.064l0.872-0.902l0.338-1.163l-0.201-0.741 l1.005-0.903l-0.133-0.581l-0.505-0.452l-1.07-1.417l-0.37-1.065l-0.301-2.161l0.336-2.514l0.065-1.71l-0.805-3.128l-1.14-1.483 l-0.099-1.162l0.268-1.451l1.44-0.646h0.703l0.369,0.613l0.268-0.322l-0.235-1.031l-0.168-0.679l-0.3-0.348l-0.235-0.89 l0.066-0.454l-0.017-0.68l0.335-0.55l-0.013-0.275l0.097-0.696l-0.266-0.388l-0.066-1.105l0.199-0.549l-0.37-0.644l-0.267-1.743 l-0.84-1.418h-0.468l-0.501-0.259l-0.104-1.901l-0.872-0.774l-1.886-2.044l-0.518-0.906l-0.371-1.393l-0.101-1.359l0.066-0.453 l-0.536,0.323l-0.419,0.05l-0.22-0.259l-0.823-0.356l-0.45-0.048l0.066,0.275l-0.453,1.101l0.017,0.759l0.402,0.372l0.436-0.191 l1.042-0.891l0.471,1.116l-0.354,0.809l-0.552,0.339l-0.606-0.435h-0.216l0.282,1.051l-0.419,0.421l-0.653-0.243l-0.15-0.776 l-0.149-0.907l-0.288-0.454l-0.568,0.179l-0.504-0.275l-0.187,0.711l0.336,1.311l0.032,0.906l-0.554,0.21l-0.555,0.794l0.017,0.5 l1.158,1.134l0.389,0.68l-0.406,1.212l-0.619,0.391l-0.723-0.146l-0.151,0.484l0.673,0.827l0.705-0.163l0.606-0.656l0.904,1.967 l0.335,2.162l-0.199,1.193l0.099,2.126l-0.804,3.129l0.235,1.193l-0.369,1.355l-1.138,0.58l-0.504,1.321l0.066,1.484l-0.57,0.872 l-0.167,0.902l-1.114,1.012l-2.216,1.278l-0.871,0.242l-0.438,0.858l-1.123-0.615l-1.092-1.295l0.032-0.55l0.487-0.227 l0.486-0.823l-0.083-0.472l0.57-0.566l-0.05-0.225l-1.078,0.242l-0.77,0.76l-0.99,0.373l-0.187,0.858l0.658,1.068l0.132,2.104 l-0.132,1.02l-1.077,1.067l-0.017,0.584l-0.385,0.42l-0.151,1.569l0.403,0.438l0.064,0.647l-0.3,0.241l0.199,0.26l-0.234,0.549 l-0.453,0.049l0.303,0.405l-0.707,0.275l-0.484-0.356l-0.671,0.485l-0.406-0.146l-0.165-0.954l-0.269-0.113l-0.604,0.42 l-0.57,0.016l-0.286-0.193l-2.015,0.68l-1.06,0.388l-1.056,0.356l-1.191,0.081l-1.144,0.34l-0.401-0.244l-0.977,0.114 l-1.743,1.166l-0.318,1.051l-0.641,0.42l-0.149,0.647l-1.277,1.393l-0.787,0.291l-0.674,0.889l-0.199,0.583l-0.688,0.681 l-1.241,0.242l-0.438,0.614l0.301,1.409l0.473,0.243l0.149,0.502l-0.286,0.485l-0.773,0.049l-0.972,0.728l-0.251,0.519 l-0.605,0.452l-0.874,0.906l-0.336,0.696l-0.756,0.016l-0.838,0.454h0.419l0.436,0.048l0.319,0.792l0.403,1.052l-0.318,0.291 l-0.151-0.696l-0.383-0.533l-0.222,0.711l0.234,0.81l0.588,0.242l0.101,0.518l-0.3,0.567l0.451-0.243l0.322-0.6l0.701-0.226 l0.455,0.164l-0.353,0.323l0.335,0.242l0.721-0.21l-0.082-0.824l-0.502-0.438l-0.84,0.209l0.05-0.355l0.232-0.388l-0.198-0.68 l0.385-0.486l0.772,0.292l0.804,1.327l0.119,0.989l0.389,0.45l0.066,1.521l-0.671,1.424l-0.806,0.081l0.199,0.503l0.703,1.182 l0.305,1.553l0.77,0.874l-0.015,0.76l-0.387,0.471l0.588,0.694l0.74-0.097l0.618,0.356l0.305-0.339v-0.47l-0.689-1.019v-1.439 l0.421-0.454l0.468,0.372l-0.267,0.387l-0.018,0.422l0.707,0.711l0.282,1.197l-0.232,0.711L1360.754,414.876z ",
"M1342.339,392.802l0.438-0.291l0.468,0.438l-0.688,0.274 L1342.339,392.802L1342.339,392.802z M1335.742,396.054l-0.402-0.624l0.182-0.314h0.296l0.309-0.527l0.243,0.478l0.07,0.761 h-0.346L1335.742,396.054L1335.742,396.054z M1346.309,391.337l-0.663,0.509l0.054,0.519l0.265,0.6l0.455-0.148l0.309-0.476 l-0.066-0.777L1346.309,391.337L1346.309,391.337z M1349.417,397.138l-0.112-0.501l0.395-0.567l0.733,0.048l-0.252,0.6 l-0.396,0.363L1349.417,397.138L1349.417,397.138z M1350.188,395.317l-0.343,0.309l-0.229-0.623l0.024-0.761l0.244-0.55 l0.438-0.268l0.176,0.356l0.167,0.623L1350.188,395.317L1350.188,395.317z M1336.953,401.952l-0.336-0.676l0.536-0.645 l1.977-0.583l0.906,0.164l0.066,0.581l-0.603,1.031l-1.644,0.289L1336.953,401.952L1336.953,401.952z M1329.459,375.167 l0.127,0.134l0.773-0.542l1.41,0.034l-0.669,0.337l1.827,1.49l1.195,1.658l0.635,0.137l-0.316,0.474l0.669,0.914l0.385,0.779 l-1.544-0.508l-0.318-0.44l-0.317,0.779l-0.667-0.17l-0.949,1.288l2.039,0.913l0.527-0.17l0.456,0.983l0.036,1.862l0.525,0.337 l0.353-0.303l0.811,1.521l-1.512,0.983l-0.036,0.507l0.635,0.475l0.034,0.778l-0.564,0.304v0.846l0.492,0.847l-0.597,0.034 l1.126,2.099l0.669,0.068l0.212,1.015l0.349,0.272l-0.034,0.778l0.669-0.475l0.072-1.15l0.419,0.542l0.669-0.915l2.079-1.725 l0.841-0.17l0.141,0.473l0.635-0.745l0.491,0.069l0.456,0.879l0.88-0.338l0.353,0.407l0.457-0.305l-0.352-0.644l1.126-0.677 h1.056l1.266-1.558l-0.282-0.475l0.635-0.474l-0.246-3.418h-0.318l-0.316,0.337l-0.034-1.049l-0.633-3.148l-0.703-0.711 l-0.07-1.997l-2.746-3.318l-2.498-2.505l-1.699-3.017l-1.846,1.15l-3.223,0.257l-1.677,1.421l-1.612,0.387l-1.41,1.357 L1329.459,375.167z",
"M1319.997,362.703 1319.997,360.131 1321.208,359.162  1321.742,357.999 1321.742,357.224 1322.951,356.448 1323.757,354.962 1324.631,354.576 1325.367,352.378 1325.77,351.604  1325.703,351.151 1325.77,349.666 1326.643,348.633 1327.515,349.923 1328.256,350.311 1328.925,350.893 1329.732,350.57  1330.738,350.958 1332.616,350.763 1333.826,350.958 1334.43,349.73 1334.36,349.084 1333.354,348.115 1332.352,347.405  1333.154,346.952 1334.228,346.823 1336.039,345.403 1336.039,344.434 1336.776,343.464 1337.719,343.335 1338.054,342.494  1337.719,341.849 1337.785,340.945 1337.785,339.977 1338.389,339.718 1339.196,340.362 1339.196,341.267 1339.599,341.72  1341.074,342.042 1342.113,343.459 1341.934,343.445 1340.419,345.068 1339.859,344.968 1339.824,346.051 1339.19,348.285  1339.261,349.571 1340.209,350.283 1340.246,352.62 1340.983,353.161 1340.597,354.209 1339.401,355.19 1339.647,355.531  1337.326,357.867 1337.608,358.543 1336.939,359.119 1336.728,359.592 1335.777,359.559 1334.864,360.134 1334.478,361.115  1333.244,361.861 1333.244,362.978 1333.597,363.993 1333.14,364.468 1333.42,365.653 1335.11,365.958 1335.602,366.701  1339.015,368.598 1339.564,369.575 1337.719,370.726 1334.496,370.983 1332.819,372.404 1331.207,372.791 1329.797,374.148  1329.459,375.167 1328.427,374.082 1327.897,374.421 1328.146,374.894 1327.301,375.943 1326.736,375.572 1325.788,376.316  1325.399,375.706 1326.243,374.421 1325.262,374.082 1324.45,374.521 1324.027,374.421 1324.274,373.609 1324.346,371.746  1324.978,370.494 1326.175,370.392 1327.158,369.511 1326.243,369.95 1324.522,369.917 1324.204,369.545 1324.134,367.413  1325.262,365.653 1324.662,364.805 1325.296,364.398 1325.542,363.62 1324.943,363.689 1324.45,364.297 1322.937,364.501  1322.518,363.924 1321.496,363.385 1321.426,364.061 1320.759,364.501 1320.336,362.909 1320.124,363.012 			",
"M1140.863,315.43 1141.601,313.786 1142.44,313.366  1144.584,313.463 1144.885,313.011 1145.688,312.173 1147.165,311.657 1147.233,310.753 1147.565,309.851 1148.772,309.303  1148.807,308.69 1149.576,307.979 1150.349,307.786 1150.985,306.916 1151.388,306.561 1150.884,306.206 1150.854,305.561  1151.152,305.174 1152.691,305.593 1153.33,305.271 1153.8,304.108 1154.537,303.819 1156.179,303.626 1157.084,303.401  1157.854,303.368 1158.929,303.433 1159.632,303.013 1159.864,303.047 1160.435,303.788 1160.537,304.304 1161.072,304.851  1162.044,304.787 1162.548,304.625 1163.384,304.691 1164.087,304.239 1165.563,304.142 1165.864,304.851 1166.031,305.593  1166.303,306.174 1168.578,307.431 1169.45,308.109 1171.127,308.851 1171.73,308.528 1172.666,308.207 1173.675,307.496  1174.479,307.398 1175.35,307.625 1176.053,308.109 1176.79,307.884 1178.801,307.916 1179.572,308.271 1180.442,308.173  1180.645,307.947 1181.517,308.109 1183.09,307.916 1183.961,306.561 1183.461,306.013 1182.52,305.4 1182.555,304.046  1182.822,302.594 1182.655,302.014 1181.782,301.724 1181.315,301.142 1179.941,300.788 1179.606,299.691 1179.641,297.498  1180.578,296.466 1180.578,295.788 1181.047,295.048 1181.816,294.789 1182.286,294.95 1182.621,294.208 1182.345,293.459  1182.479,292.762 1183.066,292.262 1183.975,292.31 1184.594,292.715 1185.822,293.021 1187.062,293.589 1187.23,293.896  1188.303,294.252 1189.465,294.35 1191.142,294.301 1191.78,294.707 1192.219,295.111 1193.408,295.223 1194.064,295.531  1194.87,295.661 1196.831,295.595 1197.568,295.886 1197.906,296.594 1197.906,297.175 1198.374,297.789 1198.374,298.434  1198.808,298.917 1199.276,299.917 1199.246,300.724 1199.814,301.174 1200.385,301.207 1201.322,302.014 1201.592,302.497  1202.964,302.878 1204.389,303.59 1205.045,303.621 1205.378,303.315 1206.79,303.379 1207.427,302.958 1208.117,302.992  1208.688,303.187 1209.292,303.006 1210.098,302.165 1211.424,301.761 1213.273,301.632 1214.227,301.082 1215.438,301.033  1216.594,300.709 1217.642,301.271 1219.016,301.401 1220.828,301.369 1221.766,302.658 1223.407,303.271 1224.749,303.238  1225.717,303.013 1226.189,303.433 1226.691,304.851 1227.631,305.464 1228.201,305.787 1228.803,305.917 1229.607,306.754  1230.311,306.787 1232.422,306.593 1234.266,307.109 1237.046,307.077 1238.221,306.916 1238.689,306.561 1239.728,306.561  1240.6,307.012 1241.136,306.948 1241.873,305.852 1243.615,304.882 1244.688,304.916 1245.427,304.078 1246.196,303.98  1248.34,304.013 1249.245,303.206 1249.547,302.336 1249.547,301.949 1250.117,301.046 1251.089,300.626 1251.76,299.948  1252.128,299.014 1252.831,298.369 1253.635,298.369 1253.939,298.627 1255.312,298.272 1256.182,298.369 1257.29,299.046  1257.826,299.821 1258.527,300.078 1259.399,299.627 1259.867,299.982 1260.707,299.948 1261.746,299.369 1261.781,298.917  1263.32,298.659 1265.066,299.174 1265.57,299.691 1264.553,306.643 1264.753,308.13 1264.35,309.42 1264.484,310.326  1263.882,312.263 1264.619,313.683 1266.834,314.717 1268.312,313.62 1270.19,313.62 1272.203,313.943 1273.143,314.847  1274.284,313.167 1274.151,312.199 1274.218,311.359 1275.493,310.971 1275.963,310.583 1278.046,311.101 1279.253,312.521  1280.93,314.007 1282.273,315.622 1284,316.816 1284.032,317.591 1284.368,318.204 1284.334,318.978 1284,319.494  1283.967,320.106 1283.595,320.655 1282.894,320.493 1282.458,320.075 1281.485,320.205 1280.951,320.557 1279.644,320.009  1278.84,320.17 1278,321.3 1276.727,322.268 1275.991,322.719 1275.152,322.138 1274.782,322.236 1274.75,323.074  1274.415,323.558 1273.778,323.655 1273.273,323.558 1272.906,324.105 1272.103,325.299 1271.903,326.653 1271.968,327.589  1271.466,328.17 1270.494,328.395 1268.415,329.75 1267.31,329.75 1266.171,329.525 1265.635,329.912 1264.765,331.685  1263.893,332.298 1262.851,333.039 1262.216,333.685 1261.948,334.394 1261.48,334.491 1260.508,334.038 1259.367,333.812  1257.957,333.329 1256.818,332.556 1255.682,332.523 1253.869,332.879 1252.799,333.653 1252.128,334.588 1252.062,336.556  1252.162,337.522 1252.094,338.136 1254.173,339.457 1256.083,340.587 1256.083,341.135 1255.615,341.973 1255.011,342.843  1252.968,345.038 1251.76,346.939 1251.089,348.424 1250.32,348.424 1248.844,348.875 1247.738,348.94 1246.497,349.745  1245.224,350.649 1243.918,350.713 1242.006,350.908 1240.702,351.326 1239.193,351.746 1235.875,352.875 1233.26,353.714  1231.954,355.132 1229.941,356.681 1229.104,357.357 1227.997,357.391 1226.623,357.002 1226.623,356.52 1226.456,355.841  1224.479,356.392 1222.871,356.617 1221.195,355.778 1219.855,355.649 1216.904,354.584 1213.99,353.293 1212.447,351.843  1211.21,351.81 1207.855,351.455 1205.045,351.525 1204.322,351.362 1203.802,351.669 1203.532,352.172 1201.988,352.722  1199.788,352.933 1195.926,352.616 1193.111,352.778 1190.966,352.648 1189.124,352.843 1188.186,352.939 1187.38,352.68  1186.342,350.747 1185.939,349.779 1184.968,348.392 1184.164,347.457 1183.628,346.167 1183.552,345.602 1182.881,344.906  1182.178,344.662 1181.723,344.598 1181.522,344.097 1181.404,343.305 1181.084,343.173 1180.666,343.287 1179.356,343.271  1178.249,342.656 1176.536,341.475 1175.948,341.345 1175.528,341.362 1174.703,341.216 1174.32,340.698 1172.875,339.808  1169.718,339.112 1169.399,339.193 1168.997,339.518 1167.739,339.646 1165.723,339.679 1161.155,338.739 1160.148,338.173  1159.106,336.652 1158.939,335.94 1158.939,335.276 1159.243,334.807 1159.898,334.306 1160.181,333.497 1159.664,332.898  1159.429,331.846 1159.646,331.28 1159.578,330.276 1159.191,329.727 1158.621,328.804 1157.932,328.48 1157.196,327.897  1156.891,327.121 1156.404,326.457 1156.137,325.647 1156.021,324.953 1155.498,324.223 1154.761,323.658 1154.069,323.447  1153.719,322.912 1152.947,322.621 1152.24,322.686 1151.787,323.107 1151.283,323.317 1150.796,323.14 1150.059,322.345  1149.824,321.941 1148.95,321.957 1148.027,322.379 1147.675,322.766 1147.506,323.285 1147.07,323.301 1146.147,322.734  1145.912,322.071 1145.896,321.764 1145.241,320.987 1144.314,320.42 1143.611,319.66 1143.073,319.449 1142.588,319.012  1142.368,318.445 1142.325,317.862 1142.073,317.391 1141.92,317.465 1141.862,317.725 1141.562,317.805 1141.207,317.222  1140.938,316.964 1140.978,315.955 			",
"M975.821,340.35 974.639,339.619 973.432,340.006  971.72,338.908 971.822,338.168 973.6,338.168 971.72,335.136 969.577,333.202 966.56,332.394 966.192,333.072 964.684,331.847  964.984,331.169 964.18,329.912 962.271,329.201 962.974,327.653 963.376,324.879 962.673,324.203 962.438,322.009  963.344,321.592 964.583,320.106 964.583,318.978 965.254,318.14 967.732,320.3 968.034,321.106 969.44,321.945 970.883,321.816  970.714,320.461 971.284,320.009 970.214,316.43 971.655,316.269 973.162,316.269 973.162,315.204 972.489,314.398  972.795,313.366 974.167,312.527 974.804,312.495 975.239,311.302 975.942,310.786 976.915,311.044 977.049,310.237  976.814,309.431 977.049,308.851 978.423,309.625 979.532,310.076 979.396,310.656 978.759,311.399 979.227,311.851  980.099,311.365 980.336,310.688 980.973,310.302 981.005,311.076 981.609,310.463 981.741,309.915 982.647,309.819  983.616,309.174 984.455,309.14 984.96,310.333 985.998,311.011 987.674,310.495 988.443,310.527 988.911,311.206  989.449,311.238 990.39,312.399 991.394,312.399 992.129,313.335 993.438,314.269 994.176,314.334 994.543,314.946  994.609,315.979 995.148,316.14 995.749,315.268 995.648,314.141 996.554,313.624 997.191,314.494 998.967,314.753  999.503,315.591 1000.24,315.881 1001.381,315.043 1001.481,313.366 1002.45,313.269 1002.52,312.43 1003.259,312.204  1003.794,312.881 1004.195,312.142 1005.266,311.978 1006.609,313.172 1006.875,313.656 1008.183,313.526 1008.016,312.43  1008.753,312.204 1009.792,312.301 1010.296,311.689 1011.4,312.269 1012.071,312.593 1011.769,313.205 1011.065,313.56  1011.971,314.592 1012.807,314.85 1013.211,314.592 1013.85,314.946 1015.256,314.881 1016.896,315.752 1017.939,315.559  1018.407,314.624 1018.474,313.753 1018.941,313.335 1020.384,314.171 1021.688,314.301 1023.265,313.786 1023.698,313.043  1023.463,309.528 1023.031,309.207 1021.655,309.174 1020.785,308.496 1020.617,308.012 1019.578,307.786 1018.941,307.205  1017.837,307.205 1017.771,306.626 1017.465,306.076 1017.602,305.627 1018.439,305.529 1018.606,304.593 1019.31,303.788  1019.074,302.754 1018.371,302.658 1018.305,301.692 1019.345,300.239 1020.414,299.303 1022.358,299.11 1023.132,299.369  1023.668,299.014 1023.698,298.111 1022.796,297.853 1022.059,297.143 1021.32,297.175 1020.749,297.594 1019.813,297.209  1018.641,297.175 1018.54,296.594 1018.941,296.24 1020.179,296.208 1019.813,295.241 1018.641,295.402 1017.803,295.175  1018.238,294.724 1017.734,293.659 1018.069,293.37 1019.074,293.305 1019.544,292.757 1020.215,292.789 1020.517,293.274  1021.589,293.144 1022.425,293.725 1022.796,293.274 1022.796,292.725 1023.6,292.241 1024.438,292.274 1024.974,293.079  1025.408,292.5 1025.51,291.854 1027.119,291.371 1028.189,291.274 1029.365,290.724 1030.603,290.628 1030.837,290.241  1032.078,289.5 1033.22,289.467 1033.957,288.984 1034.626,288.918 1035.261,289.178 1035.632,288.855 1035.598,287.918  1036.133,287.468 1037.139,287.468 1037.273,286.887 1037.878,286.403 1038.378,286.855 1039.049,286.985 1039.921,286.5  1040.959,286.177 1042.938,284.887 1043.372,284.887 1043.81,284.596 1044.914,284.405 1045.551,283.597 1046.154,283.758  1047.396,283.501 1047.363,282.856 1046.925,282.178 1047.426,281.921 1048.669,281.857 1048.936,280.985 1049.773,280.534  1050.344,280.629 1051.045,280.404 1052.187,280.857 1053.46,280.727 1054.576,281.451 1055.685,281.435 1056.708,281.014  1057.663,281.095 1058.052,282.196 1058.423,282.471 1058.759,283.394 1059.394,284.17 1060.017,284.494 1060.117,284.995  1059.881,285.772 1060.066,286.614 1060.017,286.954 1059.293,287.148 1059.714,287.989 1060.268,288.377 1061.292,287.778  1062.013,288.344 1062.533,288.167 1062.702,287.31 1063.288,287.066 1063.593,287.973 1064.163,287.973 1064.281,287.276  1063.929,286.372 1064.229,286.177 1065.823,287.292 1066.01,288.734 1066.614,289.85 1067.169,289.801 1067.84,289.104  1067.32,288.879 1067.068,288.377 1068.092,288.167 1069.838,288.977 1070.442,288.977 1071.13,288.426 1071.651,288.701  1071.265,289.576 1070.694,290.061 1070.677,291.225 1071.299,292.02 1071.936,291.971 1072.474,291.338 1073.531,291.064  1075.396,291.501 1075.847,291.792 1076.421,291.404 1076.235,290.385 1077.109,290.077 1078.468,289.899 1079.34,289.334  1079.729,288.556 1080.432,288.005 1080.515,287.342 1081.544,286.372 1082.283,286.113 1083.001,285.4 1084.008,285.141  1085.199,284.786 1085.721,285.093 1085.685,285.886 1084.915,286.71 1084.174,286.888 1084.546,287.553 1092.913,293.594  1104.325,307.354 1105.467,307.167 1106.221,306.697 1106.422,306.164 1106.187,305.969 1106.154,304.982 1106.874,304.643  1108.218,305.257 1108.085,305.872 1108.169,306.487 1109.229,306.761 1109.896,307.425 1110.722,307.44 1111.358,307.037  1112.13,306.907 1113.321,307.538 1114.33,307.102 1115.102,307.263 1116.011,306.924 1116.246,306.52 1115.94,306.05  1116.109,305.581 1117.654,305.371 1119.301,305.371 1120.709,305.725 1122.087,306.697 1122.843,307.992 1123.328,309.027  1123.783,309.06 1124.755,309.319 1125.849,309.982 1126.184,309.982 1126.872,310.289 1126.921,310.808 1126.754,311.245  1126.771,311.956 1127.023,312.555 1127.475,312.977 1127.678,313.204 1128.096,313.188 1129.023,313.558 1129.727,313.883  1129.979,313.479 1130.719,313.09 1132.921,312.946 1133.928,312.656 1134.397,311.882 1135.3,311.399 1135.802,311.624  1135.4,312.72 1135.669,313.463 1136.34,313.624 1137.377,314.494 1138.751,314.946 1139.086,315.334 1138.25,316.204  1137.514,316.591 1136.271,317.849 1136.239,318.559 1136.507,319.042 1135.938,320.009 1134.564,320.493 1133.725,321.074  1133.558,322.106 1133.622,324.01 1134.528,325.783 1135.4,326.911 1135.268,327.523 1134.093,328.782 1133.088,329.137  1132.282,330.041 1131.615,330.267 1131.178,330.103 1130.944,329.589 1130.139,329.589 1128.329,329.976 1127.09,329.878  1125.278,329.266 1124.207,329.137 1123.671,329.201 1123.268,331.233 1122.865,332.523 1122.799,333.524 1122.365,336.104  1122.365,338.104 1122.13,338.78 1122.665,339.168 1123.739,339.619 1123.302,340.521 1123.201,341.231 1122.599,341.231  1122.064,341.554 1121.327,341.554 1120.79,341.104 1120.186,341.361 1119.081,341.619 1117.034,342.025 1115.59,342.56  1114.935,342.543 1114.364,342.267 1113.591,342.577 1112.751,343.337 1112.734,343.95 1113.524,344.549 1114.818,344.468  1115.892,344.598 1115.91,345.019 1115.253,345.65 1115.694,346.973 1115.761,347.65 1116.162,348.23 1116.331,349.166  1117.203,350.521 1117.369,351.263 1118.378,351.973 1118.746,353.81 1118.175,354.294 1117.874,355.1 1118.66,355.975  1118.241,356.185 1118.108,356.703 1117.233,357.286 1117.27,358.454 1116.397,358.938 1114.32,358.422 1112.344,356.228  1111.504,356.422 1109.563,355.681 1106.713,355.52 1105.307,356.003 1102.925,355.39 1100.715,355.906 1099.574,356.068  1098.502,355.745 1097.664,356.456 1096.794,356.809 1094.247,356.485 1092.371,356.003 1091.396,355.456 1089.924,355.487  1089.422,355.713 1088.313,355.649 1087.441,355.487 1086.907,355.778 1087.008,356.744 1087.276,357.745 1087.309,358.938  1085.865,359.162 1082.979,359.226 1079.558,358.902 1078.748,358.451 1077.208,358.257 1076.334,359.162 1076.67,359.679  1075.646,360.312 1075.502,360.715 1075.21,360.679 1074.272,361.841 1073.469,362.164 1071.657,364.26 1071.021,365.486  1070.485,366.099 1069.548,367.775 1067.67,369.452 1067.195,369.116 1065.088,368.112 1063.521,367.901 1062.148,368.177  1060.049,369.245 1059.094,369.164 1057.146,364.001 1053.861,363.583 1053.694,357.261 1052.088,357.745 1050.914,355.034  1048.534,353.326 1040.893,353.348 1033.978,354.059 1030.085,351.798 1027.197,350.763 1019.813,345.747 1007.531,347.985  1011.297,369.305 1010.62,369.368 1008.74,369.756 1005.719,366.396 1002.427,364.587 999.41,364.135 997.127,364.91  994.261,367.396 994.16,366.231 993.908,365.18 994.445,363.95 994.613,362.689 994.564,362.235 994.714,361.926  994.379,361.717 993.37,361.765 992.633,361.458 991.794,361.264 991.105,361.556 990.704,361.411 990.332,360.648  989.945,360.309 989.544,359.58 989.123,359.354 988.805,359.516 987.948,359.71 987.547,359.693 987.63,358.593  987.547,357.719 986.254,356.265 986.002,355.713 985.631,355.583 985.295,354.628 984.773,354.322 984.438,353.625  983.627,353.332 982.896,353.302 982.325,352.629 982.384,352.217 982.776,351.754 983.268,351.909 984.618,351.804  984.997,352.007 985.541,351.974 985.921,352.176 986.432,351.787 986.842,351.593 987.624,351.884 987.876,351.667  987.646,351.221 986.724,351.278 986.459,351.1 986.455,350.454 985.549,349.435 985.462,348.981 985.899,348.707  985.919,347.993 985.784,347.59 986.338,347.023 987.344,346.732 988.168,346.457 988.871,346.797 989.779,346.556  990.551,346.442 990.954,346.797 991.357,346.556 991.994,346.556 992.751,347.346 993.489,347.346 994.462,346.876  994.613,346.474 993.944,346.246 993.054,346.053 992.447,344.871 992.599,343.868 993.203,343.609 993.556,343.188  993.27,342.913 992.969,342.525 992.818,342.104 993.338,341.181 993.424,340.519 992.699,339.822 992.479,339.32  992.868,338.754 992.836,338.495 992.214,338.366 991.859,337.768 991.724,337.379 990.132,337.298 989.544,337.185  988.924,337.347 988.822,337.655 988.319,337.914 988.285,338.349 987.833,338.593 987.177,338.349 987.108,337.978  986.554,338.009 986.254,338.302 985.816,337.784 985.867,337.103 985.647,336.877 985.295,337.168 984.708,337.168  984.27,336.877 983.064,336.893 982.407,337.525 982.19,338.172 981.938,338.317 981.62,338.041 981.185,338.041  980.645,338.754 980.143,338.705 979.758,339.272 978.967,339.903 978.529,339.839 978.38,340.357 978.025,340.697  977.707,340.357 977.307,340.325 977.002,340.794 976.361,340.777 976.128,340.325 			",
"M1066.796,390.561 1067.135,387.738 1068.107,385.545  1068.541,385.029 1068.408,383.805 1067.469,383.417 1066.967,382.16 1067.4,381.255 1067.167,380.256 1065.861,380.289  1065.058,380.708 1063.851,379.03 1063.814,377.644 1064.753,376.935 1066.834,377.225 1067.67,376.999 1067.804,375.967  1069.614,375.354 1069.312,374.644 1068.911,374.289 1070.924,373.838 1072.496,373.193 1072.528,372.291 1071.086,371.613  1071.156,370.548 1072.328,370.129 1073.567,369.258 1074.507,369.323 1075.981,367.87 1076.988,368.872 1077.355,369.516  1079.636,369.162 1081.244,369.258 1082.552,367.84 1082.315,366.937 1080.037,365.227 1079.433,365.098 1079.3,366.355  1078.494,367.194 1077.659,366.903 1076.819,366.131 1074.742,365.55 1073.87,365.032 1074.573,363.905 1076.05,361.711  1075.981,360.776 1075.21,360.679 1074.272,361.841 1073.469,362.164 1071.657,364.26 1071.021,365.486 1070.485,366.099  1069.548,367.775 1067.67,369.452 1067.195,369.116 1065.088,368.112 1063.521,367.901 1062.148,368.177 1060.049,369.245  1059.094,369.164 1057.146,364.001 1053.861,363.583 1053.694,357.261 1052.088,357.745 1050.914,355.034 1048.534,353.326  1040.893,353.348 1033.978,354.059 1030.085,351.798 1027.197,350.763 1019.813,345.747 1007.531,347.985 1011.297,369.305  1013.438,369.111 1015.383,369.432 1015.854,368.398 1015.051,367.624 1014.715,366.009 1015.722,364.071 1017.13,363.942  1017.869,362.843 1018.941,362.263 1020.082,362.843 1020.621,362.521 1019.815,361.421 1021.962,361.617 1025.118,363.102  1027.801,364.651 1028.139,365.687 1031.628,367.495 1034.379,368.851 1035.12,368.398 1036.059,368.528 1038.005,369.884  1038.812,372.532 1039.75,373.18 1040.086,374.341 1041.158,376.215 1042.771,376.927 1045.858,378.799 1048.947,380.997  1052.438,382.481 1055.592,384.548 1058.074,384.937 1058.612,385.518 1059.352,385.388 1061.096,386.552 1061.029,387.713  1061.289,389.723 1062.609,389.384 1063.615,389.834 1064.187,390.643 1064.823,390.673 1065.593,389.997 1066.396,390.061 			 ",
"M1061.289,389.723 1061.029,387.713 1061.096,386.552  1059.352,385.388 1058.612,385.518 1058.074,384.937 1055.592,384.548 1052.438,382.481 1048.947,380.997 1045.858,378.799  1042.771,376.927 1041.158,376.215 1040.086,374.341 1039.75,373.18 1038.812,372.532 1038.005,369.884 1036.059,368.528  1035.12,368.398 1034.379,368.851 1031.628,367.495 1028.139,365.687 1027.801,364.651 1025.118,363.102 1021.962,361.617  1019.815,361.421 1020.621,362.521 1020.082,362.843 1018.941,362.263 1017.869,362.843 1017.13,363.942 1015.722,364.071  1014.715,366.009 1015.051,367.624 1015.854,368.398 1015.383,369.432 1013.438,369.111 1010.62,369.368 1008.74,369.756  1005.719,366.396 1002.427,364.587 999.41,364.135 997.127,364.91 994.261,367.396 994.295,367.752 995,368.449 995.318,369.096  996.076,369.663 996.342,370.455 997.35,371.96 997.147,373.283 996.581,374.218 996.779,376.475 997.316,377.153  997.549,377.83 999.158,379.281 999.058,378.7 998.556,378.153 998.826,377.862 1000.198,378.088 1000.833,377.668  1001.205,377.991 1000.97,378.895 1001.235,379.83 1001.806,379.604 1002.41,380.378 1002.141,380.732 1001.371,380.506  1000.833,380.636 1000.432,380.28 999.56,380.959 999.626,381.765 1000.13,382.506 1000.03,381.474 1000.568,381.345  1000.97,381.636 1001.673,381.733 1002.173,382.569 1003.414,383.183 1003.716,384.088 1003.684,385.376 1003.818,386.086  1003.75,388.375 1004.184,389.956 1005.041,392.174 1006.005,391.641 1008.283,391.512 1008.687,390.32 1009.287,389.577  1010.061,389.513 1012.003,387.933 1013.981,387.577 1015.724,387.933 1016.061,386.868 1016.997,386.642 1017.903,386.998  1018.941,386.965 1020.617,388.254 1022.059,388.642 1024.772,390.288 1025.51,390.255 1026.247,389.771 1028.123,390.513  1029.096,390.673 1029.365,391.996 1029.799,392.319 1030.771,392.093 1032.513,392.48 1034.391,394.995 1036.436,395.156  1037.608,395.641 1038.346,396.898 1038.011,397.575 1038.412,398.673 1038.378,399.35 1038.761,400.052 1039.218,399.897  1040.256,400.156 1040.993,400.706 1041.763,400.706 1042.367,400.156 1043.173,400.156 1044.211,400.897 1044.477,401.543  1044.881,401.898 1045.349,401.414 1046.69,401.22 1047.363,400.478 1047.496,399.897 1048.097,399.382 1047.863,398.77  1049.304,398.027 1051.113,397.672 1051.28,397.221 1051.987,396.673 1052.725,396.513 1053.025,395.317 1053.058,394.19  1054.131,393.093 1054.131,392.157 1053.694,391.835 1053.769,391.27 1054.24,391.076 1054.744,390.721 1055.954,390.413  1056.338,390.428 1057.733,389.44 1058.825,389.126 1059.761,389.675 1060.766,389.448 1061.101,389.771 			 ",
"M1594.104,654.136l0.738-1.422h1.209l1.073-0.644l1.141,0.578 l1.075-1.225h0.807l1.541-1.228l0.137,0.579l-0.94,0.841v0.841l-1.41,1.226l0.806,0.131l0.804-0.905l0.269,0.518l-0.604,0.967 l-2.346,0.323l-0.068-0.645l-1.008-0.065l-0.336,0.582l-1.207-0.195l-0.401,0.776L1594.104,654.136L1594.104,654.136z  M1588.936,658.333l1.612-1.354l2.015-0.454l1.675,1.615l0.473,2.518l-1.277,0.713l-1.206-0.195l-0.74,0.454l-2.081-0.195 l-1.543-0.776v-1.098l0.942-0.323L1588.936,658.333z ",
"M1549.763,667.021l0.438,0.706l-0.137,0.711l-0.401-0.74 L1549.763,667.021L1549.763,667.021z M1549.162,662.86l0.566,0.677l-0.135,1.417l-0.701-0.838l-0.137-0.936L1549.162,662.86 L1549.162,662.86z M1545.877,657.344l1.071-0.45l0.635,0.677v0.807l-0.834,0.418l-0.806-0.707L1545.877,657.344L1545.877,657.344 z M1547.115,643.059l0.504,1.579l-0.535,0.871l0.199-0.935L1547.115,643.059L1547.115,643.059z M1544.869,645.928l0.604,0.194 l0.735-0.613l0.169-0.42l-1.105,0.356C1545.272,645.445,1544.905,645.896,1544.869,645.928L1544.869,645.928z M1547.015,646.701 l0.369,0.356l0.032,0.901l0.066,0.741l-0.398-0.031l-0.238-0.968C1546.846,647.701,1547.049,646.67,1547.015,646.701 L1547.015,646.701z M1546.143,653.379l0.438-0.744l0.938,0.549l0.101,0.452l-1.105,0.032L1546.143,653.379L1546.143,653.379z  M1545.407,650.768l1.173-0.809l0.266,0.612l0.438,0.196l-0.032,0.643h-0.538l-0.301,0.289l-0.535-0.063l-0.538-0.388 L1545.407,650.768L1545.407,650.768z M1542.155,648.605h0.806l0.671,0.58l0.032,0.808l0.701,1.19l0.47,0.583l-0.802,0.226 l-1.207,0.612l-0.137-0.68l0.205-1.289l0.268-0.579l-0.437-0.451l-0.5-0.032l-0.171-0.517L1542.155,648.605L1542.155,648.605z  M1539.945,641.961l-0.474,1.902l0.371,1.064l-0.034,1.032l0.469,1.192h0.707l0.434-0.677l0.637,0.323l0.604-0.418l-0.034-1.065 l-0.399-0.581l0.299-0.803l-0.538-0.647l-0.232,0.418l-0.032,0.679l-0.638,0.193l-0.436-0.354l-0.066-1.612 C1540.582,642.607,1539.911,641.929,1539.945,641.961z ",
"M1537.404,622.48l0.724-0.502h0.775l0.301,0.421l-0.706,0.629 l-0.891-0.187L1537.404,622.48L1537.404,622.48z M1511.058,625.609l0.973,0.034l0.77,0.484l0.938,0.354l-0.667,0.323 l-0.775-0.292l-0.77,0.066l-0.436-0.387L1511.058,625.609L1511.058,625.609z M1517.424,619.71l0.972,0.097l0.973,0.903 l1.743,0.353l0.57,0.808l-0.102,0.549l0.335,0.319l-1.173,0.067l-1.475-0.549l-1.273-1.127l-0.066-0.646L1517.424,619.71 L1517.424,619.71z M1510.824,614.58l0.77,0.774h1.176l1.37,0.646l0.604,0.646l0.57,0.03l0.133,0.582l-0.304,0.901l-0.937,0.099 l-0.805-0.936l-1.039,0.192l-1.203-0.452l-1.008-1.322l0.168-0.901L1510.824,614.58L1510.824,614.58z M1513.904,613.58 l-1.003-0.128l0.199,0.582l0.84,0.192L1513.904,613.58L1513.904,613.58z M1514.374,610.486l0.034,0.354l0.671,0.386l-0.135,0.549 l0.503,0.773l0.301,1.388l1.878,1.55l0.735,0.224l0.137,0.903l0.703,0.225l0.203-0.999l-0.906-0.968l-0.705-0.322l-0.436-0.709 l-1.172-1.548l0.199-0.741l-0.938-1L1514.374,610.486L1514.374,610.486z M1504.957,606.455l1.611,0.225l1.237,1l1.477,0.644 l1.709,1.743l-0.371,0.42l0.337,0.579l-0.673-0.45l-0.468,0.548l-0.167-0.582l-0.5-0.515l-0.906-0.678l-2.179-2.127 C1506.064,607.262,1504.993,606.485,1504.957,606.455L1504.957,606.455z M1502.198,611.325l0.991,0.127l-0.108,0.678 l-0.603,0.194l-0.27-0.484L1502.198,611.325L1502.198,611.325z M1499.289,611.196l0.354-0.343l0.485,0.275l-0.167,0.243 L1499.289,611.196L1499.289,611.196z M1499.424,609.952l0.589,0.064l0.637,0.08l0.203,0.693l0.639,0.259l0.504,0.047l0.083-0.885 l-0.299-0.564l-0.794-0.422l-0.216-0.568l-0.455-0.208l-0.588,0.483L1499.424,609.952L1499.424,609.952z M1498.042,608.256 l0.524-0.34l0.874,0.532l-0.101,0.467l-0.843,0.115l-0.437-0.323C1498.061,608.707,1498.042,608.206,1498.042,608.256 L1498.042,608.256z M1496.48,606.833l1.06,0.823l-0.284,0.469l-0.523,0.275v-0.356l-0.353-0.532L1496.48,606.833L1496.48,606.833 z M1496.48,600.585l-1.105,1.062l0.938-0.45L1496.48,600.585L1496.48,600.585z M1496.313,601.876l-0.438,0.516l0.737,1.161 l1.542,1.03l0.938,0.872l1.072,0.259h0.938l-0.201-0.549l-0.97-0.838l-0.705-0.323l-0.101-0.549l-0.737-0.451l-1.44-0.194 l-0.068-0.771L1496.313,601.876L1496.313,601.876z M1494.401,602.907l-0.468,0.161l0.669,0.451L1494.401,602.907z ",
"M1483.443,624.919l0.574-0.484l0.804,0.178l-0.149,0.535 l-0.756,0.11l-0.453-0.096L1483.443,624.919L1483.443,624.919z M1479.568,625.017l1.09,1.117l0.587-0.018l0.538,0.242 l0.302-0.208l-0.199-0.501l-0.79,0.031l-0.977-0.68L1479.568,625.017L1479.568,625.017z M1450.301,580.751l0.302-0.225 l0.737,0.063l0.773-0.225l0.566,0.386l0.705-0.161l0.536,0.388l-1.006,0.806l-1.174,0.065l-0.401-0.356l-0.737-0.095 C1450.603,581.397,1450.27,580.688,1450.301,580.751L1450.301,580.751z M1488.067,596.78l1.009-0.063l0.5,0.644l0.336,1.259 l1.239,0.387l1.511,1.16l0.936,1.128l-0.101,1.195l-0.637,0.191l-0.198,0.388l-1.142,0.128l-0.637-0.227h-0.703l-0.538-0.706 l0.27-0.484l-0.872-1.549l-0.937-0.451v-1.42l-0.202-0.74L1488.067,596.78L1488.067,596.78z M1487.096,594.684l-0.233,0.417 l0.402,0.549l0.034,0.839l0.568-0.708l-0.064-0.872L1487.096,594.684L1487.096,594.684z M1485.522,592.715l0.57-0.162l0.3-0.644 l0.536,0.644l-0.5,0.647l-0.739-0.065L1485.522,592.715L1485.522,592.715z M1469.973,583.525l2.077,1.191l1.44,0.389l1.711,1.385 l1.307,0.26l0.705,0.774l1.07,0.481l0.804,1.292l0.637,0.031l0.371,1.904l0.501,0.161l0.033,0.774l-0.438,0.868l-0.335,1.099 l-0.937-1.001l-0.268-0.966l0.336-0.743l-0.671-2.29l-1.644-1.646l-1.106-0.097l-1.675-0.903l-3.219-1.804l-0.57-0.548 L1469.973,583.525L1469.973,583.525z M1463.571,576.848l0.839,0.033l0.535,0.774l-0.03,0.549l-1.175-0.741L1463.571,576.848 L1463.571,576.848z M1466.321,583.394l1.068-0.386l0.639,0.386v0.872l-0.938,0.259l-0.703-0.42L1466.321,583.394 L1466.321,583.394z M1465.851,594.36l0.938,0.902l0.504-0.548l-0.606-0.869l-0.667,0.063L1465.851,594.36L1465.851,594.36z  M1458.345,596.521l-0.671,1.192l0.77,0.936l1.008,0.097l1.507,1.162l0.168,0.515l0.671-0.481l1.539,0.062l0.471,0.839 l1.108,0.162l0.735-0.132l1.709-0.319l0.906,0.256l0.77-0.319l1.139,0.45l0.367-0.483l-0.031-0.646l1.207-0.031l1.641-1.969 v-0.643l0.669-0.162l0.604,0.451l1.142-0.323l0.534-0.808l-1.005-0.901l-0.066-0.612l0.638-0.354l0.5,0.257l1.104-0.997 l-0.032-2.033l-1.038-0.872l-0.569,0.388l-0.335,0.387l-0.603-0.451l-1.108-0.033l-0.469,0.679l0.469,1.937l0.335,0.354 l-0.468,0.484l-0.906-0.033l-1.773,1.387l-0.336,0.871l-0.57,0.417l-0.468-0.191l-0.671,0.417l-0.603-0.643l-0.57,0.03 l-0.671,0.809l-0.603-0.132l-0.27-1.128l0.201-0.71l-0.701-0.353l-0.473,0.451l0.137,0.611l-0.707,0.451l-0.936-0.094 l-1.073,0.417l-0.804-0.033l-0.637-0.32h-0.839l-1.14,0.256L1458.345,596.521L1458.345,596.521z M1455.025,597.423l0.571-0.612 l0.737,0.583l0.234,0.804l-0.234,0.422l-0.804-0.485L1455.025,597.423L1455.025,597.423z M1452.379,595.649l-0.402,0.744 l0.402,0.546l0.57-0.129v-0.773L1452.379,595.649L1452.379,595.649z M1447.79,592.781l-1.042,0.385l0.303,0.646l0.637-0.484 L1447.79,592.781L1447.79,592.781z M1477.334,613.284l-0.235,0.681l0.252,0.486l0.353-0.113l1.025,0.68l-0.083-0.566 L1477.334,613.284L1477.334,613.284z M1470.377,610.578l-0.203,0.34l0.345,0.633l0.212-0.033l0.092,0.598l-0.092,0.268h0.173 l0.137-0.719l-0.159-1.191L1470.377,610.578L1470.377,610.578z M1468.453,617.117l0.604,0.097l0.405,0.396l0.064,0.226 l0.347,0.106l0.124,0.275l0.587-0.446l0.421-0.016l0.074,0.444l-0.425,0.31l-0.11,0.362l-0.498,0.156l-0.637-0.164l0.042-0.541 l-0.235-0.113l-0.385-0.744l-0.336-0.145L1468.453,617.117L1468.453,617.117z M1467.605,615.7l0.185,0.769l0.428,0.219 l0.632-0.049l0.191,0.258l0.246-0.298l-0.262-0.39h-0.286l0.119-0.169l-0.163-0.364h-0.357l-0.531-0.096L1467.605,615.7 L1467.605,615.7z M1465.618,614.897l0.333,0.803l0.387-0.049l0.387,0.468l0.362,0.1l0.032-0.608l-0.512-0.735l-0.529-0.276 L1465.618,614.897L1465.618,614.897z M1442.328,607.496l-0.291,0.228l0.301,0.435 C1442.338,608.158,1442.32,607.512,1442.328,607.496L1442.328,607.496z M1440.448,607.665l-0.133-0.331l0.385-0.063 L1440.448,607.665L1440.448,607.665z M1439.048,607.301l-0.066,0.487l0.562,0.097l-0.074-0.275L1439.048,607.301 L1439.048,607.301z M1440.14,607.713l-0.604-0.596l0.26-0.486l0.472,0.063l-0.193,0.632L1440.14,607.713L1440.14,607.713z  M1436.783,607.585l0.385,0.735l0.336,0.098l-0.302-0.502L1436.783,607.585L1436.783,607.585z M1435.229,611.166l0.534-0.518 l0.724,0.032l-0.252,0.404C1436.235,611.085,1435.246,611.132,1435.229,611.166L1435.229,611.166z M1435.163,611.718l0.365,0.258 l-0.117-0.405L1435.163,611.718L1435.163,611.718z M1434.104,611.214l0.554,0.259l0.234-0.29L1434.104,611.214L1434.104,611.214z  M1433.768,611.586c-0.019,0,1.311,0.535,1.311,0.535l0.604,0.679L1433.768,611.586L1433.768,611.586z M1435.061,609.405 l0.812,0.146l-0.198,0.212l-0.463-0.089L1435.061,609.405L1435.061,609.405z M1436.219,609.245l-0.375-0.463l0.029-0.421 l0.521-0.445l0.286,0.931l-0.127,0.364C1436.554,609.211,1436.227,609.245,1436.219,609.245L1436.219,609.245z M1423.978,584.03 l-0.583,16.8l-0.27,1.269l-0.016,0.722l0.199,0.373l-0.375,10.88l1.602,0.027l0.5,0.29l0.838-0.225l2.48,0.096l0.604-0.161 l0.231,0.549l0.574,0.579l0.733,0.195l1.008-0.582l1.642-0.451l0.133-0.42l0.401,0.322l0.437-0.481l-0.066-1.26l-1.207-0.903 l-1.342-0.532l-1.144-0.192l-0.487-0.407l-0.688-0.242l-0.301,0.018l-0.485-0.373l-0.22-1.067l-0.791-1.02l-0.871-0.39 l-0.184-0.598l-0.521-0.502l0.637,0.39l0.232,0.646l0.556,0.13l1.042,0.647l0.152,0.759l0.117,0.892l0.351,0.033l1.177,0.324 l0.637,0.563l0.487-0.096l1.108,0.049l1.293-0.308l0.921,0.049l0.77-0.225l-0.235-0.388l-0.669-0.417l-0.335-0.613l-0.637,0.064 l-0.336-0.613l0.536,0.451l0.906-0.227l0.701,0.775l0.862,0.155l-0.419-0.503l0.017-0.63l0.437-0.309l0.066-0.485l-0.084-0.696 l-0.689-0.614v-0.307l0.79,0.356l0.32,0.551l0.906,0.808l0.689,0.161l0.048-0.437l-0.167-0.599l0.235,0.195l0.232,0.794 l0.378-0.054l0.033-0.611l-0.269-0.517l0.269-0.935l0.4,0.48l1.139,0.357l0.27,0.644l0.603,0.13l0.57-0.034l0.304,0.226 l0.434-0.514l-0.066,0.612l0.032,0.549l0.472,0.128l0.601,0.582l2.524,0.558l0.771,0.403l0.689,0.826l0.385,1.229l1.242,1.522 l0.202,0.613l0.874,0.229l0.485,0.71l0.168,0.5l2.165,2.14l0.051,0.68l0.84,0.549l1.308,0.42l0.508-0.192h0.485l0.72,0.29 l1.429-0.208l0.973,0.37l0.822-0.064l1.427,0.242l0.675,0.39l1.039-0.161l0.455,0.549l0.957-0.048l0.149,0.29l-0.52,0.389 l0.904,0.227l1.076,0.598l1.038-0.257l0.289-0.567l-1.146-0.648l-0.365-0.03l0.015-0.39l0.822-0.275l0.739,0.309l0.821-0.535 l-1.761-0.322l-1.998-0.242l-1.228-0.633l-0.436-0.502l1.076-0.453l0.671,0.051l0.421-0.326l-0.641-0.371h-1.561l-1.527-0.225 l-0.587-0.488l-0.018-0.662l0.521-0.565l0.27-0.584l-0.521-0.501l-0.588-0.019l-0.353,0.31l-0.724-0.178l-0.504,0.015 l-0.822-0.842l-0.167-1.229l-0.707-0.339l-0.838-1.99l-0.438-0.179l-0.25-0.664h-1.009l-0.671-0.355l-0.504-0.955l-1.006-1.002 l-0.219-1.054l-0.704-0.565l-0.539-0.921l0.101-0.374l1.912,0.161l1.664-0.823l0.487-0.794l-0.083-0.938l-1.344-1.343 l-0.977-0.177l-0.419,0.273l-1.038-0.485l-1.664-0.663l-0.82-0.857l-0.942,0.098l-2.265-0.76l-0.218-0.616l0.62-1.022l0.1-0.79 l-0.585-0.729l-1.679-1.699l-0.406,0.051l-0.552,0.24l-0.354-0.711l-0.839-0.583l-0.27-0.646l-0.989-0.182l-0.502-0.646 l-0.389,0.115l-0.856-0.438l-1.023-0.081l-0.974-0.712l-1.063-0.242l-1.708-1l-2.515-0.225l-0.972-0.389l-0.489-0.587h-0.455 l-0.318,0.161l-1.813-0.713l-0.421-0.42l-0.903-0.341l-1.528-0.614L1423.978,584.03z ",
"M1326.612,481.454h1.172l-0.737,0.386L1326.612,481.454 L1326.612,481.454z M1326.01,479.519l0.637,0.582l-0.873,0.161L1326.01,479.519L1326.01,479.519z M1327.986,478.293l-0.703,0.484 l0.567,0.484L1327.986,478.293L1327.986,478.293z M1329.997,480.521l-0.57,0.677l0.534,0.417l0.37-0.643 C1330.331,480.972,1329.961,480.521,1329.997,480.521L1329.997,480.521z M1330.397,503.285l0.722,0.548l0.438,0.875l1.06,0.354 l0.741-0.242l0.201-0.71l1.245-0.953l0.905-0.016l1.38,0.84l0.556,1.051l-0.117,0.937l0.436,0.452l0.621-0.389l-0.064-0.872 l0.404-0.323l0.521,0.858l1.109,0.047l0.907,0.582l0.203,0.306l-0.673,0.098l-0.47-0.258l-0.457,0.292l0.188,0.774l0.635,1.557 l-0.032,0.611h0.937l0.671,0.324l0.771-0.034l0.369,0.484l-0.405,0.387l0.103,0.55l-0.334,1.288l-0.808-0.255l-0.77-0.903 l0.737-0.42l0.068-0.451l-0.771-0.161l0.031,0.322l-0.803,0.227l-1.039-1.161l-0.705-0.227v-0.965l-0.365-0.842l-1.34-0.481 l-0.604-1.034l-0.603-0.289l-0.539-0.516l-0.5-0.098l-0.137,0.451l0.973,1.644l0.301,1.484l-0.367,0.064l-0.906-1.482 l-1.038-0.71l-0.368-0.678l-1.908-0.742l-1.074,0.097l-0.402,0.583l0.201,0.612l-0.873,0.516l-1.069-1.034l-0.637,0.55 l-0.739,0.161l0.438-0.742l-0.371-0.773l-0.534,0.192l-0.27,0.905l-0.603-1l0.103-1.066l-0.103-0.515l0.504-0.579l1.005-1.259 l-0.804-0.582l-1.005-0.095l-0.036,0.549l0.505,0.515l-0.538,0.677l-0.602-0.034l-0.905-1.127l-0.032-0.902l-0.371-0.13 l-0.336,0.258l-0.398-0.289l-0.035-1.612l-0.703-1.226l-0.336-1.29l0.336-0.611l-0.167-0.324l-0.538-0.033l-0.235-0.966 l0.135-1.097l0.639,0.74l0.804,0.131l0.667-0.356v-0.579l-0.735-1.484l0.436-1.064l0.538-2.225l-0.034-1.838l-0.271-1.097 l0.941-1.809l0.165-0.999l1.344-0.45l1.775,0.323l0.77,0.838l0.669,0.42l0.233-0.451h1.31l0.635-0.518l0.066-0.418l0.438-0.161 l0.601,0.773l-0.064,0.643l-0.536,0.613l-0.198,1.744l0.835,1.387l0.535,0.191l0.301,1.132l0.472,0.545l-0.438,2.098l-0.57,1.291 l0.271,1.064l-0.77,1.191l-0.07-0.45l0.303-0.646l-0.568,0.323l-1.442,1.322l-0.335,0.807l0.103,1l-0.474,0.677l-0.165,1.098 l0.502,0.384l0.472,1.164l0.601,0.643l-0.367,0.517L1330.397,503.285L1330.397,503.285z M1332.112,503.608l0.151,0.742 l0.673,0.372l-0.167-0.694L1332.112,503.608L1332.112,503.608z M1331.301,500.226l0.471,1.191l-0.133,0.386l0.167,0.613 l0.637-0.579l0.103-1.356l0.468-0.451l-0.604-0.417L1331.301,500.226L1331.301,500.226z M1323.066,505.886l0.103,0.63 l1.144,0.471l0.232-0.226l-0.856-0.875H1323.066L1323.066,505.886z M1324.668,507.836l0.201,0.42l0.639-0.034l0.233,1.065 l0.637,0.225l0.601,0.774v1.387l0.739,0.416l0.034,0.809l0.903,1.063l0.771,0.131l0.838-0.68v-0.71l0.436-0.289v-0.774 l-0.47-0.676l0.338-0.613v-0.809l-0.942-0.352l-1.944-1.646l-1.105,0.259l-1.068-0.386L1324.668,507.836L1324.668,507.836z  M1343.125,504.708l-0.453,0.337l0.171,1.002l-0.27,0.694l-0.321,0.245l0.42,0.483l1.229-0.241l0.335-0.938l-0.436-0.904 L1343.125,504.708L1343.125,504.708z M1331.844,508.372l1.093,0.714l0.201-0.501l0.387-0.451l-0.472-0.761l-0.857-0.306 l-0.484,0.646L1331.844,508.372L1331.844,508.372z M1333.676,511.75l-0.385,0.872l-0.574,0.761l0.489,1.163l0.57-0.179 l0.353-1.112l-0.318-0.792l0.22-1.02L1333.676,511.75L1333.676,511.75z M1335.846,512.493l-0.421,0.294l0.116,0.515l0.877-0.064 l0.066-0.438L1335.846,512.493L1335.846,512.493z M1338.738,510.264l-0.942-0.92l-0.353,0.081l-0.017,0.518l1.211,1.259 l0.22-0.42L1338.738,510.264L1338.738,510.264z M1340.487,511.963l0.269,0.45l0.741,0.696h0.401l-0.771-0.938L1340.487,511.963 L1340.487,511.963z M1338.956,515.191l0.758-1.177l0.688-0.066l0.992,1.228l1.143,0.454l0.741-0.081v-0.548l-0.555-0.697 l-1.431-0.889l-0.622-0.113l-0.806-0.727l-0.335,0.034l0.083-0.294l-0.657-0.192l0.034,0.97l0.186,0.727l-0.405,0.341 l-0.018,0.515L1338.956,515.191L1338.956,515.191z M1334.415,521.702l-0.304,0.373l-0.418,0.162l-0.368-1.504l0.336-1.065 l-0.034-1.535l0.202-0.841l0.018-0.854l-0.459-0.114l-0.953-0.34l0.182-0.549l0.961-0.243l0.891,0.858l0.671,0.273l-0.166,0.356 l0.506,0.047l0.972-0.063l0.656,0.178l0.555,0.824l0.606-0.727l0.556-0.34l0.419,0.646l-0.153,0.757l-0.505,0.374l-0.452,0.952 l-1.109,0.891l-0.369,0.596h-0.489l-0.117,0.292l-0.604-0.032L1334.415,521.702L1334.415,521.702z M1336.736,521.106 l-0.773,0.243l-0.285,0.888l0.538,0.451l0.807-0.807l0.05-0.566L1336.736,521.106L1336.736,521.106z M1344.607,520.896 l-0.036,0.871l-0.316-0.451L1344.607,520.896L1344.607,520.896z M1340.518,526.863l0.705-0.773l0.335-1.905l1.273-1.385 l0.233-0.872l-0.133-0.807l0.336-0.546l-0.034-1.71l-0.501,0.192l-0.305,1.612l-0.87,1.354l-0.103,1.032l-0.401,1.29 l-0.703,0.838l-0.032,0.936L1340.518,526.863L1340.518,526.863z M1339.547,526.442l-0.135-1.74l0.571-2.548l0.835-0.839 l0.036-0.74l-0.703-0.519l-0.438,0.26l-0.601-0.293l-0.739,0.484v0.839l-0.534,0.808l0.164,1.192l-0.5,1.031l-1.477,0.354 l-0.403,0.549l0.271,1.387l0.635,0.099l1.072,0.646l0.94,0.063l0.03,1.03l0.705,0.356l0.839-0.484l0.034-0.809L1339.547,526.442 L1339.547,526.442z M1341.88,527.893l0.288,0.227l-0.083,0.516l-0.741,0.291l-0.588-0.42l0.27-0.518L1341.88,527.893 L1341.88,527.893z M1344.74,523.755l0.538-0.017l0.508,0.454l0.079,0.952l-0.353,0.6l-1.395,0.612l-1.16,0.066l0.084-0.421 l-0.451-0.599l0.554-0.726L1344.74,523.755L1344.74,523.755z M1348.994,523.884l0.453,0.811l0.018,0.676l-0.639-0.71 L1348.994,523.884L1348.994,523.884z M1346.373,527.456l0.823,0.646l-0.135,0.774l-0.671-0.42l-0.186-0.549L1346.373,527.456 L1346.373,527.456z M1345.732,516.743l-0.186,0.858l-0.724,0.079l-0.671-0.436l0.487-0.357L1345.732,516.743L1345.732,516.743z  M1347.683,518.002l0.759,0.453l0.269,0.616l1.378,0.081l0.27,0.127l0.22-0.225l0.485,0.209l-0.437-0.549l-0.286-0.808 l-0.504-0.438l0.066-1.274l-0.167-1.599l0.101-0.487l-0.389-0.273l-0.771-1.019l-0.488-0.824l-0.554-0.048l-0.304,0.144 l-0.438-0.207l-0.489,0.094l-0.318,0.326l-0.923-0.033l-0.74,0.018l-0.387-0.179l-0.018,0.599l0.723,1.42l1.177,0.905 l1.061,1.194l0.471,0.292l-0.135,0.404l-0.438,0.548l-0.133,0.211l0.436-0.159l0.169,0.241L1347.683,518.002L1347.683,518.002z  M1346.893,518.133l-0.939,0.307l-0.842-0.354l-0.623,0.018l0.354,0.854l0.018,0.904l0.568,0.55l0.455-0.452l0.538,0.485 l-0.064,1.161l0.436,0.811l0.149,1.309l0.759,0.501l0.083-1.244l0.504,0.662l0.808-0.212l0.083-0.692l-0.82-1.343l-0.621-0.421 l-0.156-1.355l-0.519-1.116L1346.893,518.133L1346.893,518.133z M1351.468,520.348l0.419-0.116l-0.268-0.288l-0.354,0.047 L1351.468,520.348L1351.468,520.348z M1351.603,521.185l-0.571-0.336l0.031,0.501l0.321,0.208L1351.603,521.185L1351.603,521.185 z M1351.434,525.535l0.22-1.02l-0.622-0.744l-0.017-0.841l0.335-0.208l-0.234-0.501l-0.455,0.194l-0.169,0.981l0.523,1.101 l-0.137,0.55l0.201,0.42L1351.434,525.535L1351.434,525.535z M1352.461,525.823l-0.12,0.499l0.402,0.42l0.169-0.549 L1352.461,525.823L1352.461,525.823z M1353.114,523.836l-0.186,0.969l-0.149,0.357l0.455,0.582l0.653-0.226l-0.335-0.858 L1353.114,523.836L1353.114,523.836z M1334.989,539.505l-0.972-1l0.637-1.259l0.269-1.289l-0.302-0.646l0.836-0.969l0.906-0.224 l0.671-0.646l0.872,0.257l1.306-0.257l-0.4-0.743l0.435-0.805l1.072-0.452l0.536-0.773l0.737-0.066l1.239,1.001l0.066,1.482 l-0.964,1.414l0.824-0.79l0.889-0.212l1.061-0.531l0.503-1.524l0.972-0.387l0.471,0.999l0.568-0.258l0.101-0.711l-0.366-0.256 l0.469-1.743l1.002,0.39l0.57,0.419l0.235-0.419v-1.164l0.335-0.063l0.703,0.743l0.034-0.68l-0.401-1.74l0.032-1l0.739,0.162 l0.301-0.064l0.201,0.741l1.273,1l0.902,0.871l0.604-0.516l-0.032,0.677l0.669,0.967v1.131l-0.637-0.098l-0.133,0.481 l0.534,0.646l0.368,0.032l-0.066,0.547l0.034,1.067l0.337-0.519l0.133,1.033v0.999l0.504,0.741l0.534,0.841l0.169,1.451 l-0.468,1.191l-0.383-0.028l0.017,0.549l-0.318-0.582l-0.524,0.081l-0.167,0.535l0.335,1.308l-0.098,0.986l-0.034,0.63 l-0.318-0.615l-0.423-1.356l0.034-0.808l-0.437-0.68l-0.22-0.889l-0.653-0.889l-0.622,0.354l-1.146,1.907l-0.186,0.728 l0.808,0.581l0.506,1.181l0.421,0.565l-0.05,0.919l-1.279,1.584l-0.657,0.468l-0.286-0.353l-0.3-0.842l0.334-0.518l-0.3-0.37 l-0.472,0.339l-0.119,0.485l-0.757,0.421l-0.959-0.387l-0.807-0.714h-1.043l-0.873-0.969l-0.15-0.743l-0.657-0.843l0.203-0.562 l-0.103-0.696l-0.436-0.5l0.418-0.518l-0.049-0.469l0.371-0.179l0.808,0.293l-0.741-0.696l-0.186-0.758l-0.874-0.696l-0.79-0.161 l-0.873-0.743l-0.438-0.018l-0.369,0.39l0.199,0.404l-0.3,0.388l0.485,0.693l-0.37-0.047l-0.738-0.536l-0.489,0.067l0.238-0.552 l-0.472-0.161l-0.353,0.275l-0.07,0.809l-0.452-0.275l-0.421,0.227l-0.286-0.258l0.2-0.922l-0.621-0.566l-0.504,0.227l-0.503,1.1 l-0.538,0.451l-0.691,1.873L1334.989,539.505L1334.989,539.505z M1333.541,540.622l0.036,0.437l0.552,0.809l0.538,0.161 l1.179-1.017l0.084-0.326l-0.521-0.175l-0.572-0.356l-0.471,0.404L1333.541,540.622L1333.541,540.622z M1322.931,514.821 l-0.419-0.47l-0.318-0.661l0.301-0.373l0.741,0.115l0.556,0.596l0.939,0.195l0.201,0.468l-0.403,0.453l-0.604-0.259 L1322.931,514.821L1322.931,514.821z M1322.358,515.226l0.943,0.257l0.304,0.662l-0.353,0.229l-0.306,0.404h-0.419l-0.269-1.02 L1322.358,515.226L1322.358,515.226z M1322.947,521.983l0.346-0.259l0.153-0.364l0.269,0.403l0.372,0.292l-0.018,0.508 l-0.699,0.033l-0.655-0.056L1322.947,521.983L1322.947,521.983z M1311.6,531.954l0.9-0.697l0.613-0.097l0.604-0.613l0.999-0.365 l1.039-1.515l1.07-0.354l0.737-0.613l0.066-0.453l0.637-0.74v-1.354l0.536-0.613l1.408-0.097l0.336-0.901l0.668-0.646 l0.737-0.129l0.402-0.743l-0.502-1.095l-0.669-0.807l0.066-0.84l-0.101-1.289l-0.402,0.162l-0.2,1.387l0.132,1.289l-0.701-0.42 l0.569,0.871l-0.035,0.646l-0.769,0.872l-0.604-0.066l-0.838,0.936l-0.066,0.677l-0.94,0.519l-0.938,1.902l-1.34,1.258 l-0.737,0.095l-0.671,1.225l-0.536,0.164l-1.34,1.678l-0.233,0.449L1311.6,531.954L1311.6,531.954z M1311.759,532.43 l-0.472,0.434l0.414-0.072L1311.759,532.43L1311.759,532.43z M1312.213,532.565l-0.285,0.307l0.494,0.259L1312.213,532.565 L1312.213,532.565z M1310.909,533.607l-0.814,0.301l-0.034,0.604l0.528,0.833h0.446l0.035-1.131l0.15-0.373L1310.909,533.607z ",
"M1423.978,584.03l-0.583,16.8l-0.27,1.269l-0.016,0.722 l0.199,0.373l-0.375,10.88l-0.278-0.005l-1.14-0.389l-1.296-1.351l-0.304-0.646l0.034-0.292l-0.939-0.811l-0.438-0.256 l-0.166-0.696l0.419-0.649l-0.032-1.002l-0.221,0.988l-0.604,0.37l-1.394-0.097l-0.788,0.407l-0.654-0.018l-0.405-0.39 l-1.088,0.567l-0.572-0.632l0.419-0.26l0.286-0.695v-0.518l0.218-0.29l0.167-1.15l-0.588-0.226l-0.519-0.648l0.502-0.111 l0.419,0.129l0.927-0.357l0.587-0.063l-0.671-0.179l-1.025,0.146l-0.824-0.37l-0.773-0.566l0.239-0.584l0.434-0.047l0.723,0.079 l-0.385-0.452l-1.209-0.842l-0.808-0.535l-0.26-0.565l0.233-0.936l-1.039-1.033v-0.386l0.938-0.742l-0.87,0.065l-0.536-0.354 l0.203-0.322l-0.372-0.421l0.671-0.514l-1.072,0.194l-0.302-0.358l-0.502,0.195l-0.368-0.26l0.77-0.868l-0.669,0.385 l-0.839,0.034l-1.238-0.485l-0.335-0.839l-1.277-0.417l-0.8,0.129l-2.75-0.839l-2.849-0.838l-1.391-0.087l-1.11-0.501 l-0.22-0.388l-0.116-0.356l-0.993-0.208l0.05-0.646l0.675-0.097l0.369,0.097l-0.051-0.212l-0.69-0.11l-0.79,0.306l-0.621-0.226 l-0.304-0.374l-0.27-0.079l-0.401,0.453l-0.169-0.889l-0.369-0.241l-0.354,0.161l-0.237,0.37l-0.521-0.549l-0.286-1.1 l-0.411-0.936l0.57-0.711v-1.062l-0.468,0.871l-0.368,0.966l-0.137,0.677l-0.401,0.195l-0.703,1.225l0.101,0.741l-0.94,1.129 l-0.938,0.193l-0.836-0.259l-0.703-1.515l0.032-0.548l0.401-0.163l0.103-0.611l-0.133-0.613l-0.57,0.193l-0.335-0.321 l-0.471-1.098l-0.84-0.42l-1.068-0.161l-0.337-0.45l0.568-0.678l1.108-0.098l0.366,0.356l0.972,0.095l0.703,0.355l0.906-0.518 l0.301-1.063l0.703-0.226l1.442,0.646l0.568,0.805l0.402-0.869l0.504-0.646l0.47,0.162l0.135-0.966l-0.27-0.582l-2.346-0.257 l0.335,0.451l-0.57,0.128l-0.468-0.128l-1.44,0.29l-0.57-0.195l-0.536,0.26l-0.568-0.323l-0.84,0.195l-0.872-0.132l-0.968-0.771 l-0.271-1.032l0.201-0.26l-0.504-0.837l-1.305-0.711l-0.504-0.516l-0.27,0.354l-0.734,0.386l-1.073-0.161l0.169-0.546 l1.103-0.679l0.103-0.645l-0.335-0.581l0.703-0.579l1.273-0.033l0.637-0.58l0.737-0.194l1.207-0.902l0.367-0.323l1.475-0.289 l2.381,0.871l1.474,0.967l1.507-0.064l1.543,0.129l0.367,0.387l-0.301,0.485v1.097l0.805,0.643l0.302,0.809l-0.57,0.803 l-0.504,0.84l0.337,1.194l0.068,2.062l0.603,1l0.534,0.646l0.37,0.031l-0.101-1.128l0.434-0.45l0.539,0.322l-0.034,0.901 l0.301,0.873l0.304-0.195l0.301,0.809l1.039,0.804l0.534,0.549h0.773l0.901-0.388l0.235-0.807l0.502-0.385l0.525-0.185v-1.116 l0.587-0.925l0.906-0.077l0.891-0.502l0.103-0.827l0.335-0.47l0.419,0.194l0.571-0.047l0.856-0.309l1.342-0.163l0.186-0.645 l-0.438-0.794l0.168-0.438l2.318-1.308l1.089,0.095l0.757,0.682l1.41,0.597l1.663,0.356l0.87,0.712l0.942,0.082l1.175,0.322 l2.688,1.184l0.688-0.13l0.637,0.097l1.158,0.276l0.842-0.034l0.688,0.47l-0.135,0.389l0.034,0.483l0.588,0.195l0.773-0.208 H1423.978L1423.978,584.03z M1368.6,571.596l1.771,0.854l0.132,0.454l-1.262-0.663L1368.6,571.596L1368.6,571.596z  M1377.884,573.403l0.59,0.212l0.772-0.26l-0.168-0.612l-1.128-0.663h-1.563l-0.705,0.516l-0.927,0.02l-0.286,0.159l0.304,0.309 l-0.639,0.175l1.345,0.195l0.857,0.371l0.775-0.112l-0.018-0.372l-0.758-0.29l-0.116-0.196l0.318-0.177L1377.884,573.403 L1377.884,573.403z M1376.37,576.071l-0.957-0.34l-0.878,0.178l0.725,0.37L1376.37,576.071L1376.37,576.071z M1377.045,575.426 l-0.356,0.53l-0.402-0.42L1377.045,575.426L1377.045,575.426z M1376.891,576.088l-0.957,0.662l0.018,1.212l0.991,0.209 l0.438-0.307l0.235-1.521L1376.891,576.088L1376.891,576.088z M1350.94,554.242l0.938,1.033l0.301,0.935l-0.401,0.451 l-0.838-0.709l-0.167-1.129L1350.94,554.242L1350.94,554.242z M1356.613,551.011l0.335,1.084l0.101,0.838l0.472-0.192 l0.372-0.793l-0.221-0.838l-0.623-0.388L1356.613,551.011L1356.613,551.011z M1356.613,553.191l0.504,0.132l0.284,0.841h-0.353 C1357.049,554.164,1356.613,553.208,1356.613,553.191L1356.613,553.191z M1364.078,561.482l0.286,1.42l0.521-0.435l0.688,0.048 l0.675-0.63l-0.27-0.696l-0.604-0.37l-0.589,0.42L1364.078,561.482L1364.078,561.482z M1363.208,573.462l0.366,1.259l1.207,1.032 l0.269,0.418l-0.369,0.128l-0.066,0.549l-0.203-0.707l-0.806-0.323l-0.734-1.451l-0.971-0.582l-0.604-0.999l0.369-0.933 l-0.168-0.519l0.134-0.549l-0.903-0.709l0.168-0.903l0.366-0.579l-0.534-0.936l-0.469-0.582l0.302-1.128l0.566-0.417 l-0.099-1.131l0.302-1.289l1.406-1.322l0.472-0.129l-0.103,0.708l-0.703,0.773l0.169,0.485l0.802,0.321v1.357l-0.368,1.127 l-0.739,0.03l-0.667,0.647l0.402,0.74l0.534-0.095l0.302-0.711l0.804-0.356l0.403-0.45l-0.47-0.03l0.102-0.613l1.406-0.677 l1.477-0.518l0.534,0.549l0.066,0.646l-0.703,1.579l-1.675,0.548l-0.604,0.677l0.369,0.612l0.603,0.064l1.175,0.808l0.165,0.646 l0.436,0.354l-0.905,0.063l-0.635-0.484l-1.207-0.03l-1.071-0.323l-0.671,0.226v1.677L1363.208,573.462L1363.208,573.462z  M1359.471,575.472l0.338,0.664l-0.959-0.274l0.335-0.598L1359.471,575.472L1359.471,575.472z M1359.437,573.678l-0.521-0.013 l-0.287,0.871l0.574,0.21l0.251-0.6L1359.437,573.678L1359.437,573.678z M1360.212,574.18l-0.286,0.26l0.066,0.531l0.504,0.743 l0.79-0.014l0.506,0.451l0.419-0.42l-0.236-0.37l-0.654-0.276l0.05-0.662l-0.521-0.354L1360.212,574.18L1360.212,574.18z  M1360.059,579.382l1.296-0.936l1.128,0.048l1.141,1.115l-0.27,0.516h-0.57h-0.774l-0.622,0.115l-0.808-0.323L1360.059,579.382 L1360.059,579.382z M1373.476,579.786l-1.711,0.404l-0.608,0.389l0.403,0.37l1.48,0.469l1.279-0.371l-0.372-0.194l-0.065-0.678 L1373.476,579.786L1373.476,579.786z M1365.473,588.527l0.521-0.081l0.036,0.339l-0.354,0.098L1365.473,588.527L1365.473,588.527 z M1364.599,588.593h0.473l0.083,0.404h-0.455L1364.599,588.593L1364.599,588.593z M1362.211,589.045l1.094-0.323l0.455-0.323 l0.484,0.226l-0.553,0.953l-0.169-0.421l-0.688,0.405L1362.211,589.045L1362.211,589.045z M1361.876,586.315l-0.538,0.469 l0.521,0.079L1361.876,586.315L1361.876,586.315z M1362.869,585.394l-0.808,0.048l0.186,0.387l0.468-0.03L1362.869,585.394 L1362.869,585.394z M1363.105,587.911l0.838-1.29l0.701,0.741l0.405,0.579l0.836-0.063l0.872-0.838h0.57l0.502,0.838l2.013,0.226 l0.435-0.579h0.936l1.846,1.062l0.838,0.163l1.005,1.03h0.972l0.37-0.805l-0.438-1.677l-2.312-1.26l-1.908-0.353l-0.938-0.744 l-1.006-0.095l-0.84,0.708l-0.971-0.095l-0.671-0.26l-1.374,0.098l-1.91-0.033l-0.401,0.518l-0.066,0.517l-0.77,0.258 l-0.304,0.771l0.237,0.582H1363.105L1363.105,587.911z M1353.924,586.49l0.871,0.357l0.737-0.612l1.774,0.095l1.31,0.518 l0.066,0.515l0.804,0.902l-0.066,0.677l-0.77-0.03l-0.942,0.804l-1.072-0.094l-1.104,0.094l-0.403-0.354l-1.372-0.258 l-0.737-0.967l0.133-1.127L1353.924,586.49L1353.924,586.49z M1328.222,604.935l-0.641-0.326l-0.362,0.326l0.512,0.412 L1328.222,604.935L1328.222,604.935z M1327.251,598.721l0.741,1.423l-0.369,0.663l-0.354,0.936l-0.199-0.663l-0.405-0.629 l0.32-0.565l0.068-0.71L1327.251,598.721L1327.251,598.721z M1353.065,581.45v0.711l0.641,1.003l-0.036,0.42l-0.37-0.162 l-0.403-1.051l-0.171-0.742L1353.065,581.45L1353.065,581.45z M1350.491,580.368l0.505-0.227l0.706,0.26l0.658-0.293l1.729,0.229 l0.943,0.161l-1.094,0.26l-2.033,0.451l-1.01-0.273l-0.032-0.343L1350.491,580.368L1350.491,580.368z M1345.883,580.448 l0.608-0.581l0.45,0.112l0.573-0.225l0.927,0.225l0.587,0.308l0.588-0.42l0.604,0.21l0.017,0.759l-0.72-0.078l-0.824,0.37 l-0.658-0.161l-1.006,0.581l-0.878-0.178l-0.335-0.484L1345.883,580.448L1345.883,580.448z M1337.693,596.975l0.791-1.305 l0.422-1.391l0.084-1.405l0.387-0.34l0.655,0.098l0.017,0.582l0.287,0.598l-0.034,0.418l-0.237-0.354l-0.151,0.39l-0.552,0.418 l-0.272,0.34l0.202,0.676l0.741,0.162l0.149,0.404l-0.316,0.373l-0.557,0.178l-0.521,0.854l-0.586,0.293l-0.623-0.323 L1337.693,596.975L1337.693,596.975z M1335.56,596.073c0.034-0.018,0.034,0.37,0.034,0.37l0.369,0.293l0.808-0.098l0.116-0.356 l0.354-0.095l0.101-0.743l0.592-0.582l0.013-0.472l-0.418-0.757l-0.791,0.387l-0.621,0.615l0.269,0.532L1335.56,596.073 L1335.56,596.073z M1333.524,595.427l-0.05,0.565l-0.269,0.273l0.335,0.972l0.404,0.157l0.691-0.45l-0.222-0.904l-0.554-0.774 C1333.861,595.266,1333.541,595.427,1333.524,595.427L1333.524,595.427z M1340.318,580.751l-0.705,0.291l0.504,0.225 C1340.117,581.267,1340.318,580.782,1340.318,580.751L1340.318,580.751z M1341.289,580.203l-0.402,0.354l0.671,0.097 L1341.289,580.203L1341.289,580.203z M1342.496,579.301l-0.536,0.388l0.703,0.226L1342.496,579.301L1342.496,579.301z  M1338.604,578.251l1.04-0.599l1.277,0.101l0.101,0.387l-0.3,0.516l0.702-0.161l0.337-0.549l0.667,0.484l-0.167,0.677 l-0.837,0.194l-0.27-0.323l-0.433,0.613l-0.772-0.549l-0.604,0.515l-0.703-0.481L1338.604,578.251L1338.604,578.251z  M1333.71,573.84l0.741,0.293l0.032-0.487C1334.483,573.646,1333.727,573.824,1333.71,573.84L1333.71,573.84z M1333.053,574.069 l0.422-0.018l0.637,0.371l-0.653,0.145L1333.053,574.069L1333.053,574.069z M1327.214,570.143l1.074-0.357l1.271,0.582 l1.509,0.031l1.675-0.805l1.105,0.128l0.401,0.516h0.975l0.568-0.256l1.977,0.192l1.042-0.065l0.199-0.259l1.106,0.033 l0.737,0.387l0.233,0.452l0.938,0.289l3.519-0.773l1.475-0.967l0.404-0.741l0.601-0.067l0.504-0.577l0.637-0.422l0.3-0.774 l0.403-0.643l0.436-0.323l-0.436-0.451l-0.103-0.518l-1.306-0.29l-0.904,0.29l-0.168,0.872l-0.703,0.518l-0.066,0.451 l-0.973,0.677l-0.737,0.097l-0.468,0.678l-1.106,0.259l-2.21-0.42l-1.878-0.163l-0.338,0.486l-0.432,0.063l-0.906-0.774 l-0.703-0.063l-0.806,0.029l-0.873-0.191l-1.204-0.195l-0.637,0.387l-0.706-0.387l-0.902-0.838l-1.374-0.256l-0.836,0.031v0.968 l-0.707,0.452l-0.401,0.838l-0.603,0.515l-1.206-0.388l-1.104,0.261l-0.438,0.48l0.101,0.323l-1.172,1.066v1.289l0.233,0.741 l-0.068,1.484l-0.234,0.515l0.468,1.063l0.136,0.842l-0.369-0.454l-0.268-0.677l-0.604,0.161l-0.602,0.709l-0.739,0.389 l-0.166,0.871l0.134,1.031l-0.335,0.676l0.235,1.872l-0.235,0.417l-0.133,0.743l-0.604,0.26l0.032,1.128l-1.07,0.805 l-0.336,1.161l0.167,0.355l-0.402,0.517l0.537,1.548l0.504,0.71l0.333-0.195h0.705l0.503-0.354l0.468,0.225l0.302,1.129 l0.803,2.065l-0.335,0.517l-0.266,1.16l-0.671,0.936l-0.103,1.936l0.137,1.516h0.5l0.638,0.387l0.972-0.034l0.438-0.484 l0.87,0.195l0.77-0.132l0.57,0.421l0.169-0.709l-0.103-0.903l-0.637-0.417l-0.133-1.164l0.502-0.805l0.201-1.481l-0.167-1.39 l-0.367-0.387l0.905-1.289l0.3-1.162l-0.268-1.387l-0.604-0.515v-0.418l1.007-0.612l0.401-0.616l0.938-0.192l0.939,0.323 l-0.102,0.451l0.436,0.74v0.903l-0.735,0.807l-0.203,0.806l0.503,0.904l0.637,0.096l0.57,0.679l1.07,0.613l0.167,0.838 l-0.365-0.064l-0.235,1.644l0.335,0.904l0.669,0.226l0.505-0.162l1.038,0.419l0.77-0.128l-0.066-0.323l-0.268-0.646l0.802-0.706 l0.806-0.195l1.108-0.613l1.374,0.098l0.501-0.516l0.369,0.192h0.669l0.401-0.644l-0.132-0.387l-1.208-0.098l-0.369,0.162 l-0.4-0.131l-0.873,0.097l-0.066-0.643l-0.434-0.066l0.032-0.419l-0.4-0.097l-0.405,0.225l-0.032-0.483l-0.804-0.226l-0.27-0.549 l0.539-0.516l0.198-0.417l0.336,0.127l-0.27-0.548l0.404-0.064l0.2-0.451l-0.436-0.42l-0.637-0.192l0.27-0.42l-0.101-0.485 l-0.806-0.515l-0.538-0.034l-0.231-0.837l-1.275-1.388l-0.77-0.515l-0.47-0.805l0.101-0.356l0.369,0.032l0.201,0.452l0.838,0.031 l0.736-0.547l0.199-0.548l1.878-0.646l1.34-0.999l0.637-1.031l0.84-0.42l0.032-0.613l1.007-0.227l0.903,0.453l0.568,0.063 l0.806-1.098v-0.707l-0.972-0.356l-2.077,0.194l-0.904,0.614h-1.374l-0.671,0.191l-0.806,0.808l-0.871-0.067l-0.671,0.165 l-0.87-0.518l-0.838-0.226l-0.906,1.127l-0.635,1.484l-0.905,0.45l-0.971-0.127l-0.233-0.418l-1.207-1.292l-1.207-0.999 l-0.635-1.58l0.131-1.742l0.739-1.678L1327.214,570.143L1327.214,570.143z M1328.109,541.204l-0.587,0.68l0.558,0.179l0.25-0.438 L1328.109,541.204L1328.109,541.204z M1329.271,544.178l0.808,0.016l0.387-0.257l0.421,0.241l0.653-0.323l-0.015-0.39 l-1.06-0.192l-1.11,0.212l-0.353,0.387L1329.271,544.178L1329.271,544.178z M1322.233,548.796l-0.185,0.551l0.404,0.808v-0.714 L1322.233,548.796L1322.233,548.796z M1323.857,547.851l1.539-1.22l0.724-0.131l0.075,0.68l-1.086,0.743l-1,0.209 L1323.857,547.851L1323.857,547.851z M1314.283,552.738l0.269,0.45l-0.464-0.2L1314.283,552.738L1314.283,552.738z  M1314.313,552.237l-0.03,0.186l0.269,0.435l0.764,0.033l-0.017-0.298L1314.313,552.237L1314.313,552.237z M1314.834,554.734 l-0.947,0.226l0.695,0.185L1314.834,554.734L1314.834,554.734z M1313.845,555.646l0.444,0.25l-0.006,0.794l-0.306-0.089 L1313.845,555.646L1313.845,555.646z M1308.018,587.944l0.242,0.217l-0.109,1.187l-0.252,0.076l-0.05-1.125L1308.018,587.944 L1308.018,587.944z M1307.621,587.992l0.052,1.56l-0.243,0.896l-0.714,0.476l-0.372-0.438l0.143-1.289l0.481-1.295l0.429-0.259 L1307.621,587.992L1307.621,587.992z M1275.421,573.84l1.136,0.321l0.166,0.244l-0.478,0.256l-0.832-0.28l-0.168-0.422 L1275.421,573.84L1275.421,573.84z M1275.866,575.784l1.194,0.203l0.514,0.477l0.367,0.105l0.026,0.323l-1.091-0.048 l-0.457,0.023l-0.654-0.732L1275.866,575.784L1275.866,575.784z M1276.825,577.201l1.15,0.047l0.671,0.459l-0.896,0.906 l-0.582,0.161l-0.387-0.477l0.137-0.573C1276.918,577.725,1276.833,577.207,1276.825,577.201L1276.825,577.201z  M1274.603,566.496l0.737-1.225l1.106-1.421l0.468-0.676l0.725-0.218l0.945,1.635l1.493,1.021l0.15,0.373l1.059,0.954 l0.385,0.745l0.688,0.079l1.344-0.355l0.153-0.52l1.158,0.082l0.653-0.324l2.551,0.132l2.587-1.005l0.69-0.583l2.257-0.066 l1.171,0.549l0.371,0.548l1.105-0.033l1.908-0.999l2.212-0.323l-0.133-0.677l1.842-2.675l0.739-1.903l1.406-2.032l1.006-3.453 v-0.674l0.471-0.774l-0.068-0.582l0.973-1.128l0.769,0.319l1.477-0.127l2.043,0.031l0.504,0.355l1.308-0.033l1.003,0.293 l-0.048,0.245l-0.47,0.095l0.066,0.42l-0.3,0.451l0.973,0.354l0.902,1.034l-1.039,0.258l-1.038-0.161l-0.435,0.258l0.735,0.836 l0.395,0.211l0.108,0.491l-0.402,0.105l-0.335,0.677l0.772,0.646l0.302,0.937l1.541,1.546l0.703,0.612l-0.468,0.841l-1.208,0.256 l-0.168,0.552l0.403,0.32l0.199,0.774l0.707,0.386l1.975,1.774h0.669l0.772,0.839l0.268,0.549l0.737,0.161l-0.235,0.808 l-0.57,0.226l-0.601-0.226l-0.703,0.481l-1.072-0.128l-1.509-1.421l0.3,1.196l-0.27,0.451l-0.432-0.55l-0.975,0.936v0.646 l-0.434,0.483l-0.167,1.708l-0.402,0.613l-0.335,1.549l-1.239,0.935l0.468,1.162l-0.572,0.805l-0.802,0.808l-0.391-0.842 l-0.472-0.225l0.252,0.595l-0.066,0.953l-0.79,0.872l-0.153,0.793l-0.771,0.307l-0.689-0.098l0.169,0.404l-0.372,0.517 l1.13-0.062l0.182,0.177l-0.135,0.792l-0.536,0.371l0.304,0.193l0.536-0.047l0.117,0.612l-0.286,0.697l-0.737-0.213l-0.137-0.175 l-0.049,0.354l0.419,0.387l0.286,0.259l-0.705,1.439h-0.489l-0.202-0.353l-0.266,1.127v0.613l-0.973,1.71l-1.574,1.033 l-1.342,0.226l-1.91,0.868l-0.904,0.131l-0.27-1.225l0.169-0.68l-0.47-0.678l-0.167-0.322l-0.438,0.194l-0.504-0.646 l-0.433,0.226l-0.737-0.192l-0.403-0.71l-0.326,0.71l0.32,0.597l-0.862-0.234l-0.369-0.46v-0.709l-0.505-0.419l-0.534,0.321 l-0.84-0.484l-0.504,0.066l-0.703,0.74l-1.137,0.162l-0.191,0.44l-0.688,0.095l-0.488-0.421l-0.538,0.146l-1.077,1.276h-0.671 l0.101-0.727l-0.137-1.503l-0.384-1.098l0.182-0.776l-0.282-0.597l0.083,0.484l-0.423,0.854l-0.587,0.373l-0.572-0.39 l-0.791,0.551l-1.175,0.099l-0.709-0.246l-0.974-0.063l-0.284-0.582l-0.724,0.598h-0.52l-0.54-1.243l-0.018-1.067l-0.252-2.002 l-0.808-0.501l-0.22-0.549l0.505-0.6l0.639-0.887l-0.116-0.792l-0.455-0.793l-1.324-1.273l-1.14-0.643l-1.101-0.248l-0.034-0.356 l0.844-0.098l0.722-0.612l1.63-0.373l1.094-0.821l0.891,0.064l-0.842-0.243l-1.243,0.741l-1.446,0.212l-0.606,0.13l-0.939-0.275 l-0.592-1.035l0.288-0.272l0.537,0.258l-0.419-0.679l-1.382-1.665l-0.133-1.696l0.641-0.37l0.101-0.535l-0.233-0.596 L1274.603,566.496L1274.603,566.496z M1395.075,576.141l-0.569,0.158l0.537,0.549l0.601-0.128L1395.075,576.141L1395.075,576.141 z M1397.12,578.978h-1.206l0.668,0.226L1397.12,578.978L1397.12,578.978z M1397.823,579.269c0-0.034,0.301,0.353,0.301,0.353 l1.477,0.582l2.144,0.291l1.942-0.291l0.538-0.289l-1.575-0.323l-0.772,0.192l-1.406-0.389l-0.94,0.455L1397.823,579.269 L1397.823,579.269z M1397.823,574.979l0.769,0.742l-0.031-0.516l0.47,0.03l0.804,1.033l-0.137,0.579l0.707,0.131h0.267 l0.402,0.192l1.074-0.192l-0.403-0.387l-0.671-0.323l-0.603-0.936l-0.773-0.481h-0.733l-1.31-0.229L1397.823,574.979 L1397.823,574.979z M1384.324,597.382l0.252,0.855l0.035,0.712l0.336,0.338l0.03-1.033L1384.324,597.382L1384.324,597.382z  M1386.827,596.494l-0.923,0.468l-0.402,1.874l-0.339,0.531l0.624-0.225l0.621-1.842L1386.827,596.494L1386.827,596.494z  M1394.121,602.5l-0.354,0.39l0.236,0.192l0.217-0.225L1394.121,602.5L1394.121,602.5z M1391.406,600.91l-0.362-0.275 l0.101,0.381l0.026,0.923l0.358,0.327l0.22,0.502l-0.326-0.306l-0.312-0.026l-0.076,0.826l0.438,0.41l0.462-0.063l0.856-0.744 l0.169-0.402l-0.421-0.26l-0.296-0.606L1391.406,600.91L1391.406,600.91z M1393.077,601.225c0-0.024-0.269,0.188-0.269,0.188 l0.043,0.426l0.377,0.284l0.471-0.09l-0.157-0.442L1393.077,601.225L1393.077,601.225z M1391.798,599.868l-0.538-0.122 l-0.074,0.445l0.698,0.758l0.562,0.284l0.27-0.17l-0.771-0.711L1391.798,599.868L1391.798,599.868z M1393.532,599.214 l-0.79,0.281l-0.658,0.558l0.159,0.242l0.98,0.51l0.375,0.267l0.479-0.556l0.093-0.494l-0.193-0.113l0.083-0.242l-0.286-0.404 L1393.532,599.214L1393.532,599.214z M1391.725,598.22l-0.252,0.009l-0.12,0.306l0.372-0.008V598.22L1391.725,598.22z  M1393.186,596.944l0.436,0.484l0.354,0.017l-0.389-0.531L1393.186,596.944L1393.186,596.944z M1393.017,597.237l-0.438-0.067 l-0.401,0.68l-0.423,0.114l0.488,0.129l0.068,0.354l0.437-0.079l-0.639,0.434l0.134,0.535l0.336-0.034l0.641-0.436l0.538,0.016 l0.218-0.42l-0.036-0.774l-0.367-0.048L1393.017,597.237L1393.017,597.237z M1380.811,604.279l0.756-0.37l-0.254-0.146 L1380.811,604.279L1380.811,604.279z M1380.018,604.652l1.162,0.582l-0.318-0.453L1380.018,604.652L1380.018,604.652z  M1376.034,606.54l-0.538,0.194l0.385,0.082C1375.881,606.816,1376.034,606.493,1376.034,606.54L1376.034,606.54z  M1377.194,606.042l-1.211,0.081l0.589,0.241l0.485-0.113L1377.194,606.042L1377.194,606.042z M1377.279,609.289l-0.521-0.05 l-0.843,0.551l-0.133,0.354l0.671-0.127l0.604-0.455L1377.279,609.289L1377.279,609.289z M1378.758,605.604l-1.263,1.084 l-0.049,0.417l0.169,0.31l-0.504,0.404l-0.018,0.662l0.671,0.549l0.591-0.161l1.058-1.278l0.354-1.098l-0.186-0.629l0.252-0.468 l-0.085-0.323l-0.536-0.131l-0.438,0.322L1378.758,605.604L1378.758,605.604z M1371.729,601.225l0.641-0.37l-0.472-0.226 L1371.729,601.225L1371.729,601.225z M1369.593,602.584l-0.472,0.339l0.641,0.034L1369.593,602.584L1369.593,602.584z  M1371.293,609.319l-0.959,0.487h0.555L1371.293,609.319L1371.293,609.319z M1369.744,608.011l0.538-0.256l0.606,0.337 l0.183,0.713l-0.701,0.145l-0.592-0.468L1369.744,608.011L1369.744,608.011z M1364.719,604.959l0.418-0.323l0.473,0.323 l-0.235,0.356l-0.506-0.02L1364.719,604.959L1364.719,604.959z M1365.777,610.194l0.855-0.066l0.389,0.228l-0.773,0.064 L1365.777,610.194L1365.777,610.194z M1358.629,607.105l0.874-0.596l-0.552-0.259l-0.371,0.323L1358.629,607.105 L1358.629,607.105z M1361.086,609.646l1.377,0.094l0.759-0.145v0.468l-1.094,0.373l-0.908-0.42L1361.086,609.646 L1361.086,609.646z M1359.791,610.017l0.639-0.18l-0.034,0.485L1359.791,610.017L1359.791,610.017z M1357.672,609.724l0.59-0.289 l0.47,0.372l-0.574,0.29L1357.672,609.724L1357.672,609.724z M1340.302,619.161l-0.286,0.919l0.472,0.356l1.512-0.081 l1.329-0.839l0.824-0.242l0.758,0.064l0.876-0.615l0.57-0.838l1.745-1.263l0.423-0.534l0.476-0.197l-1.122-1.002l-0.959-1.045 l-0.401,0.189l-0.789,0.22l-0.065,1.15l-0.836,0.131l-0.973,0.482l-0.691-0.78l-0.266,0.249l-0.903,0.514l-0.336,0.936 l-0.87,1.387l-0.14,0.376l0.377,0.341l0.153,0.37h-0.498L1340.302,619.161L1340.302,619.161z M1339.377,620.146l0.352-0.905 l-0.352-0.016l-0.487,0.742L1339.377,620.146L1339.377,620.146z M1339.479,620.772l-0.869,0.389l0.168,0.161l-1.441,0.677 l-0.703,0.612l0.669,0.225l2.11-0.837l0.302-0.711L1339.479,620.772L1339.479,620.772z M1332.567,620.581l0.502,0.323 l0.119,0.437l-0.604,0.29l-0.843-0.047l0.454-0.727L1332.567,620.581L1332.567,620.581z M1319.106,615.808l2.009-1.002 l1.239,0.936h0.839l0.838-0.451l1.105,0.518l0.301,0.806h0.904l0.773,1.128l0.77,0.709l0.035,0.582l-1.175,0.58l-1.308,0.128 l-1.07-0.451l-0.773-1.064l-0.77-0.16l-0.735-0.87l-1.04,0.162l-1.273-0.26l-0.735-0.646L1319.106,615.808L1319.106,615.808z  M1304.713,605.537l0.684,0.026l0.216-0.048l-0.067,0.257l-0.664-0.014L1304.713,605.537L1304.713,605.537z M1302.021,604.189 l0.631,0.58l0.597-0.638l0.445,0.076h0.304l-0.167-0.251l-0.587-0.243l-0.868-0.105l-0.372,0.324L1302.021,604.189 L1302.021,604.189z M1352.038,608.707l1.01-0.564l1.463,0.306l0.505,0.387l0.218-0.404l0.673-0.5l0.707-0.354l-0.187-0.485 l-0.758-0.309l-0.724,0.518l-1.562,0.129l-0.487-0.389l-0.722,0.34l-0.336,0.939L1352.038,608.707L1352.038,608.707z  M1350.491,609.935l-0.271,0.37l0.17,0.196l0.354-0.26L1350.491,609.935L1350.491,609.935z M1346.288,609.837l-0.925,0.389 l0.369,0.258l-0.305,0.323l0.085,0.34l0.825,0.195l1.58-0.535l0.523-0.581l-0.473-0.307l-1.277,0.128L1346.288,609.837 L1346.288,609.837z M1342.909,611.584l0.639-0.017l0.455,0.417l0.72-0.936l-0.083-0.387l-0.451,0.403l-0.86,0.098 L1342.909,611.584L1342.909,611.584z M1340.032,611.729l0.927-0.633l-0.203-0.4l0.402-0.147l0.657,0.097l0.639-0.355l0.354,0.228 l-0.959,0.855l-0.438,0.502l-0.959,0.194L1340.032,611.729L1340.032,611.729z M1339.261,611.486l-0.959,0.178l-0.322,0.711 l0.521-0.535L1339.261,611.486L1339.261,611.486z M1339.746,610.16l-0.604,0.502l0.472,0.259l0.286-0.387L1339.746,610.16 L1339.746,610.16z M1323.235,612.035c-0.042-0.067,0.226-0.809,0.226-0.809l1.408-0.74l2.278-0.484l1.141,0.549l0.637-0.162 l1.205,0.289l1.273,0.774l0.973-0.387l1.34,0.063l0.604,0.455l1.038-0.098l0.537-0.612l0.835-0.259l0.539-0.775l-0.368-0.19 l0.802-0.521l0.973,0.389l0.102,0.808l-0.438,0.74l-0.603,0.26l-0.671,0.872l-1.005,0.127l-0.401,0.418l-0.671-0.226 l-1.406-0.031l-1.308,0.579l-1.491-0.27l-1.027,0.421l-0.199,0.242l-0.675-0.018l-0.521-0.275l-0.84,0.34l-0.538-0.438 l-0.723-0.094l-0.657,0.111l-0.705-0.179l-0.623,0.067l-0.771-0.179L1323.235,612.035L1323.235,612.035z M1322.612,611.971 l-0.32,0.889l0.621-0.114l0.103-0.532L1322.612,611.971L1322.612,611.971z M1322.176,611.486l-0.792-0.242l-0.335,1.017 l0.486,0.646l0.289-1.066L1322.176,611.486L1322.176,611.486z M1308.884,612.1l-0.135,0.549l0.335,0.319l-0.267,0.387 l0.401,0.485l0.84,0.354l1.205-0.258l0.669,0.258l1.007-0.321l0.401-0.519l0.836,0.292l1.008-0.42l0.938,0.162l1.003-0.84 l0.301,0.613l0.874-0.128l1.306,0.159l-0.601-0.481h1.205l0.103-0.97l-0.336,0.388l-0.269-0.805l0.101-0.677l-0.973-0.26 l0.133,0.711l-0.468,0.191l-0.103-0.774l-0.937-0.545l-0.938,0.32l-0.872-0.516l-0.771-0.323l-1.138,0.677l0.031,0.485 l1.878,0.676l0.739,0.71l-1.242,0.162l-0.738,0.322l-1.105-0.677l-0.234-0.776l-0.635-0.128l-0.77,0.195l-0.84-0.195l-1.34,0.484 C1309.488,611.389,1308.817,612.1,1308.884,612.1L1308.884,612.1z M1306.166,611.002l0.978-0.68l1.462,0.454l-0.203,1.05 l-0.419,0.579l0.083,0.743l-0.641-0.226l-0.891,0.34l-1.495-0.435l-0.303-0.406l0.403-0.259l0.808,0.034L1306.166,611.002 L1306.166,611.002z M1303.156,612.405l0.455-0.435l0.303,0.484l-0.488,0.242L1303.156,612.405L1303.156,612.405z  M1298.731,609.649v0.676l0.434,0.579l1.273,0.259l1.138,0.838l0.238,0.516l0.402-0.549l0.737-0.354l0.301-0.323l0.836-0.162 l0.235-0.514l-1.005-1.162l-1.241-0.259l-1.273,0.421l-1.039-0.26L1298.731,609.649L1298.731,609.649z M1411.707,610.292 l0.387,0.081l0.871,0.292l0.27-0.26l-0.336-1.02l-0.318-0.08l-0.486,0.29L1411.707,610.292L1411.707,610.292z M1407.109,610.453 c-0.034,0.033,1.594-0.098,1.594-0.098l0.637-0.127l1.191,0.177l0.757-0.354l0.72-0.812l0.723-0.176l0.354-0.454v-0.47 l0.219-0.227l0.184-0.746l0.169-0.322l-0.69-0.518l-0.301-0.273l-1.66-0.067l-1.027,0.471l-0.487,1.278l-0.485,0.904 L1407.109,610.453L1407.109,610.453z M1291.634,603.669l-0.671,0.922l0.94,0.925l0.689,0.095l0.586-0.337l1.594,0.078 l0.843-0.356l1.025-0.129l0.402-0.533l-0.472-0.21l-1.241,0.18l-0.705-0.229l-2.502-0.08L1291.634,603.669L1291.634,603.669z  M1256.599,602.196l0.101,0.454l0.335-0.034l0.032-0.42H1256.599L1256.599,602.196z M1257.286,602.829l0.37,0.372l0.705-0.244 l0.083-0.905l0.976-0.131l0.435-0.922l-0.066-0.938l0.94-1.054l0.418,0.407l1.092-0.018l1.493,0.226l0.705,0.552l0.389-0.323 l0.419-0.454l1.427,0.081l0.906,0.696l1.664,0.387l2.031,0.211l0.534,0.939l-0.168,0.874l0.371,0.371l1.594,0.696l2.805-0.048 l2.484,0.388l2.115-0.34l0.57-0.728l0.27-1.765l0.871-0.048l1.144,1.164l0.737-0.014l0.839-0.148l0.639,0.374l0.975,0.824 l0.806-0.048l0.657,0.694l0.601-0.291l1.243,0.018l0.052,1.198l0.889,1.132l0.068,0.663l0.639,0.694l1.04,0.47l1.007-0.356 l0.72,0.42l0.758-0.029l0.603-0.374l0.76-0.017l0.217,0.293l0.803,0.127l0.521,0.552l-0.282,1.959l-0.472,0.563l0.52,0.341 l0.269,1.345l-0.556,0.161l-0.684-0.679l-1.042,0.111l-1.192-0.952l-0.959-0.243l-0.889-0.908l-0.705-0.016l-1.324,0.665 l-1.396,0.05l-1.173-0.646l-1.304-0.259l-1.073,0.871l-1.173-0.805l-1.608-0.097l-0.973,0.515l-2.448-0.903l-2.242-1.353 l-1.477,0.03l-1.104-0.741l-0.671,0.031l-0.57,0.646l-0.87-0.161l-0.703-0.71l-0.641,0.05l-0.84,0.938l-2.065-0.565l-1.444-1.053 l-1.408-0.098l-0.641-0.322l-0.856,0.483l-1.09-0.37l-1.228-0.194l-0.415-0.387l0.635-1.117l0.401-0.373l-0.653-0.032 l-0.556,0.291l-0.619-0.373l-0.419-0.777l-1.011,0.39l-1.878-0.032l-0.604-0.341l-0.034-0.518L1257.286,602.829L1257.286,602.829 z M1269.356,552.502l0.923,0.856h0.521l-0.201,0.696h0.687l0.388-1.262l-1.059-1.375l-0.787,0.45L1269.356,552.502 L1269.356,552.502z M1261.617,557.971l-0.02,0.727l0.506-0.256L1261.617,557.971L1261.617,557.971z M1261.598,556.094 l0.506-0.518l-0.572-0.26L1261.598,556.094L1261.598,556.094z M1261.717,556.498l-0.282,0.533l0.618,0.082L1261.717,556.498 L1261.717,556.498z M1258.803,557.344l-0.097,0.774l0.502,0.301l0.906-0.93l-0.755-0.285L1258.803,557.344L1258.803,557.344z  M1250.824,567.196l0.987,0.307l0.454-0.875l-0.184-0.632L1250.824,567.196L1250.824,567.196z M1253.105,566.353l-0.419,0.907 l0.989,0.259l0.286,1.117l0.604-0.211l0.285-1.36l-0.451-0.47l0.365-0.696l-0.502,0.115l-0.438,0.389L1253.105,566.353 L1253.105,566.353z M1273.706,579.752l0.066,0.46l0.697,0.301l0.305-0.382l-0.381-0.396L1273.706,579.752L1273.706,579.752z  M1267.628,583.92l0.334,0.781l-0.05,0.435l-0.945,0.219l-0.312,0.455l0.737,0.03l-0.023-0.29l0.61-0.301l-0.022,1.271 l0.703,0.688l0.79-1.173l0.485,0.704l0.717,0.138l0.276-0.631l0.711-0.325l-0.429-0.888l-1.552-0.965l-1.561-0.282 L1267.628,583.92L1267.628,583.92z M1264.623,585.611l-0.133,0.76l0.551-0.47L1264.623,585.611L1264.623,585.611z  M1257.94,579.884l-0.018,0.727l-0.873,0.646l0.572,0.729l1.694,0.114l0.454,0.438l0.034,0.888l0.52,0.326l0.284,1.194 l1.042,0.649l0.924-0.114l0.303,0.891l0.438,0.357l0.469-0.664l-0.316-0.907l0.484-1.1l-1.527-0.341l-0.989-1.052l-0.371-2.022 l-0.37-0.325l-0.117-0.761l-0.671-0.307h-0.589l0.083,0.795l0.337,0.581l-0.891-0.292l-0.604-0.615L1257.94,579.884 L1257.94,579.884z M1253.458,574.381l-0.472,0.598l0.756,0.694l0.808-0.451l-0.306-0.841H1253.458L1253.458,574.381z  M1254.197,572.439l-0.504,0.871l0.468,0.552l0.757-0.242l1.076,0.549l0.369-0.29l-1.412-1.264L1254.197,572.439 L1254.197,572.439z M1244.911,566.449l-0.687,1.116l0.167,0.842l1.596,0.178l1.09,0.519l0.354-0.29l-0.303-1.295l-1.021-0.841 L1244.911,566.449L1244.911,566.449z M1242.275,565.074l0.488-0.03l1.211,0.421l0.502,0.679l-0.587,0.972l-0.455-0.39 L1242.275,565.074L1242.275,565.074z M1239.07,562.892l0.502,1.342l0.84-0.129l0.842-0.924l-0.825-0.905l-0.57,0.47 L1239.07,562.892L1239.07,562.892z M1242.292,596.418l1.175,0.827l-0.015-0.632l-0.588-0.42L1242.292,596.418L1242.292,596.418z  M1233.693,585.155l-0.606,0.805l1.712,1.514l-0.203-0.868l0.068-0.744L1233.693,585.155L1233.693,585.155z M1232.318,584.282 l0.837,0.354l-0.705,0.612L1232.318,584.282L1232.318,584.282z M1230.608,581.445l-0.468,0.516l0.534,0.677l1.038,0.322 L1230.608,581.445L1230.608,581.445z M1225.551,577.382v0.708l1.004,0.356l1.207,1.74l1.172,0.354v-1.676l-1.375-1.902 l-1.04-0.323L1225.551,577.382L1225.551,577.382z M1224.935,574.057l-0.472,0.97l0.555,0.616l0.654-0.634l-0.014-0.646 L1224.935,574.057L1224.935,574.057z M1225.556,571.63l1.09,0.017l0.403,0.272l0.101-0.582l-1.091-0.371L1225.556,571.63 L1225.556,571.63z M1218.906,565.592l0.905-0.03l0.455-0.471l0.604,0.208l0.688,1.265l1.075,0.808l-0.282,0.633l-0.195,1.169 l-0.411,0.185l-0.882-1.569l-0.655-0.16l-0.237-0.997L1218.906,565.592L1218.906,565.592z M1218.856,562.194l1.092,0.34 l-0.401-0.565L1218.856,562.194L1218.856,562.194z M1212.527,558.263l-0.368,0.37l-0.271,0.551l0.893,0.536l1.091-0.147 l-0.641-0.824L1212.527,558.263L1212.527,558.263z M1209.864,545.679l-0.191,0.479l0.235,1.312l1.163,2.434l0.737,0.323 l2.011,2.128h0.603l1.241,1.483l0.703,0.259l0.604-0.226l1.509,1.226l1.64,2.515l1.645,1.515h0.469v1.161l0.436,0.357 l0.168,1.146l0.588,0.519l0.975-0.017l1.243,1.503l0.635,0.357l0.557-0.082l0.167,0.471l-0.371,0.629l0.587,0.633l0.455,1.134 l-0.044,0.283l0.938,2.387l0.436,1.293l1.206,0.354l1.374,0.901v0.774l1.139,1.936l1.07,0.774l0.203,2.19l1.741,3.1l-0.1,1.257 l0.438,1.128l1.675,1.225l1.71,2.033l0.468,1.097l1.306,0.26l0.473,0.515l1.137,0.71l0.167,1.289l1.008,0.612l1.205,1.29 l2.079,1.258l0.469,0.967l1.34,0.356l2.747,2.319l0.235,0.937l0.603,0.258l0.635,1.03l0.338-0.384v-0.871l-0.27-0.451v-0.485 l0.838,0.162l1.81,1.612l0.37-0.289l0.032-1.162l0.371-0.611l0.77,0.159l0.84,1.26l0.534,0.227l0.637-0.616l-0.103-1.999 l0.472-2.45l-0.504-1.644l0.771-1.773l-0.403-0.677l0.066-1.421l0.839-0.356l0.37-0.643l-0.135-0.839l-0.703-0.322l-0.84-0.646 l-0.367-1.031l-0.568-0.291l-0.271-0.708l-0.87-0.355l-1.406,0.16l-0.905-0.128l-0.133-1.323l-0.673-0.871l-0.601,0.356 l0.434-0.871l-0.367-0.966l-0.137-2.194l-1.105,0.421l-0.468-0.421l-1.81-0.033l-1.575-1.031l0.034-0.74l0.937-0.421l1.08-0.581 l-0.707-0.357l-1.006,0.145l-0.556-0.211l-1.008,0.356l0.724-0.629l1.108-0.795l1.378-0.208l-0.269-0.925l-1.428-1.52 l-0.824-0.099l-1.074,0.696l-0.957,0.565l-1.176,0.067l0.672-0.131l0.438-0.388l0.436-0.114l0.453-0.615l-0.218-0.565 l-1.056-0.486l-1.63,0.05l-1.16-0.925v-0.598l-0.149-1.166l-1.948-1.843l-0.637-0.131l-0.604,0.179l-0.756-0.566l-0.217-1.654 l-1.34-1.288l-1.745-0.938l-1.104-0.064l-0.235,0.421l-0.534-0.356l-0.27-1.192l-0.637,0.613l-0.468-0.646l-0.066-1.322 l-0.84-1.031l-1.005-0.194l-0.367-0.613l-2.682-1.707l-0.906-0.098l-1.104-1.19l-1.106-0.162l-0.302-0.68l-0.233-1.417 l-0.941-0.485l-0.534-1.097l-0.402-0.128l-0.669-1.161l-1.072-0.387h-0.973l-0.637,0.226l-0.504-0.322l-1.171-0.031l-1.374,0.354 l-0.673-0.421l-2.144-1.417l-1.91-0.259L1209.864,545.679z ",
"M1343.163,615.237l0.691,0.78l0.973-0.482l0.836-0.131 l0.065-1.15l-0.587,0.164l-1.237,0.131L1343.163,615.237L1343.163,615.237z M1346.919,613.845l0.959,1.045l1.122,1.002 l0.148-0.059l0.856-0.808l0.754-0.229l0.86,0.067l1.918-0.34l1.31-0.776l1.348-0.371l0.353-0.534l0.519-0.082l0.923-0.582 l0.018-0.37l-0.436-0.42l-1.771,0.42l-1.106-0.066l-1.039,0.226h-0.936l-1.273,0.195l-1.945-0.098l-1.476,1.259L1346.919,613.845 z",
"M1286.274,559.395l-0.044,0.711l-0.158,0.082l-0.11-0.26 	l0.322-0.581L1286.274,559.395L1286.274,559.395z M1232.325,545.562l0.167,0.922l0.504,0.664l0.366-0.244l-0.167-0.613 	l-0.487-0.632L1232.325,545.562L1232.325,545.562z M1277.639,562.957l0.945,1.635l1.493,1.021l0.15,0.373l1.059,0.954 	l0.385,0.745l0.688,0.079l1.344-0.355l0.153-0.52l1.158,0.082l0.653-0.324l2.551,0.132l2.587-1.005l0.69-0.583l2.257-0.066 	l1.171,0.549l0.371,0.548l1.105-0.033l1.908-0.999l2.212-0.323l-0.133-0.677l1.842-2.675l0.739-1.903l1.406-2.032l1.006-3.453 	v-0.674l0.471-0.774l-0.068-0.582l0.973-1.128l0.769,0.319l1.477-0.127l2.043,0.031l0.504,0.355l1.308-0.033l1.003,0.293 	l0.085-0.4l1.105,0.708l0.773,0.193l0.968-0.481l1.211-0.229v-0.515l-1.241-0.999v-1.162l0.57-0.387l1.875,0.161l1.542-0.354 	l0.973-0.709l-0.201-0.71h-0.737l-1.072-0.192l-0.806-0.71l-0.804,0.064l-1.141-1.064h-0.637l-0.735,0.676l-0.437-0.386 	l1.005-0.839l-0.502-0.578l-0.402,0.127l-0.637,0.84l-0.401-0.485l-0.371-0.161l0.035-1.323l0.804-0.29l-0.034-0.578 	l-1.104-0.711l-0.401,0.26l-0.872-0.777l-0.034-1.226l-0.938-0.579l-0.434,0.259l0.265,0.804l-1.002,0.938l-0.402-0.064 	l0.3-0.805l-0.169-0.743l-0.601-0.031l-0.637,1.999l-0.671,0.162l-0.972,2.161l-0.169,1.158l-1.676,1.71h-0.803l-1.34,0.483 	l-0.471,0.58l0.504-0.031l-0.335,0.485l0.435,0.159l1.074-0.291l-0.435,0.646l-0.739,0.354l-0.128,0.17l0.085,0.356l0.572,1.555 	l-0.4,0.759l-0.623-0.342l-0.083-1.114l-0.197-0.807l-0.165,0.036l0.014-0.187l-0.408,0.05l-0.504,0.727l0.32,1.99l-0.487,0.229 	l-0.907-0.681l-0.806-1.311l-0.485-0.048l-0.703-0.301l-0.621,0.766l-0.036,1.057l-1.207,0.996l-0.435,0.905l-1.308,1.191 	l-0.301,0.809l-1.14,1.353l-1.237,1.033l-3.788,0.869l-0.417,0.194l0.254,1.162l0.445,0.479l-0.578-0.212l-0.653,0.332 	l-1.098,0.128l-0.512,0.602l-0.307,0.929l-0.018,1.29l-0.806,1.064l0.036,0.356l-1.844-0.229l-1.912-0.677l-1.34,0.033 	l-0.504-0.71l-0.8-0.871L1277.639,562.957L1277.639,562.957z M1310.768,537.355l-1.196,0.672l0.592-0.025l0.578-0.328 	L1310.768,537.355L1310.768,537.355z M1311.977,537.38l-0.84,0.77l0.218,0.29l1.019-0.282l0.026-0.663L1311.977,537.38 	L1311.977,537.38z M1286.191,560.871l-0.758,0.31l0.528-0.742L1286.191,560.871L1286.191,560.871z M1286.881,560.63 	l-0.514,0.211l-0.184-0.387l0.176-0.22L1286.881,560.63L1286.881,560.63z M1287.395,559.232l0.302,1.035l-0.582,0.273 	l-0.671-0.639v-0.442l0.271-0.065l0.06-0.013L1287.395,559.232L1287.395,559.232z M1232.488,541.704l0.302-1.026l0.604-0.74 	l0.871,0.74l1.273,0.353l0.233,0.518h0.973l0.603,0.581l-0.135,1.289l-0.534,0.646l-0.034,0.646l1.241,0.289l1.038-0.872 	l0.838-0.097l0.635,0.518l0.641-0.451v-0.807l0.22-0.223v0.008l0.667-0.033l0.423-0.44l0.389-0.103l0.703,1.22l3.377,3.316 	l1.021,1.56l0.455,1.827l-0.387,0.473l0.123,2.206l-0.229,0.387v0.776l0.353,0.593v2.229l0.598,1.164l1.066,0.927l0.739,0.018 	l0.211,0.389l-0.125,0.338l0.178,1.35l0.314,0.254l0.193,0.337l-0.018,0.27l0.281,0.138l0.981,1.856l0.017,1.111l-0.701-0.117 	l-0.176-0.337l0.036-0.506l-0.51-0.357l0.28,0.34l-0.07,0.487l-0.297,0.104l0.439,0.066v0.203l-0.933,0.558l-0.332-0.474 	l-0.299,0.307l-0.912-0.424l-0.595-0.677l-1.525-0.284l-1.402-0.709l-0.703-0.744l-0.493-0.387l-0.665,0.15l-0.665-0.033 	l-1.122-1.148l0.087-0.826l-1.421-1.08l-1.668-0.628l-0.578-0.503l0.106-0.607l0.701-0.643l-0.554-0.822l-0.842-0.476 	l-0.809-1.218l-1.268-0.713l-0.563-0.776l0.247-0.406l-0.703-0.645l-0.106-0.982l0.284-0.236l0.172-1.454l-0.561-1.116 	l-0.526-1.22l-0.495-3.689L1232.488,541.704z",



			"M1298.113,550.003l0.703,0.301l0.485,0.048l0.806,1.311 l0.907,0.681l0.487-0.229l-0.32-1.99l0.504-0.727l0.408-0.05l0.021-0.329l-0.066-0.902l-0.906,0.323l-1.104,0.805l-1.707,0.493 L1298.113,550.003L1298.113,550.003z M1302.245,549.497l0.197,0.807l0.083,1.114l0.623,0.342l0.4-0.759l-0.572-1.555 l-0.085-0.356l-0.241,0.315L1302.245,549.497z ",
"M1236.244,464.667l0.324-0.265l0.381-0.063l0.239-0.45 l0.508-0.425l0.985-0.38l0.604,0.072l-0.059,0.688l0.421,0.315l0.637-0.008l0.159-0.857l0.697-0.493l0.94,0.888l0.488-0.63 l0.535,0.031l0.22,0.647l1.038-0.485l0.169-0.663l1.143-0.323l0.906,0.502l1.56-0.495l-0.066-1.389l1.004-0.548h1.142 l0.635-0.612l1.004,0.774v0.58l1.041,0.195l0.403,0.579l2.109-0.032l0.367,0.452l1.242-0.483l0.805,0.612l-0.168,0.87 l-0.669,0.097l-0.473,1.646l0.54,0.194l0.266,0.935l1.878,0.646l0.27,0.643l0.902,0.389l0.934,0.451l0.957-0.276l0.404,0.306 l0.57-0.161l0.824,0.429l-0.072-0.017l0.177,0.354l-0.316,0.508l-0.493,0.202l-0.387-0.017l-0.804,0.491l-0.807-0.054 l-0.842,0.152l-0.246,0.404l0.193,0.644l-0.457,0.304l-0.174,0.303l-0.44-0.252l-0.703,0.152l-0.436,0.403l-0.316,0.121 l-0.298-0.425l-0.316-0.1l-0.07,0.624l-0.351,0.474l0.245,0.267l-0.122,0.677l0.034,0.71l-0.123,0.168l0.262,0.523l-0.244,0.406 l-0.351,0.1l-0.683,1.047l-0.599,0.018l-0.228-0.303l-0.034,0.369l-0.423,0.304l-0.26,0.782l-0.389,0.304l-0.033,0.813 l0.351,0.069l0.353,0.437l-0.457,1.49l-0.529,0.746l0.986,0.811l-0.106,0.477l-0.773,0.202l0.81,0.237l1.372,0.777l1.229,1.152 l0.457-0.032l0.599,1.014v0.509l-0.176,0.304l0.388,1.017l0.177,0.539l1.829,1.424l1.018,0.576l0.107,0.304l2.498,1.319 l2.252,1.591l0.49,0.847l2.075,1.49l0.667,1.152l0.143,0.71h0.284l-0.038,0.609l1.056,1.05v0.475l0.246,0.372l-0.212,0.37 l0.812,0.947l0.21,1.635l0.354,0.271l0.367,1.434l0.298,0.287l0.034,0.794l-0.155,0.506l0.296,0.76l-0.209,0.321l0.332,1.129 l0.036,0.424l0.42,0.168l0.209,0.641l0.546,1.03l-0.106,0.678l-0.21-0.019l-0.018-0.34l-0.297-0.337l-0.387,0.221l0.053,0.693 l0.436,0.437l-0.085,0.404l-0.472,0.356l-0.038,0.507l-0.733,0.54l0.646,0.944l-0.351,0.793l0.297,0.37l-0.611,0.558l-0.51,0.188 l-0.143,1.097l-0.487,0.187l-1.054,1.027l-0.686,0.356l-0.929,0.624l-0.104,0.76h-0.843l-0.542,0.59l-2.019,1.132l-1.209,0.12 l-0.527-0.254l-0.875,0.217l-0.177-0.167l0.123-0.56l-0.034-0.537l-0.212,0.523l-0.143,0.217l-0.786-0.203l0.523,0.406 l-0.014,0.32l-0.244,0.162l-0.764-0.118l1.268,0.563l-0.28,0.406l0.351,0.707l-0.683,0.341l-1.008-0.717l0.851,0.883l-0.089,0.44 l-0.387,0.49l-0.4-0.137l-0.371-0.523l-0.523,0.086l0.243,0.657l-0.034,0.22l0.193,0.254l-0.367,0.254l-0.247,0.337l-0.474,0.033 l-0.895,0.76l-0.385,0.271l-0.616-0.084l-0.208,0.49l-0.125,0.943l-0.578,0.508l-0.229-0.021l0.054,0.204l-2.053,0.896 l-1.105-0.152l0.703-0.421l0.842-0.355l0.455-0.508l-0.473,0.187l-0.649-0.337l0.106-1.365l0.121-0.139l-0.28-0.066l0.176-0.589 l-0.087-1.419l0.684-1.079l1.299-0.981l0.401-0.453l-0.665,0.286l-0.983-0.136l-0.701,0.219l-0.44-0.27l-0.436,0.17l-0.893-0.237 l0.139-0.219l-0.036-0.744l-0.22-0.156l0.864-1.02l1.004-0.161l0.536-1.289l0.94-0.033l0.5,0.323l2.18-0.516l0.906,0.516 l0.234,0.612l1.473-0.098l-0.434-0.933l0.167-0.616l-0.84-0.837l-1.039-0.291l-0.198-1.577l0.938-0.646l1.71,0.062l0.47-0.871 l1.338-0.84l1.273-0.352l0.203-0.582l0.739-0.29l0.667-1.323l-0.167-1.03l0.303-1.193l-0.335-0.872l0.199-1.388l-0.804-1.805 l-0.838-0.421l-0.552-1.381l0.15-0.005l0.871-0.516l-0.136-1.323l-0.334-0.612l-0.201-1.162l1.309-0.998v-1.064l-0.703-0.097 l-0.372-0.515l0.137-1.196l0.669-0.643l-0.302-0.68l-0.905,0.357l-0.471-0.132l-0.568-0.74l-1.038-0.064l-0.368-0.45l0.167-0.744 l-0.705-0.29l-0.401,0.128l-0.603-0.611l-0.133-0.775l-0.504-0.804h-1.14l-0.603-0.293l-0.401-1.063l-1.44-1.549l0.064-0.677 l-0.937-1.289l-1.344-0.582l-1.171-1.548l-0.938-0.095l-1.374-0.71l-1.44-0.098l-0.672-1.16h-0.737l-0.199-0.58l0.667-0.711 l-0.969-1.063l-0.136-0.743l0.706-0.031l1.34-0.45l0.892-0.145l0.506-0.488l0.536-1.746l0.671-0.226v-0.615l-1.327-0.309 l0.031-0.797l-0.173-0.902l-1.203-0.225l-0.671-0.805h-1.308l-1.039,0.612l-1.141-0.323l-1.94-0.033l-0.973-1.515l-1.609-1.452 l0.368-0.743l-0.167-0.965l-0.838-0.678l-0.769-1.13l-1.611-0.646L1236.244,464.667L1236.244,464.667z M1249.096,523.156 l0.521,0.599l-0.201,0.471l0.387,0.741l0.522-0.243l0.199-1.355l-0.302-0.114l-0.269-0.612L1249.096,523.156z",
"M1252.035,522.797 1252.899,521.777 1253.903,521.616  1254.439,520.327 1255.38,520.294 1255.88,520.617 1258.06,520.102 1258.966,520.617 1259.2,521.229 1260.673,521.132  1260.239,520.199 1260.406,519.583 1259.566,518.746 1258.527,518.455 1258.329,516.878 1259.267,516.232 1260.977,516.295  1261.446,515.424 1262.784,514.584 1264.058,514.232 1264.261,513.65 1265,513.36 1265.667,512.037 1265.5,511.007  1265.803,509.813 1265.468,508.941 1265.667,507.554 1264.863,505.749 1264.025,505.328 1263.474,503.947 1262.784,503.973  1261.846,503.395 1261.176,503.201 1260.741,502.492 1259.166,502.814 1258.329,503.555 1259.333,504.524 1259.166,505.362  1259.47,506.2 1259.399,506.813 1257.957,506.295 1257.121,504.975 1255.779,504.942 1255.38,504.329 1254.302,503.566  1253.705,503.846 1252.899,503.232 1251.594,503.395 1250.585,503.138 1249.581,503.138 1248.273,503.589 1247.871,503.201  1246.531,503.168 1244.352,503.846 1243.446,503.846 1242.478,505.168 1242.173,506.491 1241.403,507.49 1241.303,509.23  1241.704,511.007 1242.51,511.425 1242.947,512.296 1242.846,513.942 1242.719,514.63 1242.731,514.634 1243.363,515.343  1243.398,516.187 1244.011,516.707 1244.045,517.57 1244.693,518.464 1245.064,518.328 1245.415,518.988 1245.345,519.698  1245.662,520.201 1245.783,520.878 1246.503,520.962 1247.083,520.878 1247.1,520.118 1247.659,519.645 1248.046,519.393  1248.046,519.932 1248.36,520.625 1248.292,521.199 1247.712,521.84 1248.012,522.262 1248.135,522.599 1248.641,522.633  1249.396,521.959 1249.467,521.705 1249.975,522.075 1250.903,522.363 1251.184,522.194 			",
"M1231.56,469.373 1232.153,469.788 1232.555,470.528  1233.762,470.175 1234.567,470.368 1234.3,469.239 1234.23,468.176 1233.895,467.24 1233.828,465.725 1234.465,465.304  1234.465,464.658 1236.211,464.596 1236.544,465.239 1238.155,465.885 1238.924,467.015 1239.762,467.692 1239.929,468.657  1239.561,469.4 1241.17,470.853 1242.143,472.367 1244.083,472.4 1245.224,472.724 1246.263,472.111 1247.57,472.111  1248.241,472.916 1249.444,473.141 1249.617,474.043 1249.586,474.84 1250.913,475.148 1250.913,475.764 1250.242,475.989  1249.706,477.735 1249.2,478.224 1248.309,478.368 1246.969,478.818 1246.263,478.85 1246.398,479.593 1247.367,480.656  1246.7,481.367 1246.899,481.947 1247.637,481.947 1248.309,483.107 1249.749,483.205 1251.123,483.915 1252.062,484.01  1253.232,485.558 1254.576,486.14 1255.513,487.429 1255.448,488.105 1256.889,489.654 1257.29,490.718 1257.893,491.011  1259.032,491.011 1259.536,491.814 1259.669,492.59 1260.271,493.201 1260.673,493.073 1261.378,493.363 1261.211,494.107  1261.579,494.558 1262.617,494.622 1263.186,495.362 1263.656,495.494 1264.562,495.137 1264.863,495.816 1264.194,496.459  1264.058,497.655 1264.43,498.17 1265.133,498.267 1265.133,499.331 1263.824,500.329 1264.025,501.491 1264.359,502.104  1264.495,503.427 1263.624,503.942 1262.784,503.973 1261.846,503.395 1261.176,503.201 1260.741,502.492 1259.166,502.814  1258.329,503.555 1259.333,504.524 1259.166,505.362 1259.47,506.2 1259.399,506.813 1257.957,506.295 1257.121,504.975  1255.779,504.942 1255.38,504.329 1254.302,503.566 1254.81,503.33 1255.412,502.684 1255.479,501.071 1255.143,500.363  1255.479,499.522 1255.412,498.943 1255.715,497.944 1255.513,497.332 1254.342,496.588 1254.643,496.106 1253.837,495.783  1252.968,495.719 1251.995,494.686 1251.155,494.107 1251.391,493.428 1251.457,492.172 1250.957,491.107 1251.292,490.56  1251.457,489.786 1250.988,488.816 1249.85,488.008 1247.837,486.613 1247.166,485.322 1245.086,484.806 1243.543,485.126  1242.536,487.131 1240.588,487.323 1239.785,486.354 1238.843,486.422 1237.299,485.645 1235.822,486.29 1235.689,487.195  1234.551,487.453 1233.273,488.1 1233.191,485.753 1233.191,484.204 1232.79,483.107 1233.328,482.431 1233.36,481.721  1232.826,480.849 1233.36,479.818 1233.328,479.044 1231.618,479.011 1230.813,479.656 1230.076,479.398 1229.405,478.271  1230.143,477.756 1229.907,476.208 1229.005,475.174 1227.764,475.463 1227.231,474.414 1227.764,473.271 1228.268,473.271  1229.206,472.528 1228.769,471.949 1229.307,471.239 1229.341,470.401 1230.646,470.143 			 ",
"M1227.231,474.414l0.532,1.049l1.241-0.289l0.902,1.034 l0.235,1.548l-0.737,0.515l0.671,1.128l0.737,0.258l0.805-0.646l1.71,0.033l0.032,0.774l-0.534,1.03l0.534,0.872l-0.032,0.71 l-0.538,0.677l0.401,1.097v1.549l0.082,2.347l1.277-0.646l1.139-0.258l0.133-0.905l1.477-0.646l1.544,0.777l0.942-0.068 l0.803,0.97l1.948-0.192l1.007-2.005l1.543-0.32l2.08,0.517l0.671,1.291l2.013,1.395l1.139,0.809l0.469,0.97l-0.165,0.773 l-0.335,0.548l0.5,1.064l-0.066,1.256l-0.235,0.68l0.84,0.578l0.973,1.033l0.869,0.064l0.806,0.323l-0.301,0.481l1.171,0.744 l0.202,0.612l-0.303,0.999l0.066,0.579l-0.336,0.841l0.336,0.708l-0.066,1.612l-0.603,0.646l-1.104,0.516l-0.806-0.613 l-1.306,0.162l-1.009-0.257h-1.004l-1.308,0.451l-0.402-0.388l-1.34-0.033l-2.18,0.678h-0.905l-0.969,1.322l-0.305,1.323 l-0.77,0.999l-0.101,1.74l0.401,1.776l0.806,0.418l0.438,0.871l-0.102,1.646l-0.127,0.688l-0.41-0.048l-0.051,0.625l-0.176,0.066 l-0.139-0.217l-0.967-0.777l-0.367-0.018l0.017-0.406l-0.58-0.287l-1.226-1.146l-0.667-0.237l-0.525,0.425l0.104,0.2 l-0.087,0.169l-0.406-0.271l-0.997-0.236l-0.93,0.22l-0.65-0.22l-0.701,0.066l0.246-0.706l0.298-0.307l-0.421-0.708l0.072-1.18 l0.26-0.271l-0.246-0.591l-0.804-0.152l-0.159-0.116l-0.298,0.083l-0.334-0.236l-0.72,0.32l-0.558,0.05l-0.337-0.271 l-0.298,0.356l-0.522,0.006l-0.279-0.137v0.207l-0.214,0.605l0.775,0.374l0.14,0.812l-0.492,0.777l0.034,0.983l-0.175,0.54 l0.351,0.273l-0.14,1.253l-0.667,0.809l-0.143,0.919l-0.667,0.946l-0.246,3.396l-1.104,1.368v0.943l-0.439,0.894l0.476,0.084 l0.139,0.22l-0.438,0.539l0.07,0.407l0.229,0.928v0.59l0.91,1.284l-0.457,0.86l0.28,0.34l0.51-0.137l0.121-0.37l0.457-0.49 l0.229,0.153l0.701,0.134l0.403,0.37l0.104,0.928l0.421,0.542l-0.088,0.962l0.493,0.169l0.474,0.994l0.506-0.017l-0.017-0.49 l0.072-0.37l0.226,0.694l0.526,0.74l0.017,0.743l0.442,0.236l0.365,1.841l-0.176,0.251l-0.155,0.322l-0.229-0.303l-0.735,0.471 l-0.125,0.641l1.352,0.489l0.156-0.657l0.281,0.187l0.089,0.794l0.618,0.492l1.324,1.26l0.56,0.409l0.381-0.259l0.943,0.1 l0.862,0.32l0.603,1.292l0.506,0.638l0.852,0.523l0.104,0.433l-0.22,0.223v0.807l-0.641,0.451l-0.635-0.518l-0.838,0.097 l-1.038,0.872l-1.241-0.289l0.034-0.646l0.534-0.646l0.135-1.289l-0.603-0.581h-0.973l-0.233-0.518l-1.273-0.353l-0.871-0.74 l-0.604,0.74l-0.302,1.026l-0.387-0.606l-1.999-1.384l-0.068-0.362l0.389-0.439l0.036-0.476l-0.493-0.067l-0.318-0.743 l-0.915-0.137v-0.61l-1.052-1.353h-0.669l-0.531-1.627l-0.845-0.133v-0.677l-0.525-0.374l0.034-0.439l-0.879,0.407l0.036,0.846 l-0.598-0.067l-0.423-0.608l-0.246-1.523l0.213-0.407l-0.143-1.286l0.599-0.273l-0.036-1.726l0.493,0.103l0.351-0.677 l-0.527-0.104l0.67-0.913l-0.213-0.374l0.6-0.845l-0.529-0.067l0.193-1.473l0.242-0.672l0.438-0.71l0.132-1.128l1.005-0.71 l1.108-2.838l0.535-0.322l0.066-1.484l-0.602-1.001l0.066-1.288l-0.401-0.808l-0.203-1.32l-0.536-0.548l0.103-0.97l-0.203-0.872 l0.336-0.74l-0.603-1.903l-1.272-1.193l-1.409-1.063l-1.208-1.451l-0.032-0.808l-0.671-1.548l0.973-0.545l0.135-0.681 l-0.536-2.289l0.367-0.646l0.872-0.451l-0.099-0.903l-0.973-0.45l-0.168-0.969l-0.539-1.162l-0.735-0.255l-1.104-2.323 l-1.209-0.808l-0.266-0.676l-0.673-0.612l-0.77-1.29l-0.703-0.195l-0.102-0.71l1.207-0.484l0.872-0.612l-0.336-0.741v-1.323 l0.671-0.611l-0.235-1.549l0.739-0.966l1.742,0.682l1.072-0.841l1.025,0.013l0.303-0.467l0.032-1.116l0.588-0.518l1.175,0.16 l0.353-0.484l-0.504-0.666l0.017-0.501l1.043-0.355l1.362-0.067L1227.231,474.414L1227.231,474.414z M1229.79,540.416 l0.351,0.712l0.335-0.128l-0.135-0.551l-0.335-0.162L1229.79,540.416L1229.79,540.416z M1226.867,536.029l0.167,0.923 l0.135-0.485l-0.068-0.387L1226.867,536.029L1226.867,536.029z M1223.561,533.767l-0.201,0.582l0.201,0.37l-0.052,0.925 l0.603-0.762V533.8C1224.111,533.8,1223.644,533.749,1223.561,533.767L1223.561,533.767z M1240.486,514.53l0.068,0.759 l0.655,0.533l0.487-0.096L1240.486,514.53L1240.486,514.53z M1231.323,525.566l-0.842,0.305l0.606,0.179L1231.323,525.566 L1231.323,525.566z M1231.539,526.518l-0.671,0.421l0.066,0.581l0.675,0.548l0.202-0.903L1231.539,526.518z ",
"M1209.254,436.194l0.781-0.368l1.072,0.451l0.705-0.385 l1.072,0.031l0.603,1.195l0.904,0.645l0.268,1.386l0.807-0.032l0.836,0.903v1.354l0.77,1.517l0.103,1.355l-0.27,1.901v0.904 l-0.198,0.549l-0.872,0.386l-0.103,0.838l-0.434,0.129l-0.233,0.614l0.401,0.869l-0.371,0.518l-0.601-0.227l-0.641,0.646 l-0.366,0.773l0.402,0.581l-0.435,0.671v0.745l0.789,0.323l0.335,0.581l0.65,0.583l-0.135,1.063l0.436,1.031l1.107-0.774 l2.112-0.418l0.199,0.71l-0.299,0.547l0.568,0.452l1.207-0.29l0.235,0.773l-0.306,0.773l0.538,0.711l1.208,0.258l-0.233,0.418 l0.365,0.581l0.169-0.354l1.308-0.16l0.938,0.58v0.677l-0.404,0.774l0.034,0.646l-1.072,1.452l-0.87,0.837l0.167,0.613 l0.703-0.323l1.473,0.162l0.238,0.258l0.701-0.613l0.639,0.806l-0.269,1.195l0.303,0.838l1.071,0.516l0.635-0.579h1.04 l2.113-0.872l0.904,0.29l-0.101,0.84l-1.308,1.096l-1.306,0.259l-0.034,0.838l-0.538,0.71l0.438,0.579l-0.938,0.743h-0.504 l-0.57,1.226l-1.362,0.067l-1.043,0.355l-0.017,0.501l0.504,0.666l-0.353,0.484l-1.175-0.16l-0.588,0.518l-0.032,1.116 l-0.303,0.467l-1.025-0.013l-1.072,0.841l-1.742-0.682l-0.739,0.966l0.235,1.549l-0.671,0.611v1.323l0.336,0.741l-0.872,0.612 l-1.207,0.484l0.102,0.71l0.703,0.195l0.77,1.29l0.673,0.612l0.266,0.676l1.209,0.808l1.104,2.323l0.735,0.255l0.539,1.162 l0.168,0.969l0.973,0.45l0.099,0.903l-0.872,0.451l-0.367,0.646l0.536,2.289l-0.135,0.681l-0.973,0.545l0.671,1.548l0.032,0.808 l1.208,1.451l1.409,1.063l1.272,1.193l0.603,1.903l-0.336,0.74l0.203,0.872l-0.103,0.97l0.536,0.548l0.203,1.32l0.401,0.808 l-0.066,1.288l0.602,1.001l-0.066,1.484l-0.535,0.322l-1.108,2.838l-1.005,0.71l-0.132,1.128l-0.438,0.71l-0.242,0.672 l0.021-0.15l-0.424,0.912l-0.106,1.32l-0.457-1.39l-0.034-1.286l-0.318-0.54l-0.036-0.44l0.354,0.137l0.347-0.299l0.562-0.894 v-0.727l-0.28-0.254l0.159-1.18l0.303-0.137l0.229-0.53l-0.423-1.222l0.635-0.473l-0.686-0.719l-0.459-0.644l-0.036-1.15 l0.316-0.441l-0.28-0.812l-0.458-0.339l-0.316-2.742l-0.634-0.542l-0.208-0.946l-0.671-1.086l-0.175,1.424l-0.282,0.202 l0.036-0.779l-0.423-0.811l0.07-1.963l-0.669-0.78l-0.068-0.913l0.349-0.34l-1.159-0.644l-0.034-1.557l-0.316-0.032l-0.387-3.32 l-0.565-0.37l-0.176-0.847l0.353-0.137v-0.539l-0.565-1.05l0.251-0.407l0.034-0.507l-0.318,0.54l-0.633,0.236h-0.808 l-0.247-1.083l-0.388-0.474l-0.914-1.726l-0.176-0.474l-0.459-0.033v-0.51l-0.843-0.474l0.528,0.576l-0.177,0.304l-0.069,0.507 l0.526,0.373l-0.104,0.914l-0.423,0.439l0.174,0.544l-1.195,0.946l-0.771-0.135l-0.53-0.643h-0.315l0.349,0.71l-0.067,0.303 l0.74,0.203l-1.021,0.577h-0.669l-0.456-0.303l-0.247,0.776l-1.866,1.22l-0.914-0.104l-0.14,0.203h-0.495l-0.03-0.235 l-0.107,0.439l-0.457,0.103l-0.527-0.644l-1.268,0.644l-0.14,0.611l-0.529,0.031v-1.219l1.233-1.117l0.07-1.455l-0.564,1.318 l-0.983,0.813l-0.703,1.083l-0.108-0.406l0.143-0.337l-0.284-0.949l0.762-4.441l1.054-0.643l-0.423-0.404l-0.828-1.958 l-0.104-1.76l-0.46-0.203l-0.277-0.477l0.277-0.166l-0.665-0.511l-0.354-1.286l-0.526-0.677l-0.353-0.711v-0.778l-1.126-0.677 l0.389,0.746l0.211,1.557l-1.725-0.477l-0.808-0.947l-0.072-0.506l-0.879-0.746l-0.104-0.474l0.845,0.066l0.315,0.68l0.703,0.337 l0.28-0.304l-0.28-0.137l-0.669-0.609l0.703-0.407l0.526,0.511l0.564-0.204l-0.034-0.743l-0.915-1.289l-1.44-0.271l-0.389-0.574 l-0.809-0.136l-0.213-0.576l-0.104,0.576l-0.846,0.1l-0.068-0.37l0.703-0.779l-0.879,0.066l-0.739-0.573v0.406l0.459,0.778 l-2.062-1.775l-0.367-1.18l-0.457-0.944l-0.021,0.022l-0.068-0.299l0.147-0.846l0.902-1.063l0.369,0.225l0.503-1.097v-1.547 l0.202-0.836l0.437,0.19l0.5-0.258l0.536-1.483l-0.235-0.904l0.167-1.096l-0.167-1.192l0.973,0.13l0.101-1.615l0.036-1.16 l-0.57-2.193l0.972,0.065l0.806,0.258l1.237-0.032l0.737-1.677l0.438-1.903l1.005-2.354l-1.106-0.516l-0.066-0.677l1.306-2.033 l0.637-1.773l-0.468-0.581l0.232-1.064l1.543-2.322l1.038-0.355l1.105-1.32l0.47-1.066l1.511-0.451l1.304-0.903l0.773,0.612 l0.901,0.387l-0.232-0.741v-1.194l0.905-0.806l-0.103-0.677L1209.254,436.194L1209.254,436.194z M1196.691,483.453l0.265,0.646 l0.937,0.515l0.235-0.774l-0.735-0.711L1196.691,483.453z ",
"M1136.547,534.872l0.159-1.031l-0.07-0.776l0.542-0.22 l-0.053,0.203l-0.264,0.116l0.176,0.693L1136.547,534.872L1136.547,534.872z M1138.354,527.292l-1.213-0.744l-0.017-0.54 l1.51-0.1l0.245,0.169l-0.353,0.774l-0.262,0.07L1138.354,527.292L1138.354,527.292z M1139.404,526.278l0.669,0.169l0.175,0.677 l1.07,0.642l0.189,0.423l-0.454-0.341l-0.771,0.018l-0.421-0.354l-0.945-0.406l0.053-0.32l0.544-0.05l-0.28-0.168 L1139.404,526.278L1139.404,526.278z M1138.645,527.604l-0.036,0.248l0.184,0.295l-0.13,0.185l-0.273,0.05l0.108,0.303 l-0.056,0.6l-0.474,0.809l-0.282-0.116l-0.49-0.439l-0.578-0.066v0.22l0.49,0.237l0.28,0.403l-0.192,0.219l0.386,0.845 l0.018,1.216l-0.314,0.438l-0.28,2.008l0.104,0.573l-0.246,0.236l0.423,1.688l-0.159,0.627l0.613,2.128l0.737,2.395l0.648,1.047 l1.106,0.558l0.929-0.22l1.579-0.185l1.473-0.44l1.508-1.501l0.65-1.283l0.316-0.793l-0.091-0.744l0.212-0.254l-0.035-1.213 l-0.383-0.542l0.227-0.692l-0.703-0.574l-0.76-1.999l-0.597-1.386l-0.812,0.1l-0.034-0.17l-0.703-0.067l0.916-0.473l-0.143-0.407 l-0.385-0.17l-0.599-1.05l-0.457,0.037l-0.282-0.847l-0.28-0.34v-0.508l-1.336-0.473l-0.25,0.303l-0.596-0.201l0.07-0.339 L1138.645,527.604z ",
"M1120.751,414.898l0.307,0.578l0.066,0.741l1.241,0.613 l-0.203,1.742l0.503,0.84l-0.3,0.548l0.5,0.322l0.57,0.774v0.676l0.437,0.129l0.301,0.967l1.039,0.484l0.538-0.838l1.039,0.032 l0.434,0.484l1.074,0.162l0.906,0.935l0.701,0.226l0.536,1.064l0.804,0.129l0.337,0.742l0.072-0.095l0.125,1.548l-0.739,2.391 v1.485l-1.072,1.551l0.274,1.119l1.003,0.097l0.806,0.646l0.839,0.032l0.802,0.549l1.644,0.451l2.144,1.355l1.409,1.678 l1.809,0.385l0.883,0.601h1.275l1.547,0.969l2.348-0.194l0.806,0.711l2.416-0.646l2.216,0.516l0.268,1.163l1.209,1.035 l2.482,0.646l0.873-0.453l1.613-0.063l4.027,1.42l1.006-0.517l1.744,0.903l2.886-0.58l0.336-2.069l-0.87-1.743l0.401-2.13 l-0.307-0.961l0.121,0.007l0.84-0.708l1.07-0.13l0.535,0.935l0.069,1.13l0.904,0.645l0.057-0.026l-0.125,1.025l-0.335,0.743 l0.905,1.387l1.575,0.323l0.637-0.386l2.28,1.257h1.241l0.938-1.097l1.039-0.13l0.972,0.418l1.676-0.449l1.271,0.063l1.88-0.581 l-0.036-0.71v-1.256l-1.44-0.615l-0.132-0.902l0.303-1.08l0.633-0.048l1.708-0.387l0.758-0.063l0.47-1.083l0.688-0.503 l0.722,0.228l0.016-0.583l0.976-0.26l0.318-0.922l0.771-0.922l1.008-0.146l1.716-0.39l1.04-1.258l-0.068-0.966l0.669-0.13 l1.039-0.71l0.839,1.161l1.206-0.321l1.777,0.546l0.5-0.45l-0.133-0.806l2.011-1.13l0.737,0.226l0.504,0.646l0.637-0.162 l0.199,0.42l-0.671,1.225l0.372,0.71l0.568-0.162l0.603-0.161l0.203,0.677l0.669,0.871v0.612l-0.739,0.774l0.235,0.743 l1.006,0.161l0.57-0.227l0.872,0.356l0.936,0.935l0.103,0.677l-0.905,0.806v1.194l0.232,0.741l-0.901-0.387l-0.773-0.612 l-1.304,0.903l-1.511,0.451l-0.47,1.066l-1.105,1.32l-1.038,0.355l-1.543,2.322l-0.232,1.064l0.468,0.581l-0.637,1.773 l-1.306,2.033l0.066,0.677l1.106,0.516l-1.005,2.354l-0.438,1.903l-0.737,1.677l-1.237,0.032l-0.806-0.258l-0.972-0.065 l0.57,2.193l-0.036,1.16l-0.101,1.615l-0.973-0.13l0.167,1.192l-0.167,1.096l0.235,0.904l-0.536,1.483l-0.5,0.258l-0.437-0.19 l-0.202,0.836v0.488l-0.175-0.166l-0.226-0.362l-0.043-0.48l-0.193-0.306l-0.336-0.69l-0.367-1.193l-0.27-1.806l-0.334-0.678 v-0.935l-0.303-1.257l-0.411-0.629l-0.235-0.421l-0.807,0.065l-0.588-0.39l-0.419,0.324l0.286,0.421l-0.27,0.404l-0.017,0.486 l-0.485,0.68l0.3,0.227l-0.083,0.712l-0.469,0.016l-0.724-0.923l-0.739-0.68l-0.184-0.453l-0.469-0.42l-0.472-1.198v-0.533 l0.37-0.308l0.149-0.583l0.889-0.599l0.339,0.324l0.518,0.08l0.37-0.442v-0.58l0.57-0.291l0.603-1.484l0.167-1.095l0.504-0.936 l-0.47-0.194l-0.804-0.806l-0.536,0.13l-0.338-0.228l-0.77,0.065l-1.574,0.064l-1.408-0.162l-1.875,0.13h-1.207l-0.972-0.418 l-0.872,0.063l-0.87-0.323l0.032-0.645l-0.367-0.967l-0.135-0.55l-0.201-1.064l-0.637-1.097l-0.47,0.099l-0.066,0.32 l-0.906-0.289l-0.468-0.452l-0.671-0.548l-0.401-0.032l-0.201,0.517l0.669,0.385l-0.468,0.228l-0.975-0.129l-0.667-0.807 l0.032-0.484l-0.639-0.709l-0.365-0.517l-0.27,0.645l-0.403,0.033l0.036,0.613l0.468,0.387l-0.437,1.16l-0.903,1.002 l-0.135,1.063l2.178,0.743l0.839-0.324l1.204,0.098l-0.199,0.549l0.27,1.159l-0.604,0.452l-0.571-0.193l-0.669,0.387 l-0.401,1.192l-0.874,0.194l-0.032,1.775l1.039,1.192l1.207,0.451l1.139,1.387v1.483l0.435,1.129l-0.165,0.808l0.235,1.386 l1.334,1.823l0.017,1.213l0.318,0.746l0.137,1.398l-0.218,0.071l0.524,1.014l-0.488,0.809l-0.721-0.741v0.49l-0.51-0.271 l-0.328-1.022l-0.192-0.512l-0.114,0.387l-0.129,0.522l-0.104-0.229l-0.176,0.312l-0.733-0.008l-0.08,0.145l-0.772-0.253 l-0.247-1.114l0.193-0.674l-0.701-0.608h-0.81l0.074,0.251l0.54,0.137l0.372,0.421l-0.283,0.253l-0.28,0.627l-0.068,0.641 l-0.686,0.744l-2.894,1.027l-0.493,0.389l-0.189,0.675l-0.459,0.877l0.159,0.54l0.489,0.947l-0.051,0.286l0.297,0.135 l-1.05,0.876l-0.246,0.814l-0.491,0.049l0.193,0.555l-1.702,1.167l-0.087,0.574l-2.528,1.25l-0.282-0.341l-0.017-0.453 l-0.189-0.221h-0.351l-0.79,0.607l-0.491,0.066l-0.212,1.184l0.756-0.286l0.244-0.306l0.421,0.197l-3.165,2.706l-0.807,2.137 l-4.152,3.213l-0.635,1.152l-0.95,0.914l-1.759,0.576l-1.302,1.05l-0.14,0.946l0.174,1.05l-0.771,1.083l-1.092,0.677 l-2.075-0.303l-0.913,0.743v0.946l-1.268,1.558l-0.703-0.066l-0.493-0.677h-0.387l-1.548,1.488l-0.457,0.813l0.034,1.591 l0.775,2.2l-0.737,0.812l0.139,1.22v3.453l1.159,0.37l0.177,2.202l-1.052,2.944l-1.198,2.065v1.727l0.457,0.678l0.361,3.728 v1.015l-0.895,0.319l-0.476-0.22l-1.226,0.187l-0.527,0.895l0.229,0.37l-1.195,1.525l-0.423,0.51l0.141,0.573l1.518,0.744 l0.176,0.253l0.03,0.323l-0.212-0.403l-0.72-0.262l-1.988,0.665l-0.314-0.033l-1.62,0.677l-0.529,0.813l-0.068,0.473l-0.21,0.204 l0.21,0.339l-0.422,1.184l-1.829,1.084l-1.513-0.134l-1.408-0.95l-1.374-1.557l-1.65-3.316l-0.106-1.863l-0.494-1.692 l-1.052-1.86v-0.847l-0.389-0.033l-0.457-1.253l-0.423-1.523l-1.371-1.523l-0.81-1.253l-0.351-0.034l-1.268-1.286l-0.562-1.149 l-0.423-0.376l-0.142-1.86l-0.527-0.779l-0.809-2.03l-0.247-1.388l-0.492-0.982l-0.491-0.71l-0.107-1.627l-0.279-0.066 l-1.195-1.32v-0.509l-0.318-0.067l-1.092-1.896l-0.034-0.574l-0.599-0.339l-0.351-1.32l-0.775-0.475l-0.739-1.929l-0.034-2.507 l-1.971-3.688v-1.22l-0.879-1.288l1.021-0.066l-1.371-1.689l0.034-0.95l0.634-0.136l-0.491-0.644l-0.072-0.813l-1.408-2.438 l-0.21-1.522l0.845-0.406l-0.738-0.406l-0.036-0.776l0.49-1.018l-0.099-1.283l-0.439-1.298l-0.522-0.337l-0.406-2.11l1.001-0.59 l0.351-0.508h0.752l-0.803-0.169l-1.088,0.152l-0.58-0.033l0.107-0.847l-0.439-0.74l0.155-0.878l0.247-0.187l0.613,0.137 l0.771-0.744l0.37-0.575l-0.823,0.492l-0.564-0.255l-1.12,0.136l-0.353-0.726l-0.123,0.556l-0.051,0.896l-0.669,1.722 l0.686,0.826l-0.159,1.588l-0.718,0.707l-0.034,0.49l-1.581,0.777l-2.401,1.434l-1.121,0.37l-1.686-0.353l-3.58-2.77l-1.47-1.856 l-0.02-0.319l-0.436,0.033l-0.618-0.321l-2.051-1.975l-0.178-0.606l0.178-0.49l0.562-0.05l0.173,0.27l0.564-0.17l-0.018,0.997 l0.77,0.084l0.51-0.421l0.298-0.036l0.51,0.307l0.104-0.34l1.912-1.45l0.578-0.018l0.895-1.317l0.282,0.052l0.365-0.861 l-0.945-0.067l-0.28-0.152l0.142,0.288l-0.089,0.388l-1.928,0.794h-1.123l-0.876,0.289l-3.028-1.016l-1.44-1.455l-0.599-0.271 l0.072-0.914l0.915-1.151l1.018-0.542l-1.3,0.204l-1.295,0.795l0.046-1.158l0.972-0.612l0.637-0.16l0.402-1.13l0.703,0.161 l0.773-0.386l3.184,0.161l1.842-0.645l0.372-0.387l1.07-0.323l-0.369,0.646l0.434,0.516l1.042-0.612l0.872-0.291l-0.369-0.42 l0.134-0.645l-1.038-2.838l-0.906-1.161l0.235-0.612l-0.637-0.517l-0.906,0.064l-1.508-0.937l-0.199-1.644l0.064-1.096 l-0.669-1.386l-0.872-0.034l-0.502,0.258l-1.107-0.355l-0.77,0.032v-1.128l0.736-1.807l0.706-0.225l1.238-1.71l0.2-0.774 l0.874-0.419l0.601-0.418l1.007,0.418l0.2,0.871l0.671,0.13l1.742-0.871l2.444-0.13l1.477-1.58l0.906-2.644l2.145-1.453 l0.535-0.968l0.202-1.45l1.039-1.419l1.508-0.71l0.503-1.096l-0.034-0.839l-0.603-0.452l1.34-1.418l0.738-0.549l0.131-1.063 l0.235-2.227l-0.468-1.644l-0.27-0.387l1.477-1.355l0.87-0.29l0.871-0.548l0.57,0.097l1.208-1.29l1.374-2.192l1.374-1.193 l1.171-0.066l0.604-1.064h0.971l2.549,1.645l1.34-0.71l1.273,0.484l0.468,1.226l1.175-0.064l1.877,1.129L1120.751,414.898 L1120.751,414.898z M1173.546,469.31v0.774l0.301-0.307L1173.546,469.31L1173.546,469.31z M1173.075,468.984l-0.54,0.274 l0.186,0.519l0.318,0.225l0.103-0.548L1173.075,468.984L1173.075,468.984z M1171.791,469.168l0.099,0.871l0.502,0.354 l-0.133-0.809L1171.791,469.168L1171.791,469.168z M1170.483,469.456l0.034,0.452l0.331-0.162l0.438-1.063l-0.302-0.451 L1170.483,469.456z ",
"M1192.541,468.438v1.059l-0.503,1.097l-0.369-0.225 l-0.902,1.063l-0.147,0.846l0.068,0.299l-0.084,0.094l0.213,1.114l-0.143,0.066l-0.669-1.583l-0.845-1.162l-0.387-0.477 l0.246-0.539l0.034-0.711l-0.141,0.371l-0.562,0.509l-0.177-0.272l0.249-1.32l-0.318-0.203l0.21-1.016l0.036-0.61l-0.599-0.404 l-1.44-3.081h-0.389l0.034,0.271l-0.314-0.137l-0.88,0.509l-1.652-0.745l-0.178-0.306l-0.525,0.035l-0.845-0.745l-0.389-1.321 l0.178,1.559l0.633,0.915l-0.142,0.473l-0.95,0.339l0.6,0.236l0.631,0.982l-0.095,1.21l-0.895,0.338l-0.756,1.35l-0.721-0.49 l0.439-0.773l0.385-0.152l0.213-0.404l-0.665,0.304l-0.58,0.91l-0.616-0.844l0.474-1.503v-0.286l-0.331-0.388l0.21,0.421 l-0.367,0.558l-0.09,0.929l-0.264,0.017l0.491,1.047l-0.068,0.793l-0.456,0.254l-0.07-0.137l-0.614-0.387l-0.403,0.166 l-0.209,0.661h-0.544l-0.195-0.423l-0.365-0.861l-0.449,0.148l-0.137-1.398l-0.318-0.746l-0.017-1.213l-1.334-1.823l-0.235-1.386 l0.165-0.808l-0.435-1.129v-1.483l-1.139-1.387l-1.207-0.451l-1.039-1.192l0.032-1.775l0.874-0.194l0.401-1.192l0.669-0.387 l0.571,0.193l0.604-0.452l-0.27-1.159l0.199-0.549l-1.204-0.098l-0.839,0.324l-2.178-0.743l0.135-1.063l0.903-1.002l0.437-1.16 l-0.468-0.387l-0.036-0.613l0.403-0.033l0.27-0.645l0.365,0.517l0.639,0.709l-0.032,0.484l0.667,0.807l0.975,0.129l0.468-0.228 l-0.669-0.385l0.201-0.517l0.401,0.032l0.671,0.548l0.468,0.452l0.906,0.289l0.066-0.32l0.47-0.099l0.637,1.097l0.201,1.064 l0.135,0.55l0.367,0.967l-0.032,0.645l0.87,0.323l0.872-0.063l0.972,0.418h1.207l1.875-0.13l1.408,0.162l1.574-0.064l0.77-0.065 l0.338,0.228l0.536-0.13l0.804,0.806l0.47,0.194l-0.504,0.936l-0.167,1.095l-0.603,1.484l-0.57,0.291v0.58l-0.37,0.442 l-0.518-0.08l-0.339-0.324l-0.889,0.599l-0.149,0.583l-0.37,0.308v0.533l0.472,1.198l0.469,0.42l0.184,0.453l0.739,0.68 l0.724,0.923l0.469-0.016l0.083-0.712l-0.3-0.227l0.485-0.68l0.017-0.486l0.27-0.404l-0.286-0.421l0.419-0.324l0.588,0.39 l0.807-0.065l0.235,0.421l0.411,0.629l0.303,1.257v0.935l0.334,0.678l0.27,1.806l0.367,1.193l0.336,0.69l0.193,0.306l0.043,0.48 l0.226,0.362L1192.541,468.438L1192.541,468.438z M1186.241,464.849l-0.306-0.307l-0.384,0.21l0.134,0.938l0.438-0.211 L1186.241,464.849L1186.241,464.849z M1183.819,464.62l0.468,0.935l-0.099,0.741l0.402,0.579l0.637-1.159l-0.233-0.71 l-1.175-0.805C1183.819,464.201,1183.854,464.555,1183.819,464.62L1183.819,464.62z M1182.881,463.976l-0.84,0.354l0.035,0.387 l0.639,1.322l0.837,0.031l-0.101-1.321L1182.881,463.976z",
"M1171.451,439.896 1172.365,439.471 1173.405,437.504  1175.686,436.213 1177.158,436.02 1177.63,436.762 1179.871,436.988 1180.747,437.375 1181.952,436.922 1183.124,436.955  1183.893,437.924 1184.1,437.907 1183.797,438.987 1183.929,439.889 1185.369,440.504 1185.369,441.76 1185.405,442.471  1183.525,443.051 1182.254,442.988 1180.578,443.437 1179.606,443.019 1178.567,443.148 1177.63,444.245 1176.389,444.245  1174.108,442.988 1173.472,443.374 1171.896,443.051 1170.991,441.665 1171.326,440.922 			",
"M1131.653,426.152 1131.851,425.892 1133.223,426.57  1133.558,427.055 1134.494,427.022 1134.998,427.247 1135.566,426.442 1136.708,426.345 1138.415,426.958 1138.887,427.409  1139.992,427.472 1140.695,427.958 1142.069,429.344 1143.144,429.377 1144.148,429.859 1144.514,430.44 1145.354,431.375  1145.757,432.342 1146.226,432.15 1146.327,430.829 1146.862,430.343 1147.197,430.73 1148.17,430.73 1149.142,431.312  1149.274,432.536 1150.415,433.504 1151.892,433.117 1153.062,433.278 1152.794,435.116 1153.33,436.149 1154.102,435.988  1155.409,436.601 1155.976,436.118 1156.984,435.826 1157.823,434.924 1159.565,435.116 1160.704,435.665 1160.972,436.73  1162.346,437.246 1163.283,438.472 1164.087,438.665 1165.262,438.181 1165.732,438.374 1167.004,437.988 1167.854,438.044  1168.161,439.006 1167.76,441.136 1168.63,442.879 1168.294,444.948 1165.408,445.528 1163.664,444.625 1162.658,445.142  1158.631,443.722 1157.018,443.785 1156.145,444.237 1153.662,443.592 1152.453,442.557 1152.186,441.395 1149.97,440.879  1147.554,441.524 1146.748,440.813 1144.4,441.007 1142.854,440.039 1141.578,440.039 1140.695,439.438 1138.887,439.053  1137.478,437.375 1135.334,436.02 1133.69,435.569 1132.889,435.02 1132.05,434.988 1131.244,434.342 1130.241,434.246  1129.967,433.127 1131.039,431.576 1131.039,430.091 1131.778,427.7 			",
"M1078.816,460.592 1078.862,459.434 1079.834,458.821  1080.471,458.661 1080.873,457.531 1081.576,457.692 1082.35,457.307 1085.533,457.468 1087.375,456.823 1087.747,456.437  1088.817,456.113 1088.448,456.759 1088.882,457.274 1089.924,456.662 1090.796,456.371 1090.427,455.951 1090.561,455.307  1089.522,452.469 1088.616,451.308 1088.852,450.695 1088.215,450.179 1087.309,450.243 1085.801,449.307 1085.602,447.663  1085.666,446.567 1084.997,445.181 1084.125,445.147 1083.623,445.406 1082.516,445.05 1081.746,445.083 1081.746,443.955  1082.482,442.147 1083.188,441.923 1084.427,440.212 1084.627,439.438 1085.501,439.019 1086.102,438.601 1087.108,439.019  1087.309,439.889 1087.979,440.02 1089.722,439.148 1092.166,439.019 1093.643,437.439 1094.549,434.795 1096.693,433.342  1097.229,432.375 1097.431,430.924 1098.47,429.505 1099.978,428.795 1100.48,427.699 1100.446,426.86 1099.844,426.408  1101.184,424.99 1101.922,424.441 1102.053,423.378 1102.288,421.151 1101.82,419.507 1101.551,419.121 1103.027,417.765  1103.897,417.475 1104.769,416.927 1105.339,417.023 1106.27,416.026 1106.154,415.06 1104.978,414.784 1103.855,415.207  1102.441,414.914 1101.873,413.765 1100.243,413.117 1098.498,412.713 1096.824,411.25 1096.592,409.927 1095.854,406.896  1095.019,405.574 1094.982,404.187 1095.756,403.865 1095.889,402.93 1097.195,402.124 1097.162,401.026 1095.822,400.673  1095.553,399.77 1094.315,399.06 1093.042,398.027 1092.102,396.898 1091.164,397.221 1090.491,397.479 1089.824,396.866  1089.621,395.092 1091.867,393.64 1091.562,392.878 1090.228,393.14 1089.154,392.558 1087.61,393.333 1086.47,394.303  1085.193,394.303 1084.457,395.402 1083.585,396.241 1085.596,399.083 1085.732,401.021 1083.515,403.798 1084.657,404.833  1084.657,406.059 1083.448,407.804 1081.703,407.804 1080.025,407.159 1078.885,407.868 1079.4,409.025 1080.373,409.542  1080.939,410.768 1080.74,411.54 1079.636,412.122 1078.595,412.218 1078.226,412.863 1078.093,414.443 1077.758,415.476  1077.725,416.087 1077.39,416.476 1077.742,418.462 1076.736,419.884 1075.847,418.797 1075.311,418.797 1075.246,419.411  1074.105,419.346 1073.567,418.991 1072.462,419.087 1072.161,419.668 1070.419,420.958 1071.188,421.185 1070.652,421.829  1068.943,422.57 1068.408,422.216 1067.268,422.442 1066.933,423.12 1066.733,423.828 1065.861,424.119 1065.257,424.86  1065.323,426.087 1065.658,427.538 1065.593,428.472 1065.96,429.344 1065.759,430.182 1063.917,430.924 1062.309,430.893  1060.832,431.085 1058.353,431.215 1056.712,431.635 1056.142,432.086 1054.667,432.02 1053.109,432.415 1047.738,432.545  1041.376,430.812 1041.361,430.829 1043.775,433.925 1044.312,434.955 1045.518,436.182 1046.69,436.794 1047.094,437.246  1048.637,437.375 1049.506,437.697 1049.639,438.181 1050.914,438.308 1050.948,439.825 1051.28,440.857 1051.351,442.083  1051.585,442.89 1052.725,442.824 1053.928,443.599 1054.064,445.342 1053.394,445.955 1052.187,445.501 1049.94,446.146  1049.473,446.63 1048.062,447.179 1047.594,448.049 1047.831,448.824 1047.126,449.759 1047.562,450.856 1047.363,452.437  1047.38,453.161 1047.924,453.161 1047.89,453.805 1048.312,453.974 1049.648,453.196 1050.702,453.128 1050.774,453.535  1051.159,453.397 1051.83,452.858 1052.85,452.924 1053.307,453.062 1054.079,452.858 1054.643,452.924 1055.169,452.924  1055.277,452.451 1055.666,451.976 1056.575,452.553 1057.21,452.553 1057.316,452.181 1057.809,452.28 1058.09,452.79  1058.826,452.79 1059.462,453.229 1060.203,453.229 1061.254,452.247 1062.488,452.247 1063.226,452.451 1063.929,452.011  1064.67,452.011 1064.808,451.67 1065.16,451.942 1066.498,452.113 1067.624,451.706 1068.996,451.67 1069.979,452.418  1070.387,453.412 1070.229,454.153 1070.387,454.305 1070.141,454.391 1070.158,454.711 1070.931,454.728 1072.299,454.138  1072.282,455.049 1073.315,456.179 1073.567,457.765 1073.743,457.936 1073.709,458.545 1073.354,458.782 1073.639,458.882  1074.023,458.882 1074.342,459.831 1075.188,459.764 1076.523,459.729 1078.176,460.508 1078.07,461.05 			",
"M1106.27,416.026 1106.547,415.733 1107.921,413.541  1109.295,412.348 1110.466,412.282 1111.07,411.218 1112.041,411.218 1114.59,412.863 1115.93,412.152 1117.203,412.637  1117.671,413.862 1118.846,413.798 1120.723,414.927 1122.096,413.541 1122.865,413.798 1123.032,414.411 1123.637,413.476  1123.336,411.863 1122.799,409.896 1121.592,409.606 1120.689,407.605 1120.79,405.478 1120.119,404.349 1118.543,403.608  1117.338,402.252 1116.532,400.059 1115.023,399.285 1113.216,398.704 1113.013,397.672 1112.141,397.447 1110.299,397.479  1108.423,397.253 1107.951,396.641 1107.151,396.092 1107.115,394.899 1105.878,394.093 1103.765,391.189 1103.262,389.771  1102.558,389.126 1101.988,389.093 1101.551,389.545 1101.017,389.9 1100.247,389.834 1099.777,390.158 1098.903,389.416  1098.267,389.577 1097.842,389.834 1097.88,389.846 1096.941,391.396 1094.861,392.235 1091.562,392.878 1091.867,393.64  1089.621,395.092 1089.824,396.866 1090.491,397.479 1091.164,397.221 1092.102,396.898 1093.042,398.027 1094.315,399.06  1095.553,399.77 1095.822,400.673 1097.162,401.026 1097.195,402.124 1095.889,402.93 1095.756,403.865 1094.982,404.187  1095.019,405.574 1095.854,406.896 1096.592,409.927 1096.824,411.25 1098.498,412.713 1100.243,413.117 1101.873,413.765  1102.441,414.914 1103.855,415.207 1104.978,414.784 1106.154,415.06 			",
"M1090.326,389.288 1092.436,387.997 1093.775,387.708  1094.014,388.642 1095.756,388.449 1096.356,387.738 1098.337,387.738 1098.553,388.488 1097.141,389.651 1097.88,389.846  1096.941,391.396 1094.861,392.235 1090.228,393.14 1089.154,392.558 1087.61,393.333 1086.47,394.303 1085.193,394.303  1084.457,395.402 1083.585,396.241 1085.596,399.083 1085.732,401.021 1083.515,403.798 1084.657,404.833 1084.657,406.059  1083.448,407.804 1081.703,407.804 1080.025,407.159 1078.885,407.868 1079.4,409.025 1080.373,409.542 1080.939,410.768  1080.74,411.54 1079.636,412.122 1078.595,412.218 1078.226,412.863 1078.093,414.443 1077.758,415.476 1077.725,416.087  1077.39,416.476 1077.742,418.462 1076.736,419.884 1075.847,418.797 1075.311,418.797 1075.246,419.411 1074.105,419.346  1073.567,418.991 1072.462,419.087 1072.161,419.668 1070.419,420.958 1071.188,421.185 1070.652,421.829 1068.943,422.57  1068.408,422.216 1067.268,422.442 1066.933,423.12 1066.733,423.828 1065.861,424.119 1065.257,424.86 1065.323,426.087  1065.658,427.538 1065.593,428.472 1065.96,429.344 1065.759,430.182 1063.917,430.924 1062.309,430.893 1060.832,431.085  1058.353,431.215 1056.712,431.635 1056.142,432.086 1054.667,432.02 1053.109,432.415 1047.738,432.545 1041.376,430.812  1044.848,426.247 1045.216,425.699 1044.748,423.925 1044.848,422.7 1044.111,421.151 1040.054,421.087 1039.921,419.443  1039.453,418.637 1039.788,418.023 1039.115,415.927 1037.878,413.605 1038.113,412.443 1039.553,410.735 1039.151,410.735  1037.574,410.381 1037.574,409.508 1037.273,407.896 1037.038,407.702 1037.91,406.51 1037.139,405.929 1036.738,405.315  1037.741,405.059 1038.948,404.285 1038.882,403.703 1039.115,403.477 1038.515,402.704 1038.85,402.026 1038.748,401.414  1038.814,400.156 1038.761,400.052 1039.218,399.897 1040.256,400.156 1040.993,400.706 1041.763,400.706 1042.367,400.156  1043.173,400.156 1044.211,400.897 1044.477,401.543 1044.881,401.898 1045.349,401.414 1046.69,401.22 1047.363,400.478  1047.496,399.897 1048.097,399.382 1047.863,398.77 1049.304,398.027 1051.113,397.672 1051.28,397.221 1051.987,396.673  1052.725,396.513 1053.025,395.317 1053.058,394.19 1054.131,393.093 1054.131,392.157 1053.694,391.835 1053.769,391.27  1054.24,391.076 1054.744,390.721 1055.954,390.413 1056.338,390.428 1057.733,389.44 1058.825,389.126 1059.761,389.675  1060.766,389.448 1061.101,389.771 1062.609,389.384 1063.615,389.834 1064.187,390.643 1064.823,390.673 1065.593,389.997  1066.396,390.061 1067.4,391.318 1068.107,391.61 1069.648,391.287 1070.652,390.738 1071.156,390.029 1071.693,389.932  1072.228,389.448 1072.697,389.771 1073.199,390.416 1074.809,390.545 1074.776,389.834 1074.34,389.416 1074.406,388.803  1075.413,388.545 1075.78,388.061 1076.251,388.061 1076.382,388.545 1077.39,388.449 1078.026,387.481 1077.791,386.255  1078.193,385.643 1078.764,385.158 1078.931,383.869 1079.4,383.062 1080.505,383.062 1081.311,383.611 1082.15,384.03  1082.15,384.739 1081.947,385.772 1082.217,386.61 1082.986,386.578 1083.321,387.416 1083.255,388.545 1083.388,389.448  1083.454,391.189 1084.157,392.093 1084.157,392.706 1084.997,393.028 1086.168,393.028 1086.974,392.447 1087.143,391.996  1088.749,391.287 1089.5,390.64 1089.698,389.814 			 ",
"M816.518,298.264l0.269,0.308l0.938,0.308l0.604-0.794 l0.555,0.161l0.066-0.403l-0.401-0.681l0.199-0.744l-0.687-0.129l-0.318,0.161l-0.303-0.178l-0.705,0.178l0.051,0.55l0.721,0.065 l-0.203,0.227l-0.568,0.323L816.518,298.264L816.518,298.264z M823.199,292.05l-0.234,1.182l0.234,0.824l1.475,0.486l0.169-0.76 l-0.804-1.246L823.199,292.05L823.199,292.05z M814.099,290.035l-0.337,0.935l0.639,0.193L814.099,290.035L814.099,290.035z  M811.798,294.446l-0.703,0.032l-0.354-0.47l0.403-0.468l-0.169-0.407l-1.072-0.274h-0.588l-0.538-0.63l0.049-0.922l-0.367-0.551 l-0.119-0.647l0.555-0.161l0.368-0.681l0.438-0.291l0.437,0.534l0.035,0.422l0.84,0.548l0.199-0.225l0.487,0.114l0.067-0.47 l-0.724-0.469l-0.318-0.388l0.438-0.793l1.225-0.291l1.072-0.05l0.27,0.742l0.103,0.967l-0.302,1.063l-0.972,0.452v0.323 l0.836,0.548l0.168,0.548l-0.47,0.42l-0.971,0.387l0.034,0.613L811.798,294.446L811.798,294.446z M812.337,294.704l0.149,0.341 l0.421-0.583l0.621-0.113l-0.133-0.487l-0.671,0.275L812.337,294.704L812.337,294.704z M808.86,294.574l0.857,1.165l0.587-0.178 h0.472l0.302-0.68l0.754,0.032l0.169-0.129l0.149,0.632l-0.418,0.778l0.017,0.711l-0.216-0.113l-0.239-0.68l-0.451,0.549 l-1.312,0.114l-1.324-0.437l-0.369-0.501l0.519-0.195l-0.318-0.388l0.37-0.566L808.86,294.574L808.86,294.574z M805.554,290.108 l0.455-0.695l0.013-1.214l0.34,1.149l-0.086,0.615L805.554,290.108L805.554,290.108z M805.084,294.881l0.686,0.665l0.34-0.292 L805.084,294.881L805.084,294.881z M807.195,293.421l-0.235,1.258l-0.369,0.71l0.166,0.419l0.505-0.678l0.534-1.032 C807.796,294.099,807.093,293.453,807.195,293.421L807.195,293.421z M802.938,291.163l1.408-0.258l1.004,0.517l0.637-0.098 l0.604,1.258l0.232,0.711l-0.566,1.063l-0.906,0.162l-0.504-0.324l-0.77-0.096l-0.87-0.871l-0.47-0.968L802.938,291.163 L802.938,291.163z M806.662,279.947l0.437-0.55h1.006l-0.754,0.532L806.662,279.947L806.662,279.947z M798.369,284.169 l-0.083-0.922l0.688-0.633l0.737-0.046l-0.136,0.582l-0.733,0.809L798.369,284.169L798.369,284.169z M798.079,284.618 l-0.203-1.162l0.203-0.613l1.541-0.935l0.201,0.161l0.769-0.129l1.009,0.193l0.669-0.225h0.906l0.77,0.323l0.502-0.225 l0.905-1.517l-0.202-0.936l0.168-0.386l-0.198-0.903l0.667-1.16l-0.133-0.323l-1.239,1.193l-1.175,0.517l-0.836,0.096l-0.57,0.84 l-0.469,1.032l-0.906,0.613h-1.006l-1.171,0.901l-0.335-0.225l-0.669,0.032l-0.301,0.967l-0.707,0.678l0.438,0.354l0.402-0.226 L798.079,284.618L798.079,284.618z M802.09,295.199l-0.05-0.051l0.246-0.542l-0.633-0.61h-0.351l0.034-0.608l0.527-0.44 l0.069-0.679l-0.454-0.201l0.036-0.611l1.789-0.879l-0.383-0.306l0.667-0.71l0.388,0.236l0.948-0.338l-0.034-1.218l-0.423-0.813 l0.562-0.541l0.81-0.102l0.564,0.609l0.314-0.236l0.352,0.134l0.318-0.438l0.28-0.746l-0.812-0.846l-0.453,0.338l-1.091-0.033 l-0.529-0.541l-0.492-0.711l-0.457-0.103l0.389-0.473v-0.914l-0.88-0.576l-1.374,0.103l-0.667,0.304l-0.74-0.102l-0.35,0.305 l0.771,1.015l-0.209,0.338l0.74,0.881l-0.074,0.271l-0.703-0.271l-0.771,0.169l-0.142-0.405l0.491-0.508l-0.491-0.847h-0.247 l-0.737,0.982l0.418,0.575l-0.877,0.61l-0.529-0.575h-0.773l-0.529-0.271l-0.631,0.644l0.983,0.711v0.847l-0.599-0.44l-0.385,0.1 l0.176,1.118l0.631,0.338v1.015l0.531,0.51l-1.268,0.574l-0.527,1.289l0.527,0.405l0.775-0.405l1.054,0.913l0.21,1.355 l-0.387,0.236l0.193,0.687l1.224-0.058l1.706,0.453l0.504,0.225L802.09,295.199z ",
"M868.527,189.848l0.556-0.09l0.034-1.57l1.241-1.15l1.112-0.144 l0.719-0.939l-0.101-1.279l0.772-0.064l0.957,0.372l0.571-0.697l-0.044-0.918l-0.266-0.033l-0.684-0.506h-0.353l-0.314,0.186 l-0.036,0.523l-0.368-0.355l-0.228-0.505l-0.51-0.019l0.106,0.49l-0.123,0.945l-0.334-0.204l-0.401-0.625l-0.687,0.424 l-0.229,0.489l-0.228-0.71l-0.226-0.961l-0.353-0.051l-0.37-0.978l-0.365-0.204l-0.773,0.102l-0.665-0.271l-1.088-0.118 l-0.544-0.693l0.193-0.168l1.368,0.354l1.124-0.134l0.963,0.169l1.823,0.235l1.266-0.421l0.822-1.586l1.755-0.44l0.755-0.607 v-0.254l-0.562-0.185l-0.176-0.354l-0.648-0.202l-0.808,0.135l-1.139-0.912h-0.614l-0.739,0.793h-0.472l-0.142-0.304l0.735-0.457 l0.125-0.607l-0.895-0.337l-0.177-0.237l-0.648,0.034l-0.597,0.996h-0.331l0.069-0.708l-0.403,0.067l-0.369,0.523l-0.402-0.032 l-0.159-0.457l0.595-0.405v-0.523l-0.875-0.523l-0.878-0.018l-0.544,0.322l-0.138,1.231l-0.614,0.253l-0.072,0.421l0.525,1.267 l-0.068,0.557l-0.474,0.422l-0.387-0.777l-0.56-0.05l-0.14,0.287l-0.756-0.137l-1.122,0.491l0.877-1.181l0.683-0.169l0.439-0.845 l-0.121-0.42l-0.336,0.05l-0.911,0.658l-0.527-0.152l0.125-0.387l0.596-0.473l0.053-0.37l-0.807-0.187l-0.16-0.338l0.67-0.203 l0.28,0.254h0.979l0.561-1.384l-0.155-0.574l-0.911,0.22l-0.423-0.272l0.175-0.64l-0.243-0.592l-0.597,0.507l-0.493-0.05 l-0.524-0.438l-0.667,0.606l0.036,0.422l0.544,0.659l-0.372,0.49h-0.401l-0.648-0.896l-0.474,0.421l-0.246,0.76l0.21,0.321 l0.703,0.016l0.334,0.304l-0.072,0.37l-0.56,0.238v0.624l-0.547,0.271v0.591l0.159,0.271l-0.509,0.321l0.298,0.876l-0.262,0.287 l-0.599-0.406l-0.54,0.406l-0.125,0.338l-0.595,0.405l-0.054-0.843l0.753-1.571l-0.733-0.253l0.067-0.404l0.527-0.509 l0.018-1.349l-0.281-0.439l-0.439,0.016l-1.158,1.84l-0.034,1.031l-1.175,1.551l-0.28,1.099l0.246,0.471l-0.121,0.896 l-1.196,1.266l-0.613,0.27v-0.777l-0.28-0.557l0.772-1.182l-0.159-0.775l0.318-0.59l-0.369-0.777l1.352-1.436l0.227-0.86 l0.209-0.153l-0.087-0.489l-0.719-0.066l-0.737-0.726l-0.367,0.119l0.123,0.793l-0.528,0.573l-0.034-0.777l-0.612-0.574 l-0.757-0.151l-0.561,0.286l0.125,1.081l-0.282,0.522l-0.385-0.455l-0.508-0.288l-0.389,0.372l0.125,0.336l1.05,0.676l0.247,0.76 l-0.247,0.269l-0.454-0.454l-0.562,0.489l-0.053,0.471l0.265,0.337l-0.282,0.288l-0.824-0.521l-0.439,0.032l-0.472,0.928 l-0.614,0.254v0.337l0.369,0.252l-0.86,0.541l-0.195,0.658l0.701,0.708l-0.522,0.507l0.701,0.32l0.314,0.322l-0.385,0.387 l-1.141-0.1l-0.298-1.166l-0.544-0.152l0.508-0.539l-0.72-0.373l-0.787,0.085l-1.02-0.067l-1.419-1.08l-0.423-0.019l-0.472,0.558 l-0.314-0.592l-0.721,0.625l-0.843,0.185l-0.034,0.372l1,1.147l0.719-0.017l0.405,0.456l1.05,0.068l-0.454,0.827l0.033,0.777 l0.719,0.927l-0.104,0.609l-0.614-0.44l-0.611-0.996l-0.808-0.318l-0.474-0.559l-0.246,0.759l-0.685,0.556l-0.159-1.062 l-0.683,0.556L837,184.299l-0.806,0.675l0.052,0.708l0.966,0.422l0.404,0.828l-0.739-0.117l-0.402-0.39l-0.631,0.895 l-0.212,0.693l-1.018,0.775l-0.018-0.473l0.687-0.472l-0.229-0.625l0.648-1.248l-0.51-2.516l-0.666,0.406l-1.05,1.62 l-0.021,1.079l0.159,0.44l-0.717,0.877l-0.089-0.844l0.438-0.929l-0.335-1.215l-0.472-0.101l-0.893,0.557l-0.614,1.113 l0.401,0.861l-0.051,0.777l1.261,0.877l0.354,0.608l-0.51,0.945l-0.405-1.199l-0.929-0.405l-0.614-1.57l-0.28-0.168l-1.191,0.388 l-0.16,0.557l1.192,0.895l0.562,0.068l0.299,0.337l-0.788-0.12l-0.788,0.253l0.524,0.845l-0.893-0.609l-0.108-1.028l-0.35-0.204 l-0.193-0.691l-0.523,0.388l-0.212,1.114l0.42,0.507l-0.157,0.997l-0.737-0.373l-0.647,0.203l-0.878,1.013l0.209,0.101 l0.597-0.083l0.582,0.675l-0.757,0.066l-0.544,0.354l0.51,0.337l-0.354,0.406l-0.666,0.034l-0.017,0.455l0.246,0.204 l-0.544,0.118l-0.385-0.457l-0.669,0.17l-0.578,0.741l0.228,0.422l-0.28,0.27l-0.911,0.068l-0.457,0.827l0.756,0.235l2.017-0.557 l0.474,0.303l0.842-0.404l0.508-0.035l0.019,0.575l-0.581,0.64l-0.173,1.199l-0.21,0.254l-0.37-0.423l-0.106-0.607l-0.752,0.204 l-0.334-0.389l-0.928-0.017l0.299,0.319l-0.28,0.507l-0.688-0.388l-0.509,0.051l0.687,0.49l0.28,0.692l-0.423,0.017l-0.28,0.505 l0.143,0.642l-0.179,0.457l-0.383-0.624l0.018-0.795l-0.631-0.792l-0.634,0.657l-0.657,0.159l-0.316-0.508l0.246-0.372 l-0.526-0.069l-0.737,0.779l0.631,0.643l0.985-0.034l0.808,0.474l-0.457,0.678l-1.687,0.237l-0.353-0.305l-0.669,0.033 l-0.351,0.813l0.562,0.506l-0.562,0.745l0.669-0.135l0.846-0.948l0.736,0.033l0.423,0.577l-1.231,0.135l-0.177,0.882l0.457,0.643 l0.985,0.575l-0.034,0.677l-0.669-0.508l-0.562,0.067l-0.703-0.881l-0.423,0.069l-0.562,0.575l0.635,0.474l-0.846,0.066 l-0.811,0.577v0.541l0.881,0.374l0.737-0.475l0.491,0.475l0.776-0.238l0.247,0.711l0.561,0.305v0.509l-1.196-0.747h-0.947 l-0.458,0.271l-1.303,0.202v0.68l-0.737,0.372l-0.318-0.272l-1.125,0.575l-0.632,0.036l-0.115,0.421l0.703,0.288l0.525,0.625 l-0.622,0.222l-0.353-0.168l-0.246,0.204l0.564,0.507l-0.21,0.338l-0.846-0.135l-0.104-0.237l-0.284,0.271l0.6,0.475 l-0.387,0.304l0.104,0.507h0.495l-0.495,0.305l-0.561,0.101l-0.316-0.303v0.507l-0.282,0.475l0.494,0.202l1.229,0.407 l0.178,0.542l0.491,0.135l0.703-0.304l-0.562,0.507v0.407h-0.774l-0.351-0.339l-1.269,0.034l-0.879,0.778l0.28,0.271l0.917,0.033 l0.07,0.576l0.457,0.406l-0.034,0.677l-0.528-0.543h-0.423l-0.421,0.511l0.034,0.573l-0.248,0.137l0.422,0.473l0.108,0.576 h-0.389l-0.492-0.439l-0.314,0.237l0.033,0.709l0.773,0.203l0.143,0.372l-0.07,0.474l-1.021-0.643l-0.423,0.236l-0.034,0.712 l0.281,0.069l-0.034,0.778l0.353,0.743l0.526-0.033l0.387-0.677h0.423l-0.387,1.015l-0.565,0.103l-0.771,0.812h-0.669 l-0.565,0.236l-0.034,0.406l-0.739,0.305l-0.599,0.51l0.633,0.303l-0.21,0.373l-1.16,0.101l-0.526,0.711l0.07,0.34l0.913,0.269 l-0.703,0.339l-0.353,0.743l-0.703,0.034l-0.14-0.677l-0.457-0.27l-0.284,0.406h-0.599l0.216,0.506l-0.423,0.375l-0.108,0.507 l0.247,0.44h-1.054l-0.457,0.237l0.068,0.915l-0.81,0.508l0.108,0.306l-0.143,0.913l-0.597,0.475l-0.809,0.744l0.246,0.338 l0.914-0.575l0.491,0.033l-0.068,0.507l-0.6,0.238l-0.07,0.88l0.527,0.677l0.985-0.542l1.056-0.135l1.408-1.319v-0.61 l-0.737,0.203l0.63-0.812l0.178-0.949l0.318-0.066l0.419-0.374l0.811,0.135l0.491-0.033l-1.302,0.812l-0.034,0.575l1.268,0.373 l-0.423,0.542l-0.669,0.069l-1.302,1.319l0.81,0.407l-0.457,0.574l0.034,0.813l-0.81-0.068l-0.669-0.643l-0.949,0.034 l-0.561,0.441l-0.038,0.743l-0.737,0.407l-0.703,0.373l0.526-0.577l0.389-0.271l-0.562-0.709v-0.812l-0.633-0.88h-0.635 l-0.353,0.609l-0.879,0.102v0.407h1.126l-1.16,1.015l-0.775-0.338l-0.667,0.102l-0.879,0.778l0.493,0.101l0.457-0.203 l0.246,0.237l-0.949,0.577l-0.423,0.507l-0.422-0.405h-0.633l-0.104,0.405l1.018,0.576h1.198l-0.245,0.609l0.525,0.204 l-0.034,0.541l-1.056-0.305l-0.178-0.61h-0.806l-0.811-0.677l-0.176-0.542l-0.316,0.035l-0.14,0.677l0.809,1.049l0.845,0.61 l0.739,0.1l0.387,0.407l-0.775,0.035l-1.264-0.475l-1.2-1.287l-0.559,0.34l-0.739-0.542h-0.917l-0.455-0.373l-0.353,0.406 l0.138,0.677l-0.493,0.44l0.707,0.71l1.51-0.439l0.247,0.305l-0.669,0.438l0.354,0.204l1.16-0.542h0.527l-0.282,0.474 l-1.336,0.543l-0.527,0.745l-0.913-0.237l-0.777-0.982h-0.387l-0.457,0.373l-0.669-0.577l-0.561,0.339l-0.389-0.238l-0.703,0.407 l0.212,0.337l1.44,0.203l0.914,0.575l1.127,0.578l-0.316,0.709l0.387,0.576l-0.667,0.338l-0.28-0.338l-0.038-1.152l-0.771-0.27 l-0.845,0.136l0.316,0.576l-0.14,0.439l-1.021-0.61l-0.879,0.881l0.879,0.576l-0.703,0.066l-0.493,0.205l-0.245-0.846 l-1.338-0.033l0.422,0.844l-0.564,0.374l-0.247-0.812l-0.771-0.679l-0.422,0.135l0.106,0.476l0.877,0.778l-0.385,0.507 l0.385,0.373l1.021-0.305l1.372,0.271l0.879,0.542h1.336l0.423-0.305h0.669l-0.879,0.847l-1.196-0.17l-0.457,0.237l-1.444-0.71 l-0.915,0.237l-0.421-0.17l-0.703,0.577l-0.985,0.134l-0.072,0.374l1.514,0.642l-0.564,0.609l0.741,0.137l0.491-0.306h1.233 l-0.917,0.609h-1.298l-0.354,0.17l-0.386-0.103l-0.036,0.271l0.669,0.271h0.491l-0.771,0.439l-0.381,0.101l0.106,0.404 l0.418,0.288l0.315,0.505l1.054-0.05l0.561-0.388l1.404-0.187l0.949,0.237l0.351,0.236l0.629-0.405l0.017-0.574l0.633-0.167 l0.228,0.49h0.684l0.999-0.71l0.457,0.119l-0.193,0.372l-0.491,0.354l0.895,0.219l0.423-0.405l-0.176-0.489l0.665-0.945 l-0.174,0.725l0.718,0.811l-0.544,0.674l-1.228,0.287l-0.595,0.44l0.332,0.27l-0.419,0.676l-1.054,0.033l-0.034-0.405 l0.527-0.405l-0.125-0.811l-0.858-0.118l-0.946,0.894l-0.142,0.475l-0.648-0.812l-0.79-0.168l-0.999,0.168l-0.578-0.168 l-1.141,0.541h-0.561l-0.667-0.422l-0.245,0.084l0.368,0.827l-0.229,0.439l0.422,0.354l0.666-0.151l0.368-0.423l0.527,0.016 l-0.595,0.625l0.068,0.725l-0.368,0.304l-0.65-0.354l0.302,0.979l0.525,0.438l1.296-1.383l0.915,0.369l-0.385,0.372l0.104,0.711 l-1.092,0.575l0.176,0.305l0.669,0.1l-0.353,0.543l0.495,0.711l-0.318,0.846l0.281,0.034l0.703-1.049l0.633-0.338l0.142-0.88 l1.69-0.678l0.841,0.068l0.703-0.204l-0.493,0.305l-0.877,0.642v1.051l0.279,0.643l-0.666-0.541l-0.14-0.95l-0.493-0.032 l-0.599,1.048l-0.493,0.169l0.845,0.305l-0.741,0.949h-0.595l-0.28,0.608l0.453,0.204h1.268l0.316,0.509l-0.912,0.067 l-0.318,0.507l-0.07,0.61l-0.986-0.644l-0.458,0.204l-0.176,0.745l-0.21-0.881l-0.597,0.372l-0.812,1.051l0.32,0.812l1.229,1.253 l0.246-0.712l0.318,0.271l0.669-0.303l-0.176-0.375l0.389-0.844l0.981,0.71l-0.457,0.271l0.563,0.576l-0.21,0.745l-0.599,0.406 l0.527,1.251l0.423-0.473l1.125-0.305l0.459,0.61l-0.95,0.067l-0.458,0.339l0.493,0.744l-0.104,0.305l-1.654-1.152l-0.561,0.206 l-0.53-0.407l-0.703,0.033v0.678l-0.493,0.507l1.162,1.895l0.947,0.169l1.268,1.05l1.761,0.643l0.21,0.542l-0.422,0.204 l0.673,0.611l0.612-0.287l-0.28-0.86l0.565-0.019l0.578,0.457l-0.106,0.253l0.929,1.113l0.422-0.507l0.366,0.185l0.79-0.353 l0.965-0.896l0.422-0.084l0.383-0.422l0.212,0.051l0.229,0.641l0.561,0.051l1.594-1.552l-0.068-0.54l-0.702-0.846l1.229,0.744 l0.979-0.945l-0.263-0.321l0.58-0.388l-0.104-0.609l0.716-0.455l0.773-0.136l0.193-0.54l-0.737-0.895l0.263-0.591l-0.647-0.845 l-0.791-0.556l0.034-0.744l0.458,0.271l0.876,0.946l0.351,1.231l0.318,0.338l0.559,0.083l-0.123,0.49l0.421,0.523l0.895-0.388 l-0.226-0.472l-0.405-0.305l0.314-0.557l0.756,0.642l0.034,0.32l1.158-1.045l0.297-0.964l-0.28-0.86l-0.613-0.254l-0.315-0.488 l0.423-0.27l0.068-0.39l0.455-0.05l0.351-0.389l-0.472-0.54l0.034-0.827l0.701-0.507l0.651,0.626l-0.528,0.811l0.176,1.063 l-0.193,0.726l0.527,0.811l0.14,0.59l0.965,0.962l1.104-0.103l0.456,0.372l-0.274,0.344l0.57,0.378l0.536,0.903l0.502-0.903 l-0.202-2.773l-0.703-1.194l0.371-0.773l0.637-0.324l-0.47-0.902l0.301-0.515l1.442-0.13l0.402-0.678l-0.066-0.936l0.667-1.386 l-0.667-0.903l-0.336-2.032l-0.871-1.645l0.066-0.74l2.112-0.679l0.032-1.453l0.437-1l-1.609-1.708l-1.34-0.645l-0.07-1.678 l0.306-1.644l-0.235-1.807l-0.504-1.226l0.403-1.387l-0.269-2.354l-0.435-2.29l0.334-1.999l1.036-1.776l1.009-0.579l1.241,0.258 l1.573,0.096l0.805-1.064l-0.136-1.677l-0.435-0.677l0.066-1.095l1.575-3.71l0.066-2.127l0.472-2.034l0.468-1.129l-0.034-1.289 l-0.669-0.646l0.032-0.903l1.477-0.839l1.573-0.321l0.737-0.614l0.068-0.904l1.271-2.159l1.31-1.742l0.436-1.032l-0.502-1.323 l-0.54-0.581l-0.03-2.063l0.604-0.292l0.566-0.741l0.269-1.097l0.638-0.322l0.702-1.483l0.973-0.71l1.039,0.451l0.438,0.484 l0.601-0.097l0.703-0.613l-0.566-0.936l0.536-0.483v-0.484l0.233-0.483l-0.737-1.129l0.468-0.289l1.34,0.032l1.007-0.517 l1.544,0.388l0.937,0.612l1.074,0.097l0.601,0.483l0.469-0.161l0.438,0.257v-1.095l-0.504-0.708l0.133-1.388l0.738-0.388 l-0.234-0.934l-0.737-0.389l-0.068-0.902l1.074,0.323l1.039-0.194l0.349-0.166l-0.006-0.004l0.189-0.27l0.391,0.186l0.316-0.2 l-0.268-0.677l0.169-0.773l0.637-0.518l0.87,0.13l0.703,1l1.977,1.548l0.371,0.936l0.737,0.968l1.306,0.517l2.178,0.063 l1.141-1.064l0.637-0.646l0.973,0.032l1.543,1.031l1.038,0.162l0.534-0.967l0.606-0.321l0.733-0.678l0.806,0.064l0.804-0.516 l0.335-0.581l-0.335-0.774l-0.434-1.354l0.234-2.289l0.302-0.71l-0.438-0.677l0.538-0.323l0.735-0.967l-0.066-0.517l0.972-0.418 l1.207,0.225l0.705-0.161l-0.069-0.386l0.772-0.809l1.977-0.032l0.87,0.581l1.13,1.377l0.655,0.647l1.009,0.355l1.544,0.161 l0.27,0.729l0.923,0.938l-0.153,0.923l-0.821,1.246L868.527,189.848L868.527,189.848z M784.87,267.485l0.604,0.583l-0.724,0.243 L784.87,267.485L784.87,267.485z M782.765,262.495c-0.036-0.033,0.536-0.162,0.536-0.162l0.5,0.516l-0.333,0.645L782.765,262.495 L782.765,262.495z M784.374,260.752l-0.036,0.708l-0.368,0.098L784.374,260.752L784.374,260.752z M783.568,260.333l-0.133,0.774 l-0.707-0.129L783.568,260.333L783.568,260.333z M781.959,256.946l-0.703-0.451l0.671-0.547 C781.927,255.948,781.927,256.817,781.959,256.946L781.959,256.946z M781.625,257.624l0.669,0.032l-0.335,0.388L781.625,257.624 L781.625,257.624z M783.333,258.463c0.036,0.031,0.703,0.871,0.703,0.871l-0.301,0.837L783.333,258.463L783.333,258.463z  M782.062,259.59l-0.606-0.708l0.872-0.259L782.062,259.59L782.062,259.59z M781.455,254.398l-0.77,0.58l0.47,0.291l0.47-0.45 L781.455,254.398L781.455,254.398z M781.124,248.143l1.071,0.483l-0.872,0.162L781.124,248.143L781.124,248.143z  M781.425,246.594l0.87,0.549l-0.436,0.549L781.425,246.594L781.425,246.594z M784.036,244.788l0.269,0.71l-0.87,0.032 L784.036,244.788L784.036,244.788z M784.876,244.24l0.669,0.193l0.303,0.516l-0.94,0.549L784.876,244.24L784.876,244.24z  M793.146,238.682c-0.016,0,0.824-0.891,0.824-0.891l0.233,0.971l-0.47,0.404L793.146,238.682L793.146,238.682z M793.416,237.208 c-0.017,0.018-0.353,0.373-0.353,0.373l-0.889-0.954l0.973-0.081L793.416,237.208L793.416,237.208z M794.306,235.332l1.444-1.215 l0.62,0.533l-0.956,0.633L794.306,235.332L794.306,235.332z M794.524,237.031l0.569-1.02l0.927-0.017l0.267-0.467l0.722-0.034 l0.468,0.5l-0.671,0.794l-1.041-0.066l-0.62,0.34L794.524,237.031L794.524,237.031z M806.594,224.328l0.354-0.664l1.175-0.21 l-0.958,1.116L806.594,224.328L806.594,224.328z M805.62,226.464l-0.318-0.551l-0.84,0.064l0.703-0.743l1.295-0.147l0.688-0.275 l-1.056,1.262L805.62,226.464L805.62,226.464z M807.903,218.938l0.37,0.243l0.034,0.534l-0.47,0.421l-0.404-0.501 L807.903,218.938L807.903,218.938z M809.634,217.239l0.419-0.436l0.856,0.113l-1.108,0.873L809.634,217.239L809.634,217.239z  M809.029,215.67l0.856-0.874l0.185,0.842l-0.737,1.133L809.029,215.67L809.029,215.67z M814.787,207.576l0.305-0.438l0.52,0.097 l-0.369,0.737L814.787,207.576L814.787,207.576z M809.23,203l0.387,0.453l-0.252,0.454l-0.487-0.293L809.23,203L809.23,203z  M810.78,200.735l-1.07,1v-0.87l0.836-1.387L810.78,200.735L810.78,200.735z M811.451,200.059l-0.371-0.516l0.371-0.452 l0.402,0.225L811.451,200.059L811.451,200.059z M814.129,198.059l-0.1,0.741l-1.674,1.225l0.268-1.578L814.129,198.059 L814.129,198.059z M815.638,196.124l0.504-0.806l0.804,0.645L815.638,196.124L815.638,196.124z M816.845,196.445l-0.032,1.775 l-0.972-0.452l-1.241,0.773l0.133-0.872L816.845,196.445L816.845,196.445z M817.449,192.092l0.3,1.192l0.036,1.483l-1.241,0.356 l-0.504-0.419l1.141-0.774l-0.637-0.033l-1.173,0.903l-0.37-0.58l0.336-0.902l0.871,0.193l0.804-0.904l-0.167-0.419 L817.449,192.092L817.449,192.092z M818.454,192.608l-0.47-0.322l0.066-1.29l1.239-0.967l0.034-0.808l1.207-0.451l0.234,0.838 l-0.974,0.677l-0.099,0.903L818.454,192.608L818.454,192.608z M821.521,193.129l1.192,1.1l-1.595,1.684l-1.059,0.582 l-0.372,0.697l-0.701-0.227l0.097-0.874l-1.099,1.389h-0.505l0.169-1.098l0.47-0.257l-0.134-0.806l0.637-0.742v-0.838 l1.106-1.645l-0.57,2.355l0.233,0.838l0.637-1.13l1.476-0.063l-0.57-0.773l-0.034-0.646L821.521,193.129L821.521,193.129z  M821.384,192.142l-0.282-0.276l0.671-0.274l0.94,0.47v0.616L821.384,192.142L821.384,192.142z M823.92,193.452l0.303-1.085 l0.504,0.746L823.92,193.452L823.92,193.452z M827.077,188.647l-0.169,0.5l0.203,0.729l-0.991,0.21l-0.354,0.501l-1.071-0.096 l-0.236,1.1l-0.419,0.016l-0.036-0.824l-0.773-0.098l0.759-0.955l-0.924-0.097l0.404-1.036l1.191-0.08l-1.091-0.535l0.57-0.97 l0.703,0.518l-0.218-0.955l1.409,0.145l0.154,0.712l0.637,0.194L827.077,188.647L827.077,188.647z M827.1,186.03l1.241-0.066 l0.032-0.677l1.105-0.033l0.538-0.708l0.603,0.872l-0.639,0.773l0.036,0.645l-1.109,0.033l-0.871,0.321L827.1,186.03 L827.1,186.03z M830.852,181.062l-0.232-0.613l0.804-0.257L830.852,181.062L830.852,181.062z M829.177,182.804l0.066-1.031 l1.207-0.322l-0.101,0.613C830.35,182.063,829.243,182.804,829.177,182.804L829.177,182.804z M832.262,184.417l0.266-1.193 l0.401,0.838L832.262,184.417L832.262,184.417z M831.792,184.159l-0.268,0.387h-0.639l-1.173-1.161l1.442-1.161l0.334,0.517 l0.805-0.13l0.135,0.257l-0.737,0.517L831.792,184.159L831.792,184.159z M834.264,182.044l-0.423,0.324l-1.039-0.421 l-0.051-0.809l-0.335-1.183l0.519-0.339l0.205,1.229l0.87,0.664L834.264,182.044L834.264,182.044z M836.812,183.386l-0.52-0.743 l-0.686-0.244l-0.103-1.489l0.623-0.583l0.953,0.695l-0.401,0.892l0.538,0.696L836.812,183.386L836.812,183.386z  M843.798,179.988l-0.906-0.372l-1.01-0.485l0.675-0.485l0.989,0.064l0.438,0.453L843.798,179.988L843.798,179.988z  M845.007,179.262l-1.04-1.23l1.645-1.392l0.271,1.003l-0.741,0.857L845.007,179.262L845.007,179.262z M842.994,177.593 l-0.623,0.131l-1.46-0.421l-0.369-0.938l0.822,0.177l0.79-0.583l0.537,0.599l0.47-0.89l0.587,0.323l1.477-1.31l0.186,0.582 L842.994,177.593L842.994,177.593z M845.896,175.75c0.052-0.017,1.277-0.455,1.277-0.455l1.077,0.762l-0.322,0.776l-1.259,0.454 l-0.066-0.858L845.896,175.75L845.896,175.75z M848.399,173.597l-0.27,0.436l-0.401,0.132l-0.588-0.892l0.804-0.193 L848.399,173.597L848.399,173.597z M850.396,172.206l-0.637-0.018l0.316-0.615l0.654-0.016L850.396,172.206L850.396,172.206z  M851.689,172.674l0.049-0.436l0.402-0.373l0.574,0.259l0.436-0.389l0.099-0.711l0.538,0.421l0.741,0.177l-0.608,0.729 l1.126,0.017l-0.402,1.002l-0.939,0.21l-0.989-0.744L851.689,172.674z ",
"M808.241,268.06l0.57,0.378l0.536,0.903l0.502-0.903 l-0.202-2.773l-0.703-1.194l0.371-0.773l0.637-0.324l-0.47-0.902l0.301-0.515l1.442-0.13l0.402-0.678l-0.066-0.936l0.667-1.386 l-0.667-0.903l-0.336-2.032l-0.871-1.645l0.066-0.74l2.112-0.679l0.032-1.453l0.437-1l-1.609-1.708l-1.34-0.645l-0.07-1.678 l0.306-1.644l-0.235-1.807l-0.504-1.226l0.403-1.387l-0.269-2.354l-0.435-2.29l0.334-1.999l1.036-1.776l1.009-0.579l1.241,0.258 l1.573,0.096l0.805-1.064l-0.136-1.677l-0.435-0.677l0.066-1.095l1.575-3.71l0.066-2.127l0.472-2.034l0.468-1.129l-0.034-1.289 l-0.669-0.646l0.032-0.903l1.477-0.839l1.573-0.321l0.737-0.614l0.068-0.904l1.271-2.159l1.31-1.742l0.436-1.032l-0.502-1.323 l-0.54-0.581l-0.03-2.063l0.604-0.292l0.566-0.741l0.269-1.097l0.638-0.322l0.702-1.483l0.973-0.71l1.039,0.451l0.438,0.484 l0.601-0.097l0.703-0.613l-0.566-0.936l0.536-0.483v-0.484l0.233-0.483l-0.737-1.129l0.468-0.289l1.34,0.032l1.007-0.517 l1.544,0.388l0.937,0.612l1.074,0.097l0.601,0.483l0.469-0.161l0.438,0.257v-1.095l-0.504-0.708l0.133-1.388l0.738-0.388 l-0.234-0.934l-0.737-0.389l-0.068-0.902l1.074,0.323l1.039-0.194l0.349-0.166l0.758,0.875l1.205,0.58l1.642,1.839l1.209,0.87 l1.81,0.129l0.701,0.42l0.639,0.161l0.906,1l0.336,0.839l0.399,0.063l0.337-0.096l0.802,1.064l0.635,0.066l0.438,0.645 l-0.342,0.807l0.253,1.295l-0.419,1.02l0.101,0.89l1.224,0.08l0.286,1.036l-0.438,0.664l0.151,1.23l0.52,0.727l0.307,1.604 l-0.232,0.74l0.198,0.679v1.742l-0.301,0.645l0.47,1.289l0.87,0.291l0.806,1.645l0.521,0.542l-0.049,0.971l-0.036-0.037 l-0.599,0.407l-0.88-0.069l-0.526-0.609l-1.09,0.678l-0.739-0.407l-0.387,0.745l-0.773-0.305l-0.354-0.745l-0.734,0.882 l-0.565-0.982l-0.492,0.372l-0.104,0.856l-0.314,0.709l-0.685,0.152l-0.419-0.49l-0.615-0.204l0.578,1.08l0.615,0.407 l-0.771,0.674l-0.79-0.05l-0.701,0.371l0.86,0.371l-0.055,0.524l-0.351,0.101l-0.193-0.303l-0.56-0.27l-0.297,0.32l0.401,0.642 l0.562,0.017l0.445,0.543l-0.281,0.508l-0.562,1.558l0.212,0.642l-1.123,0.204l0.911,0.678l0.739,0.135l0.282,0.576l-0.562,0.203 l0.526,0.711h0.669l-0.915,1.117l-0.599,0.035l-0.669,0.778l0.142,1.455l-0.913,1.489l-0.599-0.035l-0.95,0.882l-0.492-0.61 l-0.143,0.779l0.354,0.812l-1.126,0.61l-0.46,0.914l-0.562-0.034l-0.104-0.645h-0.705l-0.421,0.915v1.015l-0.633,0.544 l-0.389-0.577h-0.387l-0.246,0.947l-0.421,0.103l-0.391-0.473l-0.631,0.608l-0.278,0.745l0.629,0.136l-0.07,0.507l-1.266,1.049 l-0.808-0.204l-0.246,0.475l0.375,0.772l-0.754,1.081l-1.35,0.219l-0.737-0.253l1.07,1.3l0.127,1.112l-0.246,0.339l0.179,1.015 l-0.247,1.32l0.703,0.711l-0.107,0.88l-0.596-0.508l-0.21,0.271l0.278,1.319l-0.703,0.847l0.703,0.271v0.542l-0.421,0.236 l0.491,0.981l-0.633,0.779l0.528,0.542l0.457,0.679l0.635,0.133v0.848l0.457-0.271l0.492,0.812l0.806-0.947l0.635,0.509 l0.211,0.778l1.656,1.218l-0.247,0.509l1.372,0.777v0.677l0.914,0.847l-0.599,1.354l-1.16,1.219l-0.318,0.913l-1.266,0.306 l-0.775-0.407l0.107-0.575l-1.056-0.373l-0.456-0.441l-0.036,0.542l-0.561,0.035l-0.389-0.407l-0.81-0.17l-0.314,0.577 l-0.707,0.203l-0.385-0.373l-0.669,0.846l-0.775-0.372l-0.665,0.27l0.03,0.338l1.41,0.137l0.353,0.271l0.104-0.44l1.229-0.034 l0.599,0.372l0.988,0.169l0.597,0.779l0.737-0.407l0.46,0.204l0.806-0.44l1.128,0.306l0.562,0.473l0.104,0.846l-0.633,0.508 h-0.632l-0.811,1.185l-0.525-0.034l0.173-0.813l-0.314-0.405l-0.354,0.474l0.144,0.576l-0.635,0.066l-0.635,0.679l-0.104,0.914 l-0.774-0.576l0.034,0.576l-0.525,0.474l-0.142-0.204h-0.493l-0.525,0.609l0.771,0.102l0.914,0.915l-1.722,0.067l1.373,0.473 l0.067,0.543l-0.49,1.015l0.983,0.879l-1.088,0.204l-1.021-0.372l0.564,0.845l-0.458,0.779l1.02,0.609l-0.81,0.711l0.741,0.914 l-0.777,0.846l-0.104,0.914l0.808,0.678l-0.419,0.711l-0.176,2.201l-0.739,0.744l-0.318,1.761l-1.021,1.184l-0.491-0.611 l-0.845-0.371l-1.02,0.542l-1.688-0.27l-0.247-0.644l-0.316,1.421l-1.442,0.169l-0.631,1.456l0.527,0.44l0.068,0.711 l-0.914,0.812l-1.159-0.407l-2.36,0.61h-0.913l-0.492-0.44l0.53-0.813l-0.423-2.097l-0.949-0.272l-0.143-0.812l-0.633-0.374 l0.177-0.474l1.159-0.136l0.669-1.217l-0.28-1.084l-0.987,0.542l-0.879-0.847l-0.247-0.845l-0.949-0.374l-0.106-1.251 l-0.843-1.659l-0.421-0.338l-0.461-1.158l-0.772-0.185l-0.523-0.727l0.419-0.422l0.125-0.979l-0.284-0.692l0.159-0.708 l0.929-0.742l-0.243-0.473l-0.771-0.438l0.21-0.439l-0.439-0.019l-0.121,0.692l0.629,0.642l-1.018,0.421l0.142-0.944 l-0.246-0.337l-0.667-0.339l-0.087-1.451l-0.37-0.523l-0.176-1.924l0.722-0.405L808.241,268.06L808.241,268.06z M835.523,265.414 l0.685,1.052l0.371,0.292l0.018-1.101l0.905-0.776l0.018-0.729h-1.109L835.523,265.414L835.523,265.414z M808.729,274.408 l-0.061,0.64l0.479-0.024l0.187-0.753L808.729,274.408L808.729,274.408z M839.602,271.595l0.387,0.744l0.485-0.583l-0.485-0.388 L839.602,271.595L839.602,271.595z M839.952,275.738l0.32,0.42l0.505-0.468l0.822-0.227l-0.203-0.308l-0.955,0.032 L839.952,275.738L839.952,275.738z M836.75,282.65l1.072-0.291l0.218-0.536l-0.318-0.227l0.167-0.55l1.074-0.809l0.133-0.583 l0.675-0.777l-0.101-0.403l-0.657-0.566l0.369-0.761l0.103-0.501l0.385-0.339l-0.536-0.275l-0.489,0.275l-0.989-0.016 l-0.619,0.76l-0.437,0.794l-0.621,0.63l0.286,1.019l-0.336,0.211l0.923,1.294l0.366-0.128l-0.216,0.743l-0.539,0.648 L836.75,282.65L836.75,282.65z M829.813,285.326l0.133,0.84v0.61l0.303,0.292l0.334-0.774l0.504-1.419l0.167-1.484l0.47-1.516 l0.167-1.323l-0.502-0.516l-0.57,0.838l0.136,0.388l-0.301,1.321l-0.505,0.323L829.813,285.326z ",
"M874.942,255.501l-0.176-1.286l2.146-1.966l1.106-0.517 l1.237-2.128l1.308-1.872l0.973-2.224l1.876-3.065l1.342-3.192l-0.302-1.355l-2.011-2.224l-1.207-0.387l-2.146-2.903l0.37-1.321 l0.871-1.163l-0.102-1.321l-1.406-0.936l-0.503-1.033l-0.067-1.645l0.367-0.417l-0.401-0.84l-1.138-0.193l-0.604-0.743v-1.482 l0.637-0.808l-0.905-0.225l-0.032-0.774l0.2-2.902l0.838-0.193l-2.077-4.645l-1.914-3.386l-0.399-1.259l-1.107-1.16l0.773-2.129 l0.938-1.451l0.436-1.322l-0.57-0.517l-2.111-1.291l-0.367-0.838l-0.705-1.032l-1.273-0.679l-0.637-0.096l-0.806-2.03 l-0.637-0.743l0.335-1.516l0.203-1.193l-0.747-0.241l0.757-0.5l1.226-0.47l-0.167-1.861l0.821-1.246l0.153-0.923l-0.923-0.938 l-0.27-0.729l-1.544-0.161l-1.009-0.355l-0.655-0.647l-1.13-1.377l-0.87-0.581l-1.977,0.032l-0.772,0.809l0.069,0.386 l-0.705,0.161l-1.207-0.225l-0.972,0.418l0.066,0.517l-0.735,0.967l-0.538,0.323l0.438,0.677l-0.302,0.71l-0.234,2.289 l0.434,1.354l0.335,0.774l-0.335,0.581l-0.804,0.516l-0.806-0.064l-0.733,0.678l-0.606,0.321l-0.534,0.967l-1.038-0.162 l-1.543-1.031l-0.973-0.032l-0.637,0.646l-1.141,1.064l-2.178-0.063l-1.306-0.517l-0.737-0.968l-0.371-0.936l-1.977-1.548 l-0.703-1l-0.87-0.13l-0.637,0.518l-0.169,0.773l0.268,0.677l-0.316,0.2l-0.391-0.186l-0.189,0.27l0.764,0.879l1.205,0.58 l1.642,1.839l1.209,0.87l1.81,0.129l0.701,0.42l0.639,0.161l0.906,1l0.336,0.839l0.399,0.063l0.337-0.096l0.802,1.064 l0.635,0.066l0.438,0.645l-0.342,0.807l0.253,1.295l-0.419,1.02l0.101,0.89l1.224,0.08l0.286,1.036l-0.438,0.664l0.151,1.23 l0.52,0.727l0.307,1.604l-0.232,0.74l0.198,0.679v1.742l-0.301,0.645l0.47,1.289l0.87,0.291l0.806,1.645l0.521,0.542 l-0.049,0.971l0.314,0.336l0.881,0.034l0.844,0.844h1.759l1.195,1.118l-0.669,0.305l0.459,0.61l0.072,1.354l-0.318,0.271 l1.404,1.252l-1.018-0.204l-0.387,0.137l1.197,0.947l0.034,0.542l-1.406-0.745l-1.163,0.034l-1.23,0.777l0.036,0.711 l-0.846,0.848v0.608l-0.384,0.271l-1.444,1.456l-0.211,1.454l-0.353,0.103l-0.244-0.441l-0.423,0.069l0.314,0.879l-0.21,0.711 l-0.949,0.102l-0.563,0.743l0.245,1.118l0.633,0.441l-1.124-0.34l-0.316-0.406l-0.633,0.236l-0.353,0.948l0.141,0.439 l-0.634-0.27l-0.246,0.338l0.631,0.603l0.016,0.423l-0.56,0.573l-0.263,0.507l-0.825,0.506l-0.439-0.305l-0.104-0.319 l-0.613-0.187l-0.63,0.22l0.224,0.811l-0.522,0.422l0.367,0.842l-0.351,0.828l-0.439,0.102l-0.455,0.742l0.351,0.896l0.245,0.185 l-0.279,0.878l0.175,0.589l0.595-0.27l0.493,0.507l-0.157,0.962l-0.245,0.472l0.315,0.844l-0.195,0.388l0.909,1.439l0.457,0.373 l-0.314,0.542l0.703,1.049l-0.669,0.271l0.142,1.388l-0.318,0.542l-0.034,1.826l0.527,0.645l-0.493,0.981v0.677l0.353,0.474 l1.23-0.542l0.456,0.34l0.213-0.542l1.056,1.083l0.635-0.103l0.633,0.541l1.336-0.134l0.385,0.17l-0.351,0.642h0.492l1.126-0.744 v0.609l-0.561,0.745l1.159,1.59l0.247,0.543l-0.318,0.913l0.318,0.17l0.49-1.321l0.563-0.271l0.105,0.575l0.808-0.337 l0.669-0.034l1.515-1.051h0.843l1.829-1.151l0.108-0.473l1.193,0.338l0.812-0.135l0.737-1.083l0.176,0.372l-0.387,0.744 l0.491,0.204l0.493-1.083l0.42,0.103l-0.383-0.915l0.383-0.372l0.459,0.88l0.528,0.101l0.209-0.643l0.46,0.982l0.598-0.203 l0.071-0.61l0.527,0.136l0.21,0.474l0.6-0.543l1.195-0.236l0.669,0.576l1.44-0.203l0.106-0.474l-0.387-0.372l0.421-0.237 l0.635,0.202l0.138,0.542l0.916,0.236C874.575,256.25,874.761,255.803,874.942,255.501L874.942,255.501z M857.566,222.921 l-0.353,0.42l-0.808-0.065l-0.637-0.875l0.87-0.597l1.413,0.21l-0.085,0.387l-0.82,0.034L857.566,222.921L857.566,222.921z  M844.487,235.656l0.101-0.584l0.554,0.455l-0.368,0.371L844.487,235.656L844.487,235.656z M844.084,236.188l0.554,0.438 l0.587-0.275l-0.083,0.744l-0.822,0.454l-0.521-0.616L844.084,236.188L844.084,236.188z M853.721,259.717l0.186,0.682 l-0.604,0.388l-0.335-0.388l0.436-0.243L853.721,259.717L853.721,259.717z M852.479,258.715c0,0.016,0.266,0.63,0.266,0.63 l-0.366,0.082L852.479,258.715L852.479,258.715z M850.58,257.84l1.428-0.274l-0.101,0.518l-0.84,0.647l-0.653-0.356 L850.58,257.84L850.58,257.84z M848.668,256.353l0.955,0.792l-0.57,0.357l-0.385-0.422V256.353L848.668,256.353z  M846.568,256.725l0.872,0.113l-0.52,0.21C846.921,257.048,846.55,256.708,846.568,256.725L846.568,256.725z M840.389,258.019 l1.076,0.356l0.268-0.405l-0.703-0.436l0.015-0.679l0.489-0.049l1.376,0.906l0.135,0.68l-0.654-0.098l-0.322,0.34l0.489,0.763 l0.686-0.066l0.203,0.777l-0.637,0.337l-0.756-0.693l-0.925-0.291l-0.518-0.599l-0.574-0.389L840.389,258.019z ",
"M874.277,277.825l0.689-1l-0.13-0.839l0.733-0.612v-0.904 l-2.144-3.741l0.335-3.354l0.544-0.359l0.318-1.279l0.731-0.892l0.121-0.285l-0.055-0.145l-0.443-0.724l-0.121,0.413 l-3.729-0.102l-1.653-1.015l-1.723,0.034l-0.915-0.44l-0.775,0.204l-0.949-0.812l-0.068,0.608l-0.601-0.1v0.372l0.531,0.439 l-0.846,0.541l-0.423-0.269l-1.652-0.068l-0.318-0.407l-0.246,0.88l-0.846-0.101l-0.913,0.27l-0.139,0.746l-0.599-0.136 l-1.48,0.61l-0.526,0.847l0.036,2.842l0.599,0.103l0.314-0.237l0.846,0.068l-0.423,0.642l-0.669,0.068l0.073,1.152l0.771,1.15 l1.304,1.152l0.457-0.103l0.068-0.745l0.915-0.71l0.353,0.643l-0.492,2.334v0.502l0.49-0.169l1.44-0.814l1.105-0.259l1.175,0.84 l0.603-0.064l0.203-0.776l0.667,0.485l0.337,0.645l0.604,0.033l1.44,0.87l0.468,1.033l0.872,0.42l0.703,0.968l1.644-0.646 L874.277,277.825L874.277,277.825z M855.451,267.356l0.806-0.065l0.218,0.454l-0.856,0.13L855.451,267.356L855.451,267.356z  M853.804,269.476l-0.57-0.906l-0.79,0.065l-0.788,0.339l-0.351-0.243l1.457-0.664l0.438-0.55l0.084-0.325l0.504,0.082 l0.455,0.437l0.82,0.049l0.371,0.875l-0.557-0.179l-0.787,0.501L853.804,269.476L853.804,269.476z M855.5,270.155l-0.049-0.518 l1.188,0.034l0.405,0.986l-0.468,0.292L855.5,270.155L855.5,270.155z M851.371,275.253l0.385,0.097l0.707-0.583l-0.02-0.452 l0.641-1.215l1.275-0.243l0.57-0.647l0.534-0.76l0.624,0.112l0.216-0.112l-0.199-0.275l-0.454-0.258l-0.705-0.518l-1.426-0.114 l-0.387-0.21l-0.454,0.535l-0.282,0.095l-0.455,0.535l-0.235-0.437l-0.489-0.146l0.018,0.356l-0.451,0.178l0.62,0.193v0.438 l-0.471,0.321v0.52l0.707,0.179l0.721,0.663l-0.252,0.679l-0.385-0.049L851.371,275.253z",
"M877.876,285.732 877.717,284.469 877.08,283.629  876.576,282.339 876.273,281.921 875.672,280.824 875.805,280.245 875.538,279.502 875.136,279.147 875.337,278.727  875.202,277.954 872.891,277.631 871.247,278.277 870.544,277.309 869.672,276.889 869.204,275.856 867.764,274.987  867.159,274.954 866.822,274.309 866.155,273.824 865.952,274.6 865.35,274.664 864.175,273.824 863.069,274.083  861.629,274.897 861.139,275.067 861.139,276.189 861.559,278.153 861.032,279.711 859.558,281.234 858.466,281.234  857.375,280.219 857.232,279.44 855.053,277.206 854.981,275.885 854.595,275.919 853.787,276.698 852.485,277.003  852.026,277.41 851.079,277.477 850.376,278.491 850.48,279.406 850.092,279.27 850.128,280.828 848.896,282.215  848.793,283.096 848.861,283.943 848.192,284.552 848.72,286.684 849.25,287.191 849.26,287.347 850.076,287.115  850.431,286.209 851.74,285.061 853.838,284.575 855.463,284.726 856.567,284.662 857.172,285.145 858.076,284.469  859.016,284.339 859.217,284.887 860.021,284.92 860.792,285.76 862.233,285.726 862.668,285.919 864.175,284.984  865.819,285.726 867.26,285.952 868.467,287.274 869.47,287.436 870.544,288.822 871.884,288.887 872.339,289.269  872.341,289.265 873.816,288.621 875.765,288.362 875.966,287.199 876.77,286.812 877.106,285.907 			",
"M856.753,296.2 856.604,294.627 857.138,293.918  856.67,293.435 856.1,293.305 855.933,292.434 855.294,292.112 853.584,292.5 852.381,291.919 851.107,290.241 849.523,290.57  849.284,290.443 849.669,289.799 849.354,288.682 849.26,287.347 850.076,287.115 850.431,286.209 851.74,285.061  853.838,284.575 855.463,284.726 856.567,284.662 857.172,285.145 858.076,284.469 859.016,284.339 859.217,284.887  860.021,284.92 860.792,285.76 862.233,285.726 862.668,285.919 864.175,284.984 865.819,285.726 867.26,285.952  868.467,287.274 869.47,287.436 870.544,288.822 871.884,288.887 872.339,289.269 871.266,290.622 872.005,290.946  872.005,291.851 870.395,292.561 869.522,294.046 868.852,294.176 868.582,295.532 869.792,296.114 869.792,297.083  868.785,297.083 868.448,296.565 867.641,296.824 867.173,297.986 865.831,298.05 866.299,299.345 865.495,299.409  864.284,299.99 863.079,299.409 861.4,299.924 860.373,300.608 859.785,299.691 859.852,298.627 859.352,296.982  858.713,296.917 857.676,296.112 			",
"M860.373,300.608 861.4,299.924 863.079,299.409  864.284,299.99 865.495,299.409 866.299,299.345 865.831,298.05 867.173,297.986 867.641,296.824 868.448,296.565  868.785,297.083 869.792,297.083 869.792,296.114 868.582,295.532 868.852,294.176 869.522,294.046 870.395,292.561  872.005,291.851 872.005,290.946 871.266,290.622 872.341,289.265 873.816,288.621 875.765,288.362 875.966,287.199  876.77,286.812 877.106,285.907 878.25,285.65 879.055,286.166 880.06,285.584 881.001,287.005 882.141,286.489 883.148,286.618  884.022,288.104 885.229,287.199 886.571,286.812 887.109,287.458 887.78,287.458 889.795,288.168 890.062,289.202  889.725,290.364 890.534,291.269 890.534,292.625 891.606,293.724 892.141,294.95 893.352,296.565 894.292,297.212  894.693,298.698 896.238,299.086 897.983,300.571 898.116,301.411 899.327,302.186 898.787,302.638 897.848,304.124  895.431,304.446 894.425,303.542 894.023,304.253 894.089,305.352 895.029,306.772 894.896,307.998 895.969,309.162  895.969,310.296 895.844,310.27 893.869,310.753 892.495,310.883 891.826,312.593 891.726,314.109 890.718,314.237  889.912,313.56 888.572,313.947 887.786,313.445 886.813,313.493 885.957,314.514 885.186,314.271 885,313.413 883.725,313.251  882.275,314.109 881.635,313.817 880.229,313.624 879.826,314.011 879.189,314.043 878.42,313.366 876.812,313.979  876.608,313.463 875.472,312.914 872.79,312.527 871.648,311.915 871.078,311.882 870.108,312.656 868.634,312.72  865.382,313.172 864.576,313.592 863.069,312.85 862.328,312.939 862.366,312.495 861.429,311.044 861.059,309.721  861.762,308.624 862.702,308.303 862.668,305.497 862.132,305.044 861.933,303.949 861.296,303.013 860.591,300.949 			",
"M862.328,312.939 863.069,312.85 864.576,313.592  865.382,313.172 868.634,312.72 870.108,312.656 871.078,311.882 871.648,311.915 872.79,312.527 875.472,312.914  876.608,313.463 876.812,313.979 878.42,313.366 879.189,314.043 879.826,314.011 880.229,313.624 881.635,313.817  882.275,314.109 883.725,313.251 885,313.413 885.186,314.271 885.957,314.514 886.813,313.493 887.786,313.445 888.572,313.947  889.912,313.56 890.718,314.237 891.726,314.109 891.826,312.593 892.495,310.883 893.869,310.753 895.844,310.27  896.72,310.463 897.79,310.237 897.688,309.303 898.395,308.69 900.707,309.431 903.086,309.431 904.261,308.819  905.331,308.883 906.034,310.946 907.007,311.721 906.471,312.72 907.744,314.334 910.325,313.979 911.263,314.753  911.396,315.689 912.27,315.817 912.27,317.044 912.77,318.495 914.883,320.461 915.723,319.559 917.026,320.236  918.101,319.945 919.104,320.139 920.682,318.978 921.415,318.881 922.458,321.074 923.896,321.945 924.332,322.816  924.969,322.203 926.645,322.559 927.886,322.591 928.757,323.106 929.762,322.944 930.969,323.655 932.377,323.913  933.08,323.235 933.481,324.267 934.118,324.622 934.152,325.815 933.381,326.814 932.409,327.008 932.107,328.944  933.447,329.846 933.65,331.137 933.08,332.781 933.249,333.91 932.409,334.523 930.163,334.652 929.159,336.201  928.555,336.458 928.283,338.554 927.412,338.852 927.308,338.378 926.812,338.31 925.653,338.785 924.493,338.683  923.895,339.122 923.508,339.901 922.486,339.968 921.995,340.646 921.008,341.662 920.657,341.559 919.708,341.662  918.933,342.237 917.703,341.966 916.753,342.542 916.154,342.439 915.556,341.458 915.135,341.493 915.417,342.034  915.944,342.678 915.733,343.251 914.746,344.606 914.186,344.911 913.973,344.506 914.325,344.303 915.241,343.251  915.101,342.88 914.608,342.577 914.432,343.083 913.025,344.506 912.181,344.641 912.04,345.184 911.055,345.184  910.386,344.708 909.824,345.216 908.803,345.046 908.661,345.419 909.26,345.793 910.738,345.689 911.301,346.333  911.864,346.74 912.391,346.469 912.709,346.909 912.248,347.451 912.286,347.856 912.709,347.586 913.128,347.586  912.989,348.295 913.551,347.79 914.043,348.094 914.256,349.109 914.784,349.651 915.838,349.955 916.295,349.719  914.746,348.295 913.128,346.401 912.671,345.25 913.06,345.013 913.763,345.961 914.115,347.146 916.367,349.516  916.894,349.719 917.669,348.94 918.195,348.905 919.075,349.447 919.428,348.534 920.903,348.364 922.136,348.432  921.783,349.007 921.326,349.379 921.749,350.192 921.185,350.837 919.602,350.97 917.772,350.667 916.682,351.242  915.876,352.325 914.396,352.292 912.248,353.848 910.632,354.56 908.945,354.492 908.134,353.882 908.381,353.543  908.945,351.919 908.873,351.275 907.396,350.159 906.866,350.227 905.849,349.752 905.216,350.261 904.404,349.922  905.355,348.534 907.009,347.586 908.381,347.349 908.77,347.113 908.24,346.503 908.03,345.385 907.596,345.192  907.247,345.833 906.512,345.428 905.458,344.989 904.334,345.174 903.353,345.665 902.514,345.192 901.861,345.141  901.179,344.568 901.687,344.264 901.882,343.926 900.514,343.487 898.829,343.487 898.424,342.93 899.458,342.93  901.073,342.728 901.912,342.98 902.514,342.676 903.493,342.103 902.089,342.439 901.38,342.203 900.819,341.796  900.501,341.289 900.114,341.899 899.728,342.406 898.884,342.406 898.918,342.169 898.392,341.695 897.478,342.813  896.386,342.88 895.717,343.388 895.717,344.506 894.77,345.689 894.275,345.689 894.558,346.266 892.799,348.295 892.2,348.295  891.812,347.721 891.777,348.364 891.673,348.905 892.13,349.447 891.953,350.227 891.942,350.239 891.155,349.618  889.713,349.745 888.955,350.28 887.244,350.246 885.967,349.989 885.226,348.739 885.895,348.263 886.664,348.488  886.696,347.682 887.57,346.134 888.038,346.199 888.004,345.102 888.137,343.49 889.043,343.456 890.25,343.071  890.987,343.651 892.361,343.617 892.529,343.134 891.959,342.36 892.158,341.619 891.991,340.812 890.651,340.038  889.511,339.038 889.348,338.556 888.308,338.039 888.405,336.973 888.104,335.393 886.934,334.814 885.489,333.426  885.055,333.426 884.82,333.942 883.313,333.781 881.871,332.523 880.666,332.523 879.995,331.492 879.625,331.847  878.619,331.847 878.319,332.298 877.414,331.782 877.213,332.073 876.476,331.782 876.675,332.976 876.51,333.492  876.681,334.6 875.605,334.781 874.531,335.427 871.414,335.943 870.645,336.813 869.672,336.877 868.198,337.328  867.224,336.877 866.79,336.169 865.551,335.62 864.244,335.588 862.569,334.652 861.663,334.652 861.059,335.201  860.142,335.234 859.821,334.427 858.646,333.685 857.543,332.681 857.742,332.556 857.941,331.041 858.9,329.08  859.785,329.137 859.852,327.782 859.652,326.556 862.501,323.493 862.9,322.138 863.607,321.43 864.377,321.396  864.635,320.065 864.3,319.514 864.163,318.817 864.568,318.316 863.443,317.636 862.904,316.327 862.317,315.743  862.266,313.688 			",
"M876.681,334.6 876.51,333.492 876.675,332.976  876.476,331.782 877.213,332.073 877.414,331.782 878.319,332.298 878.619,331.847 879.625,331.847 879.995,331.492  880.666,332.523 881.871,332.523 883.313,333.781 884.82,333.942 885.055,333.426 885.489,333.426 886.934,334.814  888.104,335.393 888.405,336.973 888.308,338.039 889.348,338.556 889.511,339.038 890.651,340.038 891.991,340.812  892.158,341.619 891.959,342.36 892.529,343.134 892.361,343.617 890.987,343.651 890.25,343.071 889.043,343.456  888.137,343.49 888.004,345.102 888.038,346.199 887.57,346.134 886.696,347.682 886.664,348.488 885.895,348.263  885.226,348.739 885.163,348.633 884.559,347.405 884.76,343.205 883.954,341.913 883.617,340.687 881.134,338.812  880.936,337.909 879.055,336.294 878.515,334.292 			",
"M860.142,335.234 861.059,335.201 861.663,334.652  862.569,334.652 864.244,335.588 865.551,335.62 866.79,336.169 867.224,336.877 868.198,337.328 869.672,336.877  870.645,336.813 871.414,335.943 874.531,335.427 875.605,334.781 878.515,334.292 879.055,336.294 880.936,337.909  881.134,338.812 883.617,340.687 883.954,341.913 884.76,343.205 884.559,347.405 885.163,348.633 885.967,349.989  887.244,350.246 888.955,350.28 889.713,349.745 891.155,349.618 891.942,350.239 891.463,350.701 891.953,351.072  891.953,351.75 891.284,352.9 890.301,353.104 888.681,353.205 888.438,354.154 887.839,354.764 888.224,355.405  888.153,356.727 887.663,357.539 887.987,358.615 886.88,358.564 886.68,358.11 885.472,357.561 884.581,357.885  884.095,357.382 882.574,356.778 881.134,356.648 879.929,356.842 877.179,358.067 876.777,358.712 875.605,359.067  875.033,359.454 873.292,359.26 872.488,359.26 871.549,358.938 870.777,359.26 869.873,359.003 868.533,359.616  866.924,359.035 866.454,359.164 865.952,358.648 864.713,358.583 863.573,359.292 863.069,358.486 863.405,358.004  863.472,357.325 862.87,356.842 861.612,356.73 861.328,355.778 861.195,355.1 861.965,354.26 860.355,353.939 859.586,354.938  858.847,354.294 857.875,354.682 857.439,353.939 855.904,353.45 855.72,352.982 856.259,351.864 855.03,350.975  853.821,350.359 853.52,349.567 852.024,347.867 851.74,347.301 850.888,347.018 851.811,346.102 852.614,345.876  853.05,345.102 854.291,345.197 855.127,344.425 855.095,343.554 856.736,341.199 857.708,338.458 858.681,336.716  859.785,336.521 860.257,335.522 			",
"M850.888,347.018 851.811,346.102 852.614,345.876  853.05,345.102 854.291,345.197 855.127,344.425 855.095,343.554 856.736,341.199 857.708,338.458 858.681,336.716  859.785,336.521 860.257,335.522 859.821,334.427 858.646,333.685 857.543,332.681 856.501,333.329 855.061,333.008  853.183,333.136 852.111,332.847 850.569,332.976 849.766,334.167 848.928,334.814 848.827,335.652 847.52,334.331  846.012,335.556 844.704,335.974 844.571,336.813 842.092,337.039 840.518,337.555 838.874,337.265 835.768,335.536  835.859,336.135 835.992,337.039 835.823,337.941 833.812,337.911 833.613,338.296 834.449,339.232 834.047,340.264  833.945,341.104 834.449,341.941 833.725,342.819 833.517,342.882 834.684,344.174 834.86,345.647 835.69,345.811  837.601,347.554 838.573,347.908 839.311,348.456 841.721,348.843 843.432,349.424 844.167,348.52 844.672,348.79  845.317,348.102 846.381,347.575 847.164,347.68 847.44,347.258 848.549,346.362 849.256,346.588 850.229,346.799 			",
"M835.768,335.536 838.874,337.265 840.518,337.555  842.092,337.039 844.571,336.813 844.704,335.974 846.012,335.556 847.52,334.331 848.827,335.652 848.928,334.814  849.766,334.167 850.569,332.976 852.111,332.847 853.183,333.136 855.061,333.008 856.501,333.329 857.742,332.556  857.941,331.041 858.9,329.08 858.781,329.073 856.846,327.978 855.099,327.914 854.511,328.172 853.787,327.848  853.031,327.945 852.443,328.527 851.791,328.09 850.681,328.09 849.961,328.009 849.22,328.254 848.668,329.062  847.795,329.095 847.543,328.962 847.554,329.008 845.406,328.814 844.402,329.686 843.231,329.782 841.924,331.041  840.212,331.267 838.437,331.879 838.002,331.524 836.93,331.556 835.823,332.266 835.592,332.214 835.491,333.645 			",
"M861.612,356.73 862.87,356.842 863.472,357.325  863.405,358.004 863.069,358.486 863.573,359.292 864.713,358.583 865.952,358.648 866.454,359.164 866.924,359.035  868.533,359.616 869.873,359.003 870.777,359.26 871.549,358.938 872.488,359.26 873.292,359.26 875.033,359.454  875.605,359.067 876.777,358.712 877.179,358.067 879.929,356.842 881.134,356.648 882.574,356.778 884.095,357.382  884.581,357.885 885.472,357.561 886.68,358.11 886.88,358.564 887.987,358.615 888.048,358.825 887.873,360.518 887.274,361.06  886.429,360.958 885.165,362.042 885.375,364.004 885.059,364.884 883.755,365.832 883.932,366.306 884.704,366.408  885.622,367.695 886.325,368.778 886.329,368.841 885.296,368.592 884.625,369.111 883.35,368.142 882.006,368.142  881.47,368.721 880.732,368.787 879.995,369.561 879.985,369.612 879.425,369.612 878.319,370.42 878.252,371.451  878.619,372.226 878.019,372.709 876.038,372.582 875.136,373 874.332,372.548 873.427,372.548 872.79,373.032 871.918,372.968  871.785,372.226 870.578,372.258 869.439,372.064 868.634,372.807 867.459,373.097 865.92,373.064 865.448,372.838  865.42,372.865 865.249,371.969 865.08,370.903 863.843,368.808 861.965,367.387 862.031,367.387 862.332,366.582  861.729,365.678 861.629,364.937 863.272,363.485 863.573,362.583 862.937,361.421 861.597,360.099 861.125,358.293  861.862,357.582 			",
"M861.965,367.387 863.843,368.808 865.08,370.903  865.249,371.969 865.42,372.865 864.846,373.354 864.008,373.387 862.937,374.032 860.625,373.937 859.652,374.451  859.586,374.838 858.276,375.29 856.435,376.387 856.42,376.478 855.434,375.798 854.947,374.748 854.21,373.501  853.857,371.834 854.083,370.295 854.158,370.443 854.528,370.071 854.475,369.36 855.562,368.775 856.537,368.517  857.307,367.968 859.116,367.548 859.988,367.679 861.296,367.387 			",
"M854.083,370.295 853.857,371.834 854.21,373.501  854.947,374.748 855.434,375.798 856.42,376.478 856.231,377.644 855.496,378.935 853.654,379.514 853.584,380.547  852.947,381.869 852.339,382.173 851.524,381.628 850.679,379.527 848.988,379.46 848.496,378.916 848.849,377.899  848.355,377.086 848.355,376 848.778,375.053 848.214,373.628 848.636,371.662 849.059,371.459 849.201,370.78 847.84,370.127  847.922,368.485 848.559,367.194 849.53,366.065 849.866,366.131 850.437,366.937 851.24,365.969 851.255,365.917  851.604,366.154 852.228,367.158 852.646,367.254 853.605,367.854 853.888,368.517 853.87,369.892 			",
"M844.672,348.79 845.317,348.102 846.381,347.575  847.164,347.68 847.44,347.258 848.549,346.362 849.256,346.588 850.229,346.799 851.74,347.301 852.024,347.867 853.52,349.567  853.821,350.359 855.03,350.975 856.259,351.864 855.72,352.982 855.904,353.45 857.439,353.939 857.875,354.682  858.847,354.294 859.586,354.938 860.355,353.939 861.965,354.26 861.195,355.1 861.328,355.778 861.862,357.582  861.125,358.293 861.597,360.099 862.937,361.421 863.573,362.583 863.272,363.485 861.629,364.937 861.729,365.678  862.332,366.582 862.031,367.387 861.296,367.387 859.988,367.679 859.116,367.548 857.307,367.968 856.537,368.517  855.562,368.775 854.475,369.36 854.528,370.071 854.158,370.443 853.87,369.892 853.888,368.517 853.605,367.854  852.646,367.254 852.228,367.158 851.604,366.154 851.255,365.917 851.375,365.486 852.078,364.905 852.01,363.905  850.838,363.71 850.101,363.034 849.062,363.034 848.625,362.55 848.625,361.841 847.641,360.919 847.956,360.615  846.917,359.454 846.917,358.486 847.352,358.195 848.154,358.615 848.49,358.099 847.956,357.55 847.253,357.519  845.911,356.485 845.879,355.874 846.816,354.521 846.949,353.358 846.381,353.326 845.978,353.615 845.726,353.307  845.609,352.584 846.516,352.262 846.949,352.262 846.949,351.908 846.079,351.714 845.609,351.326 845.344,350.166  844.77,348.843 			",
"M847.84,370.127 847.922,368.485 848.559,367.194  849.53,366.065 849.866,366.131 850.437,366.937 851.24,365.969 851.375,365.486 852.078,364.905 852.01,363.905 850.838,363.71  850.101,363.034 849.062,363.034 848.625,362.55 848.625,361.841 847.641,360.919 847.554,361.002 846.816,360.776  845.845,360.131 845.274,360.518 845.309,361.196 846.146,361.711 846.445,362.355 845.742,362.711 845.075,362.776  844.704,363.678 844.672,364.873 844.133,365.84 843.695,366.067 844.006,366.476 844.922,366.847 846.663,368.95  846.806,369.628 			 ",
"M845.726,353.307l-0.116-0.723l0.906-0.323h0.434v-0.354 l-0.87-0.194l-0.47-0.388l-0.266-1.16l-0.574-1.323l-0.603-0.324l-0.735,0.904l-1.711-0.581l-2.41-0.387l-0.737-0.548 l-0.973-0.354l-1.91-1.744l-0.83-0.163l0.024,0.206h-2.013l-2.821,1.421l-0.199,1.163l-1.479,0.71l-0.268,1.551l-0.939,0.064 l-1.745-0.774l-0.94,0.257l-1.207,0.842l-1.634,0.088l-0.008,0.1l0.284,1.761l1.054,0.948l-0.104,0.338l0.422,0.339l1.126-1.761 l0.177-0.948l0.701-0.778l1.127-0.032l0.247,0.879l0.913,0.711l0.28,1.319l0.669,1.252l1.406,1.254l0.353,0.066l0.812,0.847 l-0.707-0.236l-0.808,0.101l-0.353,0.744l0.423,0.778h1.021l1.018,0.949l1.023,0.34l0.349,0.778l0.497,0.541l1.052-0.203 l2.045,0.161l1.127,0.544l2.256,2.236l-0.636,0.069l-1.057-0.543l0.564,0.679l0.967,0.211v-0.005l0.331-0.774l-3.248-3.515 l-3.754-3.161l-0.135-0.516l0.303-0.323l-0.604-0.743l-0.168-0.74l-0.937-1.033l-0.604,0.034l-0.032-0.646l0.367-0.354v-1.162 l0.37-0.418l1.104,0.805l0.368,0.612l0.604-0.128l0.032-0.614l0.839-0.128l0.571,0.033l0.468-0.483l0.737,0.418l0.403-0.354 l0.735,0.162l0.402,0.74l0.604-0.417l1.038,0.354l0.737-0.289l0.235,0.289l1.141-0.128l0.972,0.354l0.601-0.098l0.938,0.742 l1.308,0.033L845.726,353.307L845.726,353.307z M836.047,363.919c0.066-0.032,1.608-0.032,1.608-0.032l0.604,0.549l-1.409-0.098 L836.047,363.919L836.047,363.919z M834.976,362.952l2.379,0.034l-0.973,0.45L834.976,362.952L834.976,362.952z M835.008,361.92 h1.843l0.401,0.257l-0.902,0.419l-0.905-0.13L835.008,361.92L835.008,361.92z M828.373,356.212l0.534,0.127l0.604,0.775 l-0.335,0.226L828.373,356.212L828.373,356.212z M827.634,355.018l0.84,0.838l-0.87-0.226L827.634,355.018L827.634,355.018z  M827.837,357.729l0.938,0.74l0.234,0.775L827.837,357.729L827.837,357.729z M826.666,356.243l0.703,0.291l0.1,0.645 L826.666,356.243L826.666,356.243z M825.021,353.824l1.173,0.806l0.402,1.162l-0.368,0.064l-0.804-0.838l0.199-0.259 L825.021,353.824L825.021,353.824z M825.792,352.019l1.342,1.936l-0.671,0.257l-0.367-0.451l-0.672-0.162l-0.102-1.257 C825.322,352.342,825.726,352.019,825.792,352.019z",
"M839.881,364.614 840.212,363.84 836.964,360.325  833.21,357.164 833.075,356.648 833.378,356.326 832.773,355.583 832.605,354.843 831.669,353.81 831.064,353.844  831.032,353.197 831.399,352.843 831.399,351.681 831.77,351.263 832.874,352.068 833.242,352.68 833.847,352.552  833.879,351.938 834.718,351.81 835.289,351.843 835.757,351.359 836.494,351.778 836.897,351.423 837.633,351.585  838.035,352.325 838.64,351.908 839.678,352.262 840.415,351.973 840.65,352.262 841.791,352.134 842.763,352.488  843.363,352.391 844.302,353.132 845.609,353.165 845.978,353.615 846.381,353.326 846.949,353.358 846.816,354.521  845.879,355.874 845.911,356.485 847.253,357.519 847.956,357.55 848.49,358.099 848.154,358.615 847.352,358.195  846.917,358.486 846.917,359.454 847.956,360.615 847.554,361.002 846.816,360.776 845.845,360.131 845.274,360.518  845.309,361.196 846.146,361.711 846.445,362.355 845.742,362.711 845.075,362.776 844.704,363.678 844.672,364.873  844.133,365.84 843.695,366.067 842.704,364.783 842.212,365.02 840.464,364.748 839.881,364.619 			",
"M821.64,351.176 823.273,351.088 824.48,350.246  825.421,349.989 827.166,350.763 828.105,350.699 828.373,349.148 829.852,348.438 830.051,347.275 832.872,345.854  834.885,345.854 834.684,344.174 833.517,342.882 832.383,343.239 830.35,344.338 829.863,344.291 829.191,344.372  828.133,344.84 827.124,344.84 826.02,345.262 825.415,344.566 823.332,344.582 822.601,344.502 821.53,345.983 821.861,346.693  821.261,347.598 821.486,349.125 821.563,349.144 822.478,349.549 822.443,350.159 821.672,350.362 			",
"M822.601,344.502 823.332,344.582 825.415,344.566  826.02,345.262 827.124,344.84 828.133,344.84 829.191,344.372 829.863,344.291 830.35,344.338 832.383,343.239 833.725,342.819  834.449,341.941 833.945,341.104 834.047,340.264 834.449,339.232 833.613,338.296 833.812,337.911 835.823,337.941  835.992,337.039 835.859,336.135 835.491,333.645 835.592,332.214 833.78,331.814 832.977,331.233 831.735,331.492  830.43,331.426 829.29,330.654 827.579,330.588 826.643,330.233 826.271,331.072 825.804,331.492 825.737,332.168  824.464,332.234 824.025,332.717 821.684,331.426 821.025,331.36 820.862,332.169 820.916,333.06 820.175,333.06  819.641,333.949 818.563,334.459 817.324,335.974 817.324,336.556 818.466,337.103 818.598,337.941 818.13,338.264  817.09,337.684 816.051,337.973 814.979,337.684 814.241,337.781 812.767,338.715 811.963,338.878 811.226,338.651  810.421,338.844 809.75,338.426 808.477,338.232 807.238,338.395 807.335,339.007 807.036,339.361 805.864,339.07  805.226,338.395 804.394,338.691 803.855,338.95 803.611,338.953 804.188,339.33 804.131,339.962 804.659,340.357  804.627,341.191 805.36,341.231 805.929,341.006 806.901,341.908 807.707,341.199 808.443,341.199 808.817,341.943  808.84,341.913 810.387,342.56 812.803,341.204 813.809,341.463 815.418,341.333 815.285,342.237 817.567,343.529  820.387,344.045 821.932,343.917 822.601,344.498 			",
"M847.543,328.962 847.795,329.095 848.668,329.062  849.22,328.254 849.961,328.009 850.681,328.09 851.791,328.09 852.443,328.527 853.031,327.945 853.787,327.848  854.511,328.172 855.099,327.914 856.846,327.978 858.781,329.073 859.785,329.137 859.852,327.782 859.652,326.556  862.501,323.493 862.9,322.138 863.607,321.43 864.377,321.396 864.635,320.065 864.3,319.514 864.163,318.817 864.568,318.316  863.443,317.636 862.904,316.327 862.317,315.743 862.266,313.688 862.366,312.495 861.429,311.044 861.059,309.721  861.762,308.624 862.702,308.303 862.668,305.497 862.132,305.044 861.933,303.949 861.296,303.013 860.591,300.949  859.785,299.691 859.852,298.627 859.352,296.982 858.713,296.917 857.676,296.112 851.541,296.692 845.636,296.373  845.098,296.569 843.516,297.924 842.178,298.228 841.825,297.924 843.165,297.213 844.395,295.994 843.973,296.027  842.988,296.977 841.264,297.754 839.259,297.213 838.836,296.164 839.15,295.419 840.206,295.555 840.699,295.859  840.733,295.555 839.436,294.944 837.076,294.37 835.249,295.285 833.911,295.182 832.539,295.689 831.693,296.806  830.357,296.84 829.516,297.754 829.516,298.466 828.072,298.499 825.891,299.651 824.414,299.752 823.888,300.835  823.535,301.919 823.217,302.087 823.288,302.527 822.824,302.553 823.322,304.562 823.189,306.044 821.883,306.691  821.883,307.303 823.322,308.786 823.156,309.689 823.827,310.527 823.827,311.206 824.229,312.142 823.859,312.914  824.698,314.753 825.314,315.08 825.868,315.775 825.933,318.154 825.679,318.546 826.02,319.255 826.423,318.802  827.227,318.947 827.682,318.722 829.576,318.997 829.51,319.514 830.317,320.307 831.072,320.209 831.76,320.777  831.307,321.764 831.677,322.298 832.012,322.475 831.97,323.331 832.605,323.59 833.043,323.138 833.646,323.138  832.571,321.783 833.009,321.493 835.187,322.654 836.561,322.493 836.327,323.267 837.332,324.042 839.073,323.655  840.447,324.074 843.264,326.041 844.133,327.493 844.938,327.523 845.344,327.073 846.582,327.106 847.285,327.815 			",
"M825.679,318.546 826.02,319.255 826.423,318.802  827.227,318.947 827.682,318.722 829.576,318.997 829.51,319.514 830.317,320.307 831.072,320.209 831.76,320.777  831.307,321.764 831.677,322.298 832.012,322.475 831.97,323.331 832.605,323.59 833.043,323.138 833.646,323.138  832.571,321.783 833.009,321.493 835.187,322.654 836.561,322.493 836.327,323.267 837.332,324.042 839.073,323.655  840.447,324.074 843.264,326.041 844.133,327.493 844.938,327.523 845.344,327.073 846.582,327.106 847.285,327.815  847.554,329.008 845.406,328.814 844.402,329.686 843.231,329.782 841.924,331.041 840.212,331.267 838.437,331.879  838.002,331.524 836.93,331.556 835.823,332.266 833.78,331.814 832.977,331.233 831.735,331.492 830.43,331.426 829.29,330.654  827.579,330.588 826.643,330.233 826.271,331.072 825.804,331.492 825.737,332.168 824.464,332.234 824.025,332.717  821.684,331.426 821.025,331.36 821.031,331.328 819.168,329.257 818.263,328.674 816.665,327.623 815.759,327.136  815.507,326.473 815.575,325.389 814.602,323.933 813.375,323.22 813.326,322.556 813.728,322.265 814.173,322.621  814.946,322.977 816.587,321.526 817.391,321.462 818.297,320.461 819.301,320.429 819.806,319.687 821.348,319.656  822.015,319.816 822.788,319.364 822.788,318.559 824.229,318.881 824.831,318.495 825.502,318.816 			",
"M797.837,294.717 799.061,294.659 800.767,295.112  801.271,295.337 802.09,295.199 802.989,296.129 803.903,296.23 803.412,297.248 802.955,297.688 803.202,298.195  803.939,298.398 804.22,299.145 804.938,298.639 805.183,298.167 805.624,297.913 805.973,298.386 807.147,299.195  807.394,298.876 808.131,298.318 808.499,298.521 808.516,299.281 807.903,299.99 807.343,299.905 806.517,300.445  807.691,300.782 808.114,300.597 808.953,300.681 809.255,301.171 810.218,301.086 810.377,300.445 811.025,299.583  812.727,299.33 812.778,298.925 813.707,298.47 813.812,298.014 814.217,297.811 815.428,297.929 814.463,298.301  814.11,298.656 813.953,298.538 813.474,299.007 813.824,299.346 814.775,298.703 815.793,298.6 816.216,298.398  816.534,298.871 817.342,299.007 818.503,300.123 819.451,299.954 819.981,300.733 819.806,301.581 820.65,302.223  821.422,302.12 821.986,302.595 822.824,302.553 823.322,304.562 823.189,306.044 821.883,306.691 821.883,307.303  823.322,308.786 823.156,309.689 823.827,310.527 823.827,311.206 824.229,312.142 823.859,312.914 824.698,314.753  825.314,315.08 825.868,315.775 825.933,318.154 825.502,318.816 824.831,318.495 824.229,318.881 822.788,318.559  822.788,319.364 822.015,319.816 821.348,319.656 819.806,319.687 819.301,320.429 818.297,320.461 817.391,321.462  816.587,321.526 814.946,322.977 814.173,322.621 813.728,322.265 813.326,322.556 813.375,323.22 814.602,323.933  815.575,325.389 815.507,326.473 815.759,327.136 816.665,327.623 818.263,328.674 819.168,329.257 821.031,331.328  820.862,332.169 820.916,333.06 820.175,333.06 819.641,333.949 818.563,334.459 817.324,335.974 817.324,336.556  818.466,337.103 818.598,337.941 818.13,338.264 817.09,337.684 816.051,337.973 814.979,337.684 814.241,337.781  812.767,338.715 811.963,338.878 811.226,338.651 810.421,338.844 809.75,338.426 808.477,338.232 807.238,338.395  807.335,339.007 807.036,339.361 805.864,339.07 805.226,338.395 804.394,338.691 803.855,338.95 803.611,338.953  803.148,338.651 801.875,337.748 801.236,337.716 800.767,338.136 800.198,337.973 799.864,337.103 798.924,337.425  799.027,337.973 798.689,338.523 797.552,338.136 796.713,338.587 795.949,338.368 795.976,338.362 795.542,337.49  794.734,337.007 794.668,335.717 795.14,334.167 795.777,333.587 795.777,332.911 796.279,331.556 797.315,330.524  796.414,329.943 795.542,329.943 794.433,329.459 793.597,329.718 792.993,329.491 792.189,329.491 791.418,329.75  790.614,329.105 790.614,328.557 789.743,327.912 789.724,327.917 789.809,326.494 789.305,326.073 789.106,325.105  788.001,323.784 787.698,323.784 788.236,322.559 787.666,321.719 787.698,321.17 786.995,319.784 787.296,319.139  787.178,319.103 787.571,318.121 787.87,316.633 787.599,315.334 788.2,314.624 788.771,313.722 790.012,313.431  791.185,313.688 791.855,313.335 791.352,312.495 791.954,312.076 792.089,311.108 792.356,310.561 791.888,310.141  790.747,310.174 790.614,309.592 791.016,308.722 791.988,309.14 792.591,308.658 792.608,307.782 792.976,307.004  793.042,306.501 793.311,306.176 793.334,305.987 793.423,306.015 793.21,305.169 792.191,305 791.769,304.22 791.945,303.341  794.02,302.799 794.619,302.527 795.64,303.238 795.64,304.253 796.414,305.134 796.87,304.66 796.448,303.882 796.448,303.238  796.87,303.068 797.539,303.645 797.469,304.66 798.487,305.779 798.064,304.931 798.03,303.645 797.854,302.9 798.418,302.02  799.156,301.885 799.895,302.257 800.881,301.885 802.346,303.438 804.361,303.814 802.443,303.047 800.984,301.581  799.859,301.512 799.228,301.139 799.228,300.495 799.967,299.954 799.122,299.447 799.122,298.398 798.311,298.735  798.276,297.958 799.052,297.958 799.895,297.652 798.875,296.739 798.945,296.096 798.453,296.063 797.82,295.656  797.888,294.911 			",
"M804.131,339.962 804.659,340.357 804.627,341.191  804.153,341.167 803.852,340.65 804.121,340.07 			",
"M795.949,338.368 796.713,338.587 797.552,338.136  798.689,338.523 799.027,337.973 798.924,337.425 799.864,337.103 800.198,337.973 800.767,338.136 801.236,337.716  801.875,337.748 803.148,338.651 804.188,339.33 804.121,340.07 803.852,340.65 804.153,341.167 805.36,341.231 805.929,341.006  806.901,341.908 807.707,341.199 808.443,341.199 808.817,341.943 807.9,343.012 808.372,344.434 806.559,344.821 806.357,346.5  805.552,345.854 804.746,345.919 802.731,345.403 802.731,346.629 801.792,348.244 801.324,347.34 799.844,346.629  799.98,345.596 798.907,344.949 797.229,347.728 796.02,347.21 794.208,348.502 793.207,348.142 793.059,347.391  792.524,346.973 792.189,345.876 791.719,345.038 790.345,344.973 789.708,345.521 790.145,346.619 789.005,347.069  788.001,346.973 787.9,346.263 788.435,346.006 788.988,346.036 788.969,345.166 789.174,343.812 790.379,341.973  791.083,341.715 791.988,340.587 792.824,340.231 792.657,339.394 791.689,338.908 792.29,338.2 793.362,338.136  793.633,338.715 794.467,338.812 			 ",
"M787.178,319.103l0.393-0.982l0.299-1.488l-0.271-1.299 l0.601-0.71l0.571-0.902l1.241-0.291l1.173,0.257l0.671-0.353l-0.504-0.84l0.603-0.419l0.135-0.968l0.267-0.547l-0.468-0.42 l-1.141,0.034l-0.133-0.583l0.402-0.87l0.972,0.418l0.603-0.482l0.017-0.876l0.368-0.777l0.066-0.503l0.269-0.325l0.023-0.189 l-0.896-0.276l-0.703-0.609l-1.302-0.645l-1.372,0.204l-0.808,0.677l-0.775-0.305l-0.493,0.305l-1.124,0.036l-1.058,1.117 l-1.687,0.879l-0.353-0.237l-0.985,0.374l-0.036,1.083l-0.916,0.675l0.285,1.052l-0.212,0.946l-0.387,0.78l-0.32,0.542 l-0.701,0.507l0.036,0.677l1.054,0.914l0.951,0.271h-1.056l-0.491,0.406l-0.318,0.272l0.423,0.508l0.525,0.066l0.04,0.441 l-0.845,0.032l-0.777-0.777l-0.808-0.373l-0.775,0.306l0.284,0.406l0.737,0.068l0.669,0.609l0.247-0.102l0.879,0.575 l-0.845-0.304l-0.527,0.036l-1.268-0.407h-0.808l-0.034,0.025l0.523,0.241l0.434,0.645h0.707l0.468,0.483l0.504-0.483 l0.872-0.162l0.199-0.29l0.671-0.065l0.269-0.644l1.575,0.032l0.534,0.516h0.806l0.436,0.613l1.239-0.064l0.419,0.74 l-0.051,0.567L787.178,319.103L787.178,319.103z M778.296,315.249l0.807-0.338l0.351,0.472l-0.455,0.119l-0.159-0.22 L778.296,315.249L778.296,315.249z M778.7,314.337l0.65,0.016l0.86,0.337l-0.178,0.22l-0.474-0.1l-0.14-0.271l-0.561,0.187 L778.7,314.337z",
"M787.698,323.784 788.236,322.559 787.666,321.719  787.698,321.17 786.995,319.784 787.296,319.139 786.39,318.867 786.441,318.299 786.022,317.559 784.783,317.623  784.347,317.01 783.542,317.01 783.007,316.494 781.432,316.462 781.163,317.106 780.492,317.171 780.293,317.461  779.421,317.623 778.917,318.106 778.449,317.623 777.743,317.623 777.309,316.978 776.785,316.737 775.833,317.457  775.199,318.566 775.735,318.946 775.934,320.493 777.009,320.881 777.176,321.623 778.481,322.654 779.052,322.621  779.623,323.074 780.257,323.363 780.324,324.589 781.296,325.073 781.8,324.752 782.371,324.752 782.772,325.202  783.375,325.331 784.447,326.622 785.386,326.686 786.225,327.266 786.627,327.008 787.296,327.008 787.296,326.523  786.928,326.202 786.928,325.59 786.627,325.202 787.131,324.558 787.396,323.784 			",
"M787.296,327.008 787.296,326.523 786.928,326.202  786.928,325.59 786.627,325.202 787.131,324.558 787.396,323.784 788.001,323.784 789.106,325.105 789.305,326.073  789.809,326.494 789.724,327.917 789.072,328.073 787.9,327.847 787.364,327.008 			 ",
"M736.452,250.042l0.721,1.699l-0.099-0.906l0.099-0.452 L736.452,250.042L736.452,250.042z M736.972,247.954l-0.419,0.275l0.671,0.761l0.049-0.599L736.972,247.954L736.972,247.954z  M734.756,245.429l0.119,0.793l0.72,0.21L734.756,245.429L734.756,245.429z M737.559,244.459l0.537,0.614l-0.167-0.583 L737.559,244.459L737.559,244.459z M736.098,244.475c-0.015-0.016,0.487,0.032,0.487,0.032l0.891,0.582l0.083,0.761l-0.705-0.243 L736.098,244.475L736.098,244.475z M735.729,244.652l1.159,1.861l0.89,0.663l-0.772-0.032l-1.226-1.183l-0.353-0.953 L735.729,244.652z",
"M724.947,315.537 726.499,315.357 727.98,314.938  729.146,314.176 728.757,313.315 729.64,313.379 729.393,313.898 730.311,313.894 731.155,313.029 731.792,313.062  732.003,312.232 734.616,311.946 734.826,311.394 735.215,312.048 735.78,311.528 736.31,311.731 737.649,311.728  736.733,310.593 737.404,310.315 738.11,309.483 737.968,308.761 738.708,307.964 738.956,307.066 738.604,305.066  738.039,304.725 738.708,304.308 738.708,303.413 738.11,302.517 738.284,301.619 737.58,301.139 737.932,300.621  738.488,300.696 737.488,300.055 736.814,299.924 735.944,298.246 734.599,297.6 734.064,297.986 733.795,299.215  733.125,299.345 731.176,297.6 732.184,295.597 733.125,295.468 733.393,294.693 734.009,294.37 734.459,293.915 734.03,293.996  734.965,293.288 735.791,292.838 734.807,292.326 734.12,291.744 734.436,292.361 733.487,292.364 733.645,293.379  732.975,294.309 733.065,293.692 733.434,293.259 732.975,292.487 732.36,292.611 732.73,293.108 732.007,293.144  731.622,292.767 730.353,293.083 730.337,293.667 729.932,293.686 729.633,294.41 730.266,294.665 730.089,295.009  729.439,295.029 729.511,295.373 728.595,295.601 728.842,296.305 729.844,296.301 729.687,296.56 730.495,296.298  731.04,296.313 729.984,297.382 728.665,297.87 729.122,298.28 727.82,298.509 727.134,298.22 726.554,298.859 726.273,298.034  724.144,297.731 724.144,298.093 722.965,297.789 722.753,299.026 723.333,298.458 723.458,299.215 723.721,299.351  724.001,300.088 723.474,300.108 723.386,299.678 722.243,299.718 723.562,300.624 724.477,300.396 724.776,301.101  723.616,301.328 723.458,301.829 723.791,302.273 722.49,302.296 722.788,303.051 722.331,303.225 723.016,303.636  723.579,303.444 723.245,303.858 724.301,303.647 724.582,304.747 727.099,304.719 726.289,305.515 725.709,305.172  724.759,306.691 725.181,306.636 724.407,307.672 722.788,308.745 723.439,308.741 724.318,308.187 724.864,308.495  725.957,308.524 726.696,307.817 726.765,308.145 727.68,308.227 725.621,308.766 724.09,308.825 723.721,309.395  722.718,309.708 723.07,310.17 722.84,310.601 723.281,310.72 722.542,310.859 721.908,310.347 721.663,310.692 721.451,310.451  720.219,311.076 720.343,311.402 723.192,311.235 722.243,312.013 721.047,312.276 720.641,313.223 721.399,313.22  721.576,313.753 723.738,313.074 722.103,314.095 721.417,314.647 722.578,314.644 724.073,313.847 724.001,314.415  722.718,314.987 723.421,314.985 723.21,315.415 724.354,315.135 			 ",
"M738.488,300.696l-1-0.641l-0.674-0.131l-0.87-1.679 l-1.345-0.646l-0.535,0.387l-0.269,1.229l-0.671,0.13l-1.948-1.745l1.007-2.003l0.941-0.129l0.268-0.775l0.616-0.323l0.45-0.455 l0.874-0.165l0.282-0.31l0.529-0.054l0.879-0.554l1.406,0.132l0.686,0.357l0.089,0.827l1.355,1.853l-0.688,0.483l1.251,0.064 l0.281,1.958l-0.527-1.528l-0.511,0.071l0.265,0.515l-0.265,0.688l0.687,0.135l-0.155,0.738l-1.094-0.132l-0.069,0.621 l-0.708,0.554l-0.422-0.101l0.069,0.655L738.488,300.696L738.488,300.696z M757.991,261.406l0.403-0.728l0.269,0.25 L757.991,261.406L757.991,261.406z M759.738,256.078l-0.252-0.42l0.604-0.584L759.738,256.078L759.738,256.078z M757.806,258.147 l0.101-1.067l-0.62,0.146l-0.168,0.55C757.119,257.776,757.773,258.147,757.806,258.147L757.806,258.147z M758.83,257.549 l-0.485-0.485l0.368-0.52l0.069-0.565l0.334,0.242l0.016,1.004L758.83,257.549L758.83,257.549z M758.377,260.203l-0.368-0.711 l-1.109-0.031l-0.354-0.453l0.572-0.229l0.938,0.098l0.103-0.421l-0.219-0.308l0.27-0.257l0.521,0.257l0.638,0.212l-0.386,0.387 l0.117,0.486l-0.419,0.437l0.201,0.712L758.377,260.203L758.377,260.203z M767.387,316.359l0.553,0.271l0.48-0.123l-0.272-0.314 l-0.437-0.006L767.387,316.359L767.387,316.359z M757.854,321.452l1.231-0.624l0.457,0.326l0.458-0.054l-0.299,0.5v0.308 l-0.616,0.106l-0.633-0.445L757.854,321.452L757.854,321.452z M742.812,288.873l-0.072,0.601l0.512,0.411l-0.054-0.636 L742.812,288.873L742.812,288.873z M738.465,288.15l0.281-0.844l0.125,0.446L738.465,288.15L738.465,288.15z M735.88,285.374 l0.07-0.636l0.739,0.048L735.88,285.374L735.88,285.374z M737.023,284.476l0.791-0.932l-0.194,0.671L737.023,284.476 L737.023,284.476z M738.905,282.714l0.406-0.415l-0.44,0.002L738.905,282.714L738.905,282.714z M738.025,281.548l0.37,0.704 l0.316-0.277l-0.247-0.498L738.025,281.548L738.025,281.548z M750.096,268.277l0.37,0.376l0.07-0.448L750.096,268.277 L750.096,268.277z M749.163,268.607l0.686-0.054l0.546,0.514l-0.335,0.378l1.004-0.088l-0.019,0.67l-0.474-0.291l-0.862,0.107 l-0.053-0.638l-0.195,0.534l-0.298-0.326V268.607L749.163,268.607z M749.092,270.086l0.511,0.771l0.193-0.412l-0.3-0.448 L749.092,270.086L749.092,270.086z M735.808,275.468l0.405-0.31l-0.492-0.497l0.509-0.621l0.968,0.426l-0.229-0.67l2.075-1.418 l0.142,1.152l-0.792,0.708l-0.264,0.654l0.282,0.205l-0.581,0.794l-0.809-0.202l-0.793,0.122L735.808,275.468L735.808,275.468z  M735.755,276.742l0.581,0.428l1.021-0.865l-0.722-0.29l-0.386,0.19l-0.176,0.362L735.755,276.742L735.755,276.742z  M735.545,278.153l-0.812,0.192l-0.632-0.616l0.354-0.192l1.143,0.116L735.545,278.153L735.545,278.153z M735.088,279.168 l-0.582-0.222v-0.274l0.826-0.123L735.088,279.168L735.088,279.168z M734.26,281.339l0.21,0.55l-0.615,0.363l0.035-0.465 L734.26,281.339L734.26,281.339z M735.052,281.043l-0.176-0.738l0.229-0.415l-0.089-0.532l-0.474-0.084l0.034,0.517l-0.246,0.551 l0.176,0.585L735.052,281.043L735.052,281.043z M739.626,281.575l-0.069-0.859l-1.074,0.107l-0.614-1.064l0.122-0.275 l-0.333-0.24l-0.037,0.328l-0.845-0.598l0.352-0.327l0.318,0.204l-0.054-0.774l0.985,0.65l-0.105-0.997l0.457-0.208l0.476,0.772 l-0.104,1.496l0.931,0.478l0.528-0.104l0.333,0.239l-0.631,0.347l-0.265,0.774L739.626,281.575L739.626,281.575z  M738.185,286.379l1.706-0.367l0.072,0.257l0.808-0.587l-0.334-0.72l-0.582-0.084l-0.739-0.807l-0.843,0.573l1.196,0.562 l-0.667,0.348l0.176,0.273L738.185,286.379L738.185,286.379z M739.486,289.486l-0.318-0.808l1.585-1.414l-0.705,1.498 L739.486,289.486L739.486,289.486z M738.306,290.609l0.952-0.553l-0.387-1.444l-1.321,0.521l0.019,1.134l0.844-0.518 L738.306,290.609L738.306,290.609z M741.721,290.442l0.229,1.289l0.88,0.34l0.263-0.878l-0.632-1.253L741.721,290.442 L741.721,290.442z M744.8,305.165l1.266,0.616l1.091-0.83l-0.791,0.089l-0.369-0.737l-0.969,0.124 C745.028,304.427,744.782,305.132,744.8,305.165L744.8,305.165z M743.92,300.425l0.351-1.154l1.513-1.262l-0.159,0.758 l0.176,0.463l-1.108,1.072L743.92,300.425L743.92,300.425z M742.167,325.886l0.494-0.451l-0.211-0.346l0.458-0.586l0.221,0.273 l0.562-0.516l0.369-0.004l0.281-0.654l0.861,0.22l0.671-0.294l0.546,0.084l0.387-0.21l0.387,0.498l0.457-0.035l0.634,0.512 l0.74-0.038l-0.142-0.463l0.58-0.259l0.159-0.432l-0.159-0.772l0.512-0.484l0.422-0.053l0.176-0.31l1.652-0.368l0.862,0.066 l1.004,0.665l0.37-0.138l1.089,0.046l0.582,0.205l0.281-0.671l1.004-0.486l0.685,0.187l0.968-0.624l0.686,0.153l0.351-0.054 l0.476-0.344l0.142,0.342l0.58,0.324l0.668-0.433l1.513-0.022l0.951-0.193l0.914,0.289l0.458,0.083l0.685-0.536l0.758-0.14 l0.669-0.604l0.457-0.036l0.475,0.102l-0.107-0.499l1.077-0.709l0.668-0.14l0.052-0.655l-0.193-0.462l0.211-0.534l-1.216,0.039 l-0.861,0.313l-0.498,0.084l-0.805-0.28l-0.298-0.075l0.278-0.249l0.245-0.035l0.079-0.155l-0.732-0.177l-0.63,0.224l0.882-0.593 l0.588,0.058l0.718-0.333l-0.212-0.583l-0.703,0.003l0.527-0.45l0.389-0.364l0.421,0.344l0.651-0.45l0.263-0.396l-0.318-0.067 l0.21-0.311l-0.754-0.083l0.297-0.483l0.475,0.119l0.142,0.343l0.547-0.689l0.526-0.208l0.087-1.295l0.495-1.21l-0.389-0.48 l-0.214-1.104l-1.55-1.164l-2.153-0.096l-1.342,0.039l-0.105,0.967l-0.353,0.553l-0.706-0.756l-0.848-0.204l1.344-1.281v-0.793 l-1.06-1.651l-0.423-0.067l-0.93-0.523l-0.386-0.634l-0.477,0.088l-0.333,0.105l-0.563-0.188l-0.335,0.002l0.635-0.158 l0.405,0.102l0.686-0.14l0.423,0.187l0.368,0.36l0.476-0.088l0.457,0.101l-1.248-1.491l-0.582-0.721l0.369-0.569l0.334-0.122 l-0.614-0.324l-0.265-0.447l-0.263-0.032l-0.733-1.293l-1.094-0.549l-1.553-0.338l-0.07-0.587l-0.353-0.204l-0.494-1.622 l-0.565-0.894l-0.389-2.069l-0.458-0.688l-0.423,0.003l-1.304-1.857l-0.778-0.169l-0.6-0.481l-0.989-0.375l-0.386,0.346 l-0.777,0.486l-1.094-0.34l-0.521,0.069l-0.878-0.271l-0.266-0.461l0.529,0.254l1.057,0.083l0.879-0.278l0.263-0.671l0.896,0.031 l0.809-0.589l-0.826-0.375l-0.052-0.464l-0.334-0.258l-1.145,0.591l-0.191-0.224l0.877-0.624l1.056,0.066l0.616-0.519 l0.106-0.465l0.422-0.261l0.616-1.152l0.388-0.536l-0.055-0.377l0.44-0.777l-0.158-0.274l0.389-1.067l0.737-0.605v-0.688 l-1.091-0.958l-0.229,0.173l-1.866,0.059l-1.145-0.202l-0.333,0.224l-0.563,0.003l-0.705-0.238l-0.493,0.019l-0.07,0.241 l-0.702,0.21l-0.757,0.398l-0.3-0.017l-0.51,0.397l-0.159-0.154l0.687-0.759l0.72-1.123l-0.527,0.278l-0.651-0.239l0.387-0.241 l0.142-0.518l1.81-1.313l0.528-0.863l0.616-0.209l0.299-0.774l-0.316-0.342l0.351-0.552l-0.034-0.346l-0.916,0.005l-0.368,0.38 l-0.582-0.169l-0.88,0.381l-0.807-0.083l-0.688,0.277l-0.387,0.003l-0.406,0.362l0.089-0.396l-0.372-0.153l-0.754,0.64 l0.229-0.568l-1.039-0.46l-0.176,0.619l-0.35,0.259l0.104,0.569l-0.209,0.018l0.034,0.704l-0.756,0.158l0.37,0.601l-0.318,0.604 l-0.37,0.018l0.898,0.77l0.316,0.55l-0.914-0.444l-0.334,0.277l-0.668-0.428l-0.037,0.309l0.176,0.412l-0.211,0.31l-0.351-0.669 l-0.317,0.707l0.353,0.377l-0.283,0.362l0.546,0.599l0.529,0.015l-0.617,0.225l-0.634-0.341l0.142,0.98l-0.017,0.326l1.16-0.175 l-0.757,0.363l-0.083,0.204l0.245,0.145l0.735-0.259l-0.174,0.18l0.297,0.359l-0.543-0.211l-0.218,0.138l-0.158,0.479 l0.298,0.203l-0.438,0.071l-0.281,0.41l0.508,0.17l0.115,0.376l-0.831-0.305l-0.157,0.53l0.332,0.222l-0.191,0.351l-0.395,0.276 l-0.812,0.019l-0.351,0.353l0.306,0.187l0.69-0.046l0.464,0.137l-0.106,0.196l-0.533,0.002l0.72,0.648l0.229-0.085l0.368,0.377 l1.882-1.831l-0.3,0.551l0.283,0.171l-0.563,0.191l-0.458,1.052l0.052,0.257l-0.58,1.069l0.246,0.137l-0.494,1.273l0.124,0.826 l-0.353,0.483l0.264,0.411l0.335-0.156l-0.599,0.913l-0.104,1.273l-0.439,0.415l0.033,0.31l0.987-0.004l-0.14-0.653l0.42-0.948 l-0.034-0.584l0.51-0.604l-0.386-1.581l0.369-0.003l1.161-1.345l-0.88,1.276l-0.104,0.929l0.333,0.239l0.07-0.55l0.581-0.465 l0.263,0.858l0.476-1.032l-0.105-0.723l0.388-0.191l-0.159,0.931l0.985,0.716l-0.845-0.22l-0.297,1.188l0.191,0.877l0.511,0.119 l0.299,0.772l-0.756,0.742l-0.766,1.929l0.176,0.862l-0.669-0.41l0.035,0.93l0.916,1.238l-0.282-1.137l0.638-0.174l1.622,1.131 l0.036-0.896l-0.671-0.516l0.424-0.105l1.307,0.788l0.917-0.143v-0.378l0.846,0.033l0.249-0.761l2.292,0.095l-1.516,0.386 l-0.919,2.52l1.129,1.961l0.564-0.312v1.036l0.742-0.865l0.917,0.132l-0.316,1.073l0.282,0.171l-0.914,0.689l0.282,1.203 l-0.495,0.914l0.565,0.701l0.667,0.565l0.547,0.05l-0.37,0.259l-0.615,0.039l-0.529-0.722l-0.511,0.19l0.422,0.705l0.458,0.273 l-0.721-0.152l-0.58-0.565l-1.479,0.452l-0.67-0.1l-1.529,0.728l-0.792,1.07l-1.109,0.674l-0.474,0.655l0.703-0.122l0.352,0.118 l0.105-0.395l1.566-0.401l-0.141,0.791l0.545,0.549l-0.581,0.415l0.333,0.6l0.369,0.084l-1.02,1.879l-0.74,0.243l-0.737,0.535 l-0.369,0.02l-0.95,0.572l-0.686,0.002l-1.111,0.693l0.881,0.117l0.053,0.618l-0.635,0.295l1.126,0.185l-0.281,0.259l0.439,0.239 l0.634-0.175l0.738-0.433l1.196-0.382l0.108,0.532l0.95,0.219l-0.775,0.209l-0.087,0.431l1.302,0.029v-0.241l0.651-0.174 l0.668,0.737l0.599,0.685l1.497-0.021l0.35-0.57l0.705-0.294l0.969-0.348l0.37-0.518l0.809-0.363l-1.111,1.242l-1.107,1.019 l-0.052,1.204l-0.756-0.031l-0.597,0.209l-0.688-0.36l-1.936-0.198l-1.371,0.348l0.017,0.671l-0.58,0.535l-0.758,0.004 l-0.123,1.53l-0.81,0.708l-0.209,0.396l-0.899,0.158l-0.228,0.878l-0.389,0.002l-0.21,0.465l-1.09,0.76l-0.494-0.169l-0.757,0.52 v0.671l0.828,0.046l0.035-0.601l1.001,0.254L742.167,325.886z ",
"M793.207,348.142l-0.148-0.75l-0.535-0.418l-0.335-1.097 l-0.47-0.838l-1.374-0.065l-0.637,0.549l0.436,1.097l-1.139,0.451l-1.004-0.096l-0.101-0.71l0.535-0.257l0.553,0.03l-0.019-0.87 l0.205-1.354l1.206-1.838l0.703-0.258l0.906-1.127l0.836-0.356l-0.167-0.838l-0.968-0.485l0.601-0.708l1.073-0.064l0.271,0.58 l0.834,0.097l1.508-0.45l-0.434-0.872l-0.807-0.483l-0.066-1.291l0.472-1.549l0.637-0.58v-0.677l0.502-1.355l1.037-1.031 l-0.902-0.581h-0.872l-1.108-0.484l-0.836,0.259l-0.604-0.227h-0.804l-0.771,0.259l-0.804-0.645v-0.549l-0.872-0.645 l-0.671,0.162l-1.171-0.227l-0.536-0.838h-0.737l-0.402,0.258l-0.839-0.581l-0.938-0.064l-1.072-1.291l-0.603-0.129l-0.402-0.45 H781.8l-0.504,0.321l-0.972-0.484l-0.066-1.226l-0.635-0.289l-0.571-0.454l-0.57,0.034l-1.305-1.031l-0.167-0.742l-1.075-0.388 l-0.199-1.547l-0.536-0.38l-0.14,0.243l-1.653,0.544l-0.385-0.305l-1.336,0.745l-0.318,0.878l0.211,1.05l-0.28,1.66l-1.337,1.252 v0.542l-1.478,0.407l-0.772,0.033l-0.845-0.27l-1.759,0.914l-0.422,0.779l0.316,0.541l0.81,0.271l-1.09,0.745l-1.338,0.271 l-1.829-0.238l-0.809-0.407l-0.668,0.374l-0.282-0.61l-0.597-0.438l0.279-0.711l-0.738-0.34l-0.773,0.271l-1.091-0.033 l-0.492-0.204l0.316,1.017l-0.176,0.438l1.547,1.389l-0.282,0.439l0.211,0.678l-0.175,0.676l0.492,0.61l0.106,0.779l-1.616-0.204 l-0.705,0.236l-0.669-0.17l-0.81,0.204l-0.315-0.306l-1.021,0.813l-1.301-1.658l-0.739-0.237l-1.091,0.237l-0.878,0.778 l-0.458-0.237l-0.527,0.474l-0.457-0.304l-0.951,0.1l-0.599,0.575l-1.406,0.104l-0.635,0.709l0.354,0.576l0.809-0.271 l0.808,0.237l0.211,0.305l-0.879-0.168l-0.529,0.066l0.317,0.846l0.282-0.643l0.562,0.204l0.141,0.576l-0.528,0.202l-0.844,0.306 l0.035,0.236h0.809l0.352,0.948l-0.104,0.542l0.95-0.61l0.667,0.171l0.563-0.103l1.478,0.576l0.316,0.508h0.597l1.02,0.643 l0.739-0.643l0.459,0.102l-0.176,0.508l0.245,0.305l0.775-0.441l0.458,0.441l-0.354,0.878l0.423,0.644l0.562,0.035l0.881-0.542 l0.95,0.102l0.598,0.779l-0.739-0.407l-0.845,0.034l-0.528,0.711l0.493,0.203l0.176,0.88l-0.423,0.745l0.177,0.576l0.774,0.101 l1.16,1.388l1.127,0.169l1.088,0.61l-0.033,0.777l0.421,0.644l-0.352,0.879l-0.211,0.104l-0.211,0.778l0.774,0.168l1.407,1.05 l1.091,2.54l-1.196-1.118l-0.318-1.083l-0.948-0.474l-0.457,0.304l-0.458,2.234l0.037,1.626l0.739,0.473l-0.599,0.439 l-0.247,3.047l-0.844,2.642l-1.076,0.615l0.801,0.425l0.102,0.226l0.57,0.097l0.167,0.935l-0.134,0.711l1.374-0.162l1.843,0.71 l0.871,0.904l0.939-0.42l1.039,1.033l1.273-0.034l0.637,0.323l0.806-0.806l2.112-0.064l0.801,0.419l1.276-0.13l1.34,0.71 l2.178-0.193l1.542,0.902l0.584,0.19l-0.053-0.432l-0.35-1.287l0.35-1.523l0.107-0.745l1.054-0.916l1.621-1.658l0.527-0.035 l0.529,0.373l1.054,0.135l1.125,0.645h0.773l0.705-0.542l0.669-0.068l2.812,1.694l0.775,0.642l2.075,0.101l0.879-0.709 l-0.176-0.441l0.811-0.981l2.918-2.1l0.165-0.027l-0.314-0.962l0.604-1.356h-1.41l-1.478-0.969l-0.199-2.326l-1.141-1.164 l0.671-0.71l1.075-0.129l0.265-1.485l-0.87-0.774l-0.133-1.099l0.402-0.452L793.207,348.142L793.207,348.142z M802.922,372.738 l-1.406-0.575l-0.247-0.407l0.314-0.474l0.351,0.067l-0.246-0.407h-0.316l0.036-0.608l-0.632-0.338l-0.283-0.44l0.354-0.203 v-0.339l-0.668-0.338l-0.177-0.643h0.526l0.177-0.408l-0.526-0.473l0.635-1.083l1.404-0.474l0.562-0.541l0.564,0.574h0.353 l0.139-0.812l-0.28-0.576l0.172-0.779h0.461l0.246,1.287l-0.107,1.152l0.496,1.794l-0.564,2.064l0.034,1.15l-0.491,1.422 L802.922,372.738z",
"M827.406,402.244 827.371,402.885 828.318,403.645  828.828,403.122 828.809,402.447 			 ",
"M795.663,359.542l-0.314-0.962l0.604-1.356h-1.41l-1.478-0.969 l-0.199-2.326l-1.141-1.164l0.671-0.71l1.075-0.129l0.265-1.485l-0.87-0.774l-0.133-1.099l0.402-0.452l1.073,0.387l1.812-1.292 l1.209,0.517l1.679-2.779l1.073,0.647l-0.136,1.034l1.48,0.71l0.468,0.904l0.939-1.615v-1.227l2.015,0.517l0.806-0.066 l0.806,0.646l0.201-1.679l1.813-0.388l-0.472-1.422l0.939-1.099l1.547,0.646l2.416-1.356l1.006,0.259l1.609-0.13l-0.133,0.904 l2.282,1.292l2.819,0.517l1.545-0.128l0.669,0.58l-1.07,1.486l0.331,0.71l-0.601,0.904l0.226,1.527l-1.048-0.252l-0.633,0.305 l-0.669,0.643h-1.019l-0.953,0.812l-1.018,0.135l-0.354,0.678l0.497,0.948l0.631,0.778l-0.705,1.014l-0.423,0.339l0.531,1.118 l0.138,1.286l0.493,0.677l2.043,1.049l1.124,0.576l0.562,0.744l3.026,2.945l0.07,0.778l0.387,0.204l0.036,0.915l0.633,0.88 l0.845,0.83l0.666,0.999l1.364,1.014l0.657,0.649l0.862,0.165l0.599,0.346l1.759-0.008l0.739,0.203l1.126-0.169l0.81,0.406 l-0.177,0.608l-1.159,0.78l-0.034,0.404l0.452,0.712h0.952l1.76,0.407l3.658,1.896l1.425,1.025l0.931,0.938l1.513,0.373 l0.771,0.514l0.354,0.604l-0.142,1.15l-0.393,0.55l0.112,0.726l-0.251,0.196l-0.039,0.257l-0.821-0.33l-0.644-0.78l-0.389-0.82 l0.109-0.674l-0.504-0.29l-1.435-0.02l-0.284-0.406l-0.947-0.439l-0.63,0.083l-0.424,0.255l-0.318,1.085l-0.527,0.542 l0.052,0.576l-0.159,0.676l-0.67,0.44l0.008,0.664l0.312,0.453l0.737,0.104l1.303,1.183l0.254,0.51l-0.15,1.15l0.247,0.407 l-0.316,0.642l-0.81,0.203l-0.773,0.78l-0.106,2.064l-1.264,0.982l-0.176,0.947l-0.67,0.88l-1.338,0.102l-1.021-0.982 l-0.034-0.678l0.224-0.34l0.563-0.302l0.55-0.61l0.119-0.846l-0.119-0.88l0.267-0.153l0.368-0.017l0.492-0.576l0.034-0.813 l-0.526-0.743l-0.389-1.592l-0.493-0.61l-0.21-1.355l-0.423-1.42l-0.667-0.406l-0.526,0.305l-1.196-0.271l-0.389-0.745 l-0.947-0.068l-0.459-0.439l0.213-0.372l0.104-0.88l-0.597-0.745l-0.844-0.069l-0.811,0.036l0.07-0.611l-0.773-0.271 l-0.527,0.204l-0.599-0.372l-0.983-1.76l-0.917-0.068l-0.95-0.374l-0.595,0.542h-0.845l-0.177-0.744l-0.773-0.508l-0.879-0.136 l-1.833-1.321l-1.896-2.334l-0.601-0.203l-0.173-0.711l-0.846-1.083l-1.336-0.034l-0.142-0.812l-1.269-1.15l-0.703-0.847 l-1.091-0.508l0.037-1.254l-0.738-0.438l-0.036-0.78l-0.842-1.32l-0.377-0.688l-0.266-0.48l-0.389-0.712l-1.362-0.388 l-0.913-0.575l-3.097-0.778l-2.394,1.285l-0.034,0.745l-0.812,0.982L795.663,359.542L795.663,359.542z M799.068,374.638 l0.302-0.042l0.076-0.404l0.392-0.42l-0.366-0.308l-0.151,0.437l-0.287,0.153L799.068,374.638L799.068,374.638z M810.909,367.346 l0.538,0.242l-0.186-0.403L810.909,367.346L810.909,367.346z M807.218,364.788l-0.405,0.405l0.504,0.193l0.957-0.323l0.739,0.032 l-0.118-0.484l-0.436-0.501l-0.218,0.291L807.218,364.788L807.218,364.788z M801.479,386.685l0.351-0.203l0.456,0.203l0.669-0.27 l0.07-1.016l0.279-0.608l0.883,0.066l0.561,0.542h0.529l0.353-0.644v-1.658l0.176-0.474l-0.212-1.793l0.351-1.625l-1.196-1.015 l1.021-0.645l0.141-0.677l-0.246-1.049l-0.6-0.643l-0.669-1.186l-0.349,0.338l-0.811-0.609l-0.703,0.068l-1.688,1.93l-0.74,0.032 l-1.054-0.61v0.983l-0.177,0.642l0.737,0.713l0.178,0.676l0.595,0.508v1.049l-0.665,0.677l0.28,0.542l0.915,0.068v0.372 l-0.562,0.643l-0.423,1.556l0.385,0.577l0.46,1.829L801.479,386.685L801.479,386.685z M830.922,398.467l-0.073-1.117l0.46-0.543 l-0.105-0.981l-0.846-1.117l0.846-2.167l0.845-0.744l0.173-1.185l-0.699-0.813l-1.164,1.083l-0.491-0.068l-1.021-0.54 l-0.985,1.015l-2.109-0.135l-1.725,0.508l-1.231-0.238l-0.878-0.575l-1.02,0.102l-0.564,0.439l-0.316-0.407l-1.126,0.509 l-0.138,1.456l0.983,0.881l0.983-0.171l1.759,1.151l0.949,0.238l0.88,0.915l2.078,0.743l0.423-0.27l0.91,0.643l0.176,0.71 l2.149,0.814L830.922,398.467z ",
"M757.17,361.641l0.801,0.425l0.102,0.226l0.57,0.097 l0.167,0.935l-0.134,0.711l1.374-0.162l1.843,0.71l0.871,0.904l0.939-0.42l1.039,1.033l1.273-0.034l0.637,0.323l0.806-0.806 l2.112-0.064l0.801,0.419l1.276-0.13l1.34,0.71l2.178-0.193l1.542,0.902l0.584,0.19l0.055,0.483l-0.737,0.474l0.246,1.421 l-0.119,1.106l-0.474,0.844l-1.754,1.013c0,0-0.703,0.928-0.789,0.96c-0.087,0.036-1.474,0.575-1.474,0.575l-1.791-0.085 L769.296,375l-1.05,0.539l0.492,0.407l-0.229,1.046l-0.649,0.388l-0.106-0.1l0.165-0.141l-0.493-0.17l-1.338,2.202l-0.949,0.44 l-1.794,2.876l-0.528,0.645l0.774,1.287l0.209,0.88l0.707,0.372l1.159,1.522l-1.019,0.949l-1.548,0.371l0.034,1.051l-1.477,1.998 l-0.176,1.32l0.387,0.372l-0.387,0.576l-1.583,0.066l-2.814,1.287v0.915l-1.091,1.691l-0.985-0.438l-0.877-0.746l-0.458,0.78 l-0.74,0.61l-0.773-0.576l-0.809-0.034l-0.316,0.371l-1.266-0.136l-1.904-0.507l-0.771,0.404l-1.665,0.204l-1.457,1.4 l-1.719,0.203l-0.65,0.556l-0.034,0.726l-1.367,0.71l-1.509-0.237l-1.543-1.468l-0.895-2.06l0.193-0.286l-1.893-1.754 l-1.369-0.153l-0.76-0.2l-0.04-1.048l-0.671-1.033l1.073-1.938l1.142-0.906l0.134-0.84l-1.009-0.065l-0.67-1.291l1.476-1.421 l-0.066-1.809l-1.076-0.646l-1.207-2.196l1.142-0.258l0.805,0.129l1.208-1.616l-0.806-0.775l1.006-0.97l0.135-2.841l-0.201-1.164 l1.744-1.616h0.672l0.27-0.903l-0.942-1.292l-0.134-1.099l-2.215-0.257l-0.872,0.839l-2.551-0.516l-1.544,0.775l-0.402-0.646 l0.133-0.969l-0.783-0.207l-2.062,0.314l-0.024-0.253l1.091-0.912l-0.773-0.137l0.527-0.54l-0.351-0.34l0.21-0.948l-0.739,0.678 l-0.353-0.137l0.247-1.251l-0.386-0.171l0.035-0.506l-0.598,0.203l-0.423-0.95l0.494-0.98l1.757-0.609l0.597,0.269l1.479-0.168 l0.703-0.508l-0.563-0.372l-0.106-0.609l1.69-0.913l0.245,0.303l0.704-0.474l1.161,0.237l0.985,1.184l0.843-0.676h0.952 l1.089,0.44l1.197-0.475l1.478-0.405l0.315,0.405l1.197,0.645l3.305,0.507l1.514,0.338l2.251-0.914l1.687,0.135l0.318,0.711 l1.651,0.306l0.844-0.813h0.81l2.463,1.388l0.457-0.644l0.668-0.066L757.17,361.641L757.17,361.641z M779.615,381.237l1.509,0.13 l0.735,0.387l0.233-0.451l-0.936-0.936l-1.34,0.257L779.615,381.237L779.615,381.237z M776.933,384.236l0.402-1.161l1.039-0.902 l-0.936-0.065l-1.075-0.161l-0.906,0.581l-0.199,0.773l0.938,0.29L776.933,384.236L776.933,384.236z M771.27,387.204l0.536-0.71 l0.503-0.483l-0.37-0.58l-1.204,0.355l-0.136,0.806L771.27,387.204z",
"M732.425,395.157 732.386,394.109 731.715,393.076  732.788,391.139 733.93,390.233 734.064,389.393 733.056,389.328 732.386,388.037 733.862,386.616 733.795,384.807  732.72,384.161 731.513,381.965 732.655,381.707 733.46,381.836 734.668,380.22 733.862,379.445 734.868,378.476  735.003,375.634 734.803,374.471 736.546,372.855 737.218,372.855 737.488,371.952 736.546,370.66 736.413,369.561  734.197,369.304 733.325,370.143 730.774,369.627 729.23,370.402 728.828,369.756 728.961,368.787 728.178,368.581  726.116,368.895 726.198,369.826 726.901,371.35 726.586,374.16 726.763,374.6 726.41,375.854 727.079,376.598 726.586,377.24  726.023,378.393 725.952,379.848 724.898,381.304 724.898,382.149 723.665,383.843 723.033,386.449 723.069,387.091  724.018,387.091 724.475,386.449 725.426,385.872 725.283,386.449 725.531,386.924 724.159,387.566 724.088,388.513  724.511,388.954 725.214,388.31 726.41,388.344 725.917,388.954 726.234,390.14 725.775,391.188 725.848,393.558  725.389,395.251 725.037,395.758 725.389,396.03 726.763,395.115 728.696,395.86 729.577,396.367 730.948,395.624  732.179,395.521 732.391,395.149 			 ",
"M879.985,369.612h-0.561l-1.105,0.808l-0.067,1.031l0.367,0.774 l-0.601,0.483l-1.98-0.127L875.136,373l-0.804-0.453h-0.905l-0.637,0.484l-0.872-0.063l-0.133-0.743l-1.207,0.032l-1.139-0.194 l-0.806,0.743l-1.175,0.29l-1.539-0.032l-0.472-0.226l-0.603,0.516l-0.838,0.033l-1.071,0.645l-2.312-0.096l-0.973,0.514 l-0.066,0.388l-1.31,0.451l-1.842,1.097l-0.203,1.257l-0.735,1.291l-1.842,0.58l-0.07,1.033l-0.637,1.322l-0.608,0.304 l0.099,0.065l0.074,1.29l1.688,1.219l0.959,1.33l0.457,0.101l-0.106,0.406l1.3,1.761l0.32,1.219l0.596,0.236l0.774-0.913 l0.703,0.847l1.092,0.135l0.457-0.677l0.773,0.067l1.231,0.711l0.737-0.338l0.141,0.61l0.599-0.035l0.492,0.372l0.985,0.169 l-0.703,0.407l-0.633,0.608l-0.635-0.507l-0.845-0.204l-1.827-1.151l-0.81,0.27l-0.774,0.441l-0.808-0.372l-0.667,0.812 l-0.497,0.135l-0.314,0.781l0.983,1.082l1.021,0.474l0.984,0.88l0.107,0.643l-0.389,0.439l0.07,0.847l0.846,1.05l0.562,0.61 l0.246-0.576l-0.21-0.441l0.351-0.779l0.318,0.983l1.228,0.508l0.284,0.642l-0.176,0.745l0.527,0.61v-1.252l0.456-1.015h0.775 l0.351,0.812l1.372,0.88l-0.562-0.914l0.14-0.608l-0.492-0.882l-0.633-1.454l-0.562-0.846l0.034-0.339l0.564-0.068l1.018,0.506 l-0.314,0.375l0.314,0.339l0.529-0.542l1.056,0.337l0.034-0.337l-0.423-0.305l-0.087-0.376l-0.37-0.099l-0.772-0.473l0.067-0.44 l-0.913-0.678l0.879-0.373l0.81,0.036l0.493-0.407l1.264,0.846l0.143,0.373l0.879,0.101l0.246-0.508l-0.773-1.083l0.213-1.015 l-0.318-0.577l-2.146-1.285l-0.667-0.17l-0.318-0.508l-0.595,0.033l-0.389-0.473l-0.916-0.102l-0.913-0.778l0.983-0.136 l0.565-0.642l-0.038-0.475l-0.912-0.236l0.491-0.61l-0.036-0.507l0.709,0.256l0.578,0.455l-0.228,0.491l0.068,0.473l0.51-0.118 l0.314-1.047l-0.612-0.708l-1.41-1.663l-0.599-0.441l-0.141-0.609l-1.09-0.881l0.389-0.474l-0.176-1.76l0.599-0.915l1.124-0.237 l0.141,0.881h-0.527l0.104,0.474l1.444,0.643l0.142,1.083l0.911,0.711l1.021-0.034l-0.738-0.473l-0.389-0.676l0.142-0.61 l0.95,0.306l0.736,0.981l0.636,0.237l0.353-0.576l-0.703-0.51l-0.634-0.235l0.034-0.508l1.725,0.068l0.632,0.608l0.282-0.304 l-0.985-0.88l-1.021-0.135l-0.842-0.949l0.491-0.542l0.913,0.27l0.739-0.405l0.353-1.184l0.669-0.237l1.018,0.744l0.775,0.068 l0.845-0.846l0.036-0.44h0.389l0.629,0.712h1.901l1.423,0.358l1.01-0.244l0.54-1.031l-0.204-0.971l1.211-0.709l0.066-1.099 l-0.94-0.387L879.985,369.612L879.985,369.612z M869.597,404.324l-0.3-0.55l-0.044,0.639l-0.291,0.566l0.081,0.672l0.673,0.292 l1.55-0.195l0.641,0.164l0.622-0.211l0.923,0.257l1.008,0.567l0.116,0.583l1.159-0.048l0.955-0.583l1.077,0.099l1.709-0.05 l1.177,0.032l0.673-0.404l0.284-0.631l-0.151-0.616v-0.388l-0.252,0.356l-0.03,0.454l-0.57,0.451l-0.405-0.338l-0.487,0.177 l-0.487-0.064l0.101-0.42l-0.235-0.583l-0.453,0.016l-1.26-0.161l-0.989-0.422l-1.31,0.049l-1.092,0.664l-0.84,0.209 l-0.702-0.355l-0.336-0.356l-0.556,0.082l0.385-0.34l-0.335-0.534l-0.721,0.048l0.133,0.34l0.237,0.065l-0.27,0.225l-0.688,0.032 l-0.169-0.663l-0.22-0.064l-0.083,0.372l0.117,0.452L869.597,404.324L869.597,404.324z M850.988,381.751l-0.034,0.872 l0.521,0.567l0.605,0.21l0.098,0.307l-0.216,0.162l-0.756-0.339l-0.822-0.842l-0.068-0.258l-0.487-0.194l-0.066-0.453 l0.808-0.291L850.988,381.751L850.988,381.751z M854.599,388.108l-0.054-0.299l0.411-0.72l0.32-0.056l0.133,0.76l-0.282,0.339 l-0.286,0.065L854.599,388.108L854.599,388.108z M854.664,389.567l0.018-1.086l0.521,0.422l0.286,0.631l-0.12,0.371l0.402,0.405 l0.119,0.421l0.186,0.241l-0.288,0.438l-0.551-0.291l-0.639-0.082v-0.501l-0.219-0.227l-0.017,0.453l-0.235,0.243l-0.419-0.42 v-0.939l0.552-0.145L854.664,389.567L854.664,389.567z M856.378,392.754l0.353,0.389l-0.57-0.082l-0.12,0.292l-0.519-0.13 l-0.639-0.614l0.134-0.486l0.37-0.178l0.57,0.259L856.378,392.754L856.378,392.754z M885.286,402.561l-0.133-0.195l0.252-0.404 v0.437L885.286,402.561L885.286,402.561z M885.084,404.841l-0.15-0.905l-0.284-0.55l0.504-0.598l0.116,0.532l0.436,0.551 l-0.335,0.842L885.084,404.841L885.084,404.841z M887.521,402.172l-0.286-0.291l0.233-0.486l-0.149-0.179l0.065-0.469 l1.007-0.808l1.06-0.421l0.587-0.243l-0.049,0.452l-0.32,0.244l-0.169,0.485l-0.248,0.388l0.014,0.291l-0.437,0.017l-0.504,0.469 l-0.419,0.484L887.521,402.172L887.521,402.172z M881.272,399.245l-0.419-0.309l0.22-0.323l0.721-0.259l0.369,0.161l-0.3,0.469 C881.863,398.984,881.259,399.227,881.272,399.245L881.272,399.245z M881.189,392.884l0.772-0.599l0.538,0.049l0.552,0.436 l0.153-0.177l0.252,0.049l0.099,0.34l-0.517,0.242l-0.221,0.26l-0.454-0.017l-0.385-0.421l-0.504,0.034l-0.485,0.128 L881.189,392.884L881.189,392.884z M879.629,388.159l0.201,1.1l-0.169,0.728l-0.637,0.292l-0.504-0.372l-0.017-0.357l0.42-0.161 l-0.017-0.662l-0.604-0.438v-0.291l0.536-0.275l0.57,0.227L879.629,388.159L879.629,388.159z M878.371,385.568l-0.69-0.55 l0.421-0.679l1.039-0.355l0.506-0.308l0.972-0.146l0.152,0.227l-0.187,0.501l0.221,0.032l0.151,0.646l-0.02,0.939l-0.923,0.064 l-0.637-0.291l0.252-0.357l0.385-0.307l0.07-0.55l-0.675,0.015l-0.216,0.519l-0.103,0.535l-0.436,0.096L878.371,385.568 L878.371,385.568z M876.036,377.397l0.169-0.308l0.621-0.081l0.568,0.146l0.02,0.406l-0.504,0.177L876.036,377.397 L876.036,377.397z M874.021,379.728l0.739-0.016l0.318,0.259l0.47-0.421l0.471,0.244l-0.571,0.597l-0.115,0.858l-0.538-0.227 l-0.37,0.064l-0.42-0.34l-0.219-0.679L874.021,379.728L874.021,379.728z M871.773,375.877l0.368-0.129l0.639,0.307l0.083,0.486 l-0.589,0.274l-0.252-0.146l-0.518,0.016L871.773,375.877L871.773,375.877z M867.576,384.906l0.286-0.081l0.485,0.161 l0.151,0.567l-0.151,0.308L867.576,384.906L867.576,384.906z M866.718,384.923l0.354-0.242l0.201,0.193l-0.237,0.438 L866.718,384.923L866.718,384.923z M872.007,385.925l0.318-0.113l0.385,0.406l0.472,0.16l0.086,0.747l-0.306,0.112l-0.252-0.503 l-0.233-0.064L872.007,385.925L872.007,385.925z M879.562,394.454l-0.303-0.372l0.137-0.486l0.97-0.179l-0.149,0.453 L879.562,394.454L879.562,394.454z M871.906,398.952l0.437-0.615l0.604,0.017l-0.135,0.469l-0.504,0.179L871.906,398.952 L871.906,398.952z M872.274,396.184l0.423-0.291v0.583L872.274,396.184L872.274,396.184z M872.109,395.36v-0.743l0.419,0.112 l-0.018,0.404C872.511,395.133,872.142,395.36,872.109,395.36L872.109,395.36z M871.654,394.324l-0.149-0.291l0.284-0.34 l0.336,0.438L871.654,394.324L871.654,394.324z M875.851,396.977l-0.402-0.339l0.187-0.712h0.45l0.203,0.453L875.851,396.977 L875.851,396.977z M876.977,396.801l-0.318-0.502l0.653-0.55l0.421,0.081l0.101,0.469l-0.419,0.518L876.977,396.801 L876.977,396.801z M876.724,394.826l0.018-0.357l0.403,0.114L876.724,394.826L876.724,394.826z M875.382,393.708l0.437-0.145 l0.403,0.372l0.066,0.421l-0.521-0.226L875.382,393.708L875.382,393.708z M873.334,391.945l0.418-0.034l0.372,0.552l0.786,0.68 l-0.015,0.484l-0.387-0.015l-0.989-0.938l-0.421-0.34L873.334,391.945L873.334,391.945z M864.652,386.507l0.657-0.55l1.175-0.177 l0.703,0.743l0.808,0.292l0.79,0.405l0.097,0.178l0.606,0.033l0.101-0.145l1.108,1.068l0.387,0.68l0.016,0.371l0.136,0.454 l-0.083,0.664l0.621,0.583l0.268-0.196l0.822,0.082l-0.335,0.906l-0.437-0.227l-0.388,0.209l-0.688-0.435l-0.252-0.455 l0.084-0.484l-0.368-0.342l-0.588-0.857l-0.236-0.372l-0.603,0.049l-0.842-0.438l-0.365-0.55l-0.572-0.13l-0.37-0.486 l-0.419-0.178l-0.186-0.291l-0.438-0.356l-0.804,0.032L864.652,386.507L864.652,386.507z M865.973,399.76l0.159-0.186l0.15,0.598 l0.468,0.599l-0.326,0.648l-0.451-0.219l0.023-0.478l-0.268-0.42L865.973,399.76L865.973,399.76z M865.92,398.927l0.252,0.38 l-0.336-0.009L865.92,398.927z ",
"M961.136,371.475l0.079-0.749l1.744-0.646l2.619,1.421 l1.745,0.064l1.678,0.84l0.269-1.615l-0.671-0.905l-1.209-0.71l0.472-1.614l1.338,0.128l2.151,1.68l0.604,1.098l2.147,0.194 l0.401-0.776l1.344-0.71l1.616-1.888l0.984,0.675l1.441,1.807l0.066,0.872l0.604,1.257l1.575,1.064l0.167,0.71l1.004,0.741 l1.242-0.03l1.207,0.482l0.667,0.936l-0.703-0.097l-0.635,0.453l-1.239,0.063l-1.41,1.128l0.102,1.161l0.169,0.936l-0.438,0.549 l-0.099,0.807l0.302,0.482v0.645l-0.438,0.388v1.549l-0.269,0.58l-0.3-0.515l0.3-0.968l-0.637-0.646l-0.368,0.325l-0.269,0.709 l0.335,1.16l-0.101,0.709l0.237,0.388l-0.028,1.692l-0.4,0.25l-0.771-0.161l-0.301-0.516l-0.77-0.355l-1.55-1.634l1.508-0.988 l-1.072-0.646l-0.252-0.454l0.57-0.453l-0.62-0.598l-0.405-0.665l-0.434-0.096l-0.084-0.259l-0.488-0.017l-0.872,0.632 l-0.671,0.129l-0.59,0.761l-0.553,0.226l-0.791,1.067l-0.484,0.017l-0.318,0.437l-0.152,0.518l-0.82,0.349l-0.657-0.216 l0.053-0.01v-0.968l0.335-0.387l-0.67-1.163l1.139-0.257l-1.073-0.969l-1.343-0.065l-2.081-1.099l-0.604-1.357l0.604-0.646 l-0.066-0.904l-1.88-1.485l-0.066-0.905l0.335-1.033l-0.941-0.904l-1.678-0.194L961.136,371.475L961.136,371.475z  M968.925,384.797l-2.073-3.026l-1.141-0.323l-0.737-1.421h-0.804l-0.538,0.453l-1.207-1.097l-0.741,0.387l-0.813,0.028 l0.191,0.298l0.189,0.009l0.654,0.736l0.587-0.048l0.328,0.803l-0.066,0.647l2.032,1.065l0.149,0.859l1.209,0.599l1.219,0.039 l1.308,0.71L968.925,384.797z",
"M961.062,380.095 961.251,380.104 961.905,380.839  962.492,380.791 962.82,381.594 962.754,382.241 964.786,383.307 964.936,384.166 966.145,384.764 967.363,384.803  968.671,385.513 968.925,384.797 968.935,384.807 969.956,384.622 970.613,384.838 971.434,384.49 971.586,383.972  971.904,383.535 972.389,383.518 973.18,382.451 973.732,382.225 974.322,381.464 974.993,381.335 975.865,380.703  976.354,380.719 976.438,380.978 976.871,381.074 977.276,381.739 977.896,382.337 977.326,382.79 977.578,383.244  978.65,383.891 977.143,384.878 978.692,386.513 979.462,386.868 979.763,387.384 980.534,387.545 980.935,387.295  980.929,387.569 981.6,388.505 981.732,389.569 981.533,390.601 981.835,391.02 982.537,391.118 983.443,392.053  984.549,392.053 985.319,392.31 986.423,391.922 987.497,392.6 988.168,392.633 988.47,393.6 989.173,394.438 991.519,395.341  992.558,395.439 995.369,396.213 996.745,396.213 999.829,395.374 1002.141,395.083 1004.82,395.31 1005.863,395.503  1006.198,394.342 1005.491,393.342 1005.041,392.174 1006.005,391.641 1008.283,391.512 1008.687,390.32 1009.287,389.577  1010.061,389.513 1012.003,387.933 1013.981,387.577 1015.724,387.933 1016.061,386.868 1016.997,386.642 1017.903,386.998  1018.941,386.965 1020.617,388.254 1022.059,388.642 1024.772,390.288 1025.51,390.255 1026.247,389.771 1028.123,390.513  1029.096,390.673 1029.365,391.996 1029.799,392.319 1030.771,392.093 1032.513,392.48 1034.391,394.995 1036.436,395.156  1037.608,395.641 1038.346,396.898 1038.011,397.575 1038.412,398.673 1038.378,399.35 1038.814,400.156 1038.748,401.414  1038.85,402.026 1038.515,402.704 1039.115,403.477 1038.882,403.703 1038.948,404.285 1037.741,405.059 1036.738,405.315  1037.139,405.929 1037.91,406.51 1037.038,407.702 1037.273,407.896 1037.574,409.508 1037.574,410.381 1039.151,410.735  1039.553,410.735 1038.113,412.443 1037.878,413.605 1039.115,415.927 1039.788,418.023 1039.453,418.637 1039.921,419.443  1040.054,421.087 1044.111,421.151 1044.848,422.7 1044.748,423.925 1045.216,425.699 1044.848,426.247 1041.361,430.829  1043.775,433.925 1044.312,434.955 1045.518,436.182 1046.69,436.794 1047.094,437.246 1048.637,437.375 1049.506,437.697  1049.639,438.181 1050.914,438.308 1050.948,439.825 1051.28,440.857 1051.351,442.083 1051.585,442.89 1052.725,442.824  1053.928,443.599 1054.064,445.342 1053.394,445.955 1052.187,445.501 1049.94,446.146 1049.473,446.63 1048.062,447.179  1047.594,448.049 1047.831,448.824 1047.126,449.759 1047.562,450.856 1047.363,452.437 1047.38,453.161 1047.115,453.161  1046.902,453.535 1046.199,453.906 1044.651,453.364 1043.491,452.959 1043.034,452.181 1042.436,452.28 1042.224,453.062  1041.943,453.094 1041.273,452.553 1040.852,452.688 1040.046,452.418 1038.005,452.349 1036.561,451.741 1033.994,451.909  1032.763,450.793 1032.376,450.758 1031.286,451.64 1030.407,450.995 1029.384,451.029 1026.922,451.062 1026.746,450.59  1026.219,450.25 1026.148,449.064 1025.235,447.372 1024.744,445.749 1023.899,444.598 1023.791,444.124 1023.368,444.157  1023.368,443.852 1021.786,443.648 1020.837,443.921 1019.606,444.8 1018.655,444.833 1018.551,444.428 1018.517,444.935  1016.58,446.086 1014.964,447.372 1013.135,446.188 1011.586,445.814 1010.461,445.984 1010.004,446.222 1008.386,444.833  1007.61,444.734 1006.873,444.259 1005.781,444.021 1004.411,442.633 1004.975,442.161 1004.832,441.753 1003.953,441.685  1003.742,441.381 1002.263,441.313 1001.771,440.805 1000.575,440.434 998.885,440.603 997.938,440.061 996.531,437.047  996.354,436.335 995.933,436.472 995.087,435.796 995.3,435.559 995.616,435.761 995.967,435.761 995.476,434.949  994.771,435.05 994.28,434.746 994.138,433.357 992.451,431.394 992.345,430.548 991.359,429.295 990.869,429.058  989.425,430.21 988.968,430.176 988.509,429.364 988.087,429.533 987.031,429.058 987.173,428.551 987.35,428.043  987.104,428.313 986.47,428.347 985.909,428.28 986.608,428.822 986.574,429.668 986.048,430.108 985.484,430.142  984.779,429.261 984.815,428.992 984.395,429.163 984.054,428.893 983.049,428.506 982.246,427.958 981.94,425.184  980.468,425.184 980.099,423.99 980.167,422.667 981.137,421.829 980.167,419.83 979.293,419.377 978.423,417.797  977.853,417.41 977.353,417.604 973.899,415.411 973.096,415.476 972.624,415.797 971.655,415.088 971.822,414.54  971.554,414.217 971.991,413.281 970.949,412.443 970.75,411.798 969.745,411.605 969.241,410.993 968.604,410.927  968.604,410.315 968.973,409.832 968.671,409.38 968.939,408.768 968.973,407.123 969.477,406.703 969.643,405.315  970.246,405.445 970.816,405.09 970.816,403.51 970.448,403.285 970.346,402.124 970.899,402.017 971.808,401.724  972.092,401.531 971.689,401.271 971.049,400.963 970.043,401.061 969.354,400.899 967.778,400.025 967.098,399.931  966.258,399.478 965.824,398.447 965.353,397.704 964.649,397.543 964.212,396.673 964.248,395.867 963.813,394.737  962.939,394.673 962.836,394.704 963.074,393.931 962.639,392.899 961.634,391.158 960.393,390.707 960.493,390.19  960.429,388.9 961.029,387.545 960.729,386.998 959.659,386.868 959.623,385.643 959.756,384.803 959.322,383.126  958.82,382.255 958.784,381.805 960.092,381.708 960.56,380.515 961.063,380.095 			",
"M954.131,372.108 955.575,371.628 957.656,371.176  958.261,371.306 960.88,371.242 962.019,372.275 963.696,372.469 964.638,373.374 964.303,374.406 964.369,375.312  966.249,376.797 966.315,377.701 965.711,378.346 966.315,379.703 968.396,380.802 969.739,380.867 970.812,381.836  969.674,382.093 970.344,383.256 970.009,383.644 970.009,384.612 968.935,384.807 966.852,381.771 965.711,381.447  964.974,380.026 964.17,380.026 963.632,380.479 962.425,379.381 961.684,379.768 960.87,379.796 960.525,379.257  959.724,378.483 958.82,378.547 957.378,378.483 956.034,377.709 955.97,375.935 956.272,374.548 955.769,373.613  954.929,373.419 954.863,372.871 			 ",
"M878.109,375.23l1.01-0.244l0.54-1.031l-0.204-0.971 l1.211-0.709l0.066-1.099l-0.94-0.387l0.203-1.228l0.737-0.774l0.737-0.066l0.536-0.58h1.344l1.275,0.969l0.671-0.519 l1.033,0.249l0.138,1.595l1.406,1.187l1.02,0.135l1.056,1.05l0.949,0.508v0.575l-0.807,0.779l-1.162-0.103l-0.633-0.338h-1.058 l-0.421,0.372l-1.582-0.034l-0.949,0.373l-0.493,1.217l-2.428,1.186l-1.935,1.592l-0.07-0.61l0.458-1.321l0.525-0.035 l0.915-0.575l-0.879,0.102l-0.562-0.169l-0.53,0.135l-0.737-0.438l-0.385-0.78L878.109,375.23L878.109,375.23z M946.307,369.774 l-0.217,0.289l-0.561,1.152l-1.162,0.677l-1.548,0.745l-0.278,0.678l-1.446,0.1l-0.562,0.442l-1.9-0.406l-0.561-0.339h-0.67 l-0.282-0.169l-0.915,0.271l-1.687,0.102l-1.971,0.779l-1.583-0.305l-1.056-0.71l-0.562,0.372l-1.793-0.847l-0.915-0.135 l-1.621-1.05h-0.49l-0.423,0.576l-0.773-0.171l-0.809-1.048l-0.213-1.083l-0.737-0.609l-0.526,0.1l-1.126,1.083l-0.389-0.168 l-0.422,0.271l-1.689-1.49l-0.14-0.88l-0.28-0.101l-1.124,0.541h-1.48l-0.703-0.237l-0.913,0.237l-2.285-0.102l-1.126,0.237 l-2.147,0.915l-0.983,0.101l-1.727,0.305l-0.491,0.644l-0.809,0.202l-0.773,0.78l-0.423,0.237l-0.457,1.083l-0.422,0.271 l0.068,0.474l-1.653,0.102l-2.462-0.88h-0.774l-0.562,0.406l-1.021-0.203l-1.406,0.338l-0.705-0.237l-1.157,0.304l-0.213,0.61 l0.846,1.354l1.298,0.034l1.092,0.17l-0.177,0.473l-1.898,0.034l-1.652,0.472l-0.599,0.747l0.316,0.438l0.879-0.27l0.353,0.508 l-0.703,0.236l-2.147,0.034l-0.913-0.473l-1.092,0.473l-0.526-0.744l-0.6,0.033l-0.807,0.881l-0.775-0.033l-1.126-0.848h-1.09 l-2.109,1.558l-0.318,0.812l-0.351,0.779l0.351,0.574l-0.035,0.914l-0.315,0.373l0.315,0.542l1.233-0.406l0.349,0.137 l0.915-0.205l1.126,0.034L882,383.639l0.139,0.677l0.457,0.711l-0.027,0.541l-0.089,0.389l0.3,0.202l0.841-0.523l0.072,0.457 l-0.561,0.558l-1.158,0.692l0.401,0.269l0.666,0.067l-0.666,0.421l-0.401,0.777h-0.493l-0.508-1.182l-0.351-0.167l-0.159,0.742 l0.314,0.827l-0.401,0.439l0.144,0.637l0.773,0.476l0.177-0.373l0.915,0.745l0.703-0.137l1.056,0.61l0.28,1.049l-0.737,0.711 l0.6,0.542l0.033,0.542l0.6,0.035l1.161,1.083l-0.422,0.711l-0.739-0.203l-0.177,0.507l0.598,0.236l1.407-0.338h1.968 l-0.139,0.374l-0.451,0.46l-1.01,0.422l-1.507-0.062l-0.354,0.509l0.558,0.139l0.771-0.245l1.036-0.005l0.5-0.237v0.643 l0.281,0.237l0.528-0.643l0.631-0.745l0.669-0.034l0.457,0.542h0.599l0.882,0.507l0.42-0.576l0.703,0.102l-0.105,0.474 l-0.351,0.17l0.423,0.608l0.104,0.61l0.987,0.778l0.351-0.168l1.056,0.406l1.126-0.169l0.527-0.406h0.913l0.53-0.44l0.808,0.406 l0.562-0.305l-0.105-1.048l0.176-0.544l-0.176-0.981l1.969-0.169l1.688,0.136l2.254,1.117h0.807l1.479,1.896l1.268,0.779 l4.223-0.509l1.264-0.506h0.423l0.212,0.204l0.596-0.407l0.21-0.745l2.005-2.2l0.497-0.103l1.896,0.644l1.16,0.506l1.444-0.27 l0.104-0.406l1.021-0.711l0.772,0.237l0.106,0.644l-0.701,1.083l-0.917,0.71l0.036,0.439l0.841,0.949l-0.184,0.62l0.919,0.167 l0.971-0.161l0.905-0.323l-0.102-0.998l0.604-0.356l0.032-1.676l0.269-0.711l1.34,0.323l0.806,0.192l2.246-0.838l0.534-0.064 l0.671-0.388l2.414-0.226l0.87,0.226l0.468,0.42l1.511,0.289l2.109,0.065l0.204-0.387l1.204-0.355l0.705-0.74l1.641-0.484h1.175 l0.902-0.161l2.347,0.129l1.844-0.612l1.308-0.034l0.371,0.296l1.271-1.004h1.108l0.468-0.354h1.91l1.609,0.386l1.207-0.323 l0.635,0.387l-0.034,0.873l0.77,0.353l1.037-0.291l0.238-0.773l-0.436-1.031l-1.005-1.742l-1.241-0.451l0.101-0.517l-0.064-1.29 l0.601-1.355l-0.301-0.548l-1.069-0.129l-0.036-1.226l0.133-0.84l-0.434-1.676l-0.502-0.872l-0.036-0.45l1.308-0.097l0.468-1.193 l0.504-0.419l-0.538-0.838l-0.802-0.774l-0.903,0.064l-1.442-0.064l-1.344-0.774l-0.064-1.774l0.303-1.387l-0.504-0.936 l-0.84-0.193l-0.065-0.549l-0.804-0.838l-0.838-0.193l-1.944-1.58l-0.77-0.193l-0.671,0.547l-0.57,0.098l-1.205-0.452 l-0.438,0.547l-0.536-0.159l-0.199-0.809L946.307,369.774L946.307,369.774z M887.017,398.758l0.318-0.323l0.385,0.015 l0.101,0.323l-0.4,0.114L887.017,398.758L887.017,398.758z M876.758,378.773l0.723,0.273l0.923-0.242l0.135-0.484l-0.437-0.276 l-0.486,0.357l-0.673,0.016L876.758,378.773z",
"M984.395,429.163 984.054,428.893 983.049,428.506  982.246,427.958 981.94,425.184 980.468,425.184 980.099,423.99 980.167,422.667 981.137,421.829 980.167,419.83  979.293,419.377 978.423,417.797 977.853,417.41 977.353,417.604 973.899,415.411 973.096,415.476 972.624,415.797  971.655,415.088 971.822,414.54 971.554,414.217 971.991,413.281 970.949,412.443 970.75,411.798 969.745,411.605  969.241,410.993 968.604,410.927 968.604,410.315 968.973,409.832 968.671,409.38 968.939,408.768 968.973,407.123  969.477,406.703 969.643,405.315 970.246,405.445 970.816,405.09 970.816,403.51 970.448,403.285 970.346,402.124  970.899,402.017 971.808,401.724 972.092,401.531 971.689,401.271 971.049,400.963 970.043,401.061 969.354,400.899  967.778,400.025 967.098,399.931 966.258,399.478 965.824,398.447 965.353,397.704 964.649,397.543 964.212,396.673  964.248,395.867 963.813,394.737 962.939,394.673 961.799,394.995 961.029,394.642 961.063,393.769 960.429,393.382  959.222,393.706 957.612,393.319 955.702,393.319 955.234,393.673 954.126,393.673 952.855,394.678 953.055,394.834  952.45,395.803 952.017,395.803 951.044,396.607 949.234,396.962 948.396,398.447 948.294,399.897 949.166,401.575  949.2,402.993 948.396,404.575 948.63,405.284 948.596,406.51 947.86,407.543 947.423,408.219 939.158,413.894 939.139,413.932  939.146,413.928 941.516,419.782 945.641,420.271 967.39,434.806 976.154,434.946 977.189,433.062 978.197,430.866  980.278,429.961 981.89,430.543 982.962,430.219 983.417,430.405 983.904,429.364 			",
"M976.154,434.946 977.189,433.062 978.197,430.866  980.278,429.961 981.89,430.543 982.962,430.219 983.417,430.405 983.305,430.65 983.762,432.647 981.088,433.154  982.917,434.306 983.127,433.9 983.443,434.578 983.481,435.321 984.008,435.897 983.832,435.897 983.654,435.999  984.143,436.585 981.304,437.859 981.039,436.213 976.782,434.955 			",
"M910.319,408.37 909.248,407.758 908.644,406.919  908.644,405.918 909.183,405.791 909.753,405.146 910.654,405.502 911.291,405.307 911.561,404.728 911.595,404.145  912.499,404.145 913.438,404.597 914.643,404.533 916.719,403.759 918.163,402.888 918.699,402.855 918.965,403.114  918.465,403.468 917.392,404.113 916.352,405.275 916.719,406.081 916.653,406.919 915.415,406.79 914.712,407.112  913.738,407.984 912.665,408.209 912.129,408.629 911.595,408.307 			",
"M939.158,413.894 947.423,408.219 947.86,407.543  948.596,406.51 948.63,405.284 948.396,404.575 949.2,402.993 949.166,401.575 948.294,399.897 948.396,398.447 949.234,396.962  951.044,396.607 952.017,395.803 952.45,395.803 953.055,394.834 952.484,394.382 951.177,394.416 949.333,395.028  946.986,394.899 946.084,395.061 944.909,395.061 943.269,395.545 942.563,396.285 941.359,396.641 941.155,397.027  939.046,396.962 937.535,396.673 937.067,396.253 936.197,396.027 933.783,396.253 933.112,396.641 932.578,396.705  930.332,397.543 929.526,397.351 928.187,397.027 927.918,397.738 927.886,399.414 927.281,399.77 927.383,400.768  926.478,401.09 925.507,401.251 924.588,401.084 924.562,401.175 923.931,401.412 924.143,402.767 924.914,404.255  925.219,405.426 925.007,406.376 924.884,408.105 926.847,408.188 927.281,409.155 928.084,409.542 928.02,410.768  928.355,411.444 927.886,411.735 927.383,411.735 926.478,412.186 926.109,413.411 925.438,414.443 925.317,414.45  925.557,414.769 926.228,415.392 926.339,416.986 926.093,417.705 926.512,417.733 928.054,418.378 928.99,419.087  929.328,419.087 929.965,419.475 939.139,413.932 			",
"M922.591,434.135 923.129,433.316 923.163,433.186  923.115,432.602 923.566,432.15 923.566,431.13 923.919,430.014 923.885,428.702 924.188,428.525 924.188,427.554 924.4,426.539  924.368,425.86 924.548,423.915 924.199,424.023 923.631,424.023 922.859,424.409 922.424,423.99 922.623,422.604  922.623,420.507 922.355,420.056 922.591,418.831 923.695,418.831 923.798,419.539 924.266,419.604 924.825,419.121  924.8,418.604 924.92,418.615 924.709,418.215 924.523,417.439 924.793,416.111 925.011,414.979 925.269,414.452 924.8,414.475  924.298,415.411 922.825,415.442 922.265,415.336 921.271,416.41 920.921,419.664 919.581,422.241 918.141,424.105  918.656,424.328 919.567,425.625 920.051,427.282 921.366,429.198 922.388,431.527 921.982,432.616 			",
"M924.92,418.615 924.709,418.215 924.523,417.439  924.793,416.111 925.011,414.979 925.269,414.452 925.317,414.45 925.557,414.769 926.228,415.392 926.339,416.986  926.093,417.705 926.043,417.701 925.473,418.184 925.172,418.637 			",
"M924.199,424.023 923.631,424.023 922.859,424.409  922.424,423.99 922.623,422.604 922.623,420.507 922.355,420.056 922.591,418.831 923.695,418.831 923.798,419.539  924.266,419.604 924.825,419.121 924.836,419.411 924.935,419.959 924.77,420.377 924.669,421.571 924.699,422.248  924.548,423.915 			",
"M922.265,415.336 922.825,415.442 924.298,415.411  924.8,414.475 925.438,414.443 926.109,413.411 926.478,412.186 927.383,411.735 927.886,411.735 928.355,411.444  928.02,410.768 928.084,409.542 927.281,409.155 926.847,408.188 924.884,408.105 924.864,408.342 924.231,408.479  924.02,411.664 923.244,412.817 922.4,413.97 922.4,415.189 			",
"M923.129,433.316 923.163,433.186 923.115,432.602  923.566,432.15 923.566,431.13 923.919,430.014 923.885,428.702 924.188,428.525 924.188,427.554 924.4,426.539 924.368,425.86  924.699,422.248 924.669,421.571 924.77,420.377 924.935,419.959 924.836,419.411 924.8,418.604 925.172,418.637  925.473,418.184 926.043,417.701 926.512,417.733 928.054,418.378 928.99,419.087 929.328,419.087 929.965,419.475  939.146,413.928 941.516,419.782 941.278,419.755 939.6,421.434 932.688,423.502 937.92,428.992 935.978,431.253  935.841,432.545 932.284,433.062 928.928,436.228 924.229,434.936 922.785,434.991 922.799,434.812 923.199,433.698  923.163,433.263 			",
"M984.143,436.585 981.304,437.859 981.039,436.213  976.782,434.955 967.39,434.806 945.641,420.271 941.278,419.755 939.6,421.434 932.688,423.502 937.92,428.992 935.978,431.253  935.841,432.545 932.284,433.062 928.928,436.228 924.229,434.936 922.785,434.991 922.656,436.641 922.73,438.538  922.234,439.824 922.342,440.298 923.009,440.061 923.222,440.398 923.818,439.993 924.874,440.568 924.594,440.739  926.633,442.938 926.845,443.887 927.302,444.089 927.478,445.002 928.496,445.884 928.99,445.918 930.328,448.118  930.362,448.83 930.713,449.607 931.454,449.743 931.662,450.859 932.123,451.47 933.177,451.909 934.021,454.042  934.689,454.482 934.97,455.837 934.689,456.413 934.689,457.056 935.673,457.732 935.709,458.478 936.342,458.851  937.049,458.172 938.03,458.95 939.51,459.593 940.67,460.745 941.021,461.728 941.373,461.794 941.514,462.911 941.97,463.282  942.356,464.807 943.271,465.586 943.561,467.15 943.839,467.642 943.488,469.109 943.14,469.413 943.488,470.122  943.945,471.743 944.14,473.447 944.978,474.157 945.12,474.781 947.487,477.21 948.277,477.532 949.217,477.605  949.851,478.484 950.307,478.484 951.681,479.602 951.715,480.278 952.875,480.48 952.732,481.125 953.332,481.361  954.423,485.221 955.406,485.795 955.479,486.947 958.996,490.367 959.524,490.367 959.84,492.294 961.317,492.701  962.146,494.992 962.974,495.073 963.677,495.362 964.18,494.461 965.423,493.687 964.583,492.172 965.184,490.042  966.427,489.525 967.835,490.623 970.75,490.718 974.735,492.267 978.892,494.202 979.094,498.267 987.537,487.268  1018.337,478.409 1019.008,468.654 1017.936,465.038 1017.952,464.99 1016.391,466.395 1002.767,464.392 1001.756,460.904  1000.642,459.628 1000.67,458.086 1000.646,458.07 1000.399,458.172 999.977,457.461 1000.013,457.021 1000.434,456.514  999.662,456.58 999.537,456.371 998.768,456.371 997.257,455.596 997.065,455.171 996.812,455.328 996.035,454.279  995.828,453.128 993.469,450.284 992.87,449.202 993.4,449.336 993.4,448.83 992.556,446.661 992.556,446.156 991.956,445.274  991.534,445.274 990.023,443.176 989.459,443.14 988.792,442.43 988.859,442.125 989.145,442.058 989.53,442.295  989.145,441.753 988.369,441.618 986.785,441.246 985.909,438.978 985.414,437.894 984.815,437.589 984.815,436.844  984.499,437.014 			",
"M999.537,456.371 998.768,456.371 997.257,455.596  997.065,455.171 997.303,455.023 997.303,454.109 996.988,453.737 996.775,453.094 996.918,451.741 997.303,451.741  997.549,451.909 997.303,450.555 997.515,450.555 997.339,449.844 997.657,449.607 997.657,449.235 998.008,449.202  998.148,448.794 998.502,448.794 999.31,449.404 999.378,449.878 999.767,449.878 999.942,450.183 999.626,451.64  999.416,451.64 999.588,453.161 999.908,453.161 1000.399,454.042 1000.047,456.241 999.52,456.343 			",
"M1000.67,458.086 1000.642,459.628 1001.756,460.904  1002.767,464.392 1016.391,466.395 1017.952,464.99 1021.896,453.217 1022.804,453.092 1022.703,451.976 1022.562,451.366  1022.141,451.503 1021.895,451.299 1021.899,451.169 1021.482,451.147 1021.349,449.562 1020.761,449.385 1020.749,450.034  1020.486,450.475 1017.602,452.146 1017.602,453.364 1014.928,455.564 1014.505,456.209 1014.894,456.343 1015.14,456.886  1013.94,458.104 1013.521,457.529 1013.135,457.799 1012.536,457.799 1012.606,458.511 1012.323,458.576 1012.113,458.983  1010.741,459.222 1009.758,459.323 1009.335,458.815 1008.42,458.882 1008.033,458.681 1007.364,458.815 1005.781,458.478  1003.883,459.898 1003.144,459.695 1002.438,459.627 1001.703,459.933 1001.421,457.901 1001.034,458.308 			 ",
"M643.8,386.282l0.638,0.452l0.034-0.338l-0.437-0.26 L643.8,386.282L643.8,386.282z M639.821,386.282l0.839,0.566l-0.269-0.47L639.821,386.282L639.821,386.282z M638.143,387.091 l0.084,0.858l0.957,0.064l0.537-0.113l-0.839-0.729L638.143,387.091L638.143,387.091z M650.903,391.151l-0.823,0.228l0.134,0.389 l1.192,0.193l0.351-0.259l-0.335-0.438L650.903,391.151z ",
"M689.063,418.402l-0.856-0.339l-0.271-0.485l1.243-0.162 l0.486,0.728C689.666,418.144,689.045,418.435,689.063,418.402z ",
"M687.015,441.365l-0.32-0.274l0.05-0.371l0.37,0.063 l0.119,0.389C687.233,441.172,686.979,441.35,687.015,441.365L687.015,441.365z M683.557,443.163l-0.186-0.438l0.486-0.338 l0.285,0.096v0.567l-0.335,0.227L683.557,443.163L683.557,443.163z M684.555,439.298l-0.034-0.998l-0.302-0.519 c0,0,0.135-0.547,0.302-0.515c0.168,0.032,0.638,0.356,0.638,0.356l-0.068,1.322C685.09,438.944,684.588,439.298,684.555,439.298 L684.555,439.298z M691.76,440.588l-0.973-0.032l-1.475,1.031l-0.735-0.451l-0.504-0.742l0.738-0.549l0.836,0.064l1.039-0.385 l0.37-0.323l0.938,0.193L691.76,440.588L691.76,440.588z M693.635,440.75l-0.403,1.289l0.874,0.679l0.805-0.517l0.535-0.194 l-0.167-1.032l-0.771-0.226H693.635L693.635,440.75z M702.382,437.396l0.435-1.161l0.738-0.031l0.772,0.514l-0.94,0.129 L702.382,437.396L702.382,437.396z M699.567,441.07l1.005-1.192l0.067-0.613l1.442-0.708l0.066,1.064l-1.006,1.354l-0.97,0.257 L699.567,441.07z ",
"M649.458,492.775l1.007-0.615l-0.234-0.404l-0.673-0.08 l-0.604,0.26l-0.385,0.113l0.252,0.68C648.821,492.729,649.408,492.76,649.458,492.775L649.458,492.775z M650.733,493.52 l-0.3-0.549l0.369-0.373l0.437,0.131l-0.084,0.501C651.154,493.229,650.733,493.505,650.733,493.52L650.733,493.52z  M654.212,494.524l-0.293,0.017l-0.226,0.128l-0.487-0.378l0.192-0.34l0.521-0.009l0.462,0.268l0.05,0.259 C654.431,494.469,654.212,494.515,654.212,494.524L654.212,494.524z M655.869,494.478l-0.669,0.259l-0.303-0.421l0.336-0.353 L655.869,494.478L655.869,494.478z M659.823,494.123l-0.201-0.711l0.469-0.449v0.774L659.823,494.123L659.823,494.123z  M659.522,497.187l-0.436-0.646l0.604-0.58l0.568,0.192l0.167,0.744l-0.402,0.289H659.522L659.522,497.187z M658.417,501.25 l-0.203-0.451l0.302-0.257l0.435,0.516L658.417,501.25L658.417,501.25z M656.104,502.186l-0.033-1.033l-0.402-0.644l0.77,0.194 l0.939,0.998l-0.234,0.678L656.104,502.186z ",
"M1005.122,482.21l13.215-3.801l0.671-9.755l-1.072-3.616 l3.961-11.821l0.907-0.125l0.25,2.677l1.549,1.828l0.142,0.609l2.601,2.098l1.159,0.304l0.6-0.27l0.881-0.034l2.073,0.375 l1.162-0.238l0.633,0.033l1.302,1.659l0.353,1.149l0.81,0.713l0.422,0.812l1.723,1.354l0.846,0.146l0.3,0.319l-0.054,0.861 l-0.561,0.98l0.085,0.574l-0.159,0.674l-1.725,2.64l-1.123,0.983l-0.516,1.034l-0.544,0.457l-0.527,1.704l-0.544-0.05 l-0.488-0.253l0.087-0.49l0.228-0.44l-0.423-0.149l-0.453,0.353l-0.562,0.98l-0.211,0.05l0.334,0.574l-0.546,0.137l-0.788,1.45 v0.777l-0.3,0.709l0.195,0.051l0.439,0.808l-0.264,0.053l0.578,1.604l0.385,0.336l-0.172,0.438l-2.318,0.187l-0.472,0.32 l-0.651-0.304l-1.051,0.271l-1.701,1.99v1.385l-0.423,0.373l-0.876,0.859l-0.562-0.219l-1.156,0.186l-1.612-0.033l-0.423,0.42 l-0.648,0.625l0.121,0.438l-0.085,0.558l0.437,0.237l-0.054,0.524l-0.224,0.05l0.052,0.186l-1.122,1.604l-0.563,0.05l-0.737-0.44 l-0.79,0.152l-0.929-0.068l-1.648,0.861l-1.02-0.034l-0.599,0.946h-0.914l-0.246-0.17l-0.62,0.153l-2.672-3.058l0.604-1.938 l-4.229-5.169L1005.122,482.21L1005.122,482.21z M1021.899,451.169l0.028-0.547l0.389-0.71l0.118-1.26l-0.211-0.12l0.177-0.504 l-0.229-0.271l0.193-0.151l0.195,0.034l-0.229-0.337l-0.314,0.084l-0.389-0.035l-0.21,1.215l-0.245,0.289l-0.246-0.289 l-0.159,0.424l-0.006,0.395l0.588,0.177l0.134,1.586L1021.899,451.169z ",
"M962.146,494.992l0.828,0.081l0.703,0.289l0.503-0.901 l1.243-0.774l-0.84-1.515l0.601-2.13l1.243-0.517l1.408,1.098l2.915,0.095l3.985,1.549l4.156,1.936l0.202,4.064l8.443-10.999 l17.585-5.058l-0.276,2.206l4.229,5.169l-0.604,1.938l2.672,3.058l-1.034,0.254l-1.795,0.373l-1.582,1.862l-0.139,1.117 l0.385,0.373l-0.141,0.271l0.177,0.507l-2.007,0.406l-0.914,0.812l-1.83,0.881l-2.885,0.507l-0.457,0.476l-5.128,1.462 l-0.491-0.05l-0.86,0.403l-0.963,1.518l-1.351,1.082h-0.648l-0.284-0.252l-0.438,0.404l-0.667,0.136l-0.58-0.44l-0.717-0.032 l-1.662,1.253l-0.103,0.539l-0.599,0.477l-1.761,0.171l-2.181,0.811l-0.916-0.205l-0.28-0.336l-1.336,0.066l-0.176-0.27 l-0.739-0.034l-0.6,0.169l-1.159,0.711l-0.527,1.185l-0.456,0.066l-0.88,1.187l-0.879,0.34l-0.493-0.474h-0.917l-0.949,0.777 l-0.771,0.17l-1.302-0.406l-0.247,0.303l-0.949,0.137l-0.389-0.747l-0.176-1.116l-0.983-1.014l-0.495-1.219l0.495-0.304 l-0.072-1.253l-1.196-1.051l-0.599-4.163l-1.124-1.391l-0.036-0.675h-0.492l-0.316-0.645l0.739,0.204v-0.474h0.526l0.072-1.354 l-0.421-2.269L962.146,494.992L962.146,494.992z M1006.731,515.504l0.972-0.289l1.241,0.354l-1.004,0.131L1006.731,515.504 L1006.731,515.504z M1012.494,514.104l0.57-0.291l0.084-0.696l0.54-0.437l0.587,0.081l0.252,0.454l0.586,0.128l0.654-0.18 l0.923-0.193l0.623,0.309l0.737,0.145l0.066,0.34l-0.353,0.404l-0.703,0.049l-1.007,0.634l-1.396,0.208l-0.989-0.195 l-0.568-0.434L1012.494,514.104z",
"M922.591,434.135 921.982,432.616 922.388,431.527  921.366,429.198 920.051,427.282 919.567,425.625 918.656,424.328 918.141,424.105 917.538,424.885 916.271,425.36  913.31,424.885 910.988,425.496 909.294,424.343 909.084,425.108 909.717,426.023 909.683,426.598 909.05,425.685 908.1,425.176  907.888,424.398 908.347,424.195 907.958,423.823 907.185,423.925 906.237,423.62 904.652,423.214 904.404,423.484  905.073,423.62 905.216,423.925 904.334,424.025 903.455,423.925 902.438,424.33 902.119,424.025 902.142,423.816  903.038,423.715 903.773,423.411 902.845,423.529 901.527,423.562 900.967,423.951 899.728,424.602 899.129,424.906  897.935,425.278 896.947,426.191 896.772,426.598 895.223,426.598 893.536,425.583 892.444,425.482 890.863,425.583  889.525,424.771 888.999,424.771 888.438,425.108 887.132,424.229 885.622,423.925 882,423.653 880.205,423.077 877.882,423.18  877.425,423.315 877.425,423.31 877.124,424.053 876.723,425.946 877.257,427.151 877.257,428.139 876.588,429.688  876.051,431.106 876.631,432.312 877.124,434.589 878.731,470.078 934.317,469.674 934.333,469.582 933.525,469.275  932.438,468.216 932.161,467.658 931.192,467.389 930.598,466.205 930.036,466.457 929.159,466.425 927.721,465.53 927,463.201  927.165,462.576 927.104,461.468 926.807,460.872 926.903,460.47 927.252,460.754 928.621,460.838 928.09,460.293  927.646,460.218 926.885,459.085 926.582,458.862 926.528,459.167 926.004,458.56 925.598,457.36 923.748,454.752  922.975,454.279 922.765,453.025 919.845,448.897 919.879,447.948 919.388,447.204 919.211,445.477 918.719,444.902  918.719,444.394 917.136,442.735 917.064,442.092 917.24,441.381 916.852,440.67 914.144,438.47 913.934,437.759  912.211,435.796 912.211,434.779 911.226,433.562 911.331,432.952 911.263,432.341 911.472,432.038 911.647,432.309  912.104,432.309 912.423,433.46 912.846,433.934 912.95,434.508 914.742,435.964 914.742,436.844 915.201,437.724  916.43,438.268 916.714,439.112 918.931,441.381 920.161,442.025 920.301,442.295 920.478,441.753 921.11,441.178  921.463,439.587 921.04,439.181 921.604,437.826 921.709,436.879 922.41,434.407 			",
"M878.731,470.078 934.317,469.674 934.265,470.053  934.158,470.46 934.404,470.797 934.281,471.033 934.458,471.236 934.437,471.422 934.63,471.673 934.945,472.916  935.832,473.945 935.824,474.374 935.597,474.384 935.476,474.09 935.107,473.662 934.952,473.804 935.075,474.625  936.199,477.841 936.449,479.602 936.173,481.261 936.808,483.185 937.644,484.715 938.419,484.881 940.458,486.201  940.458,487.047 941.407,487.083 942.427,487.591 942.427,488.2 942.735,488.2 942.12,489.104 941.359,489.504 940.573,489.643  940.23,490.27 939.188,490.172 938.629,490.623 937.714,490.817 937.644,491.271 937.847,491.703 937.732,492.199  936.503,492.199 935.965,492.521 935.965,493.431 935.52,494.466 935.945,494.744 936.191,495.134 935.856,495.586  935.316,496.97 934.936,499.211 934.198,500.312 934.13,501.047 933.639,501.564 933.571,502.642 934.13,504.52 934.333,505.426  934.559,505.519 934.315,505.839 933.804,507.212 933.804,508.74 932.542,510.812 932.032,512.236 931.626,512.185  930.741,512.365 930.608,513.143 929.481,514.928 929.455,515.627 928.138,516.534 927.572,517.932 926.659,521.274  926.149,521.118 925.746,521.168 925.583,521.764 924.59,522.931 924.241,523.861 924.565,524.378 924.59,525.337  923.838,526.476 923.488,527.721 923.595,529.48 923.436,531.578 922.816,532.045 922.522,532.535 921.957,532.433  921.475,532.095 920.589,532.304 919.567,532.095 919.513,533.078 919.054,533.337 918.332,534.323 918.656,534.919  919.486,535.203 921.421,535.179 921.876,535.721 922.71,536.522 922.871,537.145 923.193,537.354 924.106,538.905  924.94,539.269 924.912,539.63 925.263,539.968 926.149,539.968 926.714,540.666 927.088,541.365 927.868,542.167  928.082,543.823 928.541,544.342 928.837,545.91 927.279,547.589 926.127,549.273 925.666,549.102 924.804,549.909  924.356,550.493 924,550.634 923.462,551.323 923.462,551.329 922.344,552.031 921.806,552.76 920.778,553.233 919.708,552.933  918.054,553.02 917.026,553.451 916.269,553.451 915.91,553.62 915.328,553.493 914.748,554.008 914.748,554.74 914.212,554.74  913.14,554.395 913.05,553.707 912.199,553.493 911.484,553.707 910.279,553.279 909.385,552.933 908.805,553.451  908.76,554.095 908.974,554.467 908.893,554.64 908.547,554.431 907.396,554.462 907.211,554.445 907.112,553.943  906.86,553.298 906.574,552.941 906.222,552.195 905.736,551.76 904.509,551.371 904.257,550.984 903.739,550.398  903.165,549.265 902.796,549.04 901.757,548.992 901.253,549.574 900.85,550.06 899.875,550.318 899.488,550.304 899.355,550.06  898.751,550.025 897.643,550.025 897.072,550.318 896.72,550.886 896.198,551.032 895.275,550.691 894.336,549.933  893.799,549.381 893.278,549.235 892.776,548.667 892.62,547.957 892.475,547.904 892.48,547.721 892.12,547.201 891.26,546.685  890.744,546.316 890.576,544.946 890.71,544.516 889.994,543.977 888.438,543.599 888.024,543.168 888.066,542.304  887.82,541.958 886.861,541.677 886.4,541.204 886.338,539.906 885.979,539.347 884.456,538.505 884.121,538.548 883.359,538.18  883.001,538.352 882.193,538.138 881.276,537.361 881.635,536.972 881.748,536.605 882.353,536.13 882.552,535.484  882.169,535.008 881.388,534.943 880.471,534.512 880.227,533.908 879.508,533.498 878.724,533.454 877.67,533.022  876.866,532.418 876.733,531.6 877.065,530.995 876.62,530.65 875.208,530.609 874.876,531.04 873.687,531.018 873.038,530.478  872.994,529.118 873.307,528.256 873.62,527.846 873.844,526.896 873.51,526.228 872.702,524.479 871.471,522.881  871.295,522.43 870.307,521.63 870.554,521.307 870.554,520.703 870.061,520.16 870.153,519.951 870.153,519.348  870.556,518.703 870.108,518.016 868.364,517.584 868.187,516.727 868.141,515.562 867.695,514.79 868.052,514.232  867.427,513.801 867.963,513.458 867.963,512.812 867.427,512.684 866.311,513.458 865.685,512.855 865.685,511.864  867.159,510.361 867.65,509.629 867.561,508.727 866.712,508.252 866.892,507.651 867.83,507.092 868.321,506.146  867.783,505.63 867.739,504.986 868.545,504.213 869.035,504.253 870.556,502.319 871.09,501.285 870.599,500.684  870.599,499.567 871.45,498.922 872.609,498.922 873.415,499.396 874.264,498.88 874.979,498.621 874.652,480.928  874.67,480.899 874.67,479.276 879.125,478.863 			",
"M928.837,545.91 928.541,544.342 928.082,543.823  927.868,542.167 927.088,541.365 926.714,540.666 926.149,539.968 925.263,539.968 924.912,539.63 924.94,539.269  924.106,538.905 923.193,537.354 922.871,537.145 922.71,536.522 921.876,535.721 921.421,535.179 919.486,535.203  918.656,534.919 918.332,534.323 919.054,533.337 919.513,533.078 919.567,532.095 920.589,532.304 921.475,532.095  921.957,532.433 922.522,532.535 922.816,532.045 923.436,531.578 923.595,529.48 923.488,527.721 923.838,526.476  924.59,525.337 924.565,524.378 924.241,523.861 924.59,522.931 925.583,521.764 925.746,521.168 926.149,521.118  926.659,521.274 927.572,517.932 928.138,516.534 929.455,515.627 929.481,514.928 930.608,513.143 930.741,512.365  931.626,512.185 932.032,512.236 932.542,510.812 933.804,508.74 933.804,507.212 934.315,505.839 934.559,505.519  935.18,505.771 936.167,505.816 936.503,505.275 937.242,505.231 938.494,502.687 939.01,503.009 939.277,503.463  941.115,504.109 941.987,504.109 942.838,503.398 943.734,503.291 944.383,503.851 944.718,503.505 945.525,503.526  947.002,504.672 947.137,504.413 947.898,504.262 948.838,504.455 949.666,505.189 950.428,505.34 952.062,506.741  952.418,507.435 953.764,507.627 953.896,507.93 954.795,508.017 955.105,508.426 956.203,509.116 957.521,510.367  958.376,510.539 959.271,511.77 959.383,512.634 959.673,513.174 960.344,513.192 961.619,514.8 960.727,515.051  960.435,516.128 960.031,516.928 960.211,518.092 959.762,518.891 959.673,519.709 958.934,520.725 959.383,521.243  961.128,521.177 962.224,520.486 963.479,520.271 964.309,520.736 964.017,521.222 964.299,522.918 965.104,525.328  966.356,525.931 966.177,527.222 966.803,528.601 968.504,528.943 969.666,529.893 983.353,533.938 989.349,533.853  974.804,547.731 971.961,547.654 969.074,547.762 968.178,548.302 967.373,548.365 966.209,548.948 965.83,549.854  964.922,550.362 963.7,551.011 962.326,551.204 960.834,551.905 960.435,552.544 960.266,552.593 959.091,552.574  957.346,552.855 956.562,552.423 956.004,551.451 955.329,551.129 953.159,551.407 952.668,551.71 951.95,551.666  950.965,552.033 950.518,552.615 949.287,554.45 948.368,554.514 947.695,554.514 946.867,554.233 945.614,554.406  944.604,553.978 942.95,553.978 942.213,553.737 941.451,552.896 940.309,552.143 938.361,550.352 937.488,549.834  935.228,549.961 934.063,549.681 933.012,550.025 932.115,549.854 931.31,548.989 931.31,546.294 930.594,546.186  929.675,546.358 929.182,545.54 			",
"M961.619,514.8 960.344,513.192 959.673,513.174  959.383,512.634 959.271,511.77 958.376,510.539 957.521,510.367 956.203,509.116 955.105,508.426 954.795,508.017  953.896,507.93 953.764,507.627 952.418,507.435 952.062,506.741 950.428,505.34 949.666,505.189 948.838,504.455  947.898,504.262 947.137,504.413 947.002,504.672 945.525,503.526 944.718,503.505 944.383,503.851 943.734,503.291  942.838,503.398 941.987,504.109 941.115,504.109 939.277,503.463 939.01,503.009 938.494,502.687 937.242,505.231  936.503,505.275 936.167,505.816 935.18,505.771 934.333,505.426 934.13,504.52 933.571,502.642 933.639,501.564 934.13,501.047  934.198,500.312 934.936,499.211 935.316,496.97 935.856,495.586 936.191,495.134 935.945,494.744 935.52,494.466  935.965,493.431 935.965,492.521 936.503,492.199 937.732,492.199 937.847,491.703 937.644,491.271 937.714,490.817  938.629,490.623 939.188,490.172 940.23,490.27 940.573,489.643 941.359,489.504 942.12,489.104 942.735,488.2 942.779,488.2  943.869,489.318 945.802,494.227 946.438,497.442 946.789,497.543 947.036,498.727 947.036,499.133 947.669,499.337  948.058,500.286 948.304,501.673 949.111,501.876 949.041,500.624 948.83,500.656 948.898,499.743 949.251,499.609  950.097,500.759 949.778,501.1 950.557,502.227 951.101,502.75 951.556,502.447 952.242,502.36 952.539,502.531 953.137,502.327  953.995,503.254 954.435,503.777 955.73,504.068 956.012,504.538 957.592,506.226 958.257,507.356 959.222,507.746  959.889,508.54 960.275,508.54 960.31,508.27 960.624,508.69 961.397,510.548 961.976,510.701 962.641,511.525 962.468,511.795  962.887,512.675 963.38,512.675 963.89,512.929 964.255,512.609 964.414,512.861 964.659,512.971 963.815,513.886  963.031,514.101 962.65,514.51 			",
"M964.309,520.736 963.479,520.271 962.224,520.486  961.128,521.177 959.383,521.243 958.934,520.725 959.673,519.709 959.762,518.891 960.211,518.092 960.031,516.928  960.435,516.128 960.727,515.051 962.65,514.51 963.031,514.101 963.815,513.886 964.659,512.971 964.678,512.979  964.659,513.315 965.728,514.33 966.027,514.33 965.887,514.75 966.046,516.133 965.572,516.32 964.712,517.25 964.065,517.264  963.59,517.94 962.589,517.94 963.098,518.548 963.414,518.615 964.136,518.328 965.343,518.312 965.5,518.629 964.418,520.553  			",
"M960.266,552.593 960.435,552.544 960.834,551.905  962.326,551.204 963.7,551.011 964.922,550.362 965.83,549.854 966.209,548.948 967.373,548.365 968.178,548.302  969.074,547.762 971.961,547.654 974.804,547.731 989.349,533.853 983.353,533.938 969.666,529.893 968.504,528.943  966.803,528.601 966.177,527.222 966.356,525.931 965.104,525.328 964.299,522.918 964.017,521.222 964.418,520.553  965.5,518.629 965.781,519.191 966.078,519.242 968.902,522.229 969.235,522.902 969.692,523.021 970.851,524.034  971.991,524.304 973.341,524.134 973.762,523.646 974.971,522.937 975.729,522.92 977.288,521.723 977.743,521.705  978.023,521.959 979.287,521.906 979.726,521.756 980.654,522.176 982.005,522.025 984.829,520.339 985.74,520.168  986.654,520.556 987.355,520.339 988.611,520.392 989.91,519.771 991.377,519.671 991.82,519.921 992.3,519.916 994.564,519.512  995.423,518.852 996.791,518.668 997.18,519.004 997.318,518.634 998.745,518.471 999.571,517.68 999.73,517.799  1000.087,517.15 999.975,517.041 1000.541,516.507 1000.936,516.557 1000.881,516.354 1001.438,516.731 1002.634,517.128  1003.166,517.086 1003.377,517.211 1002.897,517.899 1002.598,518.611 1002.547,519.333 1002.277,519.778 1002.503,520.174  1003.105,520.191 1003.149,520.458 1002.66,520.854 1002.243,521.784 1002.66,522.329 1002.81,523.087 1002.469,523.789  1003.096,523.705 1003.019,523.487 1003.316,523.566 1003.585,524.1 1003.287,524.251 1003.191,524.075 1002.598,524.084  1002.194,524.188 1001.51,525.3 1001.88,525.892 1001.703,526.955 1001.404,527.425 1001.476,528.592 999.871,530.753  998.773,532.98 998.108,533.774 997.738,533.705 996.704,534.785 996.634,535.289 997.093,535.932 996.497,536.439  993.857,541.282 993.749,542.702 992.062,544.971 991.994,545.716 988.826,549.844 988.509,550.794 987.104,552.181  984.642,555.058 979.47,559.46 977.254,561.287 975.706,561.561 974.403,562.44 972.751,563.657 969.582,566.873  968.879,567.076 966.279,569.853 965.82,570.022 965.434,570.699 964.484,570.97 963.497,571.882 963.074,572.831  959.24,576.918 959.186,577.129 955.913,574.259 956.004,556.541 960.322,552.593 			 ",
"M923.462,551.323l0.538-0.689l0.356-0.141l0.447-0.584 l0.862-0.808l0.461,0.172l1.152-1.685l1.902-2.049l0.493,0.818l0.919-0.173l0.716,0.108v2.695l0.806,0.864l0.896,0.172 l1.052-0.345l1.164,0.28l2.261-0.127l0.873,0.518l1.947,1.791l1.143,0.754l0.762,0.841l0.737,0.24h1.654l1.01,0.429l1.253-0.173 l0.828,0.28h0.673l0.919-0.063l1.23-1.835l0.447-0.582l0.985-0.367l0.718,0.044l0.491-0.303l2.17-0.278l0.675,0.322l0.559,0.972 l0.783,0.433l1.745-0.281l1.231,0.019l-4.318,3.948l-0.091,17.718l3.272,2.87l-0.068,0.275l-1.525,1.791l-0.367,0.12 l-0.548,0.573l0.28,0.437l-1.594,0.541l-0.842,1.13h-1.368l-0.578,0.188l-0.089,0.319l-0.663,0.744l-0.038,0.54l0.298,0.22 l-0.77,1.148l-0.757,0.894v1.013l-0.684,1.419l-1.682,2.363l-0.985,0.386l-0.405-0.011l-5.778-3.927l-0.401-0.473l-0.181-0.56 l0.224-0.429l-0.938-1.507l-17.07-9.591l-1.308,0.07l1.219-4.37l0.181-1.247l0.895-0.815l0.534-1.03l0.758-0.69l0.358-0.815 l0.492-0.474l-0.045-0.388h1.607l0.401-1.075v-0.646l1.074-1.203l0.133-0.946l-0.312-0.947l-0.667-0.557l0.401-0.56l-0.538-0.388 l-0.625-0.258l-0.582-1.376l-1.071-0.989v-0.901l-0.312-0.989l-0.627-0.131l0.089-0.774l-0.445-0.259l-0.311-1.158l-0.449-0.518 l-0.044,0.03V551.323L923.462,551.323z M911.369,575.235l1.763-0.006l1.8-0.095l-3.447,0.09L911.369,575.235z",
"M922.567,570.434 922.748,569.187 923.643,568.371  924.177,567.341 924.935,566.65 925.293,565.835 925.785,565.361 925.74,564.974 927.348,564.974 927.749,563.898  927.749,563.253 928.823,562.05 928.956,561.104 928.644,560.156 927.977,559.6 928.378,559.04 927.84,558.652 927.215,558.395  926.633,557.019 925.562,556.029 925.562,555.128 925.249,554.139 924.622,554.008 924.711,553.233 924.266,552.975  923.955,551.816 923.506,551.299 922.344,552.031 921.806,552.76 920.778,553.233 919.708,552.933 918.054,553.02  917.026,553.451 916.269,553.451 915.91,553.62 915.328,553.493 914.748,554.008 914.748,554.74 914.212,554.74 913.14,554.395  913.05,553.707 912.199,553.493 911.484,553.707 910.279,553.279 909.385,552.933 908.805,553.451 908.76,554.095  908.974,554.467 908.893,554.64 908.893,554.64 908.657,555.464 908.188,556.063 908.188,557.311 907.918,558.848  907.815,559.98 908.337,560.338 908.792,560.92 909.145,561.663 909.061,562.164 906.671,565.222 905.196,566.8 904.795,567.478  902.983,570.607 902.647,571.156 902.617,572.317 902.482,573.963 901.878,575.576 902.011,576.604 901.779,576.812  902.03,576.911 902.79,576.761 903.552,576.179 904.065,576.416 904.444,576.761 905.115,576.761 905.452,576.461  905.476,575.833 906.237,575.703 906.372,575.9 906.641,575.552 907.063,575.64 907.469,575.251 911.369,575.235  911.484,575.225 914.932,575.135 921.349,574.804 			",
"M870.061,520.16 870.554,520.703 870.554,521.307  870.307,521.63 871.295,522.43 871.471,522.881 872.702,524.479 873.51,526.228 873.844,526.896 873.62,527.846 873.307,528.256  872.994,529.118 873.038,530.478 873.687,531.018 874.876,531.04 875.208,530.609 876.62,530.65 877.065,530.995 876.733,531.6  876.866,532.418 877.67,533.022 878.724,533.454 879.508,533.498 880.227,533.908 880.471,534.512 881.388,534.943  882.169,535.008 882.552,535.484 882.353,536.13 881.748,536.605 881.635,536.972 881.276,537.361 882.193,538.138  883.001,538.352 883.359,538.18 884.121,538.548 884.456,538.505 885.979,539.347 886.338,539.906 886.4,541.204  886.861,541.677 887.82,541.958 888.066,542.304 888.024,543.168 888.438,543.599 889.994,543.977 890.71,544.516  890.576,544.946 890.744,546.316 891.26,546.685 892.12,547.201 892.48,547.721 892.475,547.904 892.304,547.843  891.447,547.358 890.392,547.261 888.947,547.89 888.679,547.745 886.93,547.729 886.275,547.309 885.588,547.196  885.137,546.952 884.599,547.001 883.605,546.857 883.168,546.45 882.467,546.5 882.415,546.84 882.616,547.146 882.012,548.004  881.474,548.021 880.837,548.151 879.713,548.199 879.141,548.586 878.738,548.569 878.536,548.055 878.2,547.988  878.098,547.664 877.48,547.617 875.547,548.425 874.827,548.7 874.473,549.121 872.477,549.347 871.872,549.591 871.352,549.04  870.478,548.861 869.538,548.845 868.882,549.656 868.145,550.383 868.229,550.886 868.715,551.273 868.547,551.63  867.457,551.855 867.019,551.612 865.91,551.405 865.072,551.095 864.468,551.078 863.881,551.337 863.24,551.226  862.098,551.159 861.161,550.644 860.121,550.708 859.852,550.449 858.614,549.449 857.911,549.193 856.567,548.096  856.033,548.032 855.328,547.514 854.859,547.514 854.724,547.936 853.92,547.838 853.253,548.483 852.683,548.483  852.345,548.772 852.244,549.386 851.811,549.901 851.811,550.385 851.439,550.708 850.804,550.738 850.804,551.257  851.541,552.192 851.24,552.579 851.005,553.223 850.954,553.946 850.406,554.082 849.959,554.256 849.108,553.803  848.793,553.437 848.168,553.437 847.406,553.437 846.915,553.76 846.174,553.696 844.183,554.474 843.802,554.946  842.996,555.119 841.831,556.197 839.75,559.532 839.638,559.436 839.438,559.131 839.458,558.422 839.325,557.514  837.845,556.414 837.288,555.896 836.595,554.579 835.453,552.961 835.162,552.011 834.423,551.129 833.081,550.502  832.632,550.18 832.632,548.365 832.52,547.372 832.137,546.209 832.34,545.108 831.961,543.922 831.824,542.972  832.251,542.368 832.765,542.173 833.682,540.942 834.197,539.843 835.048,538.311 835.473,537.402 836.146,537.147  836.996,536.003 836.982,535.715 837.49,536.248 837.667,537.152 838.562,537.152 839.321,536.979 840.572,536.936  841.154,535.904 841.154,535.044 841.688,534.529 842.182,534.958 842.492,535.99 842.896,536.379 843.743,536.248  844.95,535.39 846.246,534.872 847.41,534.098 850.179,533.496 851.386,533.496 852.01,532.809 853.35,531.948 853.173,531.347  852.635,531.347 851.877,530.399 851.968,529.67 852.591,529.28 853.308,529.452 854.38,529.324 855.139,529.626  856.346,529.798 857.642,529.626 859.384,529.411 860.278,528.765 861.038,528.378 861.262,527.734 861.125,527.089  861.305,526.314 861.976,525.886 861.933,525.198 862.602,524.467 862.96,524.68 863.448,524.639 864.3,523.348 864.834,523.132  864.792,522.53 864.969,521.928 866.132,521.282 866.979,520.723 868.096,520.723 868.678,521.068 869.885,520.553 			",
"M874.67,480.899 874.67,479.276 879.125,478.863  877.124,434.589 876.631,432.312 876.051,431.106 876.588,429.688 877.257,428.139 877.257,427.151 876.723,425.946  877.124,424.053 877.425,423.31 877.003,422.062 876.334,421.352 875.492,421.216 874.646,421.352 871.517,420.979  870.883,420.437 869.651,420.336 867.999,419.895 867.646,419.387 867.999,419.251 867.963,418.71 865.992,417.66  864.975,417.66 863.354,417.255 862.969,417.052 862.477,417.457 861.489,416.984 861.139,416.984 859.696,417.696  857.41,417.899 855.439,418.812 854.314,419.861 854.033,421.08 853.435,421.52 853.294,423.823 854.138,425.075 854.7,426.87  854.314,427.884 853.104,429.065 852.943,429.487 851.365,430.77 850.4,431.125 848.367,430.348 846.576,428.931  845.176,427.833 843.022,426.768 839.573,425.379 838.063,425.21 837.57,425.482 835.777,425.482 834.229,424.737  832.785,422.062 832.819,420.673 831.659,419.185 828.671,418.779 827.088,417.797 824.519,417.73 823.076,417.187  819.806,417.762 817.52,417.289 816.639,416.476 815.571,416.275 815.416,416.658 815.727,418.378 816.083,418.722  815.056,420.227 812.374,421.861 812.374,422.462 811.527,423.496 810.455,423.453 809.783,423.925 809.74,424.398 809.561,425  810.019,426.41 810.131,427.488 809.863,427.769 809.897,428.158 809.617,428.514 809.102,429.354 808.383,429.787  808.103,430.023 807.532,430.023 807.536,430.035 807.135,430.402 807.153,431.911 807.603,432.214 808.185,433.292  808.185,436.228 808.32,437.845 808.251,438.32 808.453,440.607 809.035,441.924 808.59,444.383 808.433,444.793  808.878,445.872 809.058,447.425 808.612,448.05 807.559,448.784 807.199,449.302 806.841,449.562 807.514,450.296  808.612,451.654 809.482,453.424 809.776,453.662 810.064,454.806 809.886,455.366 809.998,456.618 810.559,457.243  810.76,458.042 811.251,458.516 813.133,458.516 814.857,458.646 815.664,459.163 816.29,460.135 817.207,461.969  817.698,462.401 818.251,463.071 818.833,463.599 826.986,465.551 827.748,466.326 837.163,462.562 874.648,480.902  874.652,480.928 			 ",
"M807.532,430.023h0.57l0.28-0.236l0.719-0.432l0.516-0.841 l0.28-0.355l-0.034-0.389l0.268-0.281l-0.112-1.078L809.561,425l0.18-0.601l0.043-0.473l0.672-0.472l1.072,0.042l0.847-1.033 v-0.601l2.682-1.635l1.027-1.505l-0.356-0.344l-0.311-1.72l0.155-0.383l-0.55-0.105l-1.372-0.812l-0.142-0.474l-0.034-0.643 l-0.703-0.373l-0.28,0.203l0.068,0.338l-0.353,0.272l-0.632-0.272l-0.21-0.676l-0.669,0.134l-1.479-0.982l-0.739-1.285 l0.459-1.321l2.319-1.557l1.338-1.287l0.353-0.406l-0.388-0.508l0.492-0.507l-0.176-0.643l-0.351-0.238l0.034-1.455l-1.371-0.509 l-1.125-1.454l0.21-1.186l1.126-0.746l0.07-0.812l0.913-1.32v-0.879l-0.423-0.305l-1.65,1.455l-0.564,0.576l-0.459-0.271 l-0.701-1.524l-0.459-0.167l0.108-0.78l-0.599-0.507l-1.02,0.203l-0.038,0.576l-0.491-0.644l-1.231,0.237l-1.688,0.812 l-1.196,1.015l-0.002-0.003l-0.149,0.631l0.18,0.518l-0.18,1.358l0.022,1.423l-0.827,2.051l0.289,1.209l0.604,0.668l0.066,0.281 l-0.379,0.345l-0.401,0.647l0.625,0.603l-0.447,0.475l-0.292,1.576l-0.513,0.367l-0.428,0.561l-0.693,0.193l-1.05,1.208 l-0.553,2.158l0.313,0.195l0.561,1.164l-0.203,0.518l0.582,0.842l0.472,0.15l1.319,1.102l0.336,1.1l1.076,0.431l0.449,0.453 l0.737,0.173l1.163,1.23L807.532,430.023L807.532,430.023z M811.645,413.125l0.139-0.338h0.845l0.353,0.406l-0.599,0.473 L811.645,413.125z",
"M818.833,463.599 818.251,463.071 817.698,462.401  817.207,461.969 816.29,460.135 815.664,459.163 814.857,458.646 813.133,458.516 811.251,458.516 810.76,458.042  810.559,457.243 809.998,456.618 809.886,455.366 810.064,454.806 809.776,453.662 809.482,453.424 808.612,451.654  807.514,450.296 806.841,449.562 807.199,449.302 807.559,448.784 808.612,448.05 809.058,447.425 808.878,445.872  808.433,444.793 808.59,444.383 809.035,441.924 808.453,440.607 808.251,438.32 808.32,437.845 808.185,436.228  808.185,433.292 807.603,432.214 807.153,431.911 807.135,430.402 807.536,430.035 804.647,421.08 803.484,419.85  802.747,419.677 802.298,419.224 801.222,418.793 800.886,417.693 799.567,416.591 799.095,416.441 798.513,415.599  798.716,415.081 798.155,413.917 797.842,413.722 798.396,411.563 799.446,410.355 800.139,410.162 800.566,409.601  801.079,409.234 801.371,407.659 801.818,407.184 801.193,406.581 801.595,405.933 801.974,405.588 801.907,405.307  801.303,404.639 801.014,403.43 801.841,401.378 801.818,399.956 801.998,398.597 801.818,398.079 801.968,397.448  801.726,397.181 800.424,397.418 799.721,397.282 797.75,397.825 796.728,396.977 795.464,396.538 795.426,397.011  794.619,397.755 793.036,397.588 792.928,396.875 792.259,396.401 791.171,396.639 791.1,397.249 790.15,397.418  789.728,398.094 789.128,397.857 788.391,397.857 787.442,398.569 786.386,398.569 785.787,397.654 784.523,397.588  783.958,397.418 782.729,397.62 781.743,397.484 781.285,397.588 780.443,397.315 779.844,397.451 779.388,398.365  778.4,398.365 777.522,398.026 776.325,399.144 775.621,399.11 774.531,398.534 773.548,398.873 771.753,398.941  770.732,398.804 768.481,400.464 767.176,400.641 766.528,400.657 765.422,401.316 765.371,402.008 764.79,402.733  764.281,402.733 763.983,402.463 763.317,402.48 762.827,402.818 762.564,403.172 761.247,403.257 760.142,403.797  759.564,404.304 759.406,404.844 758.511,405.771 757.092,406.21 755.842,406.266 756.151,406.731 756.397,407.269  756.933,407.918 757.047,408.737 757.203,409.061 757.278,410.507 757.257,412.255 757.436,412.966 757.814,416.269  758.487,417.584 758.712,418.47 759.428,418.664 759.898,419.073 760.413,419.095 760.815,419.396 760.301,420.626  760.39,420.907 759.764,421.771 754.278,421.771 753.167,421.991 752.051,423.71 751.067,424.528 750.622,425.559  750.666,426.98 750.264,427.839 747.046,429.99 742.087,432.741 738.294,434.89 736.46,435.278 734.691,435.321 733.885,435.536  732.475,435.536 730.013,436.011 728.648,436.918 727.752,438.061 725.602,439.529 725.531,443.343 725.516,443.364  725.489,444.613 725.508,444.648 725.508,444.61 742.38,455.509 742.369,455.528 772.838,474.96 773.374,477.112  774.357,477.973 776.059,477.886 777.399,478.317 778.239,479.312 779.355,479.612 780.246,480.386 780.204,481.077  779.757,482.453 780.07,483.141 781.186,483.527 783.331,483.27 785.058,482.739 785.073,482.753 785.073,482.753  792.176,481.119 797.941,476.046 818.823,463.595 			",
"M725.531,443.343 725.602,439.529 727.752,438.061  728.648,436.918 730.013,436.011 732.475,435.536 733.885,435.536 734.691,435.321 736.46,435.278 738.294,434.89  742.087,432.741 747.046,429.99 750.264,427.839 750.666,426.98 750.622,425.559 751.067,424.528 752.051,423.71  753.167,421.991 754.278,421.771 759.764,421.771 760.39,420.907 760.301,420.626 760.815,419.396 760.413,419.095  759.898,419.073 759.428,418.664 758.712,418.47 758.487,417.584 757.814,416.269 757.436,412.966 757.257,412.255  757.278,410.507 757.203,409.061 757.047,408.737 756.933,407.918 756.397,407.269 756.151,406.731 755.842,406.266  755.178,406.295 752.547,406.093 751.969,405.518 751.712,404.667 751.384,404.564 751.357,404.573 750.531,405.435  749.04,405.722 747.55,405.333 746.777,405.283 745.795,405.771 744.391,405.976 743.375,405.771 742.094,404.454  741.586,404.084 741.375,403.375 741.375,402.87 741.55,402.615 741.27,402.278 740.375,402.582 739.983,402.924  739.246,402.856 738.365,403.804 738.17,406.234 737.173,407.5 736.96,409.34 736.345,410.504 734.225,412.393 733.733,412.428  732.716,413.12 730.998,413.677 729.717,414.993 729.226,415.011 727.384,416.193 726.245,416.547 725.595,417.509  723.474,418.976 724.21,420.531 724.085,421.611 722.22,423.236 721.022,425.606 720.954,426.587 721.727,428.077  721.128,429.735 721.515,430.108 722.043,430.751 721.727,432.038 718.806,435.219 718.489,436.472 717.154,437.861  715.676,437.995 712.441,440.805 707.902,441.618 706.784,443.123 725.516,443.343 725.516,443.364 			",
"M725.489,444.613 725.516,443.343 706.784,443.123  704.982,445.546 704.982,447.304 704.138,447.34 700.903,448.964 700.585,449.844 699.317,450.555 699.706,451.706  696.857,455.7 696.681,456.987 694.5,458.95 693.832,459.288 692.672,461.728 692.776,462.404 690.912,464.773 690.84,465.213  691.405,465.62 690.596,465.925 689.116,468.528 688.555,468.666 687.887,469.344 687.956,470.46 687.464,471.409  687.558,472.889 706.185,472.721 706.005,464.542 706.596,463.328 707.604,462.639 708.746,462.486 710.38,462.486  710.584,450.673 725.328,450.93 725.508,444.648 			",
"M687.558,472.889 706.185,472.721 706.005,464.542  706.596,463.328 707.604,462.639 708.746,462.486 710.38,462.486 710.584,450.673 725.328,450.93 725.508,444.61 742.38,455.509  742.369,455.528 742.329,455.502 736.693,455.589 740.271,495.106 741.703,495.967 740.18,500.016 723.632,500.082  723.141,499.868 722.604,499.181 722.024,499.181 721.219,500.082 720.681,499.522 720.638,498.232 719.565,497.847  717.198,498.835 716.081,500.943 715.589,500.643 714.783,499.181 714.649,498.061 713.533,498.019 712.104,498.493  712.104,500.169 712.148,500.771 711.656,502.018 710.226,502.104 709.119,502.929 709.109,502.921 708.886,502.231  707.635,501.502 706.83,501.202 706.562,500.255 705.533,500.082 705.533,499.053 704.551,498.232 704.374,497.117  703.97,496.771 703.211,496.857 702.897,496.644 702.095,496.944 701.468,496.686 701.468,496.257 700.486,495.009  699.279,494.75 697.088,494.062 696.285,494.062 693.872,494.967 691.369,495.354 690.43,496.211 689.76,496.211 688.97,496.797  689.224,494.97 689.962,492.193 691.086,490.671 691.405,487.453 690.489,482.817 689.153,480.852 689.681,480.48  690.314,480.48 690.632,478.958 690.278,478.011 690.876,477.436 689.539,475.505 688.977,475.945 688.591,475.742  688.204,474.659 687.183,475.775 687.112,474.049 687.57,473.068 			",
"M709.119,502.929 710.226,502.104 711.656,502.018  712.148,500.771 712.104,500.169 712.104,498.493 713.533,498.019 714.649,498.061 714.783,499.181 715.589,500.643  716.081,500.943 717.198,498.835 719.565,497.847 720.638,498.232 720.681,499.522 721.219,500.082 722.024,499.181  722.604,499.181 723.141,499.868 723.632,500.082 740.18,500.016 741.703,495.967 740.271,495.106 736.693,455.589  742.329,455.502 772.838,474.96 773.374,477.112 774.357,477.973 776.059,477.886 777.399,478.317 778.239,479.312  779.355,479.612 780.246,480.386 780.204,481.077 779.757,482.453 780.07,483.141 781.186,483.527 783.331,483.27  785.058,482.739 785.073,482.753 784.851,491.396 784.537,495.438 783.776,495.869 783.644,497.418 783.331,498.406  781.008,499.654 779.623,500.342 778.239,500.428 776.895,501.285 775.958,501.285 773.946,501.285 772.74,501.846  771.666,501.76 768.452,502.062 767.378,501.803 767.242,502.062 766.884,501.714 766.055,501.65 764.741,501.244  763.58,501.372 761.345,501.718 759.916,502.492 758.754,503.436 755.178,505.328 752.63,506.964 752.229,507.866  749.817,508.554 749.281,508.426 747.896,508.467 747.716,509.072 747.091,509.287 746.019,511.048 745.974,511.694  744.99,512.984 743.65,515.348 742.488,516.208 741.641,516.854 741.952,517.671 742.087,518.96 741.192,519.132  741.148,520.035 741.55,520.723 741.279,521.803 740.703,522.188 739.851,523.432 738.377,523.003 738.02,522.488  738.289,522.188 737.038,522.015 735.516,522.316 735.475,522.702 735.071,523.046 733.195,522.918 732.079,522.401  731.497,522.443 730.14,523.182 730.111,522.574 729.664,522.101 728.458,522.056 728.458,521.542 728.101,520.981  728.101,520.125 727.519,520.166 727.028,520.768 726.223,520.854 726.67,519.692 727.519,518.573 727.519,518.058  726.492,517.802 725.955,517.456 726.27,516.208 725.775,515.262 724.748,514.446 724.659,513.973 723.811,514.232  723.408,514.574 722.157,514.059 721.263,514.101 720.369,515.348 719.743,515.393 718.806,516.036 717.645,516.036  716.616,515.348 715.991,515.092 714.963,515.521 714.427,515.262 714.421,515.221 714.649,514.66 714.694,513.886  713.487,513.24 713.443,512.552 713.712,512.037 713.756,511.522 713.13,510.834 712.906,510.23 712.371,509.802  711.879,509.888 711.299,509.415 710.808,508.298 709.69,507.265 709.557,506.704 710.047,504.899 709.735,504.253  709.735,503.436 			",
"M741.279,521.803 741.55,520.723 741.148,520.035  741.192,519.132 742.087,518.96 741.952,517.671 741.641,516.854 742.488,516.208 743.65,515.348 744.99,512.984  745.974,511.694 746.019,511.048 747.091,509.287 747.716,509.072 747.896,508.467 749.281,508.426 749.817,508.554  752.229,507.866 752.63,506.964 755.178,505.328 758.754,503.436 759.916,502.492 761.345,501.718 763.58,501.372  764.741,501.244 766.055,501.65 766.884,501.714 767.242,502.062 767.065,502.405 766.887,503.652 766.305,504.555  766.305,505.847 770.729,508.685 770.819,510.49 772.427,511.694 774.439,510.662 774.931,510.92 775.064,511.478  775.422,511.822 775.51,512.684 774.974,513.371 776.001,514.66 776.313,514.627 776.313,515.348 775.286,516.51  774.482,516.555 773.009,517.283 772.517,517.069 771.579,517.498 771.666,518.316 770.908,518.832 771.084,519.778  769.881,520.035 769.693,520.452 764.868,519.279 764.509,519.345 764.512,519.353 764.16,519.264 763.088,519.734  762.016,519.778 760.272,520.035 757.859,520.035 757.458,520.207 754.017,520.207 752.409,520.294 752.275,521.282  752.588,522.702 753.079,523.09 753.615,524.337 753.651,525.676 752.646,525.515 751.973,525.061 751.368,525.042  750.487,525.626 749.37,525.841 747.896,525.111 747.404,524.424 746.419,523.992 745.706,523.992 745.17,523.649 744.5,523.649  742.758,522.745 741.415,521.714 			",
"M688.97,496.797 689.76,496.211 690.43,496.211  691.369,495.354 693.872,494.967 696.285,494.062 697.088,494.062 699.279,494.75 700.486,495.009 701.468,496.257  701.468,496.686 702.095,496.944 702.897,496.644 703.211,496.857 703.97,496.771 704.374,497.117 704.551,498.232  705.533,499.053 705.533,500.082 706.562,500.255 706.83,501.202 707.635,501.502 708.886,502.231 709.109,502.921  709.735,503.436 709.735,504.253 710.047,504.899 709.557,506.704 709.69,507.265 710.808,508.298 711.299,509.415  711.879,509.888 712.371,509.802 712.906,510.23 713.13,510.834 713.756,511.522 713.712,512.037 713.443,512.552  713.487,513.24 714.694,513.886 714.649,514.66 714.421,515.221 714.338,514.533 713.354,514.446 712.906,513.973  712.014,513.931 711.254,514.359 709.78,513.759 708.349,513.844 707.545,513.24 705.668,512.337 702.719,512.296  701.826,512.469 701.832,512.519 700.664,512.21 696.463,512.123 694.765,512.812 693.918,513.886 690.787,513.627  689.269,514.359 688.134,514.009 688.168,513.148 687.815,512.846 688.591,513.048 689.083,513.218 690.104,512.609  688.521,512.064 687.464,512.609 687.218,512.269 687.673,511.795 687.673,510.781 688.151,510.324 690.994,510.324  691.799,509.44 692.672,509.225 693.68,508.576 694.329,508.727 694.597,508.922 695.292,508.381 695.762,508.212  696.858,508.898 697.844,508.922 699.03,509.312 700.552,509.916 701.583,509.957 701.896,509.375 701.538,508.812  701.134,508.88 699.097,507.67 698.246,507.67 696.792,506.808 695.604,506.764 694.822,506.526 693.545,507.045  691.845,508.275 691.015,508.275 690.523,508.554 688.399,508.516 688.273,508.14 688.907,507.698 687.745,506.988  688.132,506.92 688.132,506.005 687.253,505.87 686.233,504.146 684.65,502.926 687.57,500.354 688.767,498.254 			",
"M687.673,510.781 688.151,510.324 690.994,510.324  691.799,509.44 692.672,509.225 693.68,508.576 694.329,508.727 694.597,508.922 695.292,508.381 695.762,508.212  696.858,508.898 697.844,508.922 699.03,509.312 700.552,509.916 701.583,509.957 701.896,509.375 701.538,508.812  701.134,508.88 699.097,507.67 698.246,507.67 696.792,506.808 695.604,506.764 694.822,506.526 693.545,507.045  691.845,508.275 691.015,508.275 690.523,508.554 688.399,508.516 688.625,509.189 689.821,509.763 690.876,509.491  690.173,510.136 688.907,510.169 687.956,509.018 687.147,509.799 687.673,510.441 			",
"M688.134,514.009 689.269,514.359 690.787,513.627  693.918,513.886 694.765,512.812 696.463,512.123 700.664,512.21 701.832,512.519 702.002,513.886 701.781,514.574  701.826,516.08 702.317,516.596 702.271,517.411 701.514,517.972 699.904,518.272 698.652,518.96 697.715,519.178  697.159,520.25 696.049,520.562 695.837,520.291 695.907,519.549 693.937,519.752 695.026,518.601 694.5,518.564  694.782,518.158 694.359,517.722 693.584,517.617 693.304,517.245 695.626,517.211 696.012,516.94 694.745,516.264  693.62,516.502 692.424,516.908 691.896,516.805 691.649,516.331 690.701,516.264 689.855,515.452 690.701,514.842  690.068,514.774 688.521,514.705 688.132,514.028 			",
"M697.159,520.25 697.715,519.178 698.652,518.96  699.904,518.272 701.514,517.972 702.271,517.411 702.317,516.596 701.826,516.08 701.781,514.574 702.002,513.886  701.826,512.469 702.719,512.296 705.668,512.337 707.545,513.24 708.349,513.844 709.78,513.759 711.254,514.359  712.014,513.931 712.906,513.973 713.354,514.446 714.338,514.533 714.427,515.262 714.963,515.521 715.991,515.092  716.616,515.348 717.645,516.036 718.806,516.036 719.743,515.393 720.369,515.348 721.263,514.101 722.157,514.059  723.408,514.574 723.811,514.232 724.659,513.973 724.748,514.446 725.775,515.262 726.27,516.208 725.955,517.456  726.492,517.802 727.519,518.058 727.519,518.573 726.67,519.692 726.223,520.854 727.028,520.768 727.519,520.166  728.101,520.125 728.101,520.981 728.458,521.542 728.458,522.056 729.664,522.101 730.111,522.574 730.14,523.182  729.753,523.391 728.011,524.036 728.011,524.724 728.368,525.111 728.548,527.174 728.279,527.82 728.458,529.411  728.95,529.756 729.529,530.659 729.44,531.26 728.681,531.174 728.101,531.474 728.101,532.076 728.993,533.022  729.306,533.409 729.172,534.357 727.92,536.979 727.117,537.238 726.894,537.754 727.207,538.614 726.447,540.29  725.775,540.979 725.907,541.396 718.781,543.657 717.047,542.531 716.344,542.499 715.149,540.875 714.374,540.535  714.727,539.893 714.583,539.817 716.57,538.527 716.883,532.594 717.063,531.861 716.526,531.646 716.616,530.873  717.242,530.613 717.242,529.927 716.349,529.11 716.483,528.378 715.365,526.4 714.829,525.626 714.204,524.467  710.272,524.467 709.064,524.938 708.349,525.713 707.053,526.788 707.053,527.39 705.625,528.122 704.887,528.166  704.208,527.638 702.942,526.993 702.59,525.641 701.605,525.606 701.183,525.201 701.219,524.491 701.57,524.15  700.797,523.814 700.375,524.388 699.67,524.118 698.615,524.05 697.561,522.66 697.983,521.003 697.244,520.225 			 ",
"M707.861,537.527l-0.075-0.612l-0.378-0.423l-0.495-0.111 l-0.193,0.34l0.118,0.396l0.628,0.381L707.861,537.527L707.861,537.527z M704.887,528.166l0.738-0.044l1.428-0.732v-0.602 l1.295-1.075l0.715-0.774l1.208-0.472h3.932l0.625,1.159l0.536,0.774l1.118,1.978l-0.135,0.732l0.894,0.816v0.687l-0.626,0.26 l-0.09,0.773l0.538,0.215l-0.18,0.732l-0.313,5.934l-1.987,1.29l-0.56-0.299h-1.759l-2.489-1.238l-1.053-0.253l0.264-0.541 l-0.668-0.725l-0.578-0.539l0.386-0.777l-0.035-0.203l-0.931,0.337l-1.035-1.08v-1.012l-0.476-1.414l-0.879-0.138l-0.352-0.709 l0.634-1.15l-0.669-0.339l0.069-0.677l0.494-0.846L704.887,528.166z",
"M712.825,539.519 712.996,538.828 713.487,537.668  714.604,537.152 715.589,536.075 715.454,535.39 715.901,534.184 716.526,533.883 716.526,533.237 716.839,532.334  718.047,531.819 718.448,531.948 720.414,531.347 721.309,531.734 721.889,532.766 722.782,533.237 722.694,535.001  722.515,535.946 723.721,537.279 724.258,537.107 725.643,536.119 726.133,536.248 726.85,536.894 727.06,537.367  726.894,537.754 727.207,538.614 726.447,540.29 725.775,540.979 726.044,541.839 726.804,542.096 727.163,541.881  727.966,541.881 728.502,542.526 729.082,542.398 729.664,542.654 729.977,543.561 730.646,543.988 731.272,544.03  731.541,544.936 730.917,545.409 731.229,545.966 730.827,546.525 730.602,547.3 730.917,547.988 730.514,549.021  730.959,549.75 730.993,550.809 726.404,549.201 722.853,546.662 721.867,546.562 718.983,543.785 717.047,542.531  716.344,542.499 715.149,540.875 714.374,540.535 714.727,539.893 714.023,539.519 			",
"M730.993,550.809 730.959,549.75 730.514,549.021  730.917,547.988 730.602,547.3 730.827,546.525 731.229,545.966 730.917,545.409 731.541,544.936 731.272,544.03  730.646,543.988 729.977,543.561 729.664,542.654 729.082,542.398 728.502,542.526 727.966,541.881 727.163,541.881  726.804,542.096 726.044,541.839 725.775,540.979 726.447,540.29 727.207,538.614 726.894,537.754 727.117,537.238  727.92,536.979 729.172,534.357 729.306,533.409 728.993,533.022 728.101,532.076 728.101,531.474 728.681,531.174  729.44,531.26 729.529,530.659 728.95,529.756 728.458,529.411 728.279,527.82 728.548,527.174 728.368,525.111 728.011,524.724  728.011,524.036 729.753,523.391 731.497,522.443 732.079,522.401 733.195,522.918 735.071,523.046 735.475,522.702  735.516,522.316 737.038,522.015 738.289,522.188 738.02,522.488 738.377,523.003 739.851,523.432 740.703,522.188  741.415,521.714 742.758,522.745 744.5,523.649 745.17,523.649 745.706,523.992 746.419,523.992 747.404,524.424  747.896,525.111 749.37,525.841 750.487,525.626 751.368,525.042 751.973,525.061 752.646,525.515 753.651,525.676  753.66,526.014 753.302,527.435 753.704,528.378 753.704,529.152 754.375,529.756 754.776,530.873 754.375,531.861  754.375,532.766 753.437,533.323 751.961,535.432 752.051,536.333 751.693,537.022 751.648,538.054 751.201,538.656  751.256,540.663 750.854,540.921 750.831,541.31 751.368,541.87 752.04,543.554 752.152,544.632 753.227,544.936  753.674,545.667 753.607,546.94 752.937,547.049 751.996,547.113 751.811,547.434 751.135,546.258 750.255,546.462  750.044,547.578 747.899,546.595 745.577,547.309 739.42,547.341 737.663,547.578 737.627,548.018 734.426,549.168  734.073,549.608 733.055,549.608 731.435,550.961 			",
"M751.811,547.434 751.996,547.113 752.937,547.049  753.607,546.94 753.674,545.667 753.227,544.936 752.152,544.632 752.04,543.554 751.368,541.87 750.831,541.31 750.854,540.921  751.256,540.663 751.201,538.656 751.648,538.054 751.693,537.022 752.051,536.333 751.961,535.432 753.437,533.323  754.375,532.766 754.375,531.861 754.776,530.873 754.375,529.756 753.704,529.152 753.704,528.378 753.302,527.435  753.66,526.014 753.615,524.337 753.079,523.09 752.588,522.702 752.275,521.282 752.409,520.294 754.017,520.207  757.458,520.207 757.859,520.035 760.272,520.035 762.016,519.778 763.088,519.734 764.16,519.264 764.512,519.353  764.889,520.553 765.293,520.962 765.405,521.63 766.412,522.517 766.813,523.075 767.801,523.767 767.531,524.997  767.575,526.616 768.046,526.96 768.448,527.092 768.516,528.622 768.16,529.29 768.09,529.939 768.516,530.282 768.652,531.146  768.269,531.709 768.628,532.354 768.516,533.886 768.831,534.555 768.987,537.188 768.496,538.116 768.425,538.698  768.179,539.906 768.496,540.964 768.874,542.15 769.365,542.346 769.861,542.819 770.37,543.565 767.844,543.889  765.628,544.904 763.2,546.865 760.386,547.105 756.376,548.965 754.546,548.188 752.048,547.848 			",
"M769.693,520.452 764.868,519.279 764.509,519.345  764.889,520.553 765.293,520.962 765.405,521.63 766.412,522.517 766.813,523.075 767.801,523.767 767.531,524.997  767.575,526.616 768.046,526.96 768.448,527.092 768.516,528.622 768.16,529.29 768.09,529.939 768.516,530.282 768.652,531.146  768.269,531.709 768.628,532.354 768.516,533.886 768.831,534.555 768.987,537.188 768.496,538.116 768.425,538.698  768.179,539.906 768.496,540.964 768.874,542.15 769.365,542.346 769.861,542.819 770.37,543.565 770.764,543.516  773.261,542.025 773.741,542.087 773.9,541.238 773.275,540.204 773.231,538.956 772.919,537.84 773.053,532.463  773.099,531.691 773.588,531.087 773.588,530.013 773.231,529.324 773.275,528.077 772.874,526.187 771.936,523.82  771.444,523.563 770.863,522.918 769.702,522.443 769.433,521.026 			",
"M776.313,514.627 776.313,515.348 775.286,516.51  774.482,516.555 773.009,517.283 772.517,517.069 771.579,517.498 771.666,518.316 770.908,518.832 771.084,519.778  769.881,520.035 769.433,521.026 769.702,522.443 770.863,522.918 771.444,523.563 771.936,523.82 772.874,526.187  773.275,528.077 773.231,529.324 773.588,530.013 773.588,531.087 773.099,531.691 773.053,532.463 772.919,537.84  773.231,538.956 773.275,540.204 773.9,541.238 773.741,542.087 775.408,542.296 778.608,541.246 778.8,541.285 778.612,540.404  778.813,538.138 778.681,537.402 778.724,536.756 778.5,534.856 778.681,534.189 778.635,533.671 778.455,533.368  778.569,533.022 778.455,532.269 778.389,531.945 778.478,530.974 778.569,530.327 778.5,529.508 778.86,528.988  779.598,528.709 780.136,528.622 780.582,528.277 780.987,527.456 781.635,526.356 781.881,525.71 782.53,525.146  783.157,525.192 783.403,524.779 782.42,523.744 782.486,523.335 782.844,522.775 783.853,522.711 784.031,522.194  783.559,520.595 783.54,519.494 782.261,518.522 782.062,517.812 782.261,516.882 782.371,516.8 781.366,515.521  780.293,515.307 779.442,514.187 777.922,512.984 777.521,513.801 777.657,514.318 776.806,514.574 			 ",
"M831.896,464.667l5.267-2.104l37.485,18.34l0.33,17.719 l-0.715,0.259l-0.849,0.516l-0.806-0.474h-1.159l-0.852,0.646v1.116l0.491,0.602l-0.534,1.034l-1.521,1.934l-0.49-0.04 l-0.806,0.773l0.044,0.644l0.538,0.516l-0.491,0.946l-0.938,0.56l-0.18,0.601l0.849,0.475l0.09,0.902l-0.491,0.732l-1.475,1.503 v0.991l0.626,0.603l1.116-0.774l0.536,0.128v0.646l-0.536,0.343l0.625,0.432l-0.356,0.558l0.445,0.771l0.046,1.165l0.178,0.857 l1.744,0.432l0.447,0.688l-0.402,0.645v0.604l-0.269,0.602l-1.207,0.516l-0.582-0.346h-1.116l-0.848,0.56l-1.163,0.646 l-0.177,0.603l0.042,0.602l-0.534,0.216l-0.852,1.291l-0.488,0.041l-0.358-0.213l-0.669,0.731l0.043,0.688l-0.671,0.429 l-0.18,0.774l0.137,0.646l-0.224,0.644l-0.76,0.387l-0.895,0.646l-1.742,0.215l-1.296,0.172l-1.207-0.172l-0.759-0.302 l-1.072,0.128l-0.717-0.172l-0.623,0.39l-0.091,0.729l0.758,0.947h0.538l0.177,0.602l-1.34,0.86l-0.624,0.688h-1.207 l-2.769,0.602l-1.164,0.774l-1.296,0.518l-1.207,0.858l-0.848,0.131l-0.403-0.389l-0.311-1.032l-0.493-0.429l-0.534,0.515v0.86 l-0.582,1.031l-1.251,0.044l-0.76,0.173h-0.895l-0.177-0.904l-0.508-0.533l-0.03-0.793l-0.807-1.187l-0.692-1.145l-0.718-0.582 l-1.636-1.746l-1.743-1.426l-0.785-0.281l-0.136-0.495l-0.469-0.323l-0.18-0.495v-0.758l0.269-0.429l0.048-0.8l0.715-0.044 l0.782-0.02l0.47,0.173l0.828-0.131l0.694,0.108l0.604-0.087l1.006,0.109l0.516,0.278l0.629,0.108l0.514-0.346l-0.381-0.15 l-1.229-0.99l-0.292-0.972l-0.715-0.324l-0.83-1.145l-0.045-0.863l0.559-0.562l0.358-1.165l-0.514-0.582l0.022-0.39l0.222-0.451 l0.025-0.604l-0.539-1.229l-0.198-0.777l-0.36-0.433l-0.246-1.295l-1.052-0.949l-2.301-1.118l-0.05-0.049l-0.673-1.078 l-1.209-1.51l-0.615-0.225l-0.348-5.644l0.112-0.56h0.538l0.493-0.173l0.224-0.496l7.735-7.6l-0.178-6.544l1.253-8.435 l0.714-0.69l0.089-1.636l-3.131-3.616l0.27-0.515l0.091-1.206l-2.238-6.201L831.896,464.667L831.896,464.667z M822.131,510.779 l-0.336,0.646l-0.693,0.15l-0.405-0.289L822.131,510.779z",
"M782.371,516.8 781.366,515.521 780.293,515.307  779.442,514.187 777.922,512.984 777.521,513.801 777.657,514.318 776.806,514.574 776.001,514.66 774.974,513.371  775.51,512.684 775.422,511.822 775.064,511.478 774.931,510.92 774.439,510.662 772.427,511.694 770.819,510.49  770.729,508.685 766.305,505.847 766.305,504.555 766.887,503.652 767.065,502.405 767.378,501.803 768.452,502.062  771.666,501.76 772.74,501.846 773.946,501.285 775.958,501.285 776.895,501.285 778.239,500.428 779.623,500.342  781.008,499.654 783.331,498.406 783.644,497.418 783.776,495.869 784.537,495.438 784.851,491.396 785.073,482.753  792.176,481.119 797.941,476.046 818.823,463.595 826.986,465.551 827.748,466.326 831.896,464.667 832.423,465.23  834.661,471.432 834.57,472.638 834.301,473.152 837.432,476.769 837.343,478.404 836.629,479.095 835.376,487.529  835.554,494.073 827.818,501.673 827.595,502.169 827.102,502.342 826.563,502.342 826.451,502.901 826.799,508.545  825.936,508.23 825.401,509.052 825.244,509.612 824.797,509.808 824.102,509.525 823.497,509.676 823.228,510.216  822.244,510.562 822.131,510.779 820.696,511.286 820.163,510.907 818.841,510.862 817.342,510.175 815.281,509.936  814.275,510.411 811.836,510.261 810.849,510.52 809.662,512.115 808.52,512.848 807.669,512.656 805.791,511.984  804.828,511.856 803.329,511.058 802.387,510.712 802.387,510.367 801.557,509.763 800.797,509.721 800.619,509.916  799.298,510.151 798.603,510.476 797.954,510.539 797.44,511.143 796.969,511.316 796.051,510.775 795.024,509.33  794.596,508.835 793.21,508.34 792.449,508.212 791.888,507.908 790.612,507.713 790.097,507.541 789.335,507.585  788.933,507.93 787.523,507.908 787.143,507.93 786.403,507.885 785.463,508.08 785.105,508.295 784.59,508.49 783.547,509.29  783.411,509.753 783.591,510.144 783.524,510.399 783.347,510.745 783.547,511.556 783.872,511.924 783.919,512.547  783.068,512.569 782.107,513.519 782.283,513.991 781.971,514.468 782.53,515.741 783.043,515.763 783.091,516.236 			",
"M829.346,511.406 829.296,511.357 828.623,510.279  827.414,508.77 825.936,508.23 825.401,509.052 825.244,509.612 824.797,509.808 824.102,509.525 823.497,509.676  823.228,510.216 822.244,510.562 821.795,511.425 821.102,511.575 820.163,510.907 818.841,510.862 817.342,510.175  815.281,509.936 814.275,510.411 811.836,510.261 810.849,510.52 809.662,512.115 808.52,512.848 807.669,512.656  805.791,511.984 804.828,511.856 803.329,511.058 802.387,510.712 802.387,510.367 801.557,509.763 800.797,509.721  800.619,509.916 799.298,510.151 798.603,510.476 797.954,510.539 797.44,511.143 796.969,511.316 796.051,510.775  795.024,509.33 794.596,508.835 793.21,508.34 792.449,508.212 791.888,507.908 790.612,507.713 790.097,507.541  789.335,507.585 788.933,507.93 787.523,507.908 787.143,507.93 786.403,507.885 785.463,508.08 785.105,508.295 784.59,508.49  783.547,509.29 783.411,509.753 783.591,510.144 783.524,510.399 783.347,510.745 783.547,511.556 783.872,511.924  783.919,512.547 783.068,512.569 782.107,513.519 782.283,513.991 781.971,514.468 782.53,515.741 783.043,515.763  783.091,516.236 782.261,516.882 782.062,517.812 782.261,518.522 783.54,519.494 783.559,520.595 784.031,522.194  783.853,522.711 782.844,522.775 782.486,523.335 782.42,523.744 783.403,524.779 783.157,525.192 782.53,525.146  781.881,525.71 781.635,526.356 780.987,527.456 780.582,528.277 780.136,528.622 779.598,528.709 778.86,528.988 778.5,529.508  778.569,530.327 778.478,530.974 778.389,531.945 778.455,532.269 778.569,533.022 778.455,533.368 778.635,533.671  778.681,534.189 778.5,534.856 778.724,536.756 778.681,537.402 778.813,538.138 778.612,540.404 778.8,541.285 780.614,541.652  782.092,541.079 785.503,542.806 787.402,544.598 788.564,546.766 788.528,548.188 789.161,548.49 789.688,550.048  790.885,551.098 792.572,551.537 797.075,551.301 797.99,550.761 798.657,551.032 800.807,550.285 801.508,550.591  802.703,550.354 803.164,549.102 804.006,549.948 804.359,549.745 804.396,549.761 804.422,549.193 805.63,547.86  806.116,546.74 805.94,545.665 805.895,544.72 806.434,544.375 806.434,543.729 807.191,543.042 807.996,542.526  808.398,542.054 809.783,541.064 809.694,540.163 809.916,539.688 810.945,539.645 811.393,539.088 811.616,539.302  812.869,539.688 813.358,539.645 814.252,540.075 814.743,540.979 815.549,541.539 816.083,541.752 817.066,541.193  817.692,540.204 817.692,539.817 818.051,539.302 818.765,539.088 819.301,538.269 819.258,537.623 819.614,536.548  821.043,535.173 821.223,534.442 820.999,533.797 821.444,533.109 822.651,531.861 823.594,531.26 823.679,530.312  824.039,529.67 823.859,528.294 824.53,527.69 825.778,527.348 826.584,526.359 826.765,525.326 826.765,524.164 826.63,523.477  827.166,522.616 827.924,521.112 828.419,520.723 828.552,520.339 829.446,519.647 829.98,519.692 830.607,519.004  831.681,518.531 831.77,517.972 831.423,516.796 831.379,516.301 831.064,515.568 830.236,515.351 829.834,514.555  829.878,513.192 829.765,512.506 829.34,511.402 			",
"M794.378,570.434 794.244,569.607 794.78,569.042  795.603,569.53 795.267,570.176 794.746,570.499 			",
"M803.039,555.888 803.105,555.208 803.71,555.157  804.064,554.122 805.054,553.153 805.374,553.459 805.476,554.737 804.802,556.482 803.912,556.354 			",
"M804.396,549.761 804.422,549.193 805.63,547.86  806.116,546.74 805.94,545.665 805.895,544.72 806.434,544.375 806.434,543.729 807.191,543.042 807.996,542.526  808.398,542.054 809.783,541.064 809.694,540.163 809.916,539.688 810.945,539.645 811.393,539.088 811.616,539.302  812.869,539.688 813.358,539.645 814.252,540.075 814.743,540.979 815.549,541.539 816.083,541.752 817.066,541.193  817.692,540.204 817.692,539.817 818.051,539.302 818.765,539.088 819.301,538.269 819.258,537.623 819.614,536.548  821.043,535.173 821.223,534.442 820.999,533.797 821.444,533.109 822.651,531.861 823.594,531.26 823.679,530.312  824.039,529.67 823.859,528.294 824.53,527.69 825.778,527.348 826.584,526.359 826.765,525.326 826.765,524.164 826.63,523.477  827.166,522.616 827.924,521.112 828.419,520.723 828.552,520.339 829.446,519.647 829.98,519.692 830.607,519.004  831.681,518.531 831.77,517.972 831.423,516.796 831.379,516.301 831.064,515.568 830.236,515.351 829.834,514.555  829.878,513.192 829.765,512.506 829.34,511.402 831.646,512.524 832.698,513.474 832.944,514.769 833.305,515.201  833.503,515.979 834.042,517.208 834.017,517.812 833.795,518.264 833.772,518.653 834.286,519.235 833.928,520.4  833.369,520.962 833.414,521.825 834.244,522.97 834.959,523.294 835.251,524.266 836.48,525.256 836.861,525.406  836.348,525.752 835.719,525.644 835.203,525.365 834.197,525.256 833.593,525.343 832.898,525.234 832.07,525.365  831.601,525.192 830.818,525.212 830.104,525.256 830.056,526.056 829.787,526.484 829.787,527.242 829.967,527.737  830.436,528.061 830.571,528.556 831.356,528.837 833.1,530.263 834.735,532.009 835.453,532.591 836.146,533.735  836.952,534.922 836.996,536.003 836.146,537.147 835.473,537.402 835.048,538.311 834.197,539.843 833.682,540.942  832.765,542.173 832.251,542.368 831.824,542.972 831.961,543.922 832.34,545.108 832.137,546.209 832.52,547.372  832.632,548.365 832.632,550.18 833.081,550.502 834.423,551.129 835.162,552.011 835.453,552.961 836.595,554.579  837.288,555.896 837.845,556.414 839.325,557.514 839.458,558.422 839.438,559.131 839.638,559.436 839.75,559.532  839.638,559.714 839.348,560.341 838.854,561.075 838.654,561.421 839.079,562.153 838.967,562.585 838.427,562.671  838.294,562.412 837.937,562.479 837.534,562.347 837.151,562.175 836.146,562.175 835.743,562.304 835.072,561.83  834.735,561.744 834.603,562.047 834.131,562.13 833.818,561.767 833.257,561.615 832.812,561.744 832.296,561.226  831.913,561.226 831.691,561.462 831.176,561.247 825.266,561.14 824.962,560.786 824.581,560.808 824.344,560.937  823.183,560.849 823.08,560.645 822.421,560.645 821.672,560.797 821.245,560.645 819.79,560.571 819.399,560.688  818.102,560.633 817.614,560.864 817.159,560.839 816.752,561.018 816.603,561.211 816.603,561.203 811.074,561.226  810.805,561.03 810.244,561.03 809.642,561.145 810.375,560.44 809.706,559.764 810.337,558.207 810.163,556.479  809.317,555.331 809.317,554.078 809.634,553.501 808.931,552.418 807.559,552.994 807.136,552.521 806.327,552.418  805.764,549.678 805.027,550.048 			",
"M816.603,561.211 816.752,561.018 817.159,560.839  817.614,560.864 818.102,560.633 819.399,560.688 819.79,560.571 821.245,560.645 821.672,560.797 822.421,560.645  823.08,560.645 823.183,560.849 824.344,560.937 824.581,560.808 824.962,560.786 825.266,561.14 825.222,561.14  824.998,562.047 825.311,562.907 825.199,564.03 825.468,564.742 825.288,565.306 825.737,565.541 826.475,565.151  827.124,565.324 828.153,565.065 829.16,564.701 830.638,564.721 831.153,565.065 831.242,566.405 830.907,566.965  831.201,567.438 831.064,568.282 830.213,568.455 829.226,568.984 829.171,569.599 829.406,569.87 829.628,570.496  829.34,570.537 829.103,570.796 828.578,571.003 828.578,571.326 828.891,571.693 829.068,572.069 829.616,572.32  829.785,572.706 830.49,573.278 830.714,573.807 831.188,574.263 831.142,575.166 830.696,576.973 829.535,580.24  829.759,581.058 829.713,581.874 829.268,581.874 828.999,581.271 828.061,580.886 827.077,580.928 826.541,581.271  825.959,581.143 824.843,581.445 824.217,580.713 823.457,578.908 822.562,578.819 822.117,579.337 822.296,580.412  822.074,581.143 820.417,581.228 819.703,581.228 819.481,581.746 819.032,582.089 818.142,581.572 817.156,581.701  816.709,582.133 817.066,582.775 816.934,583.637 817.648,583.422 818.365,583.25 818.811,583.595 819.614,584.152  819.703,586.391 819.659,587.162 818.365,586.174 818.005,586.174 817.737,586.646 816.889,586.688 816.443,586.906  816.353,587.508 815.678,588.424 815.473,588.234 814.666,587.932 814.523,587.185 812.837,586.407 812.414,585.424  810.301,583.801 809.037,582.516 809.388,582.278 808.191,581.328 807.697,580.279 806.998,579.602 806.998,578.248  806.152,577.198 806.152,576.488 805.624,576.081 804.639,574.119 804.709,573.646 805.834,574.017 806.714,573.306  806.926,570.835 807.068,569.583 807.593,570.089 809.634,569.616 808.191,569.279 807.274,567.856 808.262,567.72  808.32,566.659 808.878,566.77 809.46,566.384 809.975,566.274 810.244,566.469 816.603,566.533 			",
"M808.32,566.659 808.878,566.77 809.46,566.384  809.975,566.274 810.244,566.469 816.603,566.533 816.603,561.203 811.074,561.226 810.805,561.03 810.244,561.03  809.642,561.145 809.458,561.32 809.811,562.1 808.332,563.692 807.172,565.823 808.332,566.399 			",
"M815.678,588.424 816.353,587.508 816.443,586.906  816.889,586.688 817.737,586.646 818.005,586.174 818.365,586.174 819.659,587.162 819.703,586.391 819.614,584.152  818.811,583.595 818.365,583.25 817.648,583.422 816.934,583.637 817.066,582.775 816.709,582.133 817.156,581.701  818.142,581.572 819.032,582.089 819.481,581.746 819.703,581.228 820.417,581.228 822.074,581.143 822.296,580.412  822.117,579.337 822.562,578.819 823.457,578.908 824.217,580.713 824.843,581.445 825.959,581.143 826.541,581.271  827.077,580.928 828.061,580.886 828.999,581.271 829.268,581.874 829.713,581.874 829.759,581.058 829.535,580.24  830.696,576.973 831.142,575.166 831.188,574.263 830.714,573.807 830.49,573.278 829.785,572.706 829.616,572.32  829.068,572.069 828.891,571.693 828.578,571.326 828.578,571.003 829.103,570.796 829.34,570.537 829.628,570.496  829.406,569.87 829.171,569.599 829.226,568.984 830.213,568.455 831.064,568.282 831.201,567.438 830.907,566.965  831.242,566.405 831.153,565.065 830.638,564.721 829.16,564.701 828.153,565.065 827.124,565.324 826.475,565.151  825.737,565.541 825.288,565.306 825.468,564.742 825.199,564.03 825.311,562.907 824.998,562.047 825.222,561.14  831.176,561.247 831.691,561.462 831.913,561.226 832.296,561.226 832.812,561.744 833.257,561.615 833.818,561.767  834.131,562.13 834.603,562.047 834.735,561.744 835.072,561.83 835.743,562.304 836.146,562.175 837.151,562.175  837.534,562.347 837.937,562.479 838.294,562.412 838.427,562.671 838.967,562.585 839.079,562.153 838.654,561.421  838.854,561.075 839.348,560.341 839.638,559.714 841.831,556.197 842.996,555.119 843.802,554.946 844.183,554.474  846.174,553.696 846.915,553.76 847.406,553.437 848.168,553.437 848.793,553.437 849.108,553.803 849.959,554.256  850.406,554.082 850.954,553.946 850.94,554.191 851.375,555.062 851.408,556.868 850.503,557.319 850.3,558.126 848.291,560.61  848.695,562.158 848.426,563.125 848.359,564.124 847.687,564.963 847.554,566.285 847.687,566.834 847.421,568.187  847.62,568.446 847.485,569.705 846.816,569.994 846.415,571.479 846.381,572.994 844.906,575.338 844.001,575.581  843.193,576.196 842.605,576.001 841.516,576.73 840.627,577.797 840.61,578.77 839.196,580.192 838.679,581.146 838.88,582.411  839.149,582.766 838.975,585.218 838.672,586.443 838.705,587.248 837.937,588.443 837.097,588.635 836.359,589.12  836.058,589.797 834.147,591.57 833.477,592.54 832.372,592.991 831.272,592.378 831.006,591.618 830.772,591.408  831.307,590.42 831.391,589.983 829.929,590.453 828.974,591.245 828.353,591.068 827.698,591.133 827.682,592.105  827.144,592.703 826.27,592.688 826.304,592.283 826.034,591.812 825.345,592.136 824.776,592.089 824.638,592.211  824.617,591.476 824.168,590.894 823.675,590.483 823.273,590.483 822.488,591.11 821.818,591.239 821.549,592.038  820.812,592.428 820.499,592.428 820.052,593.483 819.591,593.737 819.061,593.177 819.095,592.297 818.357,591.518  818.323,590.706 816.917,589.86 816.599,589.284 			",
"M824.638,592.211 824.617,591.476 824.168,590.894  823.675,590.483 823.273,590.483 822.488,591.11 821.818,591.239 821.549,592.038 820.812,592.428 820.499,592.428  820.052,593.483 819.591,593.737 820.152,594.329 820.471,595.613 819.939,596.563 820.189,597.09 821.049,596.538  821.922,596.407 822.458,595.905 822.373,594.289 822.744,593.82 823.734,593.01 			",
"M906.372,575.9 906.641,575.552 907.063,575.64  907.469,575.251 913.132,575.229 922.656,574.733 939.727,584.324 940.664,585.831 940.44,586.26 940.621,586.819  941.022,587.292 946.801,591.219 946.629,591.214 946.857,591.467 946.943,592.157 946.629,592.599 945.63,595.569  944.856,597.443 944.909,598.47 946.225,599.567 947.206,600.632 947.82,600.548 948.437,602.202 948.173,602.726  947.786,602.606 947.224,602.962 946.943,604.043 947.03,605.697 947.733,606.354 947.612,607.402 946.978,607.907  947.137,608.902 947.646,610.085 947.383,610.152 947.663,610.693 947.858,611.57 948.398,612.025 947.945,612.75  948.385,613.257 948.855,614.592 948.698,615.269 950.347,616.803 951.556,616.972 952.561,617.788 952.561,618.228  952.682,618.3 952.517,618.373 952.115,618.824 951.243,618.598 950.707,619.309 950.004,619.856 949.033,619.985  948.396,620.631 947.322,620.759 946.986,621.146 946.251,621.372 945.58,621.112 943.839,621.631 943.401,621.985  942.563,622.082 941.929,621.631 941.29,621.759 940.454,621.5 940.117,621.792 940.352,622.308 940.017,622.984  938.711,623.082 937.738,623.436 937.168,623.082 936.563,623.048 936.497,622.759 935.963,622.533 935.595,622.823  935.091,622.951 934.084,623.63 932.709,624.018 932.845,623.63 932.377,623.146 931.772,623.082 931.202,622.694 930.6,622.533  930.565,622.146 929.898,622.274 929.695,622.598 928.924,622.759 924.465,622.823 923.562,625.992 923.633,618.467  923.397,616.767 921.838,615.118 921.332,614.646 920.822,614.344 920.621,614.043 920.284,613.971 919.975,613.736  919.454,613.664 919.168,613.842 918.916,613.55 918.354,613.469 918.076,612.968 917.633,612.911 917.417,613.074  917.397,613.019 917.026,613.019 916.19,612.146 915.887,611.438 915.284,611.342 914.883,610.954 914.379,610.954  912.27,610.244 911.396,610.214 910.829,609.696 910.759,609.343 910.09,608.891 909.622,608.891 908.915,608.632  908.248,608.632 906.695,607.91 905.568,604.377 902.28,600.021 901.175,594.73 900.57,590.946 902.905,590.991 904.471,590.604  905.276,589.484 906.481,588.195 907.018,587.767 907.642,587.12 908.403,586.391 908.492,585.744 908.224,584.411  907.642,584.324 907.463,583.765 906.794,583.422 906.794,582.82 906.525,582.434 906.525,582 906.707,582.199 907.223,582.307  907.716,582.027 908.095,581.66 908.254,581.078 908.519,580.451 908.387,579.565 908.004,578.271 907.602,577.67  907.492,577.129 906.906,576.675 			",
"M901.779,576.812 902.03,576.911 902.79,576.761  903.552,576.179 904.065,576.416 904.444,576.761 905.115,576.761 905.452,576.461 905.476,575.833 906.237,575.703  906.906,576.675 907.492,577.129 907.602,577.67 908.004,578.271 908.387,579.565 908.519,580.451 908.254,581.078  908.095,581.66 907.716,582.027 907.223,582.307 906.707,582.199 906.525,582 906.525,581.746 905.991,581.445 905.768,580.754  905.229,580.671 904.827,580.325 904.426,580.325 904.515,581.143 903.933,582.52 903.933,582.948 902.994,583.25  902.549,582.82 902.236,582.904 901.968,583.208 901.164,582.904 900.808,582.175 900.314,582.002 899.512,582.002  899.1,582.103 899.196,581.412 899.901,578.702 900.773,577.702 			",
"M900.57,590.946 902.905,590.991 904.471,590.604  905.276,589.484 906.481,588.195 907.018,587.767 907.642,587.12 908.403,586.391 908.492,585.744 908.224,584.411  907.642,584.324 907.463,583.765 906.794,583.422 906.794,582.82 906.525,582.434 906.525,581.746 905.991,581.445  905.768,580.754 905.229,580.671 904.827,580.325 904.426,580.325 904.515,581.143 903.933,582.52 903.933,582.948  902.994,583.25 902.549,582.82 902.236,582.904 901.968,583.208 901.164,582.904 900.808,582.175 900.314,582.002  899.512,582.002 899.1,582.103 899.032,582.606 899.633,583.539 899.733,584.539 899.733,585.7 			",
"M820.189,597.09 821.049,596.538 821.922,596.407  822.458,595.905 822.373,594.289 822.744,593.82 823.734,593.01 824.776,592.089 825.345,592.136 826.034,591.812  826.304,592.283 826.27,592.688 827.144,592.703 827.682,592.105 827.698,591.133 828.353,591.068 828.974,591.245  829.929,590.453 831.391,589.983 831.307,590.42 830.772,591.408 831.006,591.618 831.272,592.378 832.372,592.991  833.477,592.54 834.147,591.57 836.058,589.797 836.359,589.12 837.097,588.635 837.937,588.443 838.705,587.248  838.672,586.443 838.975,585.218 839.149,582.766 838.88,582.411 838.679,581.146 839.196,580.192 840.61,578.77  840.627,577.797 841.516,576.73 842.605,576.001 843.193,576.196 844.001,575.581 844.906,575.338 846.381,572.994  846.415,571.479 846.816,569.994 847.485,569.705 847.62,568.446 847.421,568.187 847.687,566.834 847.554,566.285  847.687,564.963 848.359,564.124 848.426,563.125 848.695,562.158 848.291,560.61 850.3,558.126 850.503,557.319  851.408,556.868 851.375,555.062 850.94,554.191 851.005,553.223 851.24,552.579 851.541,552.192 850.804,551.257  850.804,550.738 851.439,550.708 851.811,550.385 851.811,549.901 852.244,549.386 852.345,548.772 852.683,548.483  853.253,548.483 853.92,547.838 854.724,547.936 854.859,547.514 855.328,547.514 856.033,548.032 856.567,548.096  857.911,549.193 858.614,549.449 859.852,550.449 860.121,550.708 861.161,550.644 862.098,551.159 863.24,551.226  863.881,551.337 864.468,551.078 865.072,551.095 865.91,551.405 867.019,551.612 867.457,551.855 868.547,551.63  868.715,551.273 868.229,550.886 868.145,550.383 868.882,549.656 869.538,548.845 870.478,548.861 871.352,549.04  871.872,549.591 872.477,549.347 874.473,549.121 874.827,548.7 875.547,548.425 877.48,547.617 878.098,547.664 878.2,547.988  878.536,548.055 878.738,548.569 879.141,548.586 879.713,548.199 880.837,548.151 881.474,548.021 882.012,548.004  882.616,547.146 882.415,546.84 882.467,546.5 883.168,546.45 883.605,546.857 884.599,547.001 885.137,546.952 885.588,547.196  886.275,547.309 886.93,547.729 888.679,547.745 888.947,547.89 890.392,547.261 891.447,547.358 892.304,547.843  892.62,547.957 892.776,548.667 893.278,549.235 893.799,549.381 894.336,549.933 895.275,550.691 896.198,551.032  896.72,550.886 897.072,550.318 897.643,550.025 898.751,550.025 899.355,550.06 899.488,550.304 899.875,550.318 900.85,550.06  901.253,549.574 901.757,548.992 902.796,549.04 903.165,549.265 903.739,550.398 904.257,550.984 904.509,551.371  905.736,551.76 906.222,552.195 906.574,552.941 906.86,553.298 907.112,553.943 907.211,554.445 907.396,554.462  908.547,554.431 908.893,554.64 908.657,555.464 908.188,556.063 908.188,557.311 907.918,558.848 907.815,559.98  908.337,560.338 908.792,560.92 909.145,561.663 909.061,562.164 906.671,565.222 905.196,566.8 904.795,567.478  902.983,570.607 902.647,571.156 902.617,572.317 902.482,573.963 901.878,575.576 902.011,576.604 900.773,577.702  899.901,578.702 899.196,581.412 899.032,582.606 899.633,583.539 899.733,584.539 899.733,585.7 901.175,594.73 902.28,600.021  905.568,604.377 906.695,607.91 906.034,607.599 898.45,609.37 896.551,612.868 896.803,613.853 897.324,614.323  897.777,614.565 897.727,615.084 897.425,615.376 897.508,615.989 897.425,616.591 897.52,617.275 897.387,618.212  897.02,618.403 897.188,618.695 896.885,619.146 895.98,619.951 895.88,620.564 895.946,623.048 896.013,624.209 896.617,624.66  897.856,625.953 898.126,626.66 898.56,627.208 900.472,627.242 900.707,627.11 900.438,626.693 900.336,626.178  901.344,626.017 901.944,626.241 902.18,630.981 901.944,631.369 901.175,631.241 901.109,630.981 900.773,630.917  900.07,631.177 899.297,631.369 898.729,631.369 897.725,630.5 896.818,629.467 895.98,628.757 895.011,627.501 893.97,626.854  892.261,626.307 891.121,625.693 891.021,625.209 890.316,624.404 890.321,623.127 889.936,623.012 889.517,623.224  888.912,623.32 888.476,624.502 888.427,624.938 887.015,625.393 886.275,625.393 886.192,625.133 885.101,624.892  884.194,624.747 883.104,624.114 882.65,624.064 881.742,623.66 881.392,623.644 881.458,623.32 881.357,622.688  881.123,622.269 881.071,621.381 880.787,621.3 879.578,621.656 879.276,621.945 878.57,621.965 877.932,622.248  877.437,622.694 877.128,622.581 876.959,622.305 876.906,621.488 876.699,621.204 875.941,620.979 875.405,620.987  875.031,620.691 875.026,620.597 874.169,620.695 873.439,620.979 872.633,621.353 872.198,621.514 871.704,621.626  871.271,621.544 870.074,621.509 869.572,621.347 868.914,620.893 868.463,620.893 868.211,621.058 867.81,621.186  867.523,621.491 867.002,621.556 866.865,621.232 866.883,620.362 867.218,620.086 867.171,619.856 867.439,619.177  866.892,618.76 866.722,617.857 866.958,617.565 866.958,617.084 866.354,616.534 866.354,616.05 866.521,615.471  866.454,614.922 866.089,614.855 865.783,614.311 865.484,614.115 865.484,613.63 865.08,613.082 865.046,612.631  864.812,612.244 865.181,611.342 865.046,609.729 864.846,609.18 864.947,608.856 865.181,608.534 865.181,607.892  864.679,607.182 864.851,606.427 865.255,605.697 865.255,605.051 865.306,604.371 865.205,603.819 859.785,603.438  859.652,602.987 859.952,602.506 859.988,601.988 858.578,601.859 858.548,602.279 854.022,602.344 853.888,603.634  853.552,604.343 853.15,604.535 853.283,605.407 853.319,606.633 849.8,606.857 849.195,607.182 847.586,607.083  847.086,606.922 846.212,607.083 844.973,607.15 844.471,606.891 844.203,605.279 843.599,604.438 843.197,603.859  842.793,603.569 842.763,603.051 842.595,602.664 842.325,601.602 841.821,600.796 841.821,600.149 842.057,599.729  841.958,599.184 841.588,598.698 841.431,598.175 841.546,597.983 841.546,597.344 836.694,597.312 833.41,597.312  831.802,597.44 830.329,597.376 829.592,597.312 828.216,597.376 827.144,597.41 826.205,597.41 825.568,597.346  824.865,597.278 824.128,597.44 823.315,597.655 823.029,597.799 822.661,597.799 822.51,598.011 822.419,598.056  822.333,598.053 822.333,598.053 821.769,597.646 820.433,597.613 			",
"M917.417,613.074 917.633,612.911 918.076,612.968  918.354,613.469 918.916,613.55 919.168,613.842 919.454,613.664 919.975,613.736 920.284,613.971 920.621,614.043  920.822,614.344 921.332,614.646 921.838,615.118 923.397,616.767 923.633,618.467 923.562,625.992 923.329,626.822  924.099,630.95 925.575,631.692 926.242,632.304 926.578,632.755 927.048,632.853 928.625,634.368 928.924,635.078  929.995,636.468 930.398,637.562 930.698,638.175 930.733,638.659 930.131,638.852 929.929,639.305 929.426,639.369  929.262,639.723 929.494,640.046 929.394,640.462 929.862,640.982 929.83,642.627 929.526,643.334 928.89,643.853  927.953,644.108 927.483,645.304 927.348,646.142 926.879,646.915 927.215,647.979 927.016,648.85 926.109,649.043  925.875,648.4 926.176,647.852 925.575,647.043 925.035,646.626 924.435,646.303 923.661,645.593 922.859,644.656  922.759,643.947 922.355,642.948 922.255,642.207 922.859,641.399 923.095,640.369 924.064,639.369 924.165,638.337  924.165,637.111 923.731,636.4 922.49,636.111 921.518,636.144 921.116,636.562 920.546,636.562 920.178,636.757  919.408,636.303 919.338,635.758 918.937,635.304 918.771,634.886 918.467,634.401 917.232,634.688 917.136,634.262  916.734,633.404 916.094,632.645 915.944,632.222 916.43,631.979 917.136,631.188 917.136,630.556 917.286,630.085  917.151,629.715 917.119,629.082 917.318,628.727 918.346,628 919.001,627.707 919.251,627.253 919.688,627.142 919.623,626.799  919.114,626.493 919.049,626.072 918.848,625.49 919.084,625.279 919.269,624.811 918.848,624.114 919.217,623.533  919.049,622.998 918.965,622.318 918.664,621.541 918.815,620.795 919.855,619.763 919.855,619.503 920.091,619.194  920.041,618.256 919.772,617.594 918.984,617.042 918.882,616.604 919.4,615.471 919.437,615.148 918.864,614.97  918.209,614.599 917.993,613.968 917.673,613.725 			",
"M875.031,620.691 875.405,620.987 875.941,620.979  876.699,621.204 876.906,621.488 876.959,622.305 877.128,622.581 877.437,622.694 877.932,622.248 878.57,621.965  879.276,621.945 879.578,621.656 880.787,621.3 881.071,621.381 881.123,622.269 881.357,622.688 881.458,623.32  881.392,623.644 881.742,623.66 882.65,624.064 883.104,624.114 884.194,624.747 885.101,624.892 886.192,625.133  886.275,625.393 887.015,625.393 888.427,624.938 888.476,624.502 888.912,623.32 889.517,623.224 889.936,623.012  890.321,623.127 890.316,624.404 891.021,625.209 891.121,625.693 892.261,626.307 893.97,626.854 895.011,627.501  895.98,628.757 896.818,629.467 897.725,630.5 898.729,631.369 899.297,631.369 900.07,631.177 900.773,630.917 901.109,630.981  901.175,631.241 901.944,631.369 902.18,630.981 901.944,626.241 901.344,626.017 900.336,626.178 900.438,626.693  900.707,627.11 900.472,627.242 898.56,627.208 898.126,626.66 897.856,625.953 896.617,624.66 896.013,624.209 895.946,623.048  895.88,620.564 895.98,619.951 896.885,619.146 897.188,618.695 897.02,618.403 897.387,618.212 897.52,617.275 897.425,616.591  897.508,615.989 897.425,615.376 897.727,615.084 897.777,614.565 897.324,614.323 896.803,613.853 896.551,612.868  898.45,609.37 906.034,607.599 908.248,608.632 908.915,608.632 909.622,608.891 910.09,608.891 910.759,609.343  910.829,609.696 911.396,610.214 912.27,610.244 914.379,610.954 914.883,610.954 915.284,611.342 915.887,611.438  916.19,612.146 917.026,613.019 917.397,613.019 917.673,613.725 917.993,613.968 918.209,614.599 918.864,614.97  919.437,615.148 919.4,615.471 918.882,616.604 918.984,617.042 919.772,617.594 920.041,618.256 920.091,619.194  919.855,619.503 919.855,619.763 918.815,620.795 918.664,621.541 918.965,622.318 919.049,622.998 919.217,623.533  918.848,624.114 919.269,624.811 919.084,625.279 918.848,625.49 919.049,626.072 919.114,626.493 919.623,626.799  919.688,627.142 919.251,627.253 919.001,627.707 918.346,628 917.318,628.727 917.119,629.082 917.151,629.715 917.286,630.085  917.136,630.556 917.136,631.188 916.43,631.979 915.944,632.222 916.094,632.645 916.734,633.404 917.136,634.262  917.232,634.688 917.186,634.699 915.808,635.134 913.039,636.209 912.199,636.37 907.475,638.271 906.503,638.271  904.694,639.174 904.293,639.851 904.66,641.24 904.69,641.706 904.509,641.722 904.124,641.785 903.165,641.659 902.68,641.722  902.46,641.463 901.187,641.43 900.229,641.77 899.607,642.062 898.869,642.271 897.576,642.919 897.189,643.582  897.324,643.985 897.089,644.437 897.189,644.841 897.116,645.163 896.72,645.479 895.141,646.011 892.404,647.79  890.206,650.416 888.838,652.326 887.579,652.711 886.704,652.521 886.005,652.006 885.906,651.945 885.622,651.833  885.402,651.855 884.941,651.646 883.908,651.762 883.088,652.326 882.626,652.293 882.169,651.937 881.331,651.523  880.213,651.404 879.739,651.36 879.074,650.592 878.854,650.507 878.603,650.348 878.098,650.363 877.781,650.121  877.581,650.121 877.277,649.977 876.222,650.234 875.731,650.185 871.352,651.138 871.078,650.43 870.508,650.173  869.941,649.527 869.605,649.043 868.899,648.787 868.298,648.269 867.36,647.175 866.756,646.852 866.354,646.367  865.819,645.882 865.181,645.142 864.979,644.559 865.283,629.658 875.269,629.658 874.967,629.178 875.202,627.919  875.57,627.564 875.538,626.822 874.999,625.982 874.999,625.017 875.069,623.405 874.767,621.533 875.003,621.196  875.043,620.873 			",
"M871.352,651.138 871.078,650.43 870.508,650.173  869.941,649.527 869.605,649.043 868.899,648.787 868.298,648.269 867.36,647.175 866.756,646.852 866.354,646.367  865.819,645.882 865.181,645.142 864.979,644.559 865.283,629.658 875.269,629.658 874.967,629.178 875.202,627.919  875.57,627.564 875.538,626.822 874.999,625.982 874.999,625.017 875.069,623.405 874.767,621.533 875.003,621.196  875.043,620.873 875.026,620.597 874.169,620.695 873.439,620.979 872.633,621.353 872.198,621.514 871.704,621.626  871.271,621.544 870.074,621.509 869.572,621.347 868.914,620.893 868.463,620.893 868.211,621.058 867.81,621.186  867.523,621.491 867.002,621.556 866.865,621.232 866.883,620.362 867.218,620.086 867.171,619.856 867.439,619.177  866.892,618.76 866.722,617.857 866.958,617.565 866.958,617.084 866.354,616.534 866.354,616.05 866.521,615.471  866.454,614.922 866.089,614.855 865.783,614.311 865.484,614.115 865.484,613.63 865.08,613.082 865.046,612.631  864.812,612.244 865.181,611.342 865.046,609.729 864.846,609.18 864.947,608.856 865.181,608.534 865.181,607.892  864.679,607.182 864.851,606.427 865.255,605.697 865.255,605.051 865.306,604.371 865.205,603.819 859.785,603.438  859.652,602.987 859.952,602.506 859.988,601.988 858.578,601.859 858.548,602.279 854.022,602.344 853.888,603.634  853.552,604.343 853.15,604.535 853.283,605.407 853.319,606.633 849.8,606.857 849.195,607.182 847.586,607.083  847.086,606.922 846.212,607.083 844.973,607.15 844.471,606.891 844.203,605.279 843.599,604.438 843.197,603.859  842.793,603.569 842.763,603.051 842.595,602.664 842.325,601.602 841.821,600.796 841.821,600.149 842.057,599.729  841.958,599.184 841.588,598.698 841.431,598.175 841.546,597.983 841.546,597.344 836.694,597.312 833.41,597.312  831.802,597.44 830.329,597.376 829.592,597.312 828.216,597.376 827.144,597.41 826.205,597.41 825.568,597.346  824.865,597.278 824.128,597.44 823.315,597.655 823.029,597.799 822.661,597.799 822.51,598.011 822.419,598.056  822.333,598.053 820.997,598.764 821.488,599.34 821.488,599.982 824.058,602.756 824.15,606.242 825.557,608.143  825.349,609.903 823.866,611.734 824.712,612.141 824.712,613.767 825.419,614.853 825.419,616.006 827.18,618.785  827.107,619.531 827.672,620.208 827.672,624.143 825.841,627.462 825.276,627.462 823.233,628.954 823.163,630.041  820.626,632.209 820.558,633.702 820.135,634.04 820.135,637.635 819.006,639.058 818.725,640.754 817.457,642.245  817.457,643.872 817.243,645.295 817.315,647.465 817.104,648.89 817.133,649.344 817.137,649.344 817.861,649.505  818.113,649.684 818.513,649.539 818.664,648.987 818.934,648.843 820.092,649.004 820.73,649.36 821.132,649.054  821.269,648.405 822.612,647.498 823.213,647.467 823.954,647.79 824.17,647.951 824.458,647.692 824.811,647.581  825.415,647.888 825.481,648.179 826.02,648.372 825.919,648.778 826.201,648.94 827.227,649.798 828.252,650.169  829.006,649.78 829.191,649.814 829.83,649.392 830.299,649.36 830.587,649.539 847.997,649.523 848.279,649.7 848.752,650.558  849.119,650.881 850.046,651.269 851.053,651.496 851.74,651.382 852.26,651.594 852.396,651.87 853.031,652.129  853.688,651.722 854.511,651.513 855.669,651.82 856.291,651.722 856.425,651.204 856.677,651.335 857.214,651.368  858.237,652.29 859.01,652.613 859.986,652.66 860.335,652.481 860.369,652.176 860.89,652.031 861.36,652.159 861.697,652.388  862.082,652.24 862.352,652.563 862.719,652.595 862.94,652.711 863.359,652.758 863.744,652.711 864.042,652.721 			",
"M879.739,651.36 880.213,651.404 881.331,651.523  882.169,651.937 882.626,652.293 883.088,652.326 883.908,651.762 884.941,651.646 885.402,651.855 885.622,651.833  885.906,651.945 886.005,652.006 886.704,652.521 887.579,652.711 888.838,652.326 890.206,650.416 892.404,647.79  895.141,646.011 896.72,645.479 897.116,645.163 897.189,644.841 897.089,644.437 897.324,643.985 897.189,643.582  897.576,642.919 898.869,642.271 899.607,642.062 900.229,641.77 901.187,641.43 902.46,641.463 902.68,641.722 903.165,641.659  904.124,641.785 904.509,641.722 904.69,641.706 904.795,643.304 906.437,643.368 907.107,643.496 907.342,643.947  907.877,643.853 908.182,643.398 909.453,643.722 910.759,644.397 911.564,645.465 912.402,645.562 913.845,645.721  914.684,646.367 915.185,646.946 916.223,647.013 916.289,647.787 915.855,648.464 915.987,649.109 915.855,649.753  915.955,650.302 915.921,650.85 915.554,651.493 915.453,652.85 914.949,653.623 915.316,654.044 916.088,653.914  915.753,654.591 915.05,655.074 915.05,655.849 914.949,656.751 914.379,656.945 914.379,657.494 915.148,658.138  915.385,658.882 914.849,659.204 914.849,660.073 915.385,660.493 915.62,661.14 915.016,661.944 914.109,662.621  913.809,663.139 913.172,663.203 913.039,663.815 913.308,664.556 912.973,665.104 912.938,666.458 912.703,666.976  912.637,668.491 907.492,673.409 906.743,672.811 905.184,672.501 903.908,672.68 903.233,672.938 902.915,672.648  901.926,672.194 901.202,672.242 900.884,671.644 899.811,671.465 898.247,671.679 897.856,671.234 897.52,670.846  897.52,670.362 897.088,670.009 896.484,669.976 895.611,669.428 894.975,669.395 893.768,669.009 893.232,669.201  892.194,669.009 891.726,668.266 890.854,667.622 890.551,666.879 890.482,666.169 890.284,665.138 890.517,664.556  889.781,664.041 888.979,663.729 888.794,663.292 888.846,663.003 888.828,662.761 888.207,662.404 887.756,662 886.946,661.415  886.041,660.883 884.714,658.924 884.347,658.311 884.127,658.327 883.605,657.92 883.39,657.274 882.951,656.838  882.751,656.077 882.298,655.314 882.046,655.155 881.928,654.701 881.561,654.194 880.96,653.821 880.634,653.482  879.971,652.98 879.938,652.513 879.838,652.182 879.963,651.8 879.771,651.363 879.739,651.36 			",
"M879.771,651.363 879.963,651.8 879.838,652.182  879.938,652.513 879.971,652.98 880.634,653.482 880.96,653.821 881.561,654.194 881.928,654.701 882.046,655.155  882.298,655.314 882.751,656.077 882.951,656.838 883.39,657.274 883.605,657.92 884.127,658.327 884.347,658.311  884.714,658.924 886.041,660.883 886.946,661.415 887.756,662 888.207,662.404 888.828,662.761 888.846,663.003 888.794,663.292  888.979,663.729 889.781,664.041 890.517,664.556 890.284,665.138 890.482,666.169 890.551,666.879 890.854,667.622  891.726,668.266 892.194,669.009 893.232,669.201 893.768,669.009 894.975,669.395 895.611,669.428 896.484,669.976  897.088,670.009 897.52,670.362 897.52,670.846 897.856,671.234 898.247,671.679 897.677,671.758 897.241,672.081  896.432,672.114 895.946,672.518 896.049,672.955 895.779,673.651 895.11,673.782 894.471,674.361 893.701,674.395  893.267,674.492 892.964,674.297 892.025,674.46 891.021,675.264 890.551,675.717 889.982,676.037 889.781,676.459  889.108,676.684 888.741,677.104 888.273,677.232 887.603,677.521 886.362,679.134 886.227,680.232 886.461,680.584  886.461,681.289 885.824,681.418 885.521,681.791 885.018,681.922 884.363,682.437 884.127,683.038 883.825,683.248  883.539,683.637 882.91,683.715 882.275,684.133 881.303,684.298 880.899,685.037 880.966,686.229 880.533,686.681  880.533,687.232 880.264,688.037 880.533,688.39 879.491,689.036 878.921,688.812 878.553,688.359 877.815,688.457  876.711,688.457 875.736,688.681 874.934,688.423 874.196,688.552 872.488,687.616 871.95,687.586 871.482,687.003  869.907,686.778 868.769,686.909 867.529,687.973 866.79,689.746 865.952,690.616 864.409,691.197 864.076,691.746  863.17,692.423 862.197,692.648 861.461,693.133 860.355,692.971 859.616,693.294 858.379,693.068 857.138,693.23  857.172,692.376 857.843,690.938 857.875,689.714 856.67,687.198 856.199,685.974 854.659,684.876 854.659,684.926  854.638,684.879 854.644,684.781 855.476,670.669 859.598,670.594 860.42,654.507 863.911,654.651 868.393,653.648  869.771,653.26 870.395,653.194 870.595,653.097 870.879,653.275 871.132,653.908 871.471,654.23 871.215,654.554  871.132,655.169 871.518,655.249 873.046,654.215 873.935,653.131 874.861,652.209 875.867,652.096 876.103,652.451  876.689,652.533 877.277,652.146 878.771,651.624 879.745,651.368 879.739,651.36 			",
"M854.638,684.879 854.644,684.781 855.476,670.669  859.598,670.594 860.42,654.507 863.911,654.651 868.393,653.648 869.771,653.26 870.395,653.194 870.595,653.097  870.879,653.275 871.132,653.908 871.471,654.23 871.215,654.554 871.132,655.169 871.518,655.249 873.046,654.215  873.935,653.131 874.861,652.209 875.867,652.096 876.103,652.451 876.689,652.533 877.277,652.146 878.771,651.624  879.745,651.368 879.074,650.592 878.854,650.507 878.603,650.348 878.098,650.363 877.781,650.121 877.581,650.121  877.277,649.977 876.222,650.234 875.731,650.185 864.042,652.721 863.744,652.711 863.359,652.758 862.94,652.711  862.719,652.595 862.352,652.563 862.082,652.24 861.697,652.388 861.36,652.159 860.89,652.031 860.369,652.176  860.335,652.481 859.986,652.66 859.01,652.613 858.237,652.29 857.214,651.368 856.677,651.335 856.425,651.204  856.291,651.722 855.669,651.82 854.511,651.513 853.688,651.722 853.031,652.129 852.396,651.87 852.26,651.594 851.74,651.382  851.053,651.496 850.046,651.269 849.119,650.881 848.752,650.558 848.279,649.7 847.997,649.523 830.587,649.539  830.299,649.36 829.83,649.392 829.191,649.814 829.006,649.78 828.252,650.169 827.227,649.798 826.201,648.94 825.919,648.778  826.02,648.372 825.481,648.179 825.415,647.888 824.811,647.581 824.458,647.692 824.17,647.951 823.954,647.79  823.213,647.467 822.612,647.498 821.269,648.405 821.132,649.054 820.73,649.36 820.092,649.004 818.934,648.843  818.664,648.987 818.513,649.539 818.113,649.684 817.861,649.505 817.137,649.344 817.133,649.344 817.385,653.162  820.135,655.874 821.613,658.312 823.916,663.286 824.267,665.282 826.59,668.467 826.59,669.72 829.052,673.14 829.052,674.999  828.453,675.235 829.122,677.538 829.264,680.991 830.636,684.512 830.494,686.408 830.916,687.694 830.247,688.101  830.812,688.777 831.147,691.121 831.782,691.442 832.201,692.236 831.709,692.606 831.709,693.52 832.446,694.294  832.533,696.023 833.378,697.14 834.504,699.272 835.63,700.355 835.876,700.966 837.462,702.06 838.135,701.679  839.107,701.486 839.107,700.938 838.808,700.679 839.276,699.874 840.415,699.454 840.951,700.39 841.857,700.421  841.453,701.389 842.122,702.712 843.699,703.032 844.704,703.55 845.44,703.389 845.945,703.581 846.75,703.712  847.116,703.354 847.821,703.354 848.154,703.968 848.827,703.87 849.396,704.001 849.432,703.066 849.832,702.678  850.4,702.486 850.838,701.614 852.078,701.003 853.552,701.101 854.024,701.097 854.659,684.926 			 ",
"M1525.3,670.632l1.273,1.613l0.302-0.677l0.538,0.644 l0.199,0.677l1.239,0.774l0.502,0.871l0.47,0.128l1.876,2.323l0.771,1.645l0.637-0.259l0.804,0.612l1.142,1.902l1.643,1.164 l0.669,0.158l0.066,1.451l-0.735-0.481l-0.472,0.192l-0.804-0.741l-0.938,0.387l-0.869-0.68l-0.203-0.898l-1.106-0.132 l-0.402-1.224l-0.534-0.034l-0.401,0.226l-0.505-1.32l-1.239-0.905l-0.137-0.612l-0.703-0.03l-0.468-0.774v-0.774l-0.972-0.549 l-1.24-2.419l-0.1-0.937l-0.469-0.451L1525.3,670.632L1525.3,670.632z M1541.651,678.435l1.207-0.16l0.703,0.42l-0.032,0.966 h-0.468l-0.469,0.451l-0.806-0.771L1541.651,678.435L1541.651,678.435z M1539.742,674.019l-0.871,0.613l0.135,0.387l-0.169,0.549 l0.436,0.771l1.075,0.484l0.367-0.388l-0.836-0.676l0.266-0.678l-0.032-0.871L1539.742,674.019L1539.742,674.019z  M1536.762,672.889l-0.101,0.646l-0.57,0.646l0.872,0.063l0.534-0.838l-0.165-0.518H1536.762z",
"M1069.544,845.803 1069.739,846.462 1069.808,846.92  1070.512,846.936 1070.878,847.289 1071.229,847.289 1070.336,846.023 1069.808,845.619 			 ",
"M1058.408,819.204l0.351-0.475l0.788-0.187l0.053,0.32 l-0.613,0.557l-0.437,0.02L1058.408,819.204L1058.408,819.204z M1056.075,822.898l0.614-0.135l0.895-0.643l0.72-0.149 l0.173,0.404l0.686,0.572l0.631-0.05l0.37-0.91l0.228,0.403l0.104,0.594l0.542,0.352l0.844,0.019l0.86-0.607l-0.02-0.271 l-1.209,0.134l-0.401-0.64l0.368-0.541l0.631-0.287l0.967,0.271l0.331-0.557l-0.264-0.76l-0.597,0.235l-0.542-0.202l-0.895,0.843 l-0.616,0.066l-0.367-0.977l0.423-0.236v-1.064l-0.476,0.423l-0.298,0.725l-0.491,0.374l-0.614-0.221l-0.752-0.337l-0.544-0.32 l0.155-0.88l-0.155-0.437l0.332-0.321l-0.072-0.22l-0.402,0.388l-0.385,0.572l0.07,0.594l0.034,0.878l0.314,0.099l0.159,0.254 l-0.911,0.878l-0.616,0.844L1056.075,822.898z",
"M1029.273,662.646 1029.098,663.71 1028.502,664.183  1029.767,665.364 1030.782,664.706 1030.678,663.844 1031.188,663.39 1031.082,662.68 1030.466,662.376 1029.906,662.7 			",
"M1019.256,666.16 1019.161,667.469 1020.05,668.645  1020.6,668.906 1021.863,667.864 1021.341,667.622 1020.748,666.327 1019.815,665.935 			 ",
"M969.257,688.624l0.593-0.37l0.983,0.084l1.105-0.641 l0.895-0.998l2.91-0.27l0.896,0.203l1.526-0.573l0.418-0.793l0.737-0.104l0.493-1.401l0.735-1.147l0.034-0.81l0.929-0.541 l-0.088-1.351l-0.224-0.186l0.646-0.47l0.404-1.488l-0.104-0.236h0.331l0.878-1.315l0.648-3.021l0.492-1.638l0.721-0.692 l0.401-1.806l1.264-2.16l1.208-3.629l0.86-1.233v-1.638l0.93-1.637l0.139-0.624l1.054-1.62l0.544-2.499l0.439-1.824l0.419-0.473 l0.246-1.314l-0.403-0.66l0.244-1.13l0.969-1.281l-0.125-0.627l0.667-0.759l-0.159-1.081l-0.383-0.354l0.419-0.758l-0.07-1.1 l-0.349-0.232l-0.019-1.065l0.614-0.286l0.454,0.337l0.193,0.93l0.79,1.012l0.578,0.133l0.334-0.573l0.051-0.774l0.247-0.286 l0.105-0.794l0.334-0.306l-0.056-0.911l-0.911-1.181l-0.229-0.812l0.264-0.403v-0.963l-0.298-1.231l0.211-0.474l0.104-2.297 l-0.699-0.877l-0.087-1.991l-0.353-0.693l-0.367,0.137l-0.808-0.997l-0.104-0.895l-0.808-0.336l0.459-0.914l-0.316-0.894 l-1.195,1.047l0.299,0.607l-0.808,0.523l-0.786-0.507l-0.51,0.017l0.754,0.98l0.02,0.574l0.559,0.556v0.271l-0.929,0.826v1.333 l-0.564,0.878l-0.61-0.204l-0.792,0.845l-0.104,0.744l-0.595,0.423l-0.51-0.307l-0.087-0.96l-0.419-0.203l-0.599,0.559 l-0.088,1.062l0.933,0.896l0.224,0.387l-0.349,0.321l-0.476-0.138l-1.033,0.188l0.226,0.863l0.915,0.25l0.122,0.539l-0.406,0.475 l-0.436-0.49l-0.701,0.254l-0.159,0.523l-1.277,1.047l-0.019-0.981l0.208-0.269l-0.332-0.54l-0.86,0.793l0.544,0.287 l-0.193,0.391l-1.086,0.605l0.421,0.845l0.612,0.187l-0.051,0.437l-0.578,0.153l-0.757,0.489l-0.104-0.573l-0.437-0.086 l0.437-0.707l-0.402-0.29l-1.703,1.384l-0.262,1.301l0.208,0.507l-0.26,0.557l-0.579-0.187l-0.387-0.32l0.017-1.163l-0.438-0.051 l-1.088,1.081l-1.194-0.811l-0.244,0.337l-0.421,0.066l0.157,1.267l-0.369-0.083l-0.312,0.117l-0.021-0.674l-0.452-0.237 l-0.51,0.727l-0.477-0.727l-1.838,1.638l-0.493,0.051l-0.367-0.337l-0.945-0.018l-0.423,0.624l0.176,1.385l-1.385,2.057 l0.051,0.391l-1.317,1.334v0.674l0.721,0.573l-0.612,0.847l0.436,1.281l-0.051,1.097l1.281,2.382l-0.089,0.656l0.807,0.86 l0.018,0.391l-0.631,0.622l0.212,0.608l-0.441,2.061l-0.929,0.573l-0.245,1.165l-0.543,0.1l-0.281,0.76l-0.843,0.658 l-0.086,1.673l-0.562,0.607l-1.352,0.304l-0.331,0.424l0.104,1.449l-1.018,1.031l0.104,1.181l-0.298,0.707l0.213,0.541 l0.051,1.42l1.196,1.397l-0.181,1.013l0.213,0.644l0.595,0.337l0.32-0.083l-0.3,0.287l-0.932,0.219l0.055,0.928l0.139,1.468 l-0.139,1.874l0.333,0.37l0.052,0.611l0.526,0.303l0.614,0.91l0.51,0.271l0.402,0.606l0.613,0.692l0.646-0.219l0.229,0.304 l0.739,0.17l0.788,0.993l0.58,0.121l0.017,0.387L969.257,688.624L969.257,688.624z M989.514,629.614l-0.21-0.37l0.788-0.761 l-0.018,0.32L989.514,629.614L989.514,629.614z M989.216,631.015l0.122-0.253l0.192,0.37l-0.21,0.254L989.216,631.015 L989.216,631.015z M987.723,630.778l0.177-0.17l0.159,0.187l0.506,0.287l-0.189,0.843l-0.476-0.42l-0.632-0.032L987.723,630.778 L987.723,630.778z M994.079,648.712l-0.017-0.588l0.053-0.588l0.269-0.426l0.281-0.016l0.363-0.529l-0.242,0.771l-0.314,0.529 L994.079,648.712z",
"M907.492,673.409 912.637,668.491 912.703,666.976  912.938,666.458 912.973,665.104 913.308,664.556 913.039,663.815 913.172,663.203 913.809,663.139 914.109,662.621  915.016,661.944 915.62,661.14 915.385,660.493 914.849,660.073 914.849,659.204 915.385,658.882 915.148,658.138  914.379,657.494 914.379,656.945 914.949,656.751 915.05,655.849 915.05,655.074 915.753,654.591 916.088,653.914  915.316,654.044 914.949,653.623 915.453,652.85 915.554,651.493 915.921,650.85 915.955,650.302 915.855,649.753  915.987,649.109 915.855,648.464 916.289,647.787 916.223,647.013 915.185,646.946 914.684,646.367 913.845,645.721  912.402,645.562 911.564,645.465 910.759,644.397 909.453,643.722 908.182,643.398 907.877,643.853 907.342,643.947  907.107,643.496 906.437,643.368 904.795,643.304 904.66,641.24 904.293,639.851 904.694,639.174 906.503,638.271  907.475,638.271 912.199,636.37 913.039,636.209 915.808,635.134 917.186,634.699 918.467,634.401 918.771,634.886  918.937,635.304 919.338,635.758 919.408,636.303 920.178,636.757 920.546,636.562 921.116,636.562 921.518,636.144  922.49,636.111 923.731,636.4 924.165,637.111 924.165,638.337 924.064,639.369 923.095,640.369 922.859,641.399  922.255,642.207 922.355,642.948 922.759,643.947 922.859,644.656 923.661,645.593 924.435,646.303 925.035,646.626  925.575,647.043 926.176,647.852 925.875,648.4 926.109,649.043 927.016,648.85 927.215,647.979 926.879,646.915  927.348,646.142 927.483,645.304 927.953,644.108 928.89,643.853 929.526,643.334 929.83,642.627 929.862,640.982  929.394,640.462 929.494,640.046 929.262,639.723 929.426,639.369 929.929,639.305 930.131,638.852 930.733,638.659  930.698,638.175 930.398,637.562 929.995,636.468 928.924,635.078 928.625,634.368 927.048,632.853 926.578,632.755  926.242,632.304 925.575,631.692 924.099,630.95 923.329,626.822 924.465,622.823 928.924,622.759 929.695,622.598  929.898,622.274 930.565,622.146 930.6,622.533 931.202,622.694 931.772,623.082 932.377,623.146 932.845,623.63  932.709,624.018 934.084,623.63 935.091,622.951 935.595,622.823 935.963,622.533 936.497,622.759 936.563,623.048  937.168,623.082 937.738,623.436 938.711,623.082 940.017,622.984 940.352,622.308 940.117,621.792 940.454,621.5  941.29,621.759 941.929,621.631 942.563,622.082 943.401,621.985 943.839,621.631 945.58,621.112 946.251,621.372  946.986,621.146 947.322,620.759 948.396,620.631 949.033,619.985 950.004,619.856 950.707,619.309 951.243,618.598  952.115,618.824 952.517,618.373 952.682,618.3 953.017,618.497 952.841,619.548 952.595,620.091 952.841,620.294  951.892,621.613 951.785,622.087 951.961,622.428 952.029,622.697 951.681,623.035 951.892,624.628 952.418,625.574  952.138,625.847 952.138,626.997 952.401,627.267 952.434,628.381 951.942,628.854 952.117,630.035 951.785,632.248  951.594,632.263 951.854,632.636 951.874,634.644 951.171,634.747 951.137,634.999 951.382,635.32 952.311,635.354  952.557,635.541 952.769,637.277 952.293,637.936 951.802,638.171 952.104,638.572 951.961,639.014 951.36,639.014  950.693,639.659 950.87,639.896 951.082,639.725 951.681,639.792 951.258,640.369 951.154,641.283 950.555,641.383  949.531,642.636 949.531,643.179 948.618,644.397 947.847,644.499 947.915,645.346 944.82,646.969 944.361,647.005  944.115,647.646 941.155,649.16 940.017,649.026 939.963,649.26 938.612,649.87 936.737,651.051 936.281,650.764  936.262,651.321 935.123,652.655 934.562,652.892 934.229,652.182 934.035,653.345 933.491,653.482 933.313,654.156  931.438,655.219 931.404,655.676 930.912,656.08 930.477,656.216 930.527,656.84 929.439,656.873 926.949,658.48  927.092,659.494 926.282,660.07 925.154,660.07 924.699,660.646 923.818,660.104 923.326,660.171 923.326,660.544  923.782,661.054 923.748,661.763 923.397,662.204 923.536,662.881 923.045,663.591 924.381,665.316 924.417,665.927  923.818,666.4 924.277,666.604 924.77,667.383 924.804,668.433 925.354,669.416 925.126,672.218 925.39,673.197 925.721,673.146  925.721,672.37 926.248,671.29 926.318,672.233 926.546,672.2 926.49,673.417 926.105,673.883 926.034,675.103 926.246,675.271  925.684,676.691 925.684,677.438 925.263,677.944 925.192,678.859 924.942,678.859 925.12,679.638 925.825,679.231  925.984,679.748 925.406,680.59 925.126,681.738 923.424,683.476 920.407,684.793 916.321,685.57 914.758,687.003  913.565,687.29 913.215,687.83 912.62,688.288 912.286,689.385 911.812,689.368 911.377,689.655 911.566,689.891  912.023,690.717 911.97,691.51 912.391,690.989 913.06,691.189 913.269,690.432 913.565,690.379 913.6,690.802 913.406,692.062  912.95,692.808 912.923,693.497 911.998,693.522 910.386,693.152 909.95,693.243 909.85,692.893 910.067,692.149 910.15,691.548  910.303,691.225 909.86,690.668 909.385,690.165 908.896,689.899 908.816,689.767 908.849,688.262 908.915,686.973  909.25,685.587 909.294,682.098 909.008,681.08 908.708,680.22 908.673,679.361 908.76,679.104 908.726,677.017 908.17,675.917  907.899,674.751 907.634,673.522 			",
"M908.816,689.767 908.896,689.899 909.385,690.165  909.86,690.668 910.303,691.225 910.15,691.548 910.067,692.149 909.85,692.893 909.95,693.243 909.631,693.314 909.078,693.688  909.161,694.366 908.925,695.143 908.204,695.387 906.408,695.305 904.897,694.486 904.357,693.551 903.856,693.099  903.588,692.551 903.991,691.487 905.131,689.458 905.331,688.585 906.135,688.198 907.31,688.845 908.045,689.458  908.816,689.777 			 ",
"M837.462,702.06l0.673-0.381l0.973-0.192v-0.548l-0.3-0.26 l0.469-0.805l1.139-0.42l0.536,0.936l0.906,0.031l-0.404,0.968l0.669,1.323l1.577,0.32l1.005,0.518l0.736-0.161l0.505,0.192 l0.805,0.131l0.366-0.357h0.705l0.333,0.613l0.673-0.098l0.569,0.131l0.035-0.935l0.4-0.389l0.568-0.191l0.438-0.872l1.24-0.611 l1.474,0.098l0.473-0.004l0.635-16.221l1.54,1.098l0.471,1.225l1.205,2.516l-0.032,1.225l-0.671,1.438l-0.034,0.854l1.241-0.162 l1.237,0.226l0.739-0.323l1.105,0.162l0.736-0.484l0.973-0.226l0.906-0.677l0.333-0.549l1.543-0.581l0.838-0.87l0.739-1.773 l1.239-1.063l1.139-0.131l1.575,0.225l0.468,0.583l0.538,0.03l1.708,0.936l0.737-0.129l0.803,0.258l0.975-0.224h1.104 l0.737-0.098l0.368,0.452l0.57,0.225l1.042-0.646l-0.27-0.353l0.27-0.805v-0.552l0.433-0.451l-0.066-1.192l0.403-0.739 l0.973-0.165l0.635-0.418l0.629-0.078l0.286-0.389l0.302-0.21l0.236-0.602l0.654-0.515l0.504-0.131l0.303-0.373l0.637-0.129 v-0.705l-0.234-0.352l0.136-1.099l1.24-1.612l0.671-0.289l0.468-0.128l0.367-0.421l0.673-0.225l0.201-0.422l0.568-0.32 l0.471-0.453l1.004-0.804l0.938-0.163l0.303,0.195l0.435-0.098l0.77-0.033l0.64-0.579l0.669-0.131l0.27-0.696l-0.103-0.438 l0.485-0.403l0.81-0.033l0.436-0.323l2.134-0.293l1.073,0.179l0.318,0.599l0.724-0.048l0.989,0.454l0.318,0.29l0.675-0.259 l1.275-0.179l1.56,0.31l0.891,0.712l0.266,1.229l0.271,1.166l0.556,1.1l0.034,2.088l-0.087,0.257l0.035,0.858l0.3,0.86 l0.286,1.018l-0.044,3.489l-0.335,1.386l-0.066,1.289l-0.032,1.516l-0.771-0.319l-0.735-0.613l-1.175-0.646l-0.804,0.387 l-0.2,0.873l-1.14,2.029l-0.403,1.063l0.269,0.548l0.501,0.452l0.54,0.936l1.511,0.818l1.796,0.082l0.721-0.244l0.236-0.776 l-0.083-0.679l0.553-0.373l0.755-0.162l1.612,0.37l0.925-0.025l-0.007,0.224l-0.565,0.71l0.282,0.103l-0.562,1.624l-0.142,1.389 l-0.696,1.34l-0.452,1.724l-0.669,0.773l-0.209,0.794l-1.281,1.454h-0.403l-0.282,0.388l-0.946,0.423l-0.438,0.521l-1.122,0.693 l-0.57,1.064l-0.915,1.017v0.439l-0.529,0.946l-0.877,0.036l-0.707,1.319l-1.932,3.114l-1.487,1.364l-0.246,1.248l-0.858,0.355 l-0.827,0.945l-0.47,0.017l-0.212,0.353l-4.859,4.608l-0.595,0.101l0.017,0.239l-0.79,0.845l-3.191,1.975l-0.683,0.724 l-1.122,0.323v0.285l-1.783,0.453l-1.018,0.604l-1.048,0.092l-0.506-0.37l-1.422,0.053l-1.177,0.342l-0.498,0.824l0.699,0.561 l-0.061,0.236l-1.622,0.033l-0.951-0.47l-0.759-0.075l-0.655,0.637l0.28,0.563l-0.298,0.275l-2.23-0.459l-0.633-0.463 l-2.142-0.523l-1.404,0.271l-0.017,0.32l-0.735,0.253l-1.088-0.557l-2.49-0.017l-0.739,0.32l-0.226,0.743l-0.493-0.22 l-0.577,0.153l-0.509,0.404l-0.282,0.354l-1.104,0.068l-0.717,0.303l-1.37-0.473l-1.155,0.066l-0.229,0.323l-1.122-0.238 l-0.999,1.099l-0.841,0.149l-0.3,0.642l-0.493-0.168l-0.439,0.204l-2.313-1.048l-0.473,0.271l-0.055-1.08l-0.877-0.44 l-0.666,0.322l-0.439-0.186l0.389-0.304l-0.246-0.931l-1.088-0.183l-0.773,0.656l0.055,0.827l-0.595-0.423l-0.055-0.91 l0.335-0.761l-0.212-1.131l0.631-0.995l-0.824-1.436l-0.824-0.708l-0.699-1.163v-1.15l0.488-0.438l0.457,0.454h0.419l0.544-0.574 l0.28-1.383l-0.506-1.502l0.087-0.677l-1.338-2.133l-0.038-0.979l-1.3-1.626l-0.597-2.606l-0.983-2.471l0.033-1.253l-0.985-2.743 l-1.512-1.047l-0.249-1.456L837.462,702.06L837.462,702.06z M887.149,710.743l0.671,0.548l0.487,0.649l1.076,0.421l0.839-0.031 l0.253-0.453l0.318-0.373l0.401-1.084l0.808-0.229l0.601-0.387l0.81-0.145l0.555,0.161l0.838-0.552l0.218-0.712l-0.371-0.323 l-0.084-0.535l0.842-0.404l0.822-0.695l-0.051-1.083l-0.737-1.732l-1.008-0.744l-0.725,0.192l-0.671-0.468l-0.265,0.191 l-0.455-0.305l-0.654-0.031l-0.168,0.354l-0.588,0.339l-0.403,0.439l-1.714,0.272l-1.038,0.875l-0.438,1.165l-1.227,0.924 l-0.62,0.421l0.385,0.857l0.538,0.518l0.116,0.455l0.555,0.612L887.149,710.743z",
"M887.149,710.743 887.065,709.853 886.511,709.24  886.395,708.785 885.856,708.268 885.472,707.41 886.092,706.989 887.318,706.065 887.756,704.9 888.794,704.025  890.508,703.753 890.911,703.313 891.499,702.975 891.667,702.62 892.321,702.651 892.776,702.956 893.041,702.765  893.712,703.232 894.437,703.04 895.444,703.784 896.182,705.517 896.232,706.6 895.41,707.295 894.568,707.699 894.652,708.234  895.023,708.558 894.806,709.27 893.968,709.821 893.413,709.66 892.604,709.805 892.003,710.191 891.195,710.42  890.794,711.504 890.476,711.877 890.223,712.33 889.384,712.361 888.308,711.94 887.82,711.291 			 ",
"M1469.678,712.094l0.32-1.635l0.218,1.002L1469.678,712.094 L1469.678,712.094z M1470.109,700.886l-0.436-1.323l0.164-0.902l0.104-0.808l0.802-0.901l0.504-0.97l-0.269-0.613l0.269-0.706 l0.437,0.063l0.168,1.031l-0.202,1.258l-1.039,1.353l-0.234,1.809l0.267,0.871L1470.109,700.886L1470.109,700.886z  M1462.324,687.611l0.84,1.115l0.454,0.792l0.185-0.792l-0.336-0.42l0.066-0.568l-0.568-0.063l-0.438-0.292L1462.324,687.611 L1462.324,687.611z M1461.115,681.267l-0.099-0.501l-0.389,0.37L1461.115,681.267L1461.115,681.267z M1443.403,661.477 l0.321-0.729l-0.689-0.743l0.756-0.194l0.318-0.162l0.116,1.473l-0.387,0.891L1443.403,661.477L1443.403,661.477z  M1428.142,618.983l0.256,0.581l0.385-0.484L1428.142,618.983L1428.142,618.983z M1427.489,621.28l0.018,1.1l0.436-0.243 l0.47-0.032l-0.337-0.727L1427.489,621.28L1427.489,621.28z M1412.527,653.516l0.271,0.42l0.487-0.26l-0.068-0.486 L1412.527,653.516L1412.527,653.516z M1411.438,651.574l0.403,0.404l0.556-0.195l0.556-0.68l1.02-0.147l0.019-0.323l-1.211-0.276 l-1.139,0.634C1411.641,650.99,1411.389,651.605,1411.438,651.574L1411.438,651.574z M1401.938,647.252l-0.338-0.567l0.304-0.727 l0.521,0.662L1401.938,647.252L1401.938,647.252z M1398.914,637.673l-0.133-0.437l-0.252,0.161l-0.087-0.42l0.538-0.487 l0.453,0.615L1398.914,637.673L1398.914,637.673z M1400.123,638.74l-0.484,0.39l0.335,0.047l0.737-0.276l1.227,0.196l0.267-0.696 l-0.335-0.146l-0.385,0.082l-0.203-0.229l0.771-0.71l-0.101-0.194l-0.77,0.212l-0.021-0.714l-0.52,0.242l-0.151,0.404 l-0.72-0.031l0.202,0.226l-0.171,0.195L1400.123,638.74L1400.123,638.74z M1400.76,625.001l0.622,0.275l0.169-0.68l0.807-0.713 l-0.371-0.421l-0.957,0.989L1400.76,625.001L1400.76,625.001z M1399.771,625.764l0.519,0.256l-0.064-0.485L1399.771,625.764 L1399.771,625.764z M1399.051,626.069l0.266,0.356l0.286-0.356H1399.051L1399.051,626.069z M1397.37,626.927l0.536,0.049v-0.438 L1397.37,626.927L1397.37,626.927z M1396.195,628.238l-0.086-0.534l0.874-0.487l0.773-0.03l-0.286,0.484l-0.787,0.081 L1396.195,628.238L1396.195,628.238z M1394.701,628.562l0.37,0.259l0.822-0.325l-0.066-0.272L1394.701,628.562L1394.701,628.562z  M1382.882,624.936l-0.521-0.888l0.171-0.633l0.703-0.127l-0.286,0.824L1382.882,624.936L1382.882,624.936z M1372.574,624.468 l0.115,1.066l0.758,0.858l0.654,0.811l1.294,0.518l1.577-1.604l0.401,0.067l0.066-0.471l0.438-0.355l-0.367-0.29l-0.27-0.585 h-0.405l-0.57,0.275l-1.259,0.017l-0.521,0.632l-0.554-0.274l-0.117-0.294l-0.554-0.08l-0.572-0.581h-0.27L1372.574,624.468 L1372.574,624.468z M1372.252,624.694l0.389,1.602l0.772,0.259l0.116,0.275l-1.056-0.225l-0.387,0.032l-0.975-0.245l0.034-0.501 l0.302-0.048l0.455,0.128v-0.241l-0.222-0.098l0.035-0.485l-0.119-0.146L1372.252,624.694L1372.252,624.694z M1342.537,643.982 l0.336,0.454l0.756-0.146l-0.653-0.791C1342.976,643.499,1342.488,644.017,1342.537,643.982L1342.537,643.982z M1342.74,647.058 l-0.083-0.955l-0.455-0.664l0.066,1.313L1342.74,647.058L1342.74,647.058z M1346.652,640.488l-0.554-0.063l0.268-0.471 l0.384,0.047L1346.652,640.488L1346.652,640.488z M1297.357,671.215l-0.266-0.451l0.87-1.161l-0.101,0.998L1297.357,671.215 L1297.357,671.215z M1283.486,694.466l0.366-1.936l0.103,1.228C1283.955,693.758,1283.486,694.436,1283.486,694.466 L1283.486,694.466z M1283.417,697.916l-0.569-1.771l0.435-1.034l0.504,1.485L1283.417,697.916L1283.417,697.916z  M1386.509,755.964l-0.153,0.713l0.203,0.437h0.57l-0.318,0.37l0.839,0.034l0.485-0.212l0.641,0.309l-0.588,0.519l-1.679-0.229 l-0.322,0.424l-0.485,0.014l-0.1,0.276l-0.455,0.017l-0.351-0.455l-0.572,0.213l-0.84-0.132l-0.318,0.067l-1.073-0.032 l-0.67-0.456l0.047-0.517l1.108-0.549l2.486-0.666l0.823,0.081L1386.509,755.964L1386.509,755.964z M1416.831,777.211 l0.489-0.192l0.305,0.4l-0.229,0.304L1416.831,777.211L1416.831,777.211z M1421.543,780.272l0.488,0.321l0.318-0.388 L1421.543,780.272L1421.543,780.272z M1410.456,792.155l0.157,0.676l0.595,0.169l0.44-0.421l-0.596-0.56L1410.456,792.155 L1410.456,792.155z M1410.843,790.501l0.034,0.66l0.526-0.054l-0.087-0.809L1410.843,790.501L1410.843,790.501z  M1410.158,791.565l-0.633-0.354l0.266-0.693l0.631-0.336l0.034,0.776L1410.158,791.565L1410.158,791.565z M1407.122,788.308 l0.106-0.641l-0.211-0.744l0.614-0.761l-0.123-0.775l0.633-0.742l0.523-0.405l0.548,0.44l-0.211,1.3l0.314,0.623l-0.613,0.944 l-0.177,0.489l-0.752,0.574L1407.122,788.308L1407.122,788.308z M1425.625,790.515l1.652-0.708v-0.778l-1.511-1.456l-0.671,0.236 l0.282,0.744l-0.353,0.812l0.318,0.544L1425.625,790.515L1425.625,790.515z M1424.745,791.531l0.28,0.576l1.406,0.068 l0.705,0.272l0.141-0.511l-0.949-0.846l-1.054,0.104L1424.745,791.531L1424.745,791.531z M1425.625,793.664l-0.457-0.506 l0.669-0.204L1425.625,793.664L1425.625,793.664z M1420.595,808.12v-0.743l0.527,0.473L1420.595,808.12L1420.595,808.12z  M1415.249,813.402l-0.6-0.339l0.669-1.018v-0.776l0.457-0.203l0.211,0.473l-0.423,0.577L1415.249,813.402L1415.249,813.402z  M1409.159,812.926v-0.946l0.531-0.573l-0.882-0.306l-0.21-1.153l0.21-0.371l-0.49-0.373l-0.034-2.503l0.21-0.477l-0.633-0.506 l-0.074-1.558l0.389-0.881l0.775,0.845l0.985,0.069l-0.845-0.812l-0.036-0.576l-0.423-0.271l0.246-1.25l-0.21-1.593l-0.108-1.967 l0.229-1.13l-0.21-1.755v-0.928l0.28-0.202l0.071-1.032l0.298-0.423l0.912,0.628l0.851,0.409l0.703,0.543l0.139-0.475 l0.389-0.439l-0.036,1.32l1.618,0.847l1.268,1.116l0.88,0.61l0.595-0.44l0.915-0.033l0.705,0.643l-0.036-0.812l0.6-0.374 l2.779,0.169l0.493-0.303l0.633-0.476l0.527,0.033l0.244,0.17l0.528-0.813h0.423l1.09,0.746l-0.314,0.779l-0.423,2.302 l-0.811,0.948l-0.07,1.658l-0.667,0.948l0.244,1.117l-0.244,0.407l0.034,0.81l-0.457,0.982l-0.176-0.643l-0.283-1.287 l-0.49,0.847l-0.6,0.406l-0.104,1.931l-0.389,0.37h-0.737l0.034,1.017l-0.667,0.813l0.737,0.473v0.544l-1.054,1.453l-0.376-0.12 l-0.822,0.394l-0.049-1.316l0.947,0.377l0.119-0.754l-0.524-0.44l-0.773,0.135l-0.457,0.778l-0.599-0.202v-0.947l-0.351,0.947 l-0.845,0.643l-0.281,0.474l-0.633-0.573l-0.422,1.452l-0.108,0.812l-0.876,1.288h-0.74l-0.459-0.814v-0.743l-0.737,0.947 l-0.633-0.61l-0.846,0.171C1409.548,813.097,1409.092,812.893,1409.159,812.926L1409.159,812.926z M1284.988,742.75l0.633,0.543 l0.703,0.033l1.969,1.93l-0.036,0.711l0.353,0.406l1.021,0.169l0.455,0.541l1.338,0.203l0.528-0.101l0.28,0.37l1.019,0.137 l1.199-0.236l0.314,0.644l0.53-0.407l0.281,0.204l1.336-0.236l1.162-0.104l0.14-0.54l0.703-0.137l0.773-1.115l1.37,0.169v-0.78 l0.879-0.473h0.705l0.705,0.711l0.739-0.98l0.387,0.169l0.459-0.235l0.244-1.084l2.565-1.522l0.988,0.133l0.633,0.373 l0.843-0.543l2.464-0.507l0.316,0.474l1.583-0.338l0.456,0.304l0.739,0.067l0.948-0.337l0.354,0.947h0.562l0.741-0.374 l0.42,0.477l0.741-0.477h1.827l-0.104,0.747l0.316,0.134l1.021-0.947l1.019,0.271l1.229-0.812l0.46-1.082l0.453-0.137 l0.987-0.948l0.565-1.592l1.121-0.847l1.341-0.37l0.492,0.303l1.934-0.643l2.462-1.456l1.514-1.354l0.703-0.27l0.667,0.032 l0.812-0.032l1.372,0.574l1.268,0.068l0.876-0.307l1.866,0.104l2.566-0.88l1.514-0.339l1.126-0.778h0.701l1.304-0.915 l1.935-0.135l5.101-0.373l1.654,0.44l1.126,0.033l1.406-0.474l1.125,0.137l1.406,1.286l1.092,1.794l0.844,0.271l0.599-0.475 l0.561-0.203l0.425,0.44l0.527-0.237l0.985,0.237l0.879,1.116l1.196,0.203l0.49-0.304l2.041,1.387l-0.176,0.849l0.633,0.032 l0.703,0.713l-0.28,0.641h-0.773l-0.177,0.61l0.808,1.726l0.846,0.07l0.949,0.979l0.318,1.253l-0.176,0.947l1.021,2.169 l-0.354,0.98l0.422,0.542l-0.176,1.15l-0.385,0.677l-0.564-0.339l-0.281,0.272l0.739,0.912l0.703,0.371l0.353,0.917l0.771-0.273 l0.812,0.61l0.034-0.777l-0.457-0.709l0.527-0.543l0.456-0.881l0.737-0.137l0.427-0.743l0.807-0.34l0.247-0.777l0.845-1.05 l1.97-0.946l0.212-0.576h0.387l1.546-0.714l0.387-1.25l1.234-1.828l1.336-0.271l0.526-0.746l-0.353-0.947l0.211-1.082 l0.564,1.253l0.034,1.149v1.117l-0.563,0.712l-0.282,2.268l-1.935,1.22l-0.28,0.98l-0.562,0.712l0.068,1.014l-1.125,1.523 l0.354,0.44l-0.811,2.167l-2.216-0.237l-0.456,1.186l-0.563,0.947v0.34l1.372-0.34l1.336-0.576l1.581,0.542l1.55-2.503 l0.421-2.302l1.302-1.287l0.353,0.406l0.034,2.133l0.493,1.25l-0.421,0.138l0.141,2.132l-1.021,1.83l-1.76,0.674l0.283,0.61 l1.125-0.135l1.208,0.028l0.522-0.523l0.808-0.187l0.983-0.774l0.79,0.218l0.598-0.084l-0.476,0.776l-0.453,0.727l-0.844-0.049 l-0.229,0.471l0.827,1.163l0.347,0.975l0.599,1.423l0.07,1.661l-0.177,2.062l-1.161,1.187l0.212,0.573l-0.177,1.56l0.81,0.677 l0.703,1.184l0.212,1.456l1.651,2.133l1.268,0.304l0.879,0.609l0.421,1.084l0.951,0.067l0.213-0.403l0.599-0.204l1.194,0.371 l0.983,1.152l1.058,0.1l1.159,1.051l0.143,0.912l0.913,0.308l0.949,1.082h0.703l0.318-0.608l1.795-0.814l0.552-0.774l1.124-0.033 l1.191-1.146l0.859,0.167l0.385-0.438l-0.226-0.456l-1.019-0.271l0.332-0.592l1.827-1.163l1.523,1.028l-0.051,0.979l-1.861,0.98 l0.439,0.844l0.58,0.134l0.683-0.69l0.754-0.557l0.947,0.507l-0.087,0.859l-0.562-0.017l-0.745,0.708l1.232,1.387l0.246,1.523 l0.457-0.271l0.635,0.066l0.068,0.914l0.668,0.946l0.67-1.117l-0.07-1.217l-0.741,0.541l-0.173-0.507l0.562-0.61l2.285,0.07 l0.284,0.439l0.314-0.51l1.16-1.524l2.394-1.385l1.338-1.153h-0.709l-0.524,0.307l0.212-0.271l-0.811-0.273l0.883-0.066h1.194 l1.76-0.507l3.588-0.679l2.881,0.542l1.197-0.677v-0.746h0.846l0.881-0.573l0.808-1.593l-0.351-1.76l-0.038-0.947l1.583-1.525 v-2.638l0.74-1.016l0.322-1.788l0.914-0.407l-0.072-0.879l2.818-3.392l0.774-0.138l0.495-1.829l1.129-1.423l0.703-1.899 l1.126-1.083l-0.119-0.975l0.808-0.407l0.74-1.726l-0.599-0.544l1.44-0.643l0.987-1.42l0.599-0.576l0.703-1.457l1.372-0.403 l0.846-0.407h-1.41l0.353-0.442l1.652-0.101l1.479-1.013l0.316-1.054l-0.213-0.539l0.213-0.914l1.512-1.116l0.036-0.949 l1.056-0.407l1.021-1.656l-0.142-0.847l0.526-1.354l-0.385-0.443l0.139-0.71l1.302-2.91l0.316-1.556l1.688-2.913l-0.068-1.084 l0.88-2.1l1.264-1.016l0.457-1.218l-0.349-1.32l0.771-0.916l-0.703-2.03l0.107-1.082l-0.67-1.693l-0.281-0.54l-0.036-0.916 l0.317-0.407l0.035-1.047l0.808-1.356l-0.068-0.405l-0.073-2.607l0.53-0.881l-0.389-0.505l-0.244-0.915l0.034-1.759l-0.385-0.138 l0.492-0.982l-0.915-0.371l-0.459-0.878l0.036-1.018l-1.058-0.879l-0.667-1.287l-0.28-1.254l-0.599-1.082l-0.6-0.034 l-0.703,0.304l-0.631-0.574l-0.142-1.152l-0.457-0.203l-0.108-0.643l-1.125-0.947l-0.525-0.474l0.244-0.677l-0.633-1.083 l0.88-1.083l0.21-1.357l-0.28-0.643l0.141-0.88l-0.632-0.336l-0.176,0.473l0.28,0.405l-0.351,0.474l-2.077-1.826l-0.458-1.052 l-0.383,0.205v0.607l-0.251,0.677l0.495,1.389l-1.021-1.185l-0.491,0.542v-0.847l-0.389-0.71l-0.176-2.507l0.284-0.269v-0.61 l-0.881-0.541l0.351-0.745l-0.669-0.508l0.212-0.779l-1.511-1.254l-0.422-0.878l-0.072-1.048l0.845,0.2v-0.88l-0.739-1.287 l-0.387,0.203l-0.807-0.1l-0.918-1.253l-0.702-0.033l-0.846-0.711l-0.493,0.507l-0.386-0.507l-1.019-0.339l-0.635,0.576 l0.529-0.814l0.915-0.235l0.068-0.645l-0.282-0.505l-1.054,0.1l-0.812-0.069l-0.246-0.541h-0.455l-1.937-1.051l-0.842-1.623 l-0.176-1.626l-0.563-1.051l0.036-0.843l0.457-0.173l0.385-1.793l-0.526-2.366l-0.562-1.087l0.493-0.236l-0.602-0.543h-0.703 l-0.879-1.757l-0.034-2.203l0.351-0.271l0.036-0.473l-0.421-0.507l-0.212-2.776l0.246-0.746l-0.246-0.879l0.316-0.272 l0.104-0.643l-1.619-1.489l-0.983-0.576l0.28-0.407l-1.054-1.013l-0.951,0.609l-0.457-0.307l-0.526,0.983l-0.775,0.033 l-0.949-1.39l0.106-0.744l-0.6-1.252l0.353-1.66l-0.212-1.996l-0.387,0.17l-0.353-0.813l0.423-0.777l-0.703-0.915l-0.034-0.778 l-0.492-0.306l0.033-1.116l0.563-0.541l-0.632-0.34l-0.774,0.17l-0.597-0.543l0.35-2.133l-0.28-0.475l-0.28-1.252l-0.987-0.203 l0.034-0.574l-1.092,0.406l-0.524,0.711v1.593l-0.493,1.353v0.374l-0.21,0.913l-0.527-0.069l-0.599,1.456l-0.81,1.083 l0.705,0.645l0.878,0.676l-0.563,0.374l-0.599-0.104l-0.387,0.882l-0.492,0.881l0.671,1.047l0.104,0.746l-0.703-0.271 l-0.528,0.373l-0.423,2.2l0.423,1.49l-0.316,1.623l0.459,1.15l-0.106,1.32l-0.878,0.778v0.747l-0.953,1.727l-0.176,2.537 l-0.808,0.88l0.28,0.917l-0.526,1.387l-0.846,0.812l-0.103,1.693l-1.443,1.048l-2.955,1.119l-1.195-0.813l-1.232-0.101 l-0.597-0.778l-1.164-0.882l-0.034-0.542l-0.314-0.406l-0.284-0.98l-1.088-0.169l-0.915-0.374l-1.442-0.101l-1.338-0.812 l-0.246-0.743l-1.018-1.254l-1.232-0.103l-1.091-0.677l-0.07-0.573l-0.6-0.07l-0.526-0.406l-1.021,0.033l-0.842-0.202 l0.247-0.372l-1.164-0.913l-0.21-0.88l-1.196-1.186l-0.773-0.101l-1.02-1.153l-0.036-1.116l0.88-1.354l0.21-1.083l0.915-0.609 l0.281-1.254l0.389-0.812l-0.812,0.575l-0.669-1.217l0.953-0.608l-0.178-0.95l0.492,0.033l0.563-0.236l0.248,0.339l0.841,0.17 l1.16-0.509l0.389-1.015l-0.808-0.644l0.632-0.473l0.668,0.166l0.457-1.522l0.6-0.303l0.633-0.814l0.033-0.438l-0.947-0.44 l-0.599,0.676l-0.601-0.235l-0.137-1.523l-0.777,0.336l-1.088,1.253l0.562,0.24v0.607l-0.771,0.373l-0.739-0.44l-0.176-0.54 l-0.389-0.509l-0.316,0.575l-0.635,0.168l0.037-0.573l0.527-0.544l0.211-0.439l-0.67,0.271l-0.49,0.543l-1.056,0.339l-0.139,0.37 l-0.564,0.104l-0.28-0.374l-0.882-0.065l-0.034-0.407l-0.707-0.95l-0.383-0.101l-1.091,0.577l-0.773-0.306l-0.461,0.271 l-0.349-0.645l-0.422-0.1l-0.527-0.947l-1.056,0.473l-1.126-0.169l-1.021-0.439l0.072-0.644l-0.703-0.847l-0.423,0.103 l0.104,0.371l-1.406,0.406l-0.353-0.812l-0.773-0.271l-1.229-0.677l-0.176,0.339l-0.636-0.438l-0.774,0.573l0.915,0.677 l-0.28,0.239l0.879,0.2l0.771-0.337l1.338,1.083l-0.104,0.611l0.281,1.419l-0.95,0.069l-0.353,1.014l-0.316-0.606l-0.701-0.204 l-0.739,0.475l-2.674,0.136l-1.021-0.85l-0.139,0.374l-1.055,0.373l0.105,0.846l-0.881-0.169l0.282,1.183l-0.316-0.438 l-1.092-0.338l-0.425,0.609l0.425,0.573l-0.07,0.374l-1.159-0.338l-0.6,0.573l0.457,0.475l-0.494,0.239l-0.773,0.423l0.072,0.558 l0.701,0.691l0.193,0.506l-0.825-0.45l-0.669,0.539h-0.807l-0.81,1.254l-0.739,1.419l-0.599,0.171l-0.28,1.187l-0.737,0.439 l0.631,0.644l1.583,0.27l-0.598,0.171l-0.353,0.643l1.901,0.607l-0.739,0.306l-1.196-0.137l-0.389-0.54l0.034,0.54l0.777,0.578 l-0.036,0.979l0.81,1.049l-1.196-0.913l-0.737-1.319l-0.881-0.101l-0.034,0.54l-0.353,0.61l-0.104-0.711l-1.971-1.219 l-1.444,0.27l0.457,0.51l-0.491,0.474l-0.492-0.407h-0.387l-0.423,0.54l0.671,0.848l-0.176,0.51l-0.143-0.374l-0.457,0.1v0.443 l-0.915,0.507l-1.336,0.237l1.056-0.474l0.703-0.913l-0.072-1.39l0.741-0.88l-0.457-0.576l-0.776-0.102l-1.337-2.335 l-0.702-1.018l-1.299-0.303l-0.883-0.543l-0.562,0.339l0.457,0.44l-0.526,0.17l-0.634,0.914l-0.635-0.102l0.211-0.509 l-0.846,0.236l-0.21,0.543l-0.633-1.287l-0.527-0.136l-0.143,0.746l0.67,0.37l-0.914,0.646l-0.316,0.915l0.316,0.539 l-0.951,0.543l-0.421-0.646l-0.526-0.031l-0.177-0.475l0.669-0.744l-0.703,0.033l-0.354,0.949l-0.983,0.236l-0.407,0.541 l-0.177,0.978l1.424,0.39l-1.19,0.97l-0.917-0.475l-1.09,0.711l0.211,0.643l1.302,0.171l-0.457,0.709l-0.633,0.137l-0.915-1.051 l-0.773,0.848l-0.925,0.137l0.189,0.66l0.178,0.615l0.066,0.567l0.562-0.186l-0.67,0.88l0.457,0.644l-0.771,0.372l-0.494,0.61 l1.62,0.27l-1.021,0.507l-0.21,0.406l-0.882-0.202l-0.49-0.644l-0.737-0.473l-0.705,0.576l-0.318-0.645l-0.88-0.542l-0.633,0.506 l1.164,0.78l-0.423,0.203l-0.493,0.88l0.95,0.813l0.949-0.034l-0.423,0.744l-0.034,0.813l-0.389-0.341h-0.492l0.176,0.95 l-0.387,1.015l-0.138,1.118l-1.479-3.046l-0.985-1.864l-0.529-0.709l0.247-1.083l-0.351,0.507l-0.987,0.709l-0.247,1.187 l-0.736,0.17l-0.104,0.507l-0.917-0.066l-0.527,0.674l-0.771,0.646l0.173,1.149v2.337l0.46,0.236v0.813l-0.845,0.439l-0.495,0.88 l-1.264,0.338l0.104,0.509l-1.092,0.677l0.038,1.15l-0.6,0.542l-1.443,1.931l-2.778,1.59l-2.428,0.203l-0.95,0.34l-1.405,0.101 l-1.126,0.271l-1.124-0.271l-1.444,0.54l-0.174,0.812l-0.951,0.44l-3.025-0.1l-0.774,0.439l-0.247,0.779l-1.896,0.744h-1.444 l-0.773-0.304l-0.737,0.066l-0.284-0.507l-0.773,0.37l-0.737,1.085l-1.971,0.339l-0.176,0.406h-0.527l-1.546,1.32l-2.007,0.913 l-2.639,0.779l-1.159,1.558l-0.036,1.42l-1.056,0.881l-0.739-0.475l0.351-0.506l-0.139-0.711l0.491-1.119l-0.034-0.811 l-1.479,1.083l-0.351,1.319l-1.056,1.93l0.703,1.354l-0.492,1.116l0.069,2.066l-1.792,2.166l-0.703,2.943l0.49,1.526 l-0.246,2.133l1.618,2.64l0.07,1.015l0.671,0.746l-0.601,1.319l0.351,1.185l-0.983,0.372l-0.423-0.709l-0.068-1.559l-0.601,0.848 l-0.278-0.306l0.068-1.42l-0.95-1.964l-0.599,0.98l0.212,1.963l1.269,1.22l0.879,1.692l-1.302,0.204l-1.058-1.356l-0.246-1.59 l-0.423,0.676l-0.525,0.271l0.81,1.489l1.618,1.929l0.95,2.541l-0.179,4.536l0.669,0.845l0.493,2.542l1.408,3.349l-0.491,1.187 l0.139,5.01l-0.211,0.677l0.493,1.387l-0.036,1.559l0.985,2.2l0.034,1.084l-0.877,0.608l0.456,0.475l-0.316,1.187l-0.176,1.962 l-0.81,0.711l0.246,0.574l-0.246,1.186l-0.812,0.576l0.177,1.151l-1.511,1.115l-0.671-0.576l-1.159,1.693L1284.988,742.75z ",
"M1495.404,839.487l0.454,0.232l0.351-0.088v-0.518l-0.772-0.043 l-0.169,0.31L1495.404,839.487L1495.404,839.487z M1481.801,896.856l0.739,0.615l0.957-0.098l0.653-1.146l-0.588-0.519 l-0.587,0.883l-0.773-0.058L1481.801,896.856L1481.801,896.856z M1475.444,879.691l2.278-2.194l0.468,0.031l-0.133,0.808 l-0.57,0.709l0.401,0.806l-0.202,0.518l-0.938-0.387l-0.836,0.323L1475.444,879.691L1475.444,879.691z M1555.266,778.843 l0.658-0.051l-0.034,0.454l-0.421-0.063L1555.266,778.843L1555.266,778.843z M1556.577,775.021l-0.202-0.275l0.361-0.163 L1556.577,775.021L1556.577,775.021z M1558.104,775.378l-0.538-0.646l0.538-1.197l0.066,0.696l0.286,0.404l-0.286,0.192 l0.116,0.424L1558.104,775.378L1558.104,775.378z M1543.029,810.446l0.941,0.207l0.199-0.5l0.401,0.016l0.034,0.633l-0.083,0.451 l0.252,0.114l0.369-0.114l0.268,0.325l-0.05,0.71l0.203,0.261l0.703-0.082l1.696-1.197l1.495-1.164l1.378-1.375l1.29-1.426 l1.579-1.891l0.856-0.535l0.57-0.05l0.385-0.468l0.07-0.714l0.349-0.454l0.91-0.354l0.599-1.743l0.938-1.354v-0.387l0.468-0.42 l-0.703-0.644l-0.773-0.13l-0.601,0.097l0.637-0.516l0.568-0.161l2.079-2.131l0.906-0.32l1.506,0.226l0.77,0.07l-0.149,0.564 l0.101,0.615l0.773-0.727l0.553-0.291l-1.091-0.438l0.119-0.874l0.587-1.389l0.518-0.568l0.773,0.033l0.218,0.309l0.403-0.389 l0.485-0.697l1.21-1.859l-0.018-0.616l-0.03-0.616l0.351-1.052l0.722-0.809l0.808-0.486l-0.137-0.209l-1.108-0.355l-0.401-0.519 l0.354-0.115l0.064-0.257l-1.053-0.193l-0.977,0.616l-1.7,1.705l-1.104,0.096l-0.601,0.293l-0.84-0.357l-1.878-1.871l-0.57,0.097 l-0.703-0.965l-0.268-0.612l0.471-0.485l0.164-0.999l-0.699-1.387v-0.708l-0.305-0.484l0.103-0.872l0.232-0.611l-0.468-0.099 l-0.137-0.999l-0.23-0.549l-0.336,0.226l-0.737-0.418l-0.235,0.354l0.67,0.646l-0.033,0.869l0.133,0.324l-0.703,0.646 l0.036,0.611l0.601,0.74v0.52l-0.736,0.223l-0.537-0.58l-0.1-0.741l-0.938-0.128v-0.42l-0.737-0.322l-0.57,0.098l-0.066-0.452 l0.703-0.387l0.269-0.612l-0.738-0.582l0.54-1l0.703-0.161l0.198-0.902l-0.301-0.678l0.199-0.484l-0.3-0.74l0.066-1l-0.971-0.678 l0.099-0.45l0.57,0.321l0.773-0.159l0.165-0.97l0.336-0.323v-1.258l-0.336-1.159l0.135-0.743l-0.402,0.161l-1.104,0.452 l-0.84-0.805l0.505-0.42l-0.505-0.452l-0.367-0.064l0.333-0.515l0.737-0.323l-0.133-0.485l-0.871-0.19l-0.571-0.519l-0.57,0.226 l-0.131-0.775h0.366l0.306-0.515l-0.473-0.064l-0.468,0.323l0.008,0.455l-0.385,0.648l-0.604-0.259l0.252-0.713l-0.368-0.6 l-0.236-1.15l0.051-0.775v-0.273l0.252-0.098l-0.419-0.453l-0.472,0.308l-1.241-0.083l-0.034,0.276l0.586,0.632l0.993,2.313 l0.149,0.827l-0.149,1.487l-0.372,0.373h-0.353l-0.166,0.242l0.536,1.86l0.271,0.259l0.703-0.484h0.957l-0.653,0.192 l-0.656,0.761l0.235,1.084l0.554,1.229l0.222,2.267l-0.02,1.359l0.036,0.938l0.485-0.226l0.199-0.794l-0.233-0.548l0.286-0.242 l0.336,0.502v0.76l0.504-0.064l0.083-0.373l-0.119-0.275l0.269-0.065l0.084,0.631l-0.502,0.861l-0.235,0.707l-0.05,0.439 l-0.337,0.097l-0.351-0.517h-0.389l0.203,1.341l0.637,1.731l0.389,0.132l0.318-0.164l0.335,0.584l0.084,0.421l0.419,0.306 l-0.922,0.6l-0.019,0.325l0.318,0.307l-0.282,0.612l-0.54,1.541l0.019,0.776l-0.252,0.273l0.468,0.471l-0.184,0.323l-0.639,0.049 l-0.399,0.697l-0.02,0.435l0.521,0.503l-0.538,0.272l-0.57,0.05l-0.404,0.971l-0.621,3.171l-0.101,0.761l-0.654,0.47l-0.671,0.05 l-0.79-0.292l-0.873,0.114l-1.763,0.809l-0.804,0.857l-0.252,1.02l0.199,1.391l0.79,0.664l1.328,0.776l0.633,1.162l1.241,0.387 l0.505,0.481l0.198,1.938l0.103,0.192l-0.234,0.226v1.031l-0.4,0.846l-1.829,2.232l-1.309,1.312l-1.378,1.197l-0.485,0.565 L1543.029,810.446L1543.029,810.446z M1540,806.997l0.04-0.648l0.521-0.688l0.737,0.187l-0.177,0.429l-0.595,0.323l-0.421,0.6 l-0.22,0.04L1540,806.997L1540,806.997z M1539.695,808.18l0.385-0.422l0.421-0.114l-0.377,0.519L1539.695,808.18L1539.695,808.18 z M1538.966,807.985l0.487-0.032l0.418-0.195l0.033-0.242L1538.966,807.985L1538.966,807.985z M1500.839,849.509l0.52-0.31 l-0.101,0.406L1500.839,849.509L1500.839,849.509z M1496.422,851.257l-0.688,0.777l-0.438-0.034l-0.133-0.389l0.91-0.888 l0.367-0.229v-0.565l0.688-0.129l0.252-0.811l-0.066-0.857l0.133-0.615l0.807-0.226l0.806,0.794l0.399,0.938l0.154,0.289 l-0.052,0.195l-0.521,0.097l-0.199-0.211l-0.421,0.161l0.304,0.064l0.369,0.343l0.419,0.194l0.066,0.354l-0.286,0.355 l-0.336-0.128l-0.989,0.324l-0.487,0.339l-0.484-0.032l-0.27-0.18L1496.422,851.257L1496.422,851.257z M1495.717,843.699 l-0.637-0.643l0.133-0.841l0.504-0.29l-0.435-0.103l-0.557-0.081l1.092-1.181l0.959-0.13l0.772,0.016l0.336-0.275l-0.336-0.421 l-0.707-0.648l-0.065-0.549l0.805-1.295l0.32-0.212l0.336-0.549l0.369,0.179l0.351,0.777l0.353-0.437l0.085-1.538l0.419-0.552 h0.387l1.361-1.456l0.419,0.293l0.403-0.438l-0.017-1.069l0.555-0.355l0.588-0.516l0.401,0.319l0.133,0.552l0.202-1.053 l0.808-0.985l0.721-0.208l1.126-0.874l0.536-0.663l1.461-1.214l0.705-0.052l0.401,0.327l0.826-0.195l0.77-0.229l0.353,0.148 l0.79,0.71l-0.119-0.906l-0.318-0.712l0.149-0.501l1.63-0.973l0.906-0.192l1.505-1.367l1.741-0.838l0.739,0.031l0.133-0.647 l1.171-0.578l0.973-0.128l1.876-1.293l1.677-1.901l0.099-0.71l0.438-0.549l0.03-0.966l0.75-0.796l0.503-0.244l0.053-0.888 l0.25-0.811l0.754-0.534l0.94,0.082l0.79-0.307l0.32-0.664l1.058-1.247l0.401-0.145l0.84-1.083l0.84-2.024l0.153-1.117 l0.82-0.646l0.622-0.241l1.243-0.794l0.754,0.098l-0.553,0.742l-0.101,0.583l0.385,0.454l0.335,0.178l0.472-0.356l0.283,0.275 l-0.048,0.374l0.25,0.095l-0.149,0.437l-0.453,0.519l-0.387,0.275l0.438,1.278l0.602,0.292l0.623-0.827l0.588-0.369l0.57,0.161 l0.399-0.018l-0.097,0.518l0.451,0.451l0.842-0.565l-0.387-0.11l-0.218-0.229l0.57-1.035l0.671,0.147l0.032,0.518h0.254 l-0.538,0.939l-0.975,0.564l0.656-0.098l0.705-0.193l-0.872,1.149l-0.304-0.08l-0.234,0.742l-0.066,0.777l0.385,0.874 l0.101,0.875l0.472,0.145l-0.842,0.488l-2.416,2.004l-0.133,0.518l-1.645,1.613l0.102,0.354l-0.738-0.065l-0.971,0.968 l-0.135,0.841l-1.038,1.19l-0.203,0.518l-1.372,0.837l-1.275,0.388l-0.669,0.258l-0.335,1.417l0.1,1.033l-0.267,0.388 l0.637,0.128l0.399,0.613l-0.131,1.195l-0.438,0.322l-0.301-0.226l0.1-0.905l-0.267-0.227l-0.235,0.291l0.034,0.646l-0.267,0.421 l-0.705-0.26l-0.973-0.033l0.84-0.32v-0.355l-0.637-0.227l-0.604,0.421l-0.03,0.387l-0.574,0.193l-0.332-0.099l-0.338-0.902 l-0.771-0.322l0.604,0.611l0.066,0.681l-0.57,0.74l-0.501,0.127l-0.773,0.035l-0.265,0.676h-0.538l-0.638-0.484l-0.2,0.809 l-0.705,0.322l-0.802,0.902l-0.034,0.774l-0.504,0.709l-0.902,1.45l-0.169,0.938l-0.472,0.773l-2.007,1.387l-0.673,0.741 l-0.329,1.324l-0.737,1.279l-0.993,1.113l0.202,0.14l-0.159,0.292l-0.478,0.281l0.781-0.136l0.099,0.25l-0.411,0.29l-1.2-0.021 l-1.368,0.557l-0.587,0.843l-0.318,0.985l-1.092,0.438l0.168-0.6l-0.57-0.453l0.218,0.729l-0.085,0.452l-0.87,0.355l-1.328,1.117 l-1.612,0.631l-1.14,0.145l-0.756-0.194v-0.467l-1.227,0.564l-0.454-0.098l0.907-0.518l-0.62-0.435l-0.889-0.746l-0.119-0.825 l-0.335-0.372l-0.757,0.018l-0.484-0.422l0.248-0.307l-0.283-0.713l-0.706-0.326l-0.478,0.068l-0.11,0.525l-0.362-0.05 l-0.115-0.251l-1.175-0.097L1495.717,843.699z ",
"M685.284,236.661l-0.285-0.598l0.252-0.631l0.47-0.114 l0.152,0.939L685.284,236.661L685.284,236.661z M683.134,232.758l0.972-0.321l-0.1,0.936l1.038,1l0.739,0.354l0.737-0.613 l0.871,0.066l1.474,1.353l1.942-0.033l0.773,0.29l1.237-0.353l-0.166-1l0.3-0.419l0.235,0.547l1.039,0.259l1.006-0.936 l0.066-1.097l1.207-0.128l-0.434,0.549l0.334,0.418l0.368-0.418l0.703-0.13l0.838-1.064l0.445,0.239l0.302-0.097l0.791,0.048 l-0.019,0.243l0.387-0.243l1.948-1.634l0.74-0.972l2.317-0.438l0.452-0.532l-0.218-0.407l0.117-0.596l0.438,0.048l0.2,0.663 l1.16,0.388l0.672-0.713l0.118-0.548l-0.286-0.309l0.102-0.567l0.536-0.146l-0.403-1.1l0.37-0.421l0.789,0.47l0.168,0.711 l0.755-0.113l0.504-0.938l-0.269-0.793l-0.823-0.841l-0.032-0.891l0.504-0.404l-0.068-0.809l0.807-0.404l0.721-0.017l0.438-0.615 l-0.774-0.744l-1.846-0.146l-0.587,0.437l0.488-0.809l-0.12-0.647l-1.041-0.08l-0.269,0.225l-0.335-0.824l0.654-0.777 l0.688-0.211l-0.15-1.165l-0.453-0.258l-0.622,0.468l-0.755-0.308l-0.369-0.825l0.84-0.356l0.1-0.677l0.418-0.341l0.875-0.21 l-0.94-0.405l-0.724,0.195l-1.477,1.343l-0.269,0.745l-0.536,0.08l-0.604-0.874l0.352-0.533l-0.436-0.438l-0.152-0.793 l-0.872-0.243l-0.722,0.454l-0.554-0.26l-0.42,0.762l0.369,0.856l-0.354,0.615l-0.906,0.081l-0.906,0.405l-0.015-0.744 l-0.489-0.341l-0.538,0.762l-0.519,1.132l-0.896-0.037l-0.872-1.451l-0.669,0.161l-0.303-0.227l-0.703,0.066l-0.3,1.482 l0.837,1.581l-1.006,2.258l0.369-1.936l-0.904-1.322V215.7l-0.369-0.355l0.101-0.904l-0.938-0.547l-1.81,1.128l-0.268,0.967 l0.335,0.741l-0.771,1.195H689.1l-0.1-1.323l-0.638-0.257l-0.135-1.839l-0.636-0.485l-1.139,0.937l0.167,2.031l0.47,0.613 l-0.068,1.42l-0.569,0.709l-0.804,0.032l-0.034-1.064l-0.937,0.452l-0.37,1.063l-0.57,0.355l-0.033,1.419l-0.636-1.386 l-0.671-0.064l0.133-0.679l0.672-0.836v-0.678h-1.039l0.434-0.582l-0.537-1.033l0.671,0.421l0.737-0.742l-0.201-0.516 l-0.872-0.389l0.769-0.547l-0.703-0.743l-0.5,0.387l-0.438-0.677l-1.148-0.617l-0.017-0.761l-0.453-0.842l-0.856,0.212 l-0.974-0.293l-1.36,0.098l-0.134,0.372l0.387,0.534l0.553-0.031l0.101-0.389l0.672,0.033l0.537,0.339l0.739,0.243l-0.369,0.42 L678.379,213l-0.822,0.016l0.117,0.292l1.277,0.809l0.839,0.972l-0.236,0.646l-0.404,0.065v-0.535l-0.956-0.647l-0.638,0.55 l-0.538-0.161l0.27-0.532l-0.755-0.923l-0.891-0.373l-0.654,0.387l0.638,0.844l-0.185,0.469l-0.537-0.778l-0.755-0.226 l-0.218,0.535l0.519,0.647l0.539,0.307l0.318,0.454l-0.857-0.342l-0.822,0.342l0.504,0.695l1.225,0.339l-0.587,0.114 l-0.251,0.211l0.218,0.5l-0.287,0.066l-1.309-1.166l-0.402-0.082l-0.436,0.454l0.57,1.02l0.353,0.616l-0.353,0.144l-0.789-1.019 l-0.772-0.209l-0.487,0.873l0.974,0.372l0.772,0.825l1.142,0.211l0.571-0.875l1.006-0.274l0.436-0.777l0.286,0.453l0.017,0.438 h0.504l0.604-0.355l0.167,0.842h0.387l0.737-0.551l0.219-0.47l0.084,0.891l0.286-0.018l0.94-0.743l-0.051,0.42l-0.302,0.695 l0.404,0.31l0.62-0.502l0.99,0.55l-0.537,0.209l-0.536,0.018l-0.639,0.452l-0.756,0.065l-1.224,0.518l-0.085,0.324l1.545,0.42 l0.839-0.129l0.353-0.534l0.521-0.209l-0.05,0.711l-0.52,0.696l-1.596,0.176l-0.537-0.145l-0.738,0.679l-0.368-0.437 l-0.286-0.278l-0.009-0.364l-0.478-0.138l-0.144,0.21l0.168,0.365l-0.722,0.501l-0.546-0.284l-0.78,0.05l-0.798,0.396 l-0.932-0.356l-0.629,0.237l-0.436-0.047l0.621,0.954l0.369,0.793l1.192,0.081v-0.292l1.495,0.387l1.762-0.113l0.99,0.081 l-0.067,0.405l-0.604,0.389l-0.034,0.468l0.84,0.567l0.202,0.583l0.554-0.096l1.16-0.779l-0.204,0.567l-0.823,0.583l-0.453,0.647 l0.706,0.502l1.259-0.97l0.991,0.291l0.234,0.518l-0.604-0.356l-0.907,0.307l-0.655,0.551l-0.855,0.017l-0.05,0.614l-0.437,0.518 l-0.503-0.113l-0.587,0.325l-0.286-0.566l-0.771-0.502l-0.033,0.388h-0.337l0.202,1.052l0.437,0.193l-0.336,0.242l-0.117,1.457 l1.091-0.016l0.302-0.34l0.705,0.404l1.527,0.179l1.092-0.809l0.923,0.486l0.705-0.421l0.168,0.502L683.134,232.758z ",
"M28.324,465.377l0.57-0.774l-0.604-0.192l-0.335,0.613 L28.324,465.377L28.324,465.377z M32.613,464.603l0.436-0.869l-0.235-0.421h-1.039l-0.637,0.904l0.737,0.516L32.613,464.603 L32.613,464.603z M40.086,467.732l-0.77-0.518l-0.537-1.031l-0.738,0.161l-0.168,0.612l0.906,1.225l1.14,0.098L40.086,467.732 L40.086,467.732z M44.142,469.312l-0.805-0.26l-0.502,0.195l-0.638-0.387l1.14-0.033l1.206-0.192L44.142,469.312L44.142,469.312z  M46.018,471.538l-0.871-0.741l-0.839-0.613v-0.485l0.604-0.127l0.637,0.481l1.241,0.131l0.636,0.838l-0.537,0.547 L46.018,471.538L46.018,471.538z M47.223,477.051l0.57,0.969l-0.167,2.191l1.105,0.677l1.777-1.932l1.876-0.711l0.369-0.677 l-0.872-0.677h-0.536l0.334-0.776l-0.872-1.03l-1.073,0.063l-0.368-0.709l-1.105-0.711l-0.437,0.26l0.201,0.646l-0.367,1.19 l-0.438,0.518V477.051z ",
"M350.769,575.734l-0.757,0.679l0.084,0.758l1.109-0.854 l-0.1-0.6L350.769,575.734L350.769,575.734z M346.632,574.859l0.722-0.337l0.707,0.337l-0.707,0.646L346.632,574.859 L346.632,574.859z M345.337,572.695l-0.286,0.693l0.79,0.147L345.337,572.695L345.337,572.695z M341.805,573.745l0.809,0.227 v0.793l-0.892-0.05l-0.236-0.63L341.805,573.745L341.805,573.745z M342.226,572.39l0.69,0.161l0.085,1.098l0.874,1.373 l-0.774,0.453l-0.472,1.002l0.304,0.404l1.631-0.373l0.335-0.935l-0.689-1.004v-0.598l-0.505-0.855l-0.033-1.211l-0.723-0.649 l-0.824,0.501L342.226,572.39z ",
"M481.066,491.128l1.408,0.87l-1.039,0.354l-0.438-0.484 L481.066,491.128L481.066,491.128z M481.735,488.516l-0.669,0.838l0.804,0.708l0.234-0.806L481.735,488.516L481.735,488.516z  M477.211,490l-0.669,0.45l0.504,0.678l0.97,0.128L477.211,490L477.211,490z M474.999,487.096l0.773-0.549l1.204-0.031 l-0.705,0.774l-0.031,0.966l-1.105-0.74L474.999,487.096L474.999,487.096z M468.868,488.451l0.501,0.481l-1.475,0.195 L468.868,488.451z ",
"M464.758,488.066l0.773-0.726l1.295,0.339l-0.353,0.29 L464.758,488.066L464.758,488.066z M463.84,485.772l-0.569-0.257l-1.911,0.257l-3.384-0.289l-0.369,0.646l-0.805,0.387 l0.101,0.612l-0.134,0.451l0.402,0.741l2.212,0.098l0.604,0.192l1.607-0.389l0.604,0.294l1.542-0.68l1.207-1.256l-0.871-0.259 L463.84,485.772z ",
"M450.718,486.694l0.521,0.531l0.757,0.098l-0.589,0.404 l-0.638-0.257l-0.354-0.632L450.718,486.694L450.718,486.694z M436.61,479.782l0.135,0.454l-0.469,0.841l0.369,0.707 l-0.301,0.969l-0.738,0.354l-0.134,0.354l0.435,0.939l-0.033,0.74l-0.066,0.549l-1.107,1.127l0.078,0.496l0.51,0.042l0.504,0.999 l-0.302,0.741l0.838,0.322l0.234,0.451l0.603,0.293l0.57-1.326l1.139-1.45l-0.134-0.451l0.403-0.646l0.535,0.485l0.638,0.066 l0.569-1.098l0.669,0.388l0.067,0.868l0.537,0.324l1.239-0.324l1.24-1.094l1.342-0.227l1.441,0.193l0.905-0.323l0.668,0.516 l1.074,0.066l1.306,0.323l0.268-0.711h0.569l0.436-0.71l-0.403-0.646l-1.876-1.03h-0.705l-1.138-0.355l-0.772,0.033l-1.239-0.579 l-1.307-0.744h-0.906l0.637-0.226l1.308,0.356l2.011,0.192l0.805-0.292l-0.604-0.451l-0.537,0.098l-1.508-0.29l-0.736-1.388 h-0.838l-0.403,0.163l-0.603-0.421l-3.886-0.805l-0.438,0.26l-0.871-0.229l-1.541,0.26L436.61,479.782z ",
"M591.469,255.06l-2.098-1.051l-1.175-0.032l-0.101-0.339 l0.134-0.712l0.27-0.034l-0.052-0.387l-0.401-0.065l-0.422,0.518l-0.334,0.049l-0.035,1.149l-0.622-0.292h-0.319l-0.167,0.438 l0.034,0.631l-0.336,0.339l-0.487-0.227l0.253-0.793l0.32-0.551l-0.069-0.678l0.856-1.149l-0.151-0.179l-0.621,0.406 l-0.621,1.538l-0.756,0.614l-0.301-0.177l0.084-0.583l0.839-0.679l0.152-0.875l0.535-0.825l-0.57,0.163l-0.369,0.017 l-0.353,0.696l-0.654,0.162l-0.169-0.275l0.253-0.68l0.621-0.55l-0.203-0.195l-0.418,0.098l-0.303,0.469l-0.538,0.324 l-0.218,0.565l-0.285-0.775l-0.068-0.276h-0.301l-0.487,0.438h-0.352l0.133-0.389l1.293-0.889l0.066-0.746l0.573-0.174 l0.924-0.713l-0.118-0.201l-0.983,0.647l-0.788,0.275l-0.192-0.202l0.243-0.219l0.764-0.209l0.722-0.558l0.713-0.414l0.622-0.209 l0.025-0.729l-0.302-0.565h-0.377l-0.865,1.141l-1.402,0.857l-0.999,0.315l-0.134-0.299l0.445-0.331l0.52-0.171l0.689-0.647 l0.083-0.857l-0.378-0.696l-0.428-0.203l-0.411,0.234v0.494l0.344,0.372l-0.083,0.396l-0.506,0.422l-0.587-0.268l-0.614,0.149 l-0.554,0.015l-0.502,0.308l-0.37,0.631l-0.454,0.163l-0.521-0.145l-0.402-0.373l-0.705,0.113l-0.54,0.486l-0.519-0.276 l-0.42,0.227l-0.033,0.372l0.218,0.39l-0.369,0.193l-1.326-0.291l-0.135-0.454l0.403-0.567l0.688-0.095l0.502-0.438l-0.099-0.275 l-0.722-0.323l-0.017-0.875l-0.671-0.533l-0.202-0.259l-0.488,0.179l-1.108,0.808l-0.653-0.258l-0.203-0.617l0.688-0.598 l-0.284-0.371l-0.605-0.032l0.051-0.292l0.974-0.454h0.621l0.302-0.339l-0.186-0.42l-0.552-0.065l-0.875,0.259l-0.638,0.454 l-1.075,0.292l-0.637-0.405l0.118-0.421l0.688-0.209l0.471-0.373l-0.036-0.729l0.991-0.404l0.354-0.355l-0.168-0.243 l-0.857-0.194l-0.487,0.387l-0.669,0.308l-0.521-0.438l0.401-0.452l0.604-0.129l0.555,0.097l0.353-0.454l0.586-0.419 l-0.118-0.422l0.336-0.406l-0.285-0.259l-1.124,0.39l-0.254,0.356l-0.352,0.388l-0.823,0.081l0.269-0.372l0.621-0.34l0.119-0.565 l-0.369-0.324l0.468-0.34l-0.033-0.356l-0.386-0.226l-0.671-0.016v-0.195l0.335-0.372l-0.135-0.583l-0.554-0.145l-0.318,0.291 l-0.688,0.049l-0.084-0.26l0.419-0.68l0.486-0.534l0.286-0.032l0.822-1.003l-0.419-0.436l0.119-0.454l0.3-0.403l-0.318-0.259 l-0.284,0.144l-0.153,0.372l-0.403-0.614l-0.604,0.081l-0.201,0.292l-0.353-0.016l-0.384-0.874l0.166-0.47l1.208-0.404 l0.085-0.308l-0.671-0.355l-0.672,0.016l-0.688,0.389l-0.47-0.032l-0.269-0.437l0.186-0.486l0.638-0.178l0.721,0.193l1.161-0.193 l0.351-0.34l-0.403-0.063l-0.418-0.212l-1.042,0.065l-0.387,0.243l-0.486-0.096l-0.504-0.422l0.891-0.55l1.091-0.065l0.402-0.226 l-0.369-0.147l-0.571-0.032l-0.521-0.405l0.319-0.096l0.638,0.113l0.42,0.193l0.991-0.404l0.419-0.372l-0.2-0.228l-0.455,0.129 l-0.537,0.21l-0.537-0.065l-0.37-0.178l-0.705,0.081l-0.302,0.503l-0.503,0.308l-0.638-0.453l-0.118-0.52l0.469-0.648l0.924-0.08 l0.738-0.454l-0.217-0.161l-0.872,0.146l-0.808-0.115l-0.184-0.631l0.218-0.615l0.788-0.178l1.78,0.08l1.024-0.274l1.109-0.032 l0.704-0.55l0.135-0.211l-0.739,0.016l-0.705-0.21l-0.806,0.486l-1.293,0.209l-0.654,0.259h-0.806l-0.403-0.275l0.168-0.211 l1.476,0.05l0.655-0.372l0.806-1.07l0.74-0.095l0.334,0.161l0.672,0.519h0.47l0.186-0.324l-0.404-0.114l-0.722-0.777 l-0.386-0.032l-0.353-0.34l0.135-0.339l0.554-0.017l0.319-0.292l0.335,0.082l0.37,0.598l0.755,0.857l0.539,0.292l0.251-0.113 l-0.353-0.696l-0.438-0.291l-0.05-1.424l0.572-0.518l0.017-0.274l-0.556-0.065l-0.486,0.469l-0.419,0.048l-0.468-0.582 l-0.218,0.372l-1.058,1.035l-0.657,0.26l-0.285-0.211l0.101-0.437l0.42-0.324l-0.084-0.129l-0.554,0.257l-0.436,0.583 l-0.336,0.082l-1.041,0.939l-0.453,0.163l-0.688,1.196h-0.336l-0.286-1.019l0.135-0.794l0.369-0.453l-0.554-0.486l0.134-0.614 l0.033-0.518l0.655-0.308l1.293-0.421l0.621,0.049l0.739-0.665l0.268-0.161l-0.318-0.372h-0.487l-0.47,0.404l-0.521-0.145 l-0.235,0.549l-0.537,0.374l-0.654-0.064l-0.37-0.585l-0.051-1.148l0.571-0.404l0.1-0.598l-0.302-0.746l-0.268,0.017 l-0.437,0.468l-0.503-0.08l-0.134-0.533l0.57-0.55l0.906-0.066l0.555-0.467l1.107-0.228l0.437-0.421l0.505-0.211l0.217-0.775 l0.336-0.131l0.302,0.325l0.37-0.372l1.477-0.081l0.403,0.273l0.639-0.015l-0.201-0.486l-0.789-0.211l-0.204-0.552l-0.486-0.079 l-1.78,0.938l-0.521-0.017l-0.453,0.307l-0.185,0.647l-0.485,0.324l-0.775,0.178l-0.586,0.664h-0.354l-0.217-0.373l0.15-0.468 l-0.57-0.129l0.084-0.357l0.57-0.631l-0.755-0.453h-0.384l-0.656-0.469l0.117-0.26l1.074-0.421l0.487-0.501l0.455-0.13 l0.318,0.356l0.755,0.098l0.722-0.26l0.707-0.533l0.603,0.048l0.219-0.501l-0.186-0.226l-0.622-0.081l-0.873,0.518l-0.621,0.421 l-0.386-0.064l-0.587-0.616l-0.352-0.016l-0.37,0.437l-0.923,0.501l0.067-0.372l-0.486-0.112l-0.404,0.161l-0.637-0.08l0.2-0.308 l0.555-0.162l1.275-0.421l1.276-0.76l0.655-0.243l1.326-0.242l0.705-0.811l1.495-1.552l1.459-0.697l1.174-0.403l0.655-0.034 l0.387-0.291l-0.051-0.325l-0.638-0.194l-1.091,0.308l-2.35,1.068l-1.041,1.02l-0.722,1.036l-0.854,0.405l-1.546,0.34 l-0.487,0.308l-1.813,0.745l-0.655,0.016l-0.151-0.406l0.269-0.371l-0.033-1.54l0.502-0.582h0.471l0.722,0.454l0.519-0.162h1.041 l0.823-0.065l-0.235-0.323l-0.604-0.374h-0.789l-0.521,0.291l-0.521-0.113l-0.251-0.614l0.084-0.405l0.823-0.13l0.806,0.469 l0.688,0.065l0.892-0.356l-0.137-0.259l-0.621-0.21l-0.318,0.08l-0.252-0.177l0.067-0.42l0.772-0.227l0.269,0.161l0.301-0.177 l0.689,0.257l0.352-0.193l-0.15-0.582v-0.534l-0.151-0.162l-0.537-0.05l-0.317,0.291l-0.707,0.098l-2.031-0.615l-0.856-0.064 l-0.453-0.372l0.05-0.275l0.89-0.017l0.587,0.178l0.354-0.194l-0.252-0.209l-0.739-0.018l-0.284-0.291l0.033-0.422l1.277-0.016 l0.269-0.273l0.907-0.034l3.004,0.163l0.621-0.179l1.091,0.146l0.454-0.161l-0.099-0.372l-1.127-0.454l-1.343-0.016l-1.578,0.372 l-0.889,0.049l-0.185-0.21l-0.487-0.131l-0.923,0.228l-0.621,0.419l-0.218-0.161l0.084-0.631l0.487-0.728l0.788-0.357 l0.621-0.404l0.874-0.389l0.336-0.728l0.772-0.534l0.47-0.08l0.235,0.274l0.789-0.032l0.554-0.211h0.539l0.233,0.243l0.974,0.339 l0.855,0.777l0.841-0.081l0.941,0.338l0.955,0.955l0.958,0.502l1.259,0.404l0.537-0.291h0.42l0.168-0.228l-0.151-0.42 l-0.772,0.161l-0.285,0.292l-0.656-0.114l-1.005-0.648l-0.874-1.196l0.051-0.34l0.468-0.016l1.36,0.033l1.177-0.437l0.419-0.454 l-0.218-0.419l-1.091-0.244l-0.455,0.13l-0.016,0.356l0.267,0.324l-0.251,0.129l-1.174,0.048l-0.537-0.325l-0.153-0.581 l0.488-0.18l0.437,0.066l0.202-0.34l-0.371-0.485l-0.503,0.017l-0.183,0.193l-0.503-0.097l-0.42,0.032l0.016,0.34l0.201,0.47 l0.017,0.599l-0.521,0.534l-0.671,0.354l-0.454-0.193l-0.889-1.019l-0.739-0.017l-0.47-0.293l-0.084-0.436l-0.302,0.065 l-0.369,0.39l-1.125,0.161l-0.705,0.033l-0.604,0.469l-0.889,0.971l-0.638,0.193l-0.319-0.178v-0.371l1.006-1.198l0.421-0.145 l0.318-0.34v-0.34l0.285-0.065l0.504-0.436v-0.422l0.286-0.533l0.369,0.065l0.705,0.5l0.89,0.374h1.312l-0.137-0.308 l-0.585-0.146l-0.437,0.033l-0.503-0.356l-1.16-1.003l-0.185-0.648l-0.537-0.226l-0.118-0.357l0.386-0.178l1.04,0.308 l0.857,1.101l0.857,0.727l0.133-0.227l-0.3-0.566l-0.219-0.743l0.267,0.08l0.488,0.552l0.234,0.549l1.596,0.922l0.604-0.113 l0.369-0.21l0.872-0.033l0.419,0.405l0.958,0.567l0.789,0.338l0.152,0.21h0.653l-0.033-0.274l-0.757-0.696l-1.861-1.439 l-0.186-0.405l0.084-0.323l1.075-0.372l0.083-0.518l0.302-0.583l0.369-0.194l-0.017-0.179l-0.605-0.081l-0.587,0.228 l-1.225-0.017l-0.32,0.339l0.202,0.259l0.671,0.501l-0.302,0.291l-1.058-0.016l-0.353,0.146l-0.705-0.163l-0.821,0.227 l-0.42-0.567l-0.689-0.273l-0.168-0.374l0.47-0.291l0.37-0.338l-0.504,0.015l-0.89,0.177l-0.185-0.177l1.126-0.292l1.225-0.535 l0.536-0.291l1.04,0.065l0.287,0.226l0.771-0.112h0.808l1.007,0.127l0.017-0.468l0.451-0.227l0.337-0.373l0.586-0.371 l0.253-0.455l-0.201-0.08l-0.688,0.485h-0.403l-0.218-0.372l0.453-0.695l0.537-1.668l-0.084-0.794l0.37-0.162l0.303,0.195 l0.453,0.809l-0.186,0.259v0.403l0.772,0.146l0.588-0.032l0.335,0.339l0.521,0.015l0.135-0.208l0.385,0.146h0.42l-0.101-0.486 l-0.521-0.308l-1.14-0.096v-0.259l0.721-0.112l0.907-0.163l-0.051-0.341l-0.42-0.225l-0.453,0.016l-0.235-0.405l-0.303-0.145 l-0.353,0.227l-0.419-0.049l-0.739-0.112l0.033-0.39l0.403-0.471l0.421-0.032l0.67-0.97l0.487-0.357l0.218,0.115l0.521-0.115 h0.554l-0.118-0.404l-0.536-0.178h-0.756l-0.236-0.259l0.287-0.324l0.873-0.374l0.398-0.469l0.638-0.227l0.033-0.291l0.604-0.354 l-0.436-0.517h-0.537v-0.387l0.604-0.193l0.602,0.034l-0.1-0.613l-0.468-0.195l-0.805,0.066l-0.738,0.547l-0.804-0.032 l-0.5-0.515l-0.503,0.29l-0.738-0.033l-0.435-0.482l-0.436,0.191l-0.738-0.127l-0.568-0.645h-0.738l-0.538-0.291l-0.031-0.419 l-0.335-0.838l-1.006-0.613l-1.642-0.71l-1.273-0.418l-0.872-0.838l0.101-0.515l-0.369-1.033l-0.537-0.679l-0.434-0.353v-0.451 l0.985-0.814l0.856-0.097l0.421-0.195l0.57,0.228l0.839,0.096l0.822,0.711l0.925,0.146l0.62,0.065l0.352,0.274l0.841,0.047 l0.737,0.276l0.539,0.308l0.587,0.113l0.437,0.552l0.554,1.698l0.638,0.727l0.823,0.534l0.706,0.599l0.855,0.323l0.453-0.178 l0.471-0.662l-0.234-0.179l-0.487,0.243l-0.403,0.064l-0.521-0.421l-0.923-1.051l0.05-0.357l0.185-0.048l0.839,0.808l0.453,0.018 l0.051-0.371l0.519-0.049l0.085-0.373l-1.143-0.728l-1.023-0.826l-0.252-0.55l0.151-0.324l0.301,0.08l0.587,0.777l0.521,0.034 l-0.386-0.811l-0.923-0.922l-0.773-0.55l-0.234-0.534l0.201-0.307l0.89,0.324l1.729,0.55l0.504-0.209l0.084-0.518l-0.689-0.841 l-0.402-0.033l-0.57,0.308l-0.639,0.097l-0.891-0.097l-0.184-0.404l0.3-0.422l1.042-0.501l0.371,0.113l0.671,0.403l0.134-0.372 l-0.084-0.471l-0.521-0.596l-0.352,0.08l-0.269,0.26l-0.587,0.015l-0.371,0.275l-1.24,0.987h-0.403l-0.034-0.356l0.502-0.404 l0.254-0.632l0.52-0.711l0.401-0.016l0.54,0.032l0.621-0.47l0.604-0.129l0.303-0.306l-0.186-0.162l-1.074-0.066l-0.622,0.486 l-0.503,0.113l-0.503-0.162l-1.008,0.113l-0.285-0.21l-0.017-0.501l0.504-0.324l0.554-0.454l1.141-0.08l1.494-0.34l1.024-0.551 l0.1-0.356l-0.285-0.178h-0.437l-0.67,0.405l-0.773,0.258l-0.571-0.177l-0.386-0.566l-0.386-0.211l-0.706,0.049l-0.335-0.195 l0.017-0.324l0.621-0.549l0.369-0.956l0.419-0.372l0.653-0.339l-0.048-0.243h-0.32l-0.755,0.308l-0.822,1.084l-0.033,0.388 l-0.706,0.453l-0.219,0.242l-0.351-0.033l0.067-0.71l0.235-1.053l0.034-1.066l-0.437-0.908l-0.117-0.891l0.302-0.664l-0.05-0.646 l-0.236,0.064l-0.167,0.356l-0.285,1.537l0.269,0.68l0.319,0.793l-0.051,0.825l-0.049,1.229l-0.335,0.568l-0.422,0.095 l-0.519-0.501l-0.386-0.549l-0.135,1.196l-0.102,0.325l-0.404-0.082h-0.453l0.403,0.308l0.168,0.566l-0.216,0.743l-0.388,0.502 l-0.737,0.113l-0.404-0.081l-0.252,0.258l-0.638,0.453l-1.157-0.032l-0.438-0.42l0.066-0.614l-0.218-0.47l-0.352-0.323h-0.403 l-0.15,0.55l-0.269,0.032l-0.319-1.052l0.219-0.647l-0.185-0.469l-0.302-0.29v-0.486l0.856-0.486l0.755-0.017l0.27,0.212 l0.419-0.681l0.471-0.177l1.324-0.145l0.454,0.112l1.041-1.067l0.74-1.263v-0.371l-0.236-0.081l-0.488,0.323l-0.453,0.76 l-0.737,0.843l-0.941,0.273l-1.075-0.225l-0.638-0.551l0.017-0.485l0.806-0.454l0.957-0.843l0.604-0.096l0.167-0.274l-0.033-0.55 l0.219-0.292l0.47-0.081l0.353-0.307l-0.253-0.26l-0.066-0.372l-0.186-0.179l-0.269,0.115l-0.418,0.355l-1.226-0.147 l-0.338,0.083l-0.216-0.291l0.216-0.535l0.941-0.566l0.47,0.016l0.521,0.421l0.587-0.08l0.889-0.373l0.555-1.197l-0.336-0.389 l0.117-0.631l0.908-0.84l-0.269-0.924l0.101-0.905l-0.168-0.406l-0.554-0.193h-0.47l-0.47-0.485l-0.656-0.033l-0.554-0.209 l0.066-0.389l0.37-0.146l0.689,0.112l0.369-0.243l0.589-0.598l0.016-0.632l0.485-0.5l-0.033-0.502l-0.336-0.355l-0.587-0.08 l-0.251-0.373l-0.136-0.551l0.471-0.371l0.168,0.08l0.018-0.355l-0.506-0.745l-0.201-0.938l0.371-0.163l0.419,0.501v-0.273 l-0.253-0.536v-0.42l0.403-0.777l-0.168-0.809l-0.418-0.711l0.083-0.519l-0.219-0.535l0.286-0.484l0.287-0.971l-0.337-0.065 l-0.453,0.048l-0.804,0.762l-0.487,0.065l-0.371,0.339l-0.436,0.177l-0.401-0.193l0.267-0.388l0.824-0.583l0.468-0.033 l0.472-0.565l0.217-0.681l0.705-0.549l0.739-0.291l0.252-0.617l-0.084-0.598l-0.42-0.501l-0.554-0.712l-0.219-0.711l-0.216-0.179 h-0.371l-0.487-0.615l0.017-0.632l0.27-0.306l-0.184-0.391l0.016-0.808l-0.354-0.696l-1.578-1.279l-0.033-0.306l-0.351-0.583 l-0.371-0.341l0.017-0.355l0.303-0.162l0.922-0.777l0.522-0.275l0.267-0.486l-0.218-0.225h-0.738v-0.261l0.538-0.404l0.419-0.841 l0.437-0.484v-0.422l-0.168-0.195l0.285-0.565l-0.386-0.42l-0.453-0.146l-0.721-0.858l-1.007-0.759l-0.269-0.68l-0.42-0.276 l-0.335,0.098l-0.102,0.404l-0.386,0.048l-0.235-0.209l-0.167-0.663l-0.487-0.422l-0.639-0.419l-0.437-0.519l-0.384-0.145 l-0.219,0.21l-0.387,0.081l-0.067-0.292l0.162-0.775l-1.073-0.808l-0.838-0.836l-0.335,0.031l-0.469,0.484l-0.737-0.29 l-1.273-1.064l-1.04-0.322l-0.636-0.647l-0.803-0.289l-0.973,0.129l-0.603,0.548l-0.503,0.903l-0.838,0.58l-0.369,0.452 l-0.034-0.806l0.436-0.742l-0.1-0.806l-0.268-0.289l-0.873-0.034l-0.469,0.582l-0.033,0.547l-0.636,0.387l-0.469-0.29 l-0.536-1.096l-0.538-0.195l-0.133,0.549l-0.436,1.516l-0.336,0.225l-0.636-0.225l-0.101-0.872l0.401-0.806l0.705-0.515 l-0.168-0.355l-0.603,0.096l-0.268-0.258l-0.873,0.549l-0.636,0.033l-0.234,0.482l-0.268,0.194l-0.167-0.451v-0.516l-0.335-0.839 l-0.201-0.742h-0.302l-0.436,0.162l-0.101,0.548l-0.234,0.904l-0.403,0.354v0.645l0.168,1.194l-0.066,0.547l-0.201,0.291 l-0.67-0.388l-0.771-0.773l-0.939-0.388l-0.871-0.613l-0.738-0.774l-0.569-0.323v-0.224l0.367-0.259l-0.971-0.321l-0.637-1.356 l-0.468-0.612l-0.738-0.805l0.033-0.968l0.403-0.483l1.24-0.065l0.501-0.517l0.738-0.193h1.207l0.3,0.291l0.605-0.42l0.368-0.548 l-0.033-0.418l-0.94,0.096l-1.206-0.612l-0.434,0.032l-0.335,0.421l-1.375-1.291l-0.134-1.16l0.537-0.455l0.67-0.353l0.368-1.032 l0.37-0.453h-0.603l-0.436,0.292l-0.57,1.033h-0.502l-0.369,0.257l-0.537,0.614l-0.972-0.388l-0.268-0.807l0.235-0.677 l0.569-0.356l-0.267-0.29l-0.503,0.033l-0.335,0.193v-0.613v-0.676l0.369-0.549l0.368-0.032l0.336-0.386l0.603,0.063l0.469,0.387 l-0.067-1l1.542-0.549l1.542,0.356l1.039,0.71l1.642,0.064l1.608,0.773l1.308,0.064l0.671,0.323l1.674,0.936h0.637l0.503,0.097 l1.072-0.386l-0.736-0.164h-0.806l-1.44-0.645l-1.173-0.904l-0.972-0.127l-1.306-0.193l-0.872-0.677l0.1-0.42l1.642-0.356 l1.207,0.129l1.91,0.065l1.441,0.547l0.636,0.679l0.551,0.174l0.286,0.291l0.722,0.388l0.033-0.436l-0.267-0.388l-0.051-0.617 l1.042-0.646l0.318-0.065l-0.118-1.245l-0.52-0.21l-0.438,0.016l-0.386-0.34l0.05-0.567l-0.62-0.21l-0.503,0.13l-0.824,0.632 l-0.956,0.096l-1.377-0.257l-0.771-0.438l0.049-0.372l-0.218-0.242l-0.671-0.89l-0.437-0.034l-0.251,0.275l0.15,0.357 l0.421,0.404l-0.184,0.971l-0.337,0.404l-1.275,0.048l-1.108-0.339l-1.478-1.424l0.167-0.324l0.958-0.374l1.478-0.614 l-0.051-0.292l-0.352-0.145l-1.092,0.355l-0.705,0.39l-0.805-0.244l-0.169-0.567l0.302-0.339l0.891-0.274l0.771-0.469 l0.588-0.973l-0.152-0.484l-0.487-0.179l-0.252,0.195l-0.369,0.485l-0.89,0.583l-1.074,0.178l-0.772-0.112l-0.369-0.599 l0.201-0.486l0.486-0.419l0.419-0.356l-0.234-0.342l-0.353-0.193l-0.772-0.066l-0.402-0.371l-0.89-1.764l-0.521-0.487 l-0.822-0.404l-0.337-0.485l0.554-0.177l0.806-0.422l0.455-0.597l0.285-0.292l0.252,0.178l0.554,0.015l-0.066-0.403l-0.503-0.245 l-0.739-0.062l-0.318-0.519l0.285-0.339l0.756,0.032l1.443-0.55l0.084-0.452l-0.084-0.486l0.722-0.21l0.52-0.339h0.605 l0.403,0.162l0.671-0.096l0.604-0.356l0.538-0.017l0.638,0.162l0.017,0.275l0.286,0.113l0.604-0.129l0.268-0.485l0.604-0.389 l0.623,0.129l0.234-0.017l0.519-0.29h0.305l0.722,0.016l3.44-0.873l0.722-0.035l0.287,0.391l0.25-0.469l-0.386-0.406l0.27-0.518 l1.193-0.549h1.444l0.94-0.164l0.521,0.292l0.839,0.161l0.822-0.486l1.007-0.144l1.125,0.21l0.32,0.438l0.806,0.112l0.435,0.355 l0.94,0.632l0.689-0.033l0.555-0.226l0.067-0.325l0.772-0.777l0.587-0.905l0.744-1.045l1.071-0.355l0.336-0.58l0.803-1.226 l0.739-0.195l0.301-0.87l-0.637-0.322l-0.032-0.742l0.703-0.838l0.837-0.064l1.107,0.064l0.971-0.614l0.234-0.645l-0.234-0.227 h-1.006l-0.77-0.516l-0.101-0.483l0.167-0.483l0.771-0.193l1.172,0.225l0.939-0.548l1.138-0.452l0.135-0.484l-0.168-0.193v-0.807 l-0.3,0.031l-0.605,0.518l-0.033,0.773l-0.502,0.258l-1.408,0.033l-0.77-0.292l-0.436,0.066l-0.871,0.677l-0.706,0.032 l-0.301-0.516l-0.837-0.613l-0.504,0.097l-0.467,0.419l-0.437-0.064l-0.536-0.355l-0.537,0.096l-0.402-0.128v-0.484l0.034-0.518 l-0.235-0.16l-0.1-0.485l0.201-0.546l0.636-0.291l0.504-0.613l0.334-0.452l0.47-0.193l0.129-0.459l-0.319-0.355l-0.084-0.535 l0.285-0.371l0.673-0.048l0.838-0.406l0.489-0.42l0.083-0.501l1.409-0.437l0.487-0.631l0.623-0.291l1.326,0.064l0.571-0.177 l-0.168-0.194l-0.537-0.18l0.066-0.436l0.488-0.178l0.855,0.019l0.135,0.353l0.386-0.145l1.058-1.148l-0.067-0.565l0.285-0.697 l0.907-0.551l0.688-0.179l0.637-0.727l0.638-0.065l0.437-0.211l0.269,0.276l0.234,0.891l-0.051,1.538l0.252,0.664l0.035,1.213 l-0.202,1.699l0.37-0.082l0.352-0.55l0.202-1.424l-0.37-1.262l-0.033-0.809l0.152-0.631l-0.051-1.134l0.486-0.274h0.538 l0.201-0.404l0.453-0.357h0.32l0.133,0.55l0.269,0.389h0.403l0.336,0.242L584,42.993l0.184,0.469l0.739,0.405l1.343-0.145 l0.286-0.194l0.688,0.032l0.134-0.47l-0.251-0.535l0.251-0.518l0.437-0.34l0.186-0.841l0.217-0.306l0.841-0.049l1.274-0.712 l0.422-0.729l-0.051-1.084l-0.453-0.162h-0.354l-0.118-0.356l0.152-0.437l0.656-0.794l0.135-0.938l-0.153-0.728l0.303-1.085 l0.588-0.484l1.243-0.243l1.108-0.518l1.091-0.372l0.336,0.195l0.135,0.485l-0.051,0.745l0.923,1.213l0.051,0.745l-0.153,1.585 l-0.033,1.667l0.488,0.341l1.108,1.083l0.437,0.777l0.419,0.356l0.168-0.276l-0.218-1.554l-0.018-0.809l-1.057-1.455 l-0.134-1.215l0.52-1.213l0.134-0.713l-0.252-0.404l-0.386-0.793l-0.017-0.695l-0.387-0.615l0.218-0.437l0.839-0.631l0.89-0.064 l0.605,0.209l0.671-0.274l0.706-0.064l1.191,0.372l1.914-0.097l1.692-0.661l1.743-0.066l0.537,0.484l0.167,0.806l-0.034,0.742 v0.322l0.771-0.065l0.401-0.709l-0.468-0.515l0.1-0.774l1.273-1.032l0.704,0.29l0.604,0.549l0.201,1.063l0.436,0.419l0.167-0.677 v-1.194l-0.671-0.581l-0.201-0.58l0.336-0.291l0.736,0.13l0.805,0.322l0.77-0.516l0.838-0.195l1.341,0.162l0.234,0.549 l-0.134,2.097l-0.403,1.192v0.806l-0.637,1.421l-0.401,0.837v0.614l-0.268,0.579l-0.604,0.194l-0.267,0.42l0.501,0.419 l0.101,0.483l-0.301,0.71l-0.703,0.678l-0.436,1.032l-0.855,0.454l-0.32,0.471l-0.15,0.873l-0.537,0.858l-0.201,0.826 l0.167,0.305l0.519-0.064l0.656-0.97l0.485-0.404l-0.015-0.486l0.705-0.695l0.839-1.215l0.386-0.76l0.555-0.227l0.401-0.34 l0.303-0.616l0.017-0.597l0.504-0.388l0.302-0.794l0.57-0.565l0.319,0.614l-0.017,0.697l0.538,0.55l0.252,0.713l0.185,1.051 L619.205,40l0.083,1.165l0.487,0.358l0.621,0.063l0.303,0.261l0.386-0.05l0.152-0.307l0.218-0.39l-0.101-0.419l-0.605-0.519 l-0.167-0.582l0.15-0.194l0.421-0.017l0.638,0.535l0.973,0.129l0.554,0.275l0.134,0.257l0.671,0.148l0.369-0.356l0.32,0.129 l0.319,0.323l0.385-0.225l-0.049-1.539l-0.169-0.76l0.335-1.214l0.169-1.229l-0.419-0.502l-0.269-1.181l0.05-0.988l0.688-1.584 l0.118-0.567l-0.185-0.518l0.235-0.437l-0.033-1.118l0.503-0.452l0.754-0.129l0.537,0.403l0.756,0.13l0.604,0.178l0.252,0.567 l0.671,0.372l0.419,0.794l0.757,1.764l0.033,0.809l0.873,1.294l0.538,1.004l0.168,2.118l-0.119,0.421l-0.453,0.487l-0.05,0.695 l0.168,0.922l0.454,0.405l0.585,1.473l-0.166,0.97l0.082,0.793l0.386,0.646l0.774,0.05l0.99,0.711l0.738,0.033l0.991-0.374 l0.671-1.147l0.403-0.453l0.15,0.162l-0.05,0.759l0.185,0.454l0.386-0.032l0.537-0.227l0.604,0.291l0.251,0.454l-0.05,0.582 l0.369,0.484l0.655-0.032l0.503,0.211h0.923l0.236-0.275l-0.302-0.193l-0.873-0.486l-0.302-0.584v-0.42l-0.622-0.066 l-0.336-0.371l0.033-0.873l-0.402-0.665l-0.958-0.727v-0.535l-0.285-1.117l-0.538-0.76l0.017-0.536l0.218-1.165l-0.202-0.792 l-0.671-1.133l0.033-0.793l0.168-0.389l-0.252-1.161l-0.301-0.419l0.134-0.935l-0.502-1.128l-0.435-0.872l0.367-0.676 l-0.434-0.936l-0.101-0.87l0.336-0.42l1.541,0.259l0.335,0.581h0.435l0.335-0.452l0.437,0.032l1.439,1.58l1.272,0.645 l0.504-0.355l0.066-0.904l-0.401-0.385l0.435-1.323l0.503-0.032l0.738,0.258l1.005-0.194l0.806-0.483l0.869,0.192l0.637,0.454 l0.705,0.192l0.436,0.388l0.469,1.289l0.034,0.549l0.836,0.903v0.839l-0.334,0.708l0.504,1.644v0.968l0.268,0.582l0.703,0.452 l1.206-0.034l1.172,0.678l1.074,0.774l-0.235-0.645v-0.324l-1.005-0.548l-0.537-0.646h-0.704l-0.904-0.548l-0.135-0.546 l0.034-1.001l-0.57-0.902v-0.612l0.436-1.226l-0.134-0.938l0.033-0.612l0.201-0.386l-0.436-0.613l-0.771-0.355l-1.006-1.291 l-0.569-0.096l-0.873-0.034l-0.703,0.357l-0.569,0.161l-0.972-0.612l-0.033-1.034l0.435-0.936l0.738-0.096l0.033-0.419 l-1.24-0.903l-0.203-0.936l0.203-0.708l0.201-0.711l0.402,0.034l0.703,0.645l0.502,0.904l0.302-0.065l0.871-1.29l0.703-0.258 l0.873-0.418l0.202-0.582l0.771-0.837l0.905-0.13l-0.671,0.517l-0.234,0.614l0.167,0.291l0.704-0.356h0.837l0.301,0.356 l0.135,0.676l0.602,0.451l-0.065,0.452l-0.438,0.646l0.336,0.547l0.369-0.579l0.637-1l0.937,0.386l0.705,0.742v0.644l0.604,1.129 l0.333,1.096l-0.034,1.258l0.571-0.646l0.066-1.096l-0.368-0.644l-0.269-0.517l-0.033-0.838l-0.201-0.387l0.201-0.323l0.537,0.42 l1.375,1.031l0.904,1.353l1.106,0.55l1.053,0.191V24.53l-0.52-0.438l-1.041-0.403l-0.722-1.23l-0.168-1.181l0.251-1.181 L660.622,20l0.856,0.048l1.225,0.679h0.907l0.335-0.371l-0.302-0.455l-0.622-0.209l-0.033-0.436l0.789-0.973l0.688-0.583 l-0.253-0.387l-0.335-0.534l0.253-0.808l0.553-0.131l0.587,0.179l0.403-0.486l0.168-0.875l0.302-0.338l0.522,0.161l0.386,0.323 l0.336,0.082l0.418,0.632l0.304,1.019l0.451,0.324l0.489-0.307l-0.017-0.582l-0.285-0.729v-0.598l0.352-0.39l0.586-0.129 l1.042,0.242l1.478-0.113l0.705,0.34l0.2,0.291l0.371-0.064l0.57-0.405l0.858,0.341l1.644,0.064l0.437,0.389l0.571-0.034 l0.604-0.241l0.503,0.356l0.253,0.533l1.241,0.842l0.538-0.227l0.051-0.291l0.453-0.065l1.46,0.891h0.569l0.991,0.908 l1.813,0.112l0.505,0.306l1.022-0.193l0.319,0.307l0.353,0.47l0.888-0.291l0.757,0.161l0.704,0.647l1.462,0.405l0.94,0.662 l0.402,0.826l0.706,0.372l1.292,0.793l-0.066,0.485l-0.505,0.697l-0.771-0.064l-0.754-0.145l-0.623,0.371l-0.503,0.534h-0.756 l-0.32-0.097l-0.872,0.245l-0.991-0.066l-1.777-0.81l-0.858-0.26l-0.554,0.034l-0.771-0.323l-1.008-0.034l-0.453,0.372 l-0.587,0.018l-0.32-0.324l-0.956,0.016l-1.376,0.648l-0.623,0.243l-0.789-0.276l-0.722,0.017l-1.093,0.485l-1.256-0.098 l-0.505-0.63l-0.1-0.874l0.486-0.291l0.454-0.048l0.167-0.486l-0.269-0.307l-0.671-0.082l-0.688,0.162l-0.822,0.696l0.101,0.761 l0.536,0.679l0.521,0.082l-0.219,0.518l-0.638,0.453l-0.487-0.097h-0.688l-1.024,0.048l-0.268,0.259l-0.925,0.097l-0.974-0.259 l-1.175-0.032l-1.158,0.565l-1.713,1.036l-0.15,0.664l0.051,1.148l-0.386,0.681l-0.066,0.501l0.251,0.308l0.69-0.243l0.049-0.84 l0.218-0.503v-0.356l0.47-0.389l0.959-0.015l0.568-0.114l0.167,0.275l-0.218,0.567l-0.336,0.76l0.084,0.309l0.269-0.018 l0.455-0.55l0.319-1.276c0,0,0.569-0.747,0.621-0.826c0.051-0.082,0.972-0.487,0.972-0.487l0.573,0.083l1.141-0.098l0.824-0.032 l0.654-0.227l0.335,0.129l0.267,0.55l0.539,1.1l0.403,0.292l0.37-0.048l0.017-0.535l-0.302-1.068l0.285-0.224l1.006-0.165 l0.756,0.147l1.092-0.193l1.142-0.115l1.309-0.469l0.889-0.275l1.647-0.146l1.241,0.243l0.925,0.517l0.82,0.196l0.639,0.323 l0.875,0.21l0.669,0.486l0.538,0.209l0.539-0.241l0.686-0.162l0.405,0.226l0.318,0.468l0.452-0.063l0.773-0.648h0.586 l0.824,0.082l1.226-0.647l0.688-0.679l0.487-0.113l0.387,0.193l0.62,0.729l0.773,0.518v0.274l-0.42,0.469l-0.05,0.406 l0.436,0.291l0.202,0.356v0.567l-1.242,1.035l-1.36,0.388l-0.704-0.208l-0.755-0.422l-0.504-0.517l-0.301,0.243l0.049,0.565 l0.79,0.664l0.101,0.357l-0.134,0.193l-0.873-0.275l-0.488-0.484l-0.486,0.015l-0.033,0.519l0.352,0.534l0.671,0.26l0.908,0.096 l0.956,0.405l0.706-0.112l1.359-0.631h0.504l0.352,0.338l0.067-0.338l0.017-0.583l0.722-0.13l1.913,0.048l0.471,0.308 l0.134,0.517l0.436,0.26l0.538-0.146l0.235-0.259l0.436,0.178l0.219,0.599l0.553,0.518l1.259,0.21l0.487,0.42l0.117,0.519 l0.89,0.728l1.093,0.42l0.889,0.681l0.135,0.403v0.842l-0.37,0.242l-0.118,0.47l-0.018,0.599l-0.537,0.274l-0.857,0.631 l-0.671,0.18l-0.388-0.164l-0.318,0.164l0.017,0.436l-0.268,0.324l-0.79,0.485l-1.612,0.646l-1.174,0.066l-0.354,0.162h-0.688 l-0.47-0.502l-0.353-0.324l-0.302,0.114v0.47l0.47,0.259l-0.101,0.323h-0.839l-0.823-0.228l-0.72,0.405h-0.371l-0.57-0.373 l-0.907-0.016l-0.605,0.454l-1.192,0.485l-0.69-0.032l-0.434-0.291l-0.707,0.015l-0.737-0.259l-0.624-0.064l-0.369,0.308 l-0.94,0.177l-0.621-0.21l-1.092-0.776l-0.436,0.014l-0.252-0.16l-1.261-0.017l-0.705-0.322l-0.554-0.13l-0.89,0.21l-0.771-0.066 l-0.823-0.291l-0.604,0.146l-0.538,0.501l-0.722,0.196l-1.007-0.114l-0.772,0.421l-0.134,0.258l-0.302,0.016l-0.168-0.792 l-0.47-0.227l-0.688,0.018l-0.286-0.163l-0.654,0.017l-0.101,0.322l0.286,0.049l0.956,0.018l0.42,0.323l0.219,0.437l-0.235,0.533 l-0.604,0.357l-0.437-0.082l-0.704,0.066l-0.707,0.404l-0.906,0.372l-1.275,0.112l-0.656,0.292l-0.335,0.454l-0.654,0.146 l-0.841,0.016l-0.94,0.485l-0.654,0.08l-0.438,0.535l-0.015,0.68l0.471,0.437l0.133,0.55v0.696l0.368,0.583l0.487-0.016 l0.371-0.518l0.099-0.647l0.587-0.534l0.773-0.145l0.639-0.356l0.806-0.113l0.773,0.033l0.353-0.422l0.553-0.533l1.192-0.307 l1.88-0.663l0.621,0.049v0.21l-0.117,0.614l0.234,0.065l0.654-0.501l0.084-0.713l0.538-0.84l0.537-0.049l0.873,0.146l0.521,0.161 l0.991-0.193h1.174l0.823,0.42l1.023,0.145l2.066-0.227l0.705,0.161l0.923,0.42l1.425,0.325l1.731,0.098l0.755-0.016l0.084,0.436 l0.319,0.325l-0.134,0.467l-0.604,0.422l-0.118,0.662l-0.504,0.892l-0.52,0.209l-2.216,0.291l-1.042,0.404l-0.42,0.034 l-0.37-0.179l-0.218,0.064l-0.252,0.648l0.069,0.566l-0.219,0.662l0.083,0.503l0.352,0.13l1.009-0.372l1.291-0.275l0.874-0.389 c0,0,1.527-0.049,1.611-0.032c0.084,0.015,1.563,0.516,1.563,0.516h0.519l0.689,0.422l0.353-0.276l0.357-0.452l0.259-0.058 l0.539,0.147l0.461,0.397l0.805-0.979l0.354-1.247l0.044-1.239l0.252-0.484l-0.167-0.372l0.134-0.664l0.671-0.406l1.008,0.016 l1.058,0.309l1.175-0.034l0.99-0.21l0.621,0.161l0.186,0.843l-0.068,1.473l0.068,1.051l-0.823,0.987l-0.688,1.408l-0.185,1.051 l-0.395,0.776l-2.614,2.257h-0.536l-0.234-0.161l-0.739,0.291l-0.568,0.612l-0.57-0.257l-0.335,0.127l-0.636,0.969l-0.067,0.612 l-0.771,0.355l-0.568,0.645l-0.502-0.129l-0.168-0.29l-0.268,0.419l0.133,0.549l-0.333,0.644l-0.806,1.129l-0.803,0.451 l-0.335,0.581l-1.239,1.033l-0.906,0.804l-0.669,0.162l-1.141,0.838l-0.201,0.42l-0.736,0.033v0.772l0.067,0.742l-0.403,0.968 l0.202,0.419l0.267-0.452l0.168-0.645l0.871-0.968l0.637-0.936l0.906-0.581h0.3l0.235,0.355l0.738-0.84l1.608-1.191l0.503-0.129 l0.134-0.741l1.574-1.227l1.039-1.033l0.672-0.323l0.535,0.129l0.839-0.032l0.569-0.483l0.102-0.42l0.937-0.032h1.273l1.24-0.645 l0.804-0.805h0.771l0.771-0.55l0.502-0.452l0.637-0.096l0.639-0.646l1.238-1.128l0.303-0.903v-0.58l0.536-0.581l0.301-0.452 l0.468-0.291l-0.033,0.516l0.37,0.613v0.612l-0.202,0.614l0.37,0.58l0.166,0.968l-0.199,0.387l0.033,0.549l0.268-0.452 l0.267-0.742l0.37-0.613l-0.201-0.289v-0.744l0.369-0.387l0.368,0.194l0.067,0.613l0.504,0.516h0.805l0.903-0.387l0.203-0.515 l-0.27-0.355l0.034-0.453h0.47l0.333-0.579l0.103-0.872l-0.136-0.677l0.268-0.524l0.52-0.146l0.219,0.374l0.839,0.386 l0.905-0.372l0.438-0.5l1.243-0.405l1.09-0.032l0.538-0.178l1.107,0.274l1.209,0.567l1.291,0.403l0.958,0.082l0.791,0.373 l0.537,0.565l0.502,0.098l0.906,0.388l0.336,0.697l0.084,0.468l1.359,1.1l0.237,0.533l0.638,0.616l0.402,1.263l-0.1,0.955 l-0.354,0.567l-0.889,0.323l-0.755,0.566l-0.252,0.42l-0.539,0.195l-0.788,0.534l-0.941,1.277l-0.453,0.599l-0.354,0.145 l-0.655-0.193l-1.274-0.745h-0.504l-0.655,0.486l-0.47,0.776l0.033,0.34l0.286,0.244l0.016,0.47l0.503,0.694l0.32,0.245v0.516 l-0.303,0.52l-0.671-0.049l-0.553,0.064l-1.395,0.697l-0.839,0.615l-0.771-0.017l-0.622,0.097l-0.537-0.371l-0.739-0.275 l-0.772-0.064l-0.371-0.244l-0.519-0.112l-0.12-0.179l-0.419-0.049l-0.303,0.13l-0.165,0.354l-0.371,0.017l-0.554-0.114 l-0.318,0.196l-0.404,0.485h-0.486l-0.47-0.098l-0.453,0.308l-0.488,0.161l-0.789-0.13l-0.739-0.274l-0.991,0.21l-0.738,0.471 l-0.772-0.161l-0.756,0.079l0.773,0.31l0.67,0.032l1.815-0.083l0.572-0.274l0.688,0.032l0.755,0.406l1.022,0.226l1.882-0.048 l0.638,0.517l0.37-0.032l0.537-0.534l0.722-0.08l0.503,0.209l0.319,0.47l0.838,0.259l0.437,0.582l0.017,0.599l-0.688,0.664 l-0.722,0.113h-0.354l0.185,0.42l-0.05,0.664l-0.772,0.468l-1.679,0.422l-0.79-0.179l-0.872,0.243l-1.663-0.08l-0.538-0.504 l-1.794-1.327l-1.16-0.128l-0.669,0.016l-0.774,0.598l-0.571,1.068l-0.939,0.534l-0.387,0.469l-0.622,0.113l0.471,0.243 l0.638,0.049l0.185,0.469l0.016,0.728l-0.334,0.259l-0.588-0.032l0.017,0.47l0.352,0.452l0.824,0.323l0.47-0.145l0.236-0.436 l0.939-0.502l0.621-0.745l1.042-0.436l1.327-0.339l1.208-0.389l0.69-0.114l0.403,0.324l0.384,0.307l0.857,0.228l0.571,0.469 l0.118,0.339l-0.27,0.291l-1.025,0.875l-0.503,1.036l-0.653,0.696l-0.32,0.744l-1.297,0.955l-0.737,1.163l-1.475,2l-0.602,0.936 l-0.638,0.581l0.033,1.159l-0.301,0.937l-0.066,0.58l-0.604,0.645l-0.032,1.161l-0.403,1.257l-0.436,1.549l0.404,0.581 l0.132,0.904l-0.234,1.257l-0.671,0.451l-0.535,0.549l0.21,1.026l-0.151,0.47l-0.47,0.631l-0.134,1.034l-0.352,1.004 l-0.773,0.647l-0.622-0.13l-0.184-0.532v-0.502l-0.555-0.356l-0.368-0.099l0.671-0.436l-0.336-0.388l-0.57-0.195l-0.438,0.261 l-0.503,0.03l-0.354,0.357l0.102,0.357l0.286,0.208l-0.101,0.487l-0.386,0.307l0.016,0.469l0.538,0.501l0.604,0.26l0.487,0.615 l0.453,0.55l0.268,1.02l0.842,0.291l0.737,0.34l0.923,0.825l0.42,1.1l-0.319,0.47l-0.536,0.129l-0.689-0.453l-0.974-0.97 l-0.117-0.471l-0.505-0.161l-0.284-0.275l-0.354,0.275l-0.151,0.34l0.201,0.582l0.403,0.583v0.404l-0.637-0.129l-0.219-0.13 l-0.218,0.292l0.252,0.339l0.603,0.389l-0.049,0.291l-0.335,0.179l0.303,0.307l0.554-0.08l0.839,0.275l0.301,0.372l-0.017,0.647 l-0.117,0.323l0.336,0.308l0.537-0.193l0.822-0.859l0.37-0.582l0.335-0.145l0.066,0.355l0.252,0.372l0.353-0.016l0.521,0.438 l0.722,0.307l0.236,0.712l-0.052,0.616l-0.283,0.339l-0.118,1.182l-0.238,1.036l0.103,0.437l-0.353,1.164l-0.437,0.552 l-0.118,0.76l-0.185,0.389l-0.301-0.211l-0.437-0.663l-0.958-0.324l-0.436-0.567l-0.419-0.146l-0.285,0.131l-0.722-0.163 l-0.169-0.372l0.152-0.583l-0.487-0.565l-0.418-0.114l-0.337,0.211l-0.436-0.163l-0.587-0.63l-0.839-0.048l-0.654,0.259 l0.233,0.275l0.051,0.452l-0.453-0.017l-0.352-0.21l-0.856-0.048l-0.587,0.228l0.201,0.209h0.604l0.789,0.21l0.235,0.259 l-0.049,0.259l-0.623,0.178l-1.093,0.956l-0.703,0.532l-0.506-0.112l-0.316-0.452l0.032-0.567l-0.201-0.228l-0.485,0.212 l0.066,0.615l0.183,0.532l-0.317,0.389l0.233,0.388l0.119,0.503l-0.319,0.403l0.269,0.276l0.033,0.486l-0.335,0.177l-0.89-0.291 h-0.488l-0.235,0.421l0.537,0.371l0.554,0.017l1.16-0.064l0.15,0.308l-0.083,0.564l0.032,0.794l0.252,0.081l0.286-0.405 l0.923-0.161l0.79,0.243l0.402,0.339l0.989,0.05l0.691,0.177l0.519-0.177l0.387-0.292l0.335,0.162l0.033,0.485l0.017,0.842 l0.101,0.485l-0.185,0.274l-0.504,0.276l-0.386-0.259l-0.604-0.21l-0.588,0.291l-0.503,0.179l-0.438-0.373l-1.207,0.162 l-0.991,0.21l-0.489-0.129l-0.183-0.324l-0.152,0.404l0.186,0.195l0.186,0.339h0.537l0.672-0.178l1.477,0.017l0.62,0.339 l0.489,0.519h0.553l0.638,0.211l0.486,0.5l0.488,0.743l0.689,0.681l0.15,0.389l-0.218,0.032l-0.553-0.146l-0.319-0.195 l-0.1,0.292l-0.068,0.453l0.353,0.665l0.067,1.035l-0.101,0.388l0.185,0.776l-0.135,0.486l-0.269,0.486l-0.487,1.439 l-0.519,0.535l-0.487,0.048l-0.438-0.372l-0.368-0.711l0.553-0.47l-0.201-0.405l-0.487-0.129l-0.353,0.21l-0.538-0.128 l-1.04-1.182l-0.874-0.615l-0.788-0.681l-0.033-0.484l-0.319-0.711l-1.06-1.134l-0.434-0.259h-0.17l-0.047,0.292l0.218,0.339 l0.771,0.826l0.018,0.469l-0.237,0.339l-1.073-0.048l-0.538-0.454l-0.453-0.793l-0.369-0.468l-0.051,0.5l0.066,0.536l0.725,0.84 l1.342,0.535l1.175,0.033l1.258,0.938l1.678,1.666l0.186,0.487l-0.252,0.403l-0.402-0.064l-0.521-0.339l-0.805,0.015 l-0.573,0.292l-0.821,0.776l-0.572,0.064l-0.705-0.307l-0.233-0.566l0.168-0.324l-0.168-0.324l-0.605-0.42l0.015,0.534 l0.287,0.453l0.168,0.874l0.252,0.5l0.821,0.163l0.908-0.179l0.756-0.889l0.485-0.049l1.077,0.502l-0.052,0.583l-0.183,0.259 l-0.202,1.488l-0.337,0.518l-0.452,0.032l0.066,0.357l0.386,0.339l0.47-0.291l0.976,0.21l0.688,0.793l1.024,0.517l0.302-0.324 l0.622-0.339l0.839,0.114l0.067,0.338l-0.319,0.502l0.118,0.712l0.386,0.5l-0.319,0.729l-0.822,1.263l-1.041,0.516l-0.455-0.16 l-0.132-0.551l-0.503-0.324l-0.302-0.646l0.033-0.647l-1.007-0.712l-0.755-0.227l-0.722-0.47l-0.638-0.113l-0.605,0.39 l-0.621,0.031l-0.337-0.258l-0.319-0.615l-0.47-0.502h-0.317v0.357l0.267,0.5l0.083,0.939l-0.302,0.6l-0.519,0.306l-0.672-0.018 l-0.403,0.229l0.488,0.161l0.284,0.371v0.502l-0.688,0.938l-0.468,0.259l-0.068,0.244l0.218,0.354l0.453,0.274l0.303,0.94 l0.502,0.243l0.186,0.857l-0.218,1.02l0.134,0.324l0.267-0.713l0.32-0.533l-0.083-0.615l-0.319-0.274l0.016-0.794l0.303-0.616 l0.302,0.034l0.285,0.55l0.419,0.34l0.353,0.598l0.604,0.455l0.301-0.212h0.388l0.302,0.228l0.251-0.259l0.754-0.259l0.64,0.114 l0.218,0.372l-0.034,0.598l-0.62,1.035l-0.335,0.599v0.811l-0.12,1.034l-0.234,0.307l-0.822-0.095l-0.874,0.242l-0.657-0.162 l-0.554-0.241l-0.485,0.03l-0.538,0.388l-0.015,0.535l-0.438,0.357l-0.588,0.096l-0.37-0.03l-0.368,0.582l-0.119,0.372 l-0.604,0.145l-0.487-0.128l-0.754-0.534l-1.261-0.697l-0.773-0.792l-1.861-1.683l-0.32-0.697v-0.484l0.286-0.259l0.487-0.018 l0.218,0.179l0.47,0.259l1.579,0.728l0.872,0.76l0.303-0.129l1.207-0.21l0.084-0.39l-0.354-0.29l-0.367,0.081l-0.455,0.259 l-0.738-0.275l-1.359-0.908l-1.478-0.598l-0.52-0.064l-0.203-0.339l0.035-0.519l-0.386-0.161l-0.387,0.049l-0.369,0.42 l-0.084,0.743l-0.167,1.343l0.033,0.585l-0.152,0.339l-0.217-0.163l-1.479-1.635l-0.939-1.568l-0.37-0.484l-0.1-0.406 l-0.32-0.339l-0.335-0.016l-0.12,0.226l0.036,0.42l0.704,0.422l0.991,1.649l0.101,0.454l0.588,0.55l0.201,0.422l-0.102,0.468 l-0.469-0.033l-0.705,0.292l-0.537,0.469l-0.371,0.469l-0.687,0.176l-0.554,0.358l-0.76,0.229l-0.68-0.026l-0.595-0.582 l-0.42-0.023l-0.496-0.245l-0.159-0.354l-0.998-0.76l-0.538-0.333l-0.009-0.461l-0.175-0.453l-0.32-0.139l-0.159,0.219 l-0.075,0.713l0.318,0.558l0.755,0.381l0.807,0.63l0.486,0.754l0.066,0.404l-0.486,0.332l-1.377-0.033l-0.982-0.168l-0.738,0.216 l-0.53,0.454l0.186,0.314l0.3,0.058l0.32,0.461l0.361,0.153l0.235-0.412l0.152-0.5l0.822-0.041c0,0,0.622,0.185,0.664,0.21 c0.042,0.025,0.646,0.251,0.646,0.251l0.595-0.333l0.11-0.502l0.554-0.153l0.856,0.105l0.827-0.036l0.336,0.309l0.586,0.373 l1.008,0.226l0.604,0.356l0.203,0.568l-0.186,0.484l-0.404,0.114l-0.438,0.582l-0.77-0.08l-0.639,0.098l-0.772,0.599 l-0.638,0.275l-0.688-0.131l-0.823-0.824l-0.489-0.227l-0.419,0.048l-0.37,0.406l-0.536,0.08l-0.251-0.146l-0.453,0.066v0.274 l0.501,0.081l0.84-0.015l0.403-0.227l0.489,0.146l0.216,0.338l-0.234,0.341l-0.807,0.145l-0.821,0.388l-0.151,0.259l0.386,0.08 l0.435-0.259l1.009-0.243l0.353,0.016l0.252,0.388l0.011,0.555l0.21,0.04l0.495-0.696l0.604-0.122l0.404-0.024l0.789-0.654 l0.327,0.024l0.41,0.202l1.131,0.773l0.403-0.015l0.268,0.145l0.135,0.583l-0.184,1.359l-0.488,0.533l-0.94,0.147l-0.755-0.082 l-0.654-0.292l-1.53,0.018l-0.335-0.114l-0.636,0.55l0.267,0.147l0.891-0.211l0.906,0.015l1.292,0.421l0.203,0.535l-0.085,0.403 l0.706-0.744l0.772-0.161l0.872-0.034l0.807,0.42l0.251,0.373l1.393,1.036l0.202,0.323l0.1,0.406l0.504-0.033l0.301,0.258h0.336 l0.655,0.6l0.487,0.21l0.202,0.551l0.369,0.404l0.335,0.016l0.303,0.469l0.368,0.324l-0.05,0.244l-0.403,0.873l-0.503,0.307 l-0.37,0.552l-0.168,0.599l0.034,0.194l0.606-0.648l0.737-0.599l0.487-0.21l0.252,0.13l-0.27,0.484l-0.286,0.729l0.286-0.226 l0.236-0.453l0.317-0.355l0.555,0.08l0.435,0.42l-0.285,0.566l-0.671,0.436l-0.673,0.552l-0.218,0.566l0.034,0.501l0.218,0.308 l-0.05,0.436l-0.235,0.955l0.067,0.308l0.402-0.129l0.186-1.1l0.605-0.923l0.707-0.355l0.333-0.032v0.355l-0.438,0.792 l-0.317,0.682l0.118,0.338l0.468-0.194l0.269,0.323l-0.083,0.809l-0.403,0.389l-0.806,0.113l-0.201,0.356l0.032,0.373 l0.908-0.324l0.201,0.261l-0.118,0.435l-0.252,0.504l0.387,0.063l0.285,0.469l-0.167,0.325l-0.034,0.858l-0.218,0.518 l-0.017,1.375l0.117,0.583l-0.064,0.616l-0.438,0.306l-0.505-0.064l-0.318,0.096l-0.185-0.243l0.218-0.435l-0.235-0.406 l-0.403-0.275l-0.537,0.21l-0.317,0.291l-0.439-0.177l0.051-0.567l0.404-0.696l-0.319-0.809v-0.633l0.218-0.677l-0.27-0.374 l-0.267-0.032l-0.235,0.502l-0.185,0.857l0.067,1.117l-0.084,1.019v0.535l-0.301,0.209l-0.554-0.016l-0.588,0.13l-0.587,0.194 l-0.487-0.438l-1.108-0.841l-0.722-1.327l-0.621-0.679l-0.419-0.486l-0.236-1.457l-0.419-0.713l-0.504-0.582l-0.167-1.003 l0.15-0.874l0.311-0.592l-0.235-0.419l-0.268,0.032l-0.906,0.225l-0.301,0.355l-0.604-0.451l-1.507-1.904l-0.1-0.678 l-0.335-0.353l-0.571,0.289l-0.869,0.129l-0.739-0.323l-0.334,0.193l-0.535,0.258l-0.403-0.224l-0.604-0.679v-0.418l-1.072-0.937 l-0.033-0.451l-0.403-0.483l-0.301-0.967l-0.437-0.518l-0.267,0.42l0.102,0.741l-0.033,0.355l-0.873,0.42l-0.301,0.291 l0.804,0.063l0.47,0.292l0.568,0.806l0.47,0.677l-0.202,0.389l-0.971-0.098l-0.436,0.388l-0.637,0.355l-0.535-0.454l0.067,0.517 l0.569,0.388l0.604-0.065l0.871-0.708h0.536l0.937-0.356l0.237,0.291v0.547l0.333,0.389l0.939-0.42l0.367,0.064l2.045,0.613 l0.804,0.389l0.435-0.032l0.235,0.613l0.436,0.902l-0.349,0.755l-0.604,0.243l-0.487,0.534l-0.537,0.259l-0.657-0.016 l-2.265,1.085l-1.16,0.047l-0.805,0.291l-0.57-0.387l-0.487-0.81l0.033-0.55l-0.285-0.357l-0.503-0.176l-0.034,0.841l0.253,0.291 l0.133,0.453l-0.285,0.244l-0.693-0.144l-0.1-0.193l-0.32-0.098l-0.645,0.413l0.191,0.276l0.739,0.177l0.387,0.388l0.125,0.485 l-0.411,0.509l-0.37,0.228l-0.544,0.006l-0.252,0.351l-0.004,0.594l-0.571,0.389l-1.611,0.713l-0.79-0.098l-0.537-0.065 l-0.738,0.696l-0.303,0.549l0.201,0.212l1.528-0.713l1.058,0.018l0.738-0.243l0.47,0.191l0.302,0.373l0.991,0.21h0.754 l0.906-0.274l1.378,0.032l0.655,0.292l0.789-0.162l0.387,0.049l0.251,0.307l0.42,0.032l0.235,0.437l-0.267,0.405l-0.756,0.195 l-0.923-0.243l-0.739,0.081l-0.673,0.614l-1.074,0.115l-0.721,0.371l-0.604-0.227l-0.505-0.437l-0.838,0.082l-0.504,0.534 l0.37,0.34l0.487-0.21l0.57,0.291l1.529,0.018l0.402,0.273l0.42,0.518l0.318-0.582l1.159-0.989c0,0,0.571,0.05,0.654,0.05 c0.085,0,0.57-0.261,0.57-0.261l0.521,0.21l0.371,0.275l0.521-0.193l1.258-0.016l0.621-0.324l1.276-0.907l0.438-0.403 l0.101,0.257l-0.137,0.438l0.22,0.162l0.556-0.485h0.318l0.316,0.388l1.211,0.938l1.31,0.179l1.023,0.47l1.158,0.259l0.656-0.034 l1.275,0.066l0.319,0.178l1.074,0.098l1.16-0.389v0.225l-0.438,0.777l-0.857,0.535l-0.973,0.161l-0.402-0.146l-0.705,0.486v0.372 l0.47,0.324l0.083,0.404l-0.285,0.21l-0.454-0.113l-0.334-0.34l-0.385-0.145l-0.219,0.485l-0.134,0.372l-0.404-0.259 l-0.838,0.017l-0.167,0.227l0.1,0.42l0.252,0.179l0.033,0.518l-0.486,0.339l-0.604,0.177l-0.336-0.307l-0.318-0.241l-0.218,0.225 l0.118,0.403l-0.036,0.632h-0.5l-0.387,0.178l-0.455,0.42l-0.62-0.291l-0.135-0.34h-0.354v0.631l0.186,0.599l-0.438,0.711 l-0.551-0.274l-0.169-0.453l-0.553,0.243l-0.102,0.356l0.354,0.29l-0.017,0.567l-0.926,0.584l-0.352-0.115l-0.218-0.403 l-0.553-0.308l-0.388,0.063l-0.033,0.438l0.32,0.615v0.403l-0.455,0.259l-0.803,0.195l-0.252,0.372l-0.908,0.065l-0.521,0.5 l-0.269,0.582h-0.351l-0.286-0.501l-0.521-0.015l-0.805,0.468h-0.655l-0.335,0.209l-0.302,0.536l-0.52,0.063l-0.488-0.193 l-0.234-0.323l-0.286,0.017l-0.47,0.856l-0.32-0.209l-0.418-0.583l-0.269-0.017l-0.201,0.63l-0.402,0.39l-0.454-0.243 l-0.101-0.339l-0.268-0.065l0.017,0.485l-0.302,0.163l-0.706-0.065l-0.503,0.145l0.051,0.405l-0.135,0.406l-0.571-0.034 l-0.234-0.194l-0.369,0.081l-0.068,0.455l-0.334-0.017l-0.238-0.291l-0.25,0.063l-0.101,0.745l-0.488,0.161l-0.335,0.372 l-0.435,0.049l-0.236-0.438l-0.905-1.019l-0.369-0.162l-0.488,0.228v0.322l-0.404,0.048l-0.166,0.567l-0.589,0.403h-0.503 l-0.267-0.194l-0.319,0.47l-0.74,0.082l-0.705-0.098l-0.419-0.565l-0.403-0.032l-0.283,0.468l-0.086,0.339l-0.487-0.082 l-0.654-0.404l-0.303-0.679l0.218-0.632l-0.386-0.324l-0.486-0.145l-0.454-0.841l0.033-0.631l-0.386-0.583l-0.268-0.841 l-0.319-0.275l-0.403,0.081l-0.1,0.664l0.217,0.371l0.302,0.729l0.42,0.372l0.235,0.566l-0.017,0.843l-0.251,0.582l0.203,0.161 l0.485,0.065l0.185,0.938l-0.202,1.068l-0.468,0.566l-0.554,0.227l-0.253-0.275l-0.369,0.015l-0.671,0.324l-0.655,0.842 l-0.369,0.162l-0.605-0.065l-0.201,0.308l0.101,0.211l-0.035,0.518l-0.57,0.354l-0.587,0.049l-0.135,0.535v0.486l-0.051,0.467 l-0.47-0.467l-0.419-0.129l0.353,0.403l0.118,0.34l-0.168,0.549l-0.335,0.017l-0.37-0.209l-0.436-0.162l-0.084,0.193l0.151,0.339 l0.151,0.42l-0.404,0.502l-0.739,0.227l-1.022,1.085l-0.084,0.566l0.117,0.582l-0.234,0.631l-0.639,0.762l-0.47,0.291 l-0.236-0.178l-0.201-0.339l0.168-0.372l-0.403,0.194l-0.287,0.339l-0.117,0.616l0.027,0.246l-0.142,0.274l-1.157,1.045 l-0.462,0.218l-0.252-0.161l-0.025-0.503l-0.278-0.332l-0.403,0.08l-0.042,0.524h-0.371l-0.873-0.437l-0.27-0.406l-0.369-0.08 l-0.185,0.144l0.319,0.47l0.369,0.18l0.404,0.679l-0.033,0.566l-0.437,0.292l-0.354,0.015l-1.174,0.729l-0.706,0.729 l-0.636,0.048l-0.472-0.308l0.05-0.421l0.168-0.405l-0.252-0.177l-0.301-0.017l-0.269,0.503l0.1,0.403l-0.133,0.437h-0.539 l-0.688,0.323l-0.638-0.226l-0.419-0.761l0.049-0.501l0.252-0.583l-0.218-0.42l-0.235-0.017l-0.167,0.891l-0.219,0.696 l0.017,0.47l-0.202,0.518l-0.37-0.178l-1.024-1.197v-0.647l0.353-0.858l0.605-0.501l0.52-0.388l-0.352-0.292l-0.738-0.163 l-0.504-0.582v-0.228l-0.219-0.113l-0.419,0.163l-0.32,0.485l0.051,0.355l0.571,0.599l-0.15,0.469l-0.353,0.552l-0.152,0.614 l-0.654,0.647L618.886,212l-0.134-0.729l-0.303-0.177l-0.42,0.453l0.118,0.534l0.47,0.939l0.453,0.549l-0.084,0.34l-0.268,0.13 l-0.185,0.534l-0.605,0.389l-0.638-0.066l-0.336-0.339l-0.369,0.146l-0.387,0.47l-0.722,0.307l-0.304-0.275l-0.284-0.761 l-0.252-0.468l-0.285-0.017l-0.067,0.388v0.405l-0.437,0.486l-0.571-0.099l-0.318-0.662l-0.302-0.47l-0.303,0.113l-0.234,0.371 l-0.505,0.017l-0.351,0.276l0.1,0.323l0.218,0.631v0.987l-0.434,1.004l-0.842,0.955l-0.537,0.064l-0.368-0.291l-0.287-0.938 l-0.47-0.243l-0.403,0.21l-0.05,0.387l-0.739-0.274l-0.217-0.502l-0.286-0.146l-0.134,0.357l0.034,0.34l0.236,0.76l-0.371,0.42 v0.356l0.235,0.616l0.487,0.436l0.27,0.907l0.184,1.246l-0.184,0.729l-0.605-0.388l-0.353,0.016l-0.235,0.453l-0.722,0.065 l-0.89-0.227l-0.823,0.066l-0.352,0.419l0.184,0.293l1.024,0.582l0.688,0.064l0.487,0.372l0.319,0.307l0.354-0.161l0.502,0.065 v0.387l-0.219,0.633l-0.469,0.096l-0.454,0.017l-0.017,0.258l0.402,0.21l0.219,0.452l-0.09,0.724l-0.016,0.446l-0.176,0.307 l-0.344,0.137l-0.545-0.209l-0.613-0.811l-0.444-0.008l-0.388-0.177l-0.544-0.544l-0.546-0.022l-0.185,0.273l-0.134,0.454 l0.73,0.106l0.402,0.079l0.848,0.486l0.664,0.397l0.579,0.218l0.176,0.243l-0.246,0.667l-0.689,0.291l-0.57-0.065l-0.353,0.259 l-0.554-0.082l-0.957-0.791l-0.285-0.421l-0.47-0.064l-0.268,0.306l-0.336,0.357l0.051,0.679l0.57,0.485l0.907,0.469l0.185,0.405 l-0.018,0.403l-0.251,0.275l-0.571-0.55l-0.52-0.129l-0.79-0.469l-0.42-0.485l-0.235-0.033l0.152,0.745l0.604,0.469l0.94,0.452 l0.167,0.34v0.34l-0.335,0.226l-0.958-0.064l-0.469-0.502l-0.101-0.566l-0.436-0.39l-0.285-0.015l-0.37,0.404l0.017,0.389 l0.402,0.485l0.1,0.501l-0.049,0.178l0.251,0.213l1.293,0.079l0.571,0.194l0.162,0.482l-0.218,0.168l-0.386,0.39l-0.294,0.397 l-0.504,0.063l-0.47-0.307l-0.495,0.008l-0.84-0.332l-0.034-0.421l0.067-0.235l-0.479-0.274l-0.251,0.049l-0.016,0.671 l-0.177,0.453l-0.379,0.559l-0.737-0.033l-0.421-0.325l-0.468-0.282l-0.438,0.023l-0.023,0.469l0.359,0.293l1.336,0.566 l1.047,0.238l0.419,0.744l0.302,1.02l-0.285,0.13h-0.588l-0.587-0.551l-1.042-0.792l-0.471-0.26l-0.536,0.048v0.275l0.452,0.355 l0.757,0.194l0.99,0.843l0.571,0.711l-0.084,0.454l-0.201,0.777l0.218,0.355l-0.035,0.34l-0.453,0.388l-0.05,0.388l-0.252,0.697 h-0.506l-0.501-0.308l-0.707-0.08l-0.536-0.354l-0.405,0.015l0.204,0.372l0.687,0.389l0.908,0.146l0.017,0.21l-0.539,0.696 l-0.519-0.114l-0.305-0.323l-0.318,0.113l-0.099,0.243l0.636,0.323l0.32,0.21v0.406l-0.42,0.452l-0.605,0.276l-0.267-0.374 l-0.421-0.242h-0.503l0.169,0.403l0.57,0.244l0.588,0.388l-0.084,0.647l-0.555,0.34l-1.174-0.098l-0.555-0.291l-0.334,0.017 v0.226l0.704,0.307l1.563,0.146l0.738,0.292l0.2,0.403l-0.116,0.308l-0.722,0.307l-1.193,0.228l-0.872-0.228l-0.722-0.291 l-0.184,0.147l0.334,0.484l0.925,0.193l0.168,0.264l-0.108,0.185l-0.362,0.032l-0.099,0.155l0.713,0.193l0.713,0.307l0.075,0.292 l-0.545,0.325l-0.653-0.009l-0.396-0.056l-0.059,0.323l0.497,0.186l0.821-0.081l0.596,0.106l-0.141,0.331l-0.589,0.413 l-0.814,0.324l-0.538-0.004l-0.589-0.42l-0.687-0.632l-0.201-0.42h-0.269l-0.336,0.195l-0.723-0.163l-0.235,0.195l0.235,0.355 l1.444,0.615l0.789,0.486l0.016,0.389l-0.303,0.291l0.068,0.371l0.303-0.145l0.62,0.017l0.253,0.209l0.384,0.164l-0.015,0.306 l-0.438,0.13l-0.521,0.404v0.309L591.469,255.06L591.469,255.06z M590.498,255.303l-1.496-0.825l-0.653-0.082l-0.02,0.259 l0.958,0.955l0.539,0.016L590.498,255.303L590.498,255.303z M663.174,176.947l0.167,0.418l1.106-0.162l2.046-0.418l2.01,0.418 l0.603-0.613l0.872-0.194l1.005,0.581l1.072-0.387l0.503,0.129l1.105-0.806l0.102-2.418l-0.671-0.581l-0.368-0.838l-0.737-0.032 l-2.716,1.191l-2.513,0.291l-0.671,0.742l-0.904,0.419l-0.537,0.902l-1.006,0.162l-0.132,0.581L663.174,176.947L663.174,176.947z  M593.653,249.364l0.638,0.405l0.353-0.211l-0.168-0.388l-0.437,0.017L593.653,249.364L593.653,249.364z M598.332,240.396 l0.151,0.267l0.108-0.308L598.332,240.396L598.332,240.396z M598.818,239.262l-0.083,0.486l0.311-0.177l0.024-0.454 L598.818,239.262L598.818,239.262z M599.195,237.75l0.084,0.251l0.219-0.034l0.126-0.347l-0.311,0.016L599.195,237.75 L599.195,237.75z M598.388,235.852l0.234,0.502l0.572,0.098l0.252,0.258l0.973-0.032l0.084-0.275l-0.42-0.339l-0.807-0.033 l-0.469-0.356L598.388,235.852L598.388,235.852z M602.37,235.339l0.352-0.404l-0.093-0.552l-0.259,0.259V235.339L602.37,235.339z  M601.949,229.787l-0.016,0.285l0.729,0.744l0.907,0.462l0.15,0.219l0.302-0.204l-0.343-0.614l-1-0.372l-0.386-0.526 L601.949,229.787L601.949,229.787z M607.855,219.59l0.135,0.678l0.404,0.615l-0.102,1.053l0.318,0.679l0.487,0.113l-0.151-0.956 l0.117-0.921l-0.386-0.42l-0.319-0.827l-0.336-0.355L607.855,219.59L607.855,219.59z M612.221,216.871l0.152,0.42l0.453,0.242 l0.101-0.355l-0.371-0.339L612.221,216.871L612.221,216.871z M613.531,215.852l0.269,0.357l0.083-0.341l-0.335-0.274 L613.531,215.852L613.531,215.852z M620.951,215.172l0.486-0.438l0.723,0.049l0.15-0.454l-0.571-0.987l-0.352-0.162l-0.251-0.518 l-0.521,0.033l-0.587,0.632l-0.084,0.485l-0.167,0.454l0.554,0.469l0.184,0.404L620.951,215.172L620.951,215.172z  M623.85,214.779l-0.261-0.518l0.251-0.437l-0.479,0.339l-0.007,0.501l0.335,0.315L623.85,214.779L623.85,214.779z  M678.827,185.19l0.343,0.055l0.496-0.282l-0.109-0.405l-0.671,0.275L678.827,185.19L678.827,185.19z M669.102,177.5l0.436,0.209 l0.622-0.129v-0.339l-0.706-0.113C669.453,177.128,669.067,177.5,669.102,177.5L669.102,177.5z M664.983,173.887l0.293,0.104 l0.504-0.129l0.244-0.469l-0.599,0.08L664.983,173.887L664.983,173.887z M673.369,171.636l-0.042,0.542l0.42,0.348l0.218-0.314 l-0.075-0.591l-0.403-0.267L673.369,171.636L673.369,171.636z M678.938,154.667l0.017,0.582l0.201,0.291l-0.05,0.665l0.622,1.1 l0.419,0.938l1.192,0.325l1.04,0.825l0.705,0.955l0.89,0.422l0.52,0.047l0.218,0.471l0.941,0.354l0.219-0.323l-0.033-0.534 l0.503-0.372l-0.637-0.891l-0.976-0.355h-0.37l-0.486-0.584l0.302-0.258l0.285-0.404l0.503,0.146l0.741,0.533l0.973,0.114 l0.317,0.274l0.237-0.291l-0.421-0.858l-2.216-1.004l-0.721-1.245l-0.454-0.228l-0.805,0.017l-1.142-0.711l-0.704,0.016 l-0.421-0.194l-1.023-0.147L678.938,154.667L678.938,154.667z M676.857,155.104l0.437-0.276l-0.083-0.532l0.453-0.55 l-1.175,0.516l-0.067,0.534L676.857,155.104L676.857,155.104z M678.838,153.453l0.571,0.471l1.477,0.016l0.856,0.469l1.209,0.21 l1.041,0.533l0.706-0.046l0.369,0.178l0.016,0.518l0.54,0.372l0.871-0.065l0.538,0.211l0.639-0.161l0.034-0.486l-0.271-0.404 l0.203-0.615l0.386-0.162l-1.108-0.794l-0.756-0.128l-1.158-0.696h-1.074l-1.613,0.404l-0.938-0.308l-1.361,0.13l-0.806-0.032 C679.208,153.064,678.838,153.404,678.838,153.453L678.838,153.453z M675.162,150.394l0.622,0.601l1.241,0.162l1.024,1.066 l1.276,0.488l1.863-0.196l2.669,0.162l1.125-0.257l-0.032-0.406l-1.076-0.195l-2.216,0.082l-0.889-0.356l-1.244-0.648 l-0.923-0.129l-0.403-0.5l0.403-0.325l0.638,0.016l1.426,1.004l1.68,0.275l0.503-0.066l-0.47-0.518l-1.947-1.341l-2.787-0.487 l-0.688,0.21l-0.017,0.518l-1.241,0.388L675.162,150.394L675.162,150.394z M689.447,152.612l0.404,0.259l0.486-0.276l-0.049-0.5 l-0.604,0.178L689.447,152.612L689.447,152.612z M690.252,139.247l-0.738,1.256l0.033,0.742l0.637,0.42l0.67,0.225l0.873,0.807 h0.636l1.04,0.128l0.771-0.452l0.167-0.837l0.335-0.549l-0.034-1.128l-1.878-1.064l-1.237,0.224L690.252,139.247L690.252,139.247 z M699,138.485l0.487,0.082l0.655-0.697l-0.033-0.485l-0.504,0.032l-0.57,0.405L699,138.485L699,138.485z M695.14,133.483 l-0.335,0.567l-0.018,1.149l0.319,0.728l0.739,0.535l0.436-0.308l0.068-0.728l0.385-0.469l-0.117-0.793l-0.872-0.583 L695.14,133.483L695.14,133.483z M700.809,130.055v1.872l-0.335,0.965l0.301,0.775l0.804,0.645l0.972-0.193h0.972l0.37-0.291 l0.165,0.613l0.64,0.291l0.435-0.904l0.402-0.257v-1.292l-0.569-0.353l-0.235,0.58v0.547l-0.569-0.322l-0.57-0.872l0.067-0.579 l-0.602-0.709l0.434-0.387h0.436l0.067-0.71l-0.604-0.291l-0.803,0.708l-0.705-0.16l-0.334,0.226L700.809,130.055 L700.809,130.055z M701.99,115.846l-0.689,0.55l0.101,0.34l0.504,0.437l0.118,0.518l-0.404,0.437l-0.034,1.167l0.572,0.985 l0.066,1.409l-0.302,0.954l-0.034,0.988l0.336,0.421l0.37-0.453l0.152-1.263l0.418-0.42l-0.134-1.262l-0.554-0.955l-0.151-1.732 l0.286-0.938l-0.186-0.712L701.99,115.846L701.99,115.846z M695.039,118.014l-0.268,0.631l0.353,0.26l0.924-0.033l0.501-0.519 l-0.417-0.517l-0.773-0.13L695.039,118.014L695.039,118.014z M693.897,116.558l0.437,0.615l0.537-0.243l-0.335-0.632l-0.42,0.032 L693.897,116.558L693.897,116.558z M699.941,101.833l0.654,1.05l0.689,0.405l0.554,0.065l-0.034-0.534l-0.654-0.34l-0.638-0.842 l-0.386-0.048L699.941,101.833L699.941,101.833z M705.816,105.279c-0.017,0.016,0.185,0.485,0.185,0.485l0.689-0.032l0.285-0.469 l-0.152-0.486l0.135-0.841l0.386-0.518l-0.051-0.924l-0.923,1.151l-0.068,0.873L705.816,105.279L705.816,105.279z  M703.164,100.148l0.202,0.178l0.386-0.193l0.268-0.906l-0.066-0.551l-0.285,0.309L703.164,100.148L703.164,100.148z  M703.702,96.928l-0.185,0.324l0.37,0.275l0.201-0.211l0.051-0.404L703.702,96.928L703.702,96.928z M707.745,87.324l0.435,0.774 l0.033,0.388l0.839-0.581l0.368-1.129l-0.067-0.934l0.234-0.646l-0.402-0.29l-0.603,0.387l-0.235,0.742L707.745,87.324 L707.745,87.324z M705.062,74.256l0.352-0.032l0.319-0.371l1.124,0.097l0.64-0.695l0.034-1.003l-0.656-0.632l-1.512,0.615 l-0.367,1.213L705.062,74.256L705.062,74.256z M714.529,49.515l0.453-0.356l0.169-0.938l-0.15-1.424l0.15-0.502l-0.15-0.856 l-0.739,0.338l-0.083,0.55l0.218,0.293l0.017,0.791l-0.336,0.81L714.529,49.515L714.529,49.515z M711.81,52.396 c-0.034-0.032,0.385,0.113,0.385,0.113l0.219-0.632l0.033-1.504l-0.318-0.372l-0.554,0.437l-0.251,0.857L711.81,52.396 L711.81,52.396z M710.167,49.822l0.299,0.291l0.69-0.615l0.116-1.003l0.251-0.307l0.067-0.841l-0.384-0.372l-0.639,0.209 l-0.57,0.922l0.217,0.664L710.167,49.822L710.167,49.822z M661.328,16.876l0.318,0.097l0.269-0.307l0.184-0.793l-0.353-0.534 h-0.502l-0.286,0.744L661.328,16.876L661.328,16.876z M661.461,18.479l0.203,0.307l0.638-0.016l0.453-0.632v-0.711l-0.57,0.017 l-0.705,0.438L661.461,18.479L661.461,18.479z M657.6,18.592l0.554,0.953l0.235,0.617l0.622-0.033l0.469-0.614l0.47-0.291 l-1.241-1.102l-0.152-0.679l-0.47-0.486l-0.286,0.324l-0.167,0.631l-0.269,0.194L657.6,18.592L657.6,18.592z M655.167,19.48 l0.015,0.551l0.421,0.21l0.454-0.193l-0.017-0.406l-0.672-0.405L655.167,19.48L655.167,19.48z M641.232,22.992l0.302,0.825 l0.789,0.356l1.074,1.1l0.739,0.179l0.319-0.987l0.017-0.956l0.269-0.243l-0.051-0.583l-0.621-0.112l-0.772-1.084l-0.587-0.113 l-0.42,0.436l0.135,0.776l0.2,0.438l-0.385,0.438l-0.47-0.55L641.232,22.992L641.232,22.992z M640.341,23.704l0.572,1.311 l0.404,0.13l0.066-1.084l-0.739-0.55L640.341,23.704L640.341,23.704z M635.825,23.544l0.169,0.646l1.107,0.114l0.369,0.372 l0.706,0.032v-0.454l-0.521-0.468l-0.47-0.146l-0.101-0.745l-0.554-0.322l-0.655,0.55L635.825,23.544L635.825,23.544z  M633.073,31.892l0.419,0.146l0.571-0.178l0.185-0.615l-0.487-0.81l-0.371-1.034l-0.653-0.633l-0.486,0.081l-0.084,0.745 l0.451,0.697l0.02,1.1L633.073,31.892L633.073,31.892z M634.349,40.453l1.259-0.097l0.283-0.453l-0.115-0.793l-0.622-0.372 l-0.018-0.665l-0.435-0.307l-0.839,0.179l-0.454,0.857l0.068,0.615l0.537,0.89L634.349,40.453L634.349,40.453z M634.315,41.457 l-0.101,0.792l0.186,0.599l-0.135,0.888l1.394,0.958l0.52-0.47l-0.101-2.008l-0.621-0.775l-0.604-0.179L634.315,41.457 L634.315,41.457z M621.388,32.945l0.234-0.372l-0.251-0.275V31.65l-0.184-0.42l-0.42,0.258l-0.034,0.68L621.388,32.945 L621.388,32.945z M619.443,38.466l0.434,0.354l0.369-0.967l-0.101-1.065l-1.072-1.096l-0.068-1.45l0.437-1.259l0.134-1.354 l-0.47-0.936v-1.355l-0.269-0.613l-0.973,0.871l0.035,2.258l-0.436,0.838v1.098l0.972,1.901l0.2,1.355L619.443,38.466 L619.443,38.466z M569.208,45.786l0.503,0.451l0.134,0.646l0.736,0.322l0.101-0.936l-0.636-0.612L569.208,45.786L569.208,45.786z  M537.541,84.744l0.537,0.774l1.307,0.13l0.737,0.322h0.738l-0.503-0.742h-0.537l-0.736-0.872l-0.839,0.194l-0.602-0.194 L537.541,84.744L537.541,84.744z M533.017,84.873l0.904,1.031l1.072,0.033l0.805,0.451l1.072-0.581l-1.105-0.935l-1.307-0.483 l-1.106,0.095L533.017,84.873L533.017,84.873z M568.654,122.027l-0.151,0.582l0.338,0.195l0.435-0.568l-0.336-0.323 L568.654,122.027L568.654,122.027z M568.721,125.928l0.689,0.128l0.453,0.227l1.562-0.081l0.639,0.339l0.252,0.339l0.252-0.614 l-0.656-0.647l-1.142-0.225l-0.386,0.273l-0.872-0.534l-0.555,0.033l-0.386,0.356L568.721,125.928L568.721,125.928z  M569.924,127.208l0.251,0.283l0.303-0.008l-0.109-0.356L569.924,127.208L569.924,127.208z M570.165,132.966l0.252,0.455h0.671 l0.353,0.501l0.537-0.276l-0.267-0.533l-0.857-0.519l-0.503,0.098L570.165,132.966L570.165,132.966z M569.26,135.086l0.219,0.389 l0.687,0.145l0.588-0.452l-0.939-0.163l-0.335-0.178L569.26,135.086L569.26,135.086z M570.5,138.662l0.371,0.049l0.234-0.276 l-0.286-0.548l-0.218-0.552l-0.116,0.373L570.5,138.662L570.5,138.662z M571.721,139.611l0.159,0.274h0.168l-0.084-0.227 L571.721,139.611L571.721,139.611z M569.041,140.182l0.319-0.305l-0.168-0.34l-0.252,0.403L569.041,140.182L569.041,140.182z  M570.266,139.939l0.285,0.164l0.235-0.26l-0.384-0.209L570.266,139.939L570.266,139.939z M569.896,141.106l0.437-0.196 l0.069-0.274l-0.388,0.033L569.896,141.106L569.896,141.106z M570.518,142.627l0.168-0.292h-0.42l-0.588-0.064l0.151,0.373 L570.518,142.627L570.518,142.627z M571.241,143.34l0.437-0.033l0.201-0.42l-0.454-0.227l-0.586,0.468 C570.838,143.128,571.208,143.355,571.241,143.34L571.241,143.34z M568.352,145.588l0.707-0.307l0.285-0.016l-0.052-0.372 l-0.924,0.032l-0.352,0.388L568.352,145.588L568.352,145.588z M569.781,147.06l1.51-1.131l0.839-0.712l-0.051-0.47h-0.739 l-0.804,0.68l-0.59,0.064l-0.335,0.55l-0.352,0.242l0.084,0.502l-0.019,0.404l0.251,0.032L569.781,147.06L569.781,147.06z  M571.307,146.786l0.236,0.016l0.386-0.259l0.049-0.339L571.307,146.786L571.307,146.786z M570.686,147.693l0.521-0.115 l-0.135-0.421l-0.438,0.227L570.686,147.693L570.686,147.693z M569.41,148.146l0.453-0.452l-0.384-0.243l-0.338,0.21v0.386 L569.41,148.146L569.41,148.146z M567.867,151.106l-0.018,0.711l0.605-0.032l0.653-0.792l0.907-0.292l0.22-0.47l-0.354-0.209 l-0.454,0.243l-0.957,0.08l-0.219,0.55C568.251,150.895,567.882,151.123,567.867,151.106L567.867,151.106z M567.16,153.777 l0.236,0.744l0.486,0.161l0.318-0.421l-0.637-0.567L567.16,153.777L567.16,153.777z M587.592,257.246l0.638-0.745l0.671-0.064 l0.302,0.244l-0.286,0.468l-0.588,0.032l-0.369,0.227L587.592,257.246L587.592,257.246z M582.69,254.429h0.369l0.033-0.323 l0.454-0.616l-0.017-0.582l-0.419-0.018l-0.168,0.372l-0.386,0.341L582.69,254.429L582.69,254.429z M579.232,248.572l0.201,0.161 l0.554-0.015l0.555-0.324l-0.118-0.291l-0.671,0.031L579.232,248.572L579.232,248.572z M577.452,248.361l0.118,0.502l0.57-0.016 l0.05-0.437l-0.386-0.242L577.452,248.361L577.452,248.361z M572.433,248.895l0.101,0.308l0.369,0.08l0.218,0.455l0.654-0.276 l-0.285-0.646l-0.69-0.164L572.433,248.895L572.433,248.895z M565.985,221.516l0.385-0.066l0.723-0.566l0.689-0.906l-0.404,0.146 l-0.435,0.518L565.985,221.516L565.985,221.516z M565.968,220.543c0.018-0.014,0,0.243,0,0.243l0.303-0.113l0.47-0.371 l0.32-0.518l-0.336-0.032L565.968,220.543L565.968,220.543z M562.058,211.369l-0.354,0.517l0.286,0.049l0.772-0.211l-0.134-0.355 l-0.319-0.08L562.058,211.369L562.058,211.369z M561.57,210.268l0.302,0.47l0.671,0.097l0.034-0.665l-0.437-0.162L561.57,210.268 L561.57,210.268z M562.175,201.53l0.822,0.209l0.336-0.371l-0.454-0.179L562.175,201.53L562.175,201.53z M562.594,200.64 l0.402,0.21h0.689l0.521-0.308l-0.857-0.275l-0.635,0.178L562.594,200.64L562.594,200.64z M560.932,200.283l0.218,0.486 l0.402-0.195l-0.118-0.307l-0.285-0.064L560.932,200.283L560.932,200.283z M563.31,192.625l-0.21,0.259l0.227,0.235l0.428-0.08 l0.519-0.576l0.06-0.371l-0.438,0.014L563.31,192.625L563.31,192.625z M570.819,189.54l0.622,0.307l1.244-0.161l-0.103-0.437 l-1.073-0.26l-0.69,0.21V189.54L570.819,189.54z M567.832,185.46l-0.101,0.356l0.271,0.307l1.343-0.225l-0.168-0.484l-0.808-0.05 L567.832,185.46L567.832,185.46z M571.509,185.169l0.25,0.389l0.774-0.032l0.502-0.275l-0.789-0.291L571.509,185.169 L571.509,185.169z M569.393,184.57l1.093,0.47l0.62-0.097l0.587-0.436l-0.519-0.292l-0.908-0.211l-0.788,0.276L569.393,184.57 L569.393,184.57z M577.57,167.143l0.167,0.68l0.42,0.389l0.235-0.455l-0.386-0.468L577.57,167.143L577.57,167.143z  M576.999,165.024l-0.251,0.469l0.923,0.614l0.435-0.08l-0.283-0.777C577.822,165.25,577.014,165.024,576.999,165.024 L576.999,165.024z M574.431,159.051l0.621,0.017l0.688-0.663l0.688-0.243l0.034-0.357l-0.755-0.032l-0.622-0.389l-0.638,0.405 l-0.217,0.647L574.431,159.051L574.431,159.051z M574.497,162.418l0.404,0.323l0.822-0.096l0.687-0.728l-0.133-0.907 l-0.857-0.339l-0.586,0.258L574.497,162.418L574.497,162.418z M571.594,162.645l0.771,0.403l0.604-0.71l-0.099-0.518l0.267-1.247 l-1.226,0.565l-0.368,0.601L571.594,162.645L571.594,162.645z M566.019,166.868l-0.285,0.437l0.437,0.746l0.637,0.177l0.202-0.47 l-0.521-0.905L566.019,166.868L566.019,166.868z M576.882,175.364v0.291l0.486-0.082l0.068,0.533l-0.269,0.891l0.336,0.372 l0.603-0.42l0.337-1.278l0.671-0.616l-0.235-0.323l-0.47,0.113l-0.839-0.081L576.882,175.364L576.882,175.364z M565.892,178.301 l0.502,0.354l1.374,0.162l0.235,0.644l0.838,0.162l0.569-0.419l2.48-0.419h1.408l1.608-1.354l-0.269-1.323l-0.536-1.128 l-0.905-0.064l-0.871-0.388l-0.603-2.128l-0.872-1.451l-1.44-0.322l-0.871-0.936l-1.375-0.129l-1.004-0.388l-0.069,0.549 l-1.071,0.967v1.096l1.004,0.548l0.402,0.839l-0.871-0.518l-0.771,0.323v0.679l-0.301,0.676l1.241,0.679l-0.805,0.225 l-0.268,0.323l0.369,0.742l2.211,0.514l0.336,0.421l0.603,0.194l1.44-0.872l-1.038,1.258l-0.771,0.032l-1.307-0.483l-0.537,0.128 L565.892,178.301z ",
"M486.603,64.395l0.605-0.516l0.535-0.968l1.474-1.483 l0.672-2.224l0.536-0.324l0.167,0.741l-0.436,1.065v0.548l0.771,0.161l0.972-0.902l0.804-0.549l-0.102-0.903l-0.904-0.194v-0.258 l1.005-0.387v-1.226l-0.3-0.483v-0.838l1.17-0.904l0.403-1.482l0.904-0.291l0.438-0.708l-0.068,0.804l0.168,0.453l-0.636,0.226 l-0.637,1.451l-0.804,1l-0.167,1.291l0.4,0.774l0.304,1.029l0.502-0.513l0.705-1.452l1.775-1.418l0.57-1.001l0.034-1.127 l0.57-0.902l0.603-0.226l0.102,0.547l-0.27,0.292v1.063l0.738-0.291l0.973-1.256l0.868-0.033l1.309,0.161l1.508-0.483 l0.812-0.067l0.654-0.631l0.874-0.308l0.387-0.809v-0.567l0.148-0.646l-0.604-0.615l0.385-1.116l-0.049-2.103l-0.353,0.03 l-0.57,1.28l-1.125,1.196h-0.504v-0.583l0.706-0.857l0.939-0.55l0.101-0.68l-1.04-0.906l-0.185-0.665l-0.454-0.063l-0.487,0.308 l-0.184,0.567l-0.571-0.405l-0.823,0.046l-0.772,0.503l-0.69-0.129l0.287-0.42l2.183-0.956l0.957-0.161l1.511-1.603l0.487-0.354 l1.023-1.766l0.454-1.455l-0.319-0.242l-0.739,0.193l-0.487,0.324l-0.352-0.453l0.336-0.518l0.555-0.274l0.654,0.065l0.402-0.599 l-0.033-0.923l0.873-0.888l-0.017-1.038l-0.25-0.306l0.032-0.712l-0.84-0.243l-0.805,0.355l-1.007,1.925l-0.202,0.973 l0.504,0.583l-0.638,0.777l-0.455,0.339l-0.268-0.177l0.033-0.503l-0.318-0.388l-0.017-0.792l0.873-1.537l-0.285-0.811 l0.152-0.484l0.385,0.307l0.605-0.339l-0.318-1.117l-0.554-0.922h-0.823l-1.007,0.308l-0.453,0.776l-0.184-0.502l-0.304-0.242 l0.134-1.311l-0.503-1.196l0.201-1.894l-0.067-1.391l0.504-1.053l0.135-1.438l-0.104-1.071l0.738-1.419l0.066-1.194l-0.804-0.969 l-0.234-0.934l-1.373-0.936l-0.269-0.774l-1.307-0.581l-0.403,0.323v0.517l-0.334,0.161l-1.24-1.064l-1.005,0.193l-0.033,0.936 l-0.638,1.194l0.571,0.581l1.005-0.035l0.805-0.255l1.105,0.515l0.336,0.709l0.771,0.129l-0.035,0.581l-1.408,1.32h-0.703 l-0.904-0.709l-0.839,0.097l-0.938-0.193l0.468,0.773l0.637,0.097l-0.737,0.678l-0.737,0.258l-1.273-1.292l-1.375,0.677 l-0.435,1.193l-0.637,0.549l0.101,0.549l0.771,0.258l0.234,1.033l1.04,0.581v0.449l-0.704-0.064l-0.168,0.711l0.503,0.484 l-0.034,0.612l-0.602-0.033l-0.671-0.515l-0.905-0.129l-0.972-0.677l-0.637-0.129l-0.871,0.451l-0.101,0.807l0.504,0.806 l-0.403,0.743L487.91,28.5v-0.58l-0.671-0.452l-1.033-0.348l-0.353,0.112l-0.621-0.711l-0.587-0.129l-0.269,0.468l0.504,1.133 l-0.185,0.954l0.404,1.151l0.72,0.516l1.125,0.178l0.387,0.453l-0.287,0.129l-1.074-0.033l1.141,0.665l0.37,0.711l0.797,0.523 l1.239-0.034l0.503-0.579l0.469,0.033l0.102,0.612l-0.771,0.549l-0.335,1.354l-0.536,0.128l-1.207-0.968l-2.546-0.514 l-0.873-1.226l-0.668-0.259l-0.302-0.484h-0.335l-0.402,0.967l0.134,0.42l-0.436,0.483l0.436,1.354l-0.705,0.419l-0.568-0.291 v1.194l-0.537,0.29l0.034,1.903l0.602,0.516l1.408,0.096l0.805,0.42l0.837-0.258v0.387l-0.636,0.355l-0.973-0.322l-1.406,0.032 l-0.47-0.228l-0.873,0.066l-1.205,1.548l-0.134,0.677l0.502,0.614l-0.134,0.483l-0.536,0.226l-0.065,0.708l0.501,0.452 l0.604-0.354l1.139,0.064l0.771-0.774l0.436,0.452l-0.133,0.741l-0.839,0.032l-0.502,0.905l0.369,0.418h0.669l0.771-0.709 l0.536,0.033l0.872-0.612l0.034,0.514l-0.471,0.485l0.571,0.257l1.306-0.032l0.336,0.516l-0.838,0.065v0.741l0.704,0.097 l1.005-0.227l1.072,0.742l2.212,0.517l0.268,0.388l-1.91-0.064l-0.939,0.094l-1.273-0.806l-1.139,0.42l-0.066,0.517l1.205,0.548 l1.845,0.225h1.842l0.637,0.419l-2.011,0.356l-0.603-0.291l-1.81-0.224l-1.241-0.068l-0.536-0.645l-0.905-0.289l-1.273-1.097 l-0.535,0.388l-0.639,0.646l-1.406,0.063l-0.636,0.516l-0.269,1.58l1.039,0.904l-0.034,0.999l-0.335,0.419l-0.535-1.418 l-0.572-0.064l-0.534,1.967l0.133,1.128l0.67,0.193l0.302-0.356l0.535,0.065l0.637,1l0.67,0.193l-0.737,0.162l-0.502,0.353 l-0.771-0.837l-1.207,0.161l-0.135,1.581l0.369,0.548l0.604-0.323l-0.402,0.613l0.067,2l0.57-0.484l0.703,0.226v1.322 l1.242,0.388l1.875,1.257l0.839-0.324l0.369-0.838l-0.203-0.772l1.273,0.096l0.236,0.774l-0.236,0.772l0.203,0.937l0.369-0.226 l0.803-2.128l-0.1-1.837l0.367-1.227l1.041-1l0.436-0.968v1.162l-1.072,1.709l-0.234,1.226l0.267,0.741l-0.368,1.646l0.435,0.87 l-0.134,0.549L486.603,64.395L486.603,64.395z M488.86,24.926l0.292-0.21h0.58l0.378,0.244h0.738l0.078,0.759l-0.486,0.05 l-0.403-0.298l-0.891-0.156L488.86,24.926L488.86,24.926z M489.513,63.998l0.151-0.791l0.604-0.599l0.084-0.584l0.587-0.274 l0.353,0.243l-0.353,0.582l-0.099,0.502l-0.941,0.842L489.513,63.998L489.513,63.998z M499.167,55.47l1.108-1.407h0.605 l0.906-0.535l0.822,0.356l0.94,0.825l-0.319,0.584l-1.242-0.033l-0.722,0.729l-1.242,0.145l-0.688-0.211L499.167,55.47 L499.167,55.47z M569.191,2.749l0.353-0.777l0.555-0.066l0.453,0.778l-0.823,0.307L569.191,2.749L569.191,2.749z M535.515,65.956 l-0.353,0.357l0.419,0.518l0.907,0.032l0.033-0.646l-0.587-0.326C535.934,65.891,535.531,65.972,535.515,65.956L535.515,65.956z  M518.808,75.842l0.369,0.548l0.837-0.032l-0.469-0.742L518.808,75.842L518.808,75.842z M495.188,75.439l-0.419-1.084 l0.033-0.535l0.539-0.031l0.419,0.501v0.793l-0.287,0.322L495.188,75.439L495.188,75.439z M488.59,88.903l-0.185-0.454 l0.016-0.745l-0.335-1.117l-0.235-0.259l-0.302,0.276l-0.352,1.051l0.251,1.456l0.621,1.02l-0.252,0.647l-0.402,0.048 l-0.673-0.292l-1.729-0.064l-0.084-0.695l-0.42-0.098l-1.344-0.858l-0.587,0.032l-0.184-0.307l-0.37-0.274l-0.486-0.017 l-0.1-0.454l0.486-0.711l0.386-0.063l0.453-0.746l-0.05-0.614l-0.654-1.165l-0.353-0.275l0.017,0.665l0.403,0.371l0.067,0.696 l-0.286,0.485l-0.722-0.033l-0.268,0.274l0.134,0.164l0.101,0.582l-0.537,0.566l-0.453-0.081l-0.589-0.922l0.018-0.534 l-0.185-0.55l0.47-1.068l-0.151-0.404l0.067-0.567l-0.437,0.421l-0.234,0.744l-0.436,0.729l0.1,0.355l-0.118,0.712l-0.923-0.064 l-0.554-0.454l-0.521-0.033l-0.251-0.403l0.386-0.745l0.118-1.036l0.269-0.325l0.016-0.791l0.957-1.749l-0.589,0.355 l-0.653,0.261l-0.42,1.748l-0.051,1.206l-0.612,0.671l-0.319-0.243l0.462-0.802l0.057-0.234l-0.277-0.066l-0.536,1.183h-1.04 l-0.251-0.552l0.033-1.083l-0.252-0.486l0.168-0.616l1.025-0.631l0.234-0.63l-0.084-0.437l0.285-0.713l0.672-0.629l0.654-0.147 l0.453-0.338l1.292-0.082l0.472-0.616l0.839-0.291l0.587-0.178l0.016-0.518l0.404-0.372l0.806-0.032l1.209,0.502l1.46,0.065 l0.604-0.375l0.705,0.194l0.369,0.858l0.671-0.031l0.085-0.502l0.554-0.065l0.889,0.68l0.387-0.21l0.838,0.081l0.388-0.405 l-0.371-0.308l-0.671,0.146l-0.554-0.55l-0.468-0.049l0.083-0.324l0.585-0.403l0.068-0.455l-0.722-0.273l0.15-0.227l0.907,0.032 l0.201-0.257l-0.991-0.356l-0.219,0.274l-0.637,0.082l-0.538-0.763l0.168-0.501l0.79-0.598l0.033-0.485l-0.403-0.033 l-0.336-0.647l0.034-1.505l0.252-0.307l-0.201-0.778l0.1-0.775l0.715-0.073l0.803-0.259l1.005,0.034l0.637-0.129l0.938,0.324 h0.771l0.904,1.126l0.437,1.774l0.033,2.517l-0.369,1.161l0.402,0.386l0.571-0.29l1.676,0.872l0.603,1.064l0.568,0.161v-0.583 l1.912-0.03l1.205,1.063l0.438-0.355l-0.537-0.515l0.705-0.581l1.373-0.613l0.939-1.29l1.743-1.032l1.542-1.58l0.067-0.84 l0.636-0.514l-0.669-0.033l-0.57,0.547l-0.067,0.711l-1.502,1.523l-1.025,0.582v0.292l-1.376,1.15l-1.561,0.565l-0.539-0.372 l-0.519-0.016l-0.118,0.259h-1.058l-1.227-0.68l0.083-0.533l0.723-0.6l0.857-0.55l0.101-0.809l-1.007,0.729l-0.37,0.565 l-0.738-0.031l-0.554-1.069v-0.404l0.57-0.081l0.79-0.373l0.1-0.306l-0.788-0.033v-0.404l0.47-0.339l0.671,0.259l0.639-0.065 l0.101-0.518h-0.772l-0.521-0.323l-0.354,0.453l-0.722-0.048l-0.351-0.664l0.303-0.486l0.77-0.179l0.579-0.396l0.939,0.064 l0.939,0.355l0.703-0.419h-1.039l-0.167-0.485l0.804-0.804l0.67-0.034l0.303-0.387h-0.705l-0.034-0.451l0.571-0.838l0.804-0.129 l-0.37-0.708l1.14-1.646l0.771-0.452l0.202-0.58l-0.805,0.13l-1.273,1.515l-1.005,1.838l-1.375,1.064l-1.105,1.096l-0.737-0.225 l-1.375,0.032l-0.031-0.581l0.703-0.965l0.973-0.421v-0.87l-1.374,0.967l-1.208-0.13l0.033,0.645l-0.77,0.516l-1.241-0.096 l-1.172-1.033l0.604-0.452l0.838-0.095l-0.301-0.453l-0.537-0.032l0.167-0.966l1.105-0.872l0.134-0.678l1.006-0.386l0.836-0.581 l0.938-0.129l0.067-1.063l0.638-1.161l1.273-1.485l0.736,0.259l1.811-0.387l1.342,0.322l0.703-0.387l0.736,0.033l0.939-0.613 l0.703-0.098l0.134,0.323l1.139,1.16l0.604,0.032l2.044,1.324l0.336,0.708l0.535,0.741l0.537-0.03l1.241,1.837l-0.035-1.291 l0.904-0.064l-0.167-0.58l-1.107-0.097l-0.434-0.16l-0.034-0.744l0.873-0.289h1.942l0.904,0.451l0.302-0.387l0.067-1.032 l0.469-0.871l-0.066-0.613l-0.537,0.227l-0.134,0.708l-0.938,0.613l-0.67,0.613l-1.744-0.613l-1.374-0.032l-0.568-0.676 l-0.705-0.389l-1.373,0.162l-1.106-2l-0.033-1.516l0.503-0.451l0.938,0.484l0.202,0.871l0.401,0.612l0.637-1.032l0.302-1.193 l-0.669,0.162l-0.304-0.258l-0.066-0.904l0.77-1.419l-0.033-1.195l0.636-1.353l-0.267-2.386l-0.438-1.255l-0.503-0.42 l-0.386-0.923l0.169-0.663l0.554-0.21l0.485-0.227l0.504,0.485l0.721,0.178l0.537,0.988l0.321-0.113l-0.018-0.711l-0.453-1.052 l-0.975-0.275l-0.57-0.469l-0.051-0.811l0.337-1.036l2.883-3.031l1.307-0.291l0.87,0.356l0.337,0.837l1.073,0.807h0.804 l2.01,1.291v0.967l1.073,1.193l0.503,2.159l-0.135,1.581l0.201,1.517l0.671,0.87l0.301-0.452l0.369-0.064l0.871,0.774 l0.167,0.806l0.235-0.581l0.636-0.355l1.006,0.097l-0.736-0.45l-1.141-0.162l-0.636-0.807l-0.672-0.417l-0.033-0.517l0.905-0.934 l-0.101-0.583l-0.099-3.193l-0.303-0.871l0.303-1l1.741-0.098l0.604,0.389l1.321,0.34l1.31,0.098l1.477,0.516l1.763-0.048 l1.427-0.647l0.857,0.13l0.856,0.697l1.83,0.194l0.873,0.549l0.974-0.291l-0.018-0.453l-0.821-0.534h-1.243l-1.427-0.293 l-0.371-0.501l0.134-0.291l0.705-0.017l1.346-0.514l3.183-0.324l2.144-0.16l1.709,0.58l1.04,0.838l0.77-0.386l1.14-0.226 l-0.569-0.55l-0.504,0.033l-0.803-0.387l0.032-0.483l-0.905-0.516l-1.138-0.032l-0.604-0.387l-2.413,0.225l-0.033-0.354 l0.47-0.419l0.569-1.193l1.038-0.128l0.973-0.807l0.468-1.162l2.447-1.418l1.375-0.064l2.21-1.033l0.033-0.548l-2.646,1.032 l-1.743,0.161l-2.48,1.774l-0.033,0.936h-0.47l-0.336-0.904l-0.368-0.064l-0.604,0.87l-0.838,0.098l-1.205,1.386l0.502,0.033 l0.167,0.419l-1.675,1.225l-0.972,0.162l-3.318,1.291l-1.005,0.194l-0.872-0.161l-2.714,0.064l-1.206-1.161l-1.309,0.162 l-0.736-0.129l-0.102-0.742l1.24-1.096l1.207-0.034l0.805-0.322l1.676-0.194l0.803-0.772l-0.669-0.065l-1.138,0.418l-1.041-0.127 l-1.24,0.483l-0.87-0.226v-0.743l1.105-0.548l-0.803-0.096l-1.474,0.387l-0.135,1.29l-1.342,1.291l-1.439,0.065l-2.011-0.613 l-1.777-0.064l-0.804-0.872l0.011-0.533l-1.091-0.049l-0.991-0.777l0.086-0.486l0.771-0.614l0.638-1.085l1.395-0.761l0.84-1.02 l1.292-0.695l0.521-0.583l0.957,0.242l1.881,0.132l0.57-0.291l0.907,0.063l1.713,0.938l1.579,0.048l0.821,0.274l1.495-0.193 l0.219-0.259l-0.689-0.42l-1.779,0.114l-1.947-0.356l-1.175-0.681l-1.227-0.032l-1.779,0.179l-1.981-0.404l-0.521-0.034 l-0.486,0.567l-0.957,1.004l-1.595,0.954l-1.729,0.774l-1.076,1.377l-0.351,0.161l-0.773-0.323l-1.243-1.585l-0.571-0.146 l-0.537-0.47l-0.369-1.133l-0.033-1.278l-0.454-0.501l-0.118-1.181l0.369-0.373l0.907,0.211l0.94-0.211l0.57,0.405l2.738-0.048 l1.394,0.906l0.823,0.018l0.486,0.306l0.856,0.065l1.108-0.552l1.142,0.357l0.269-0.274l0.906-0.227l0.538-0.357l1.879-0.403 l1.729-0.293l0.236-0.5l-0.068-0.552l-0.554,0.179l-0.502,0.146l-0.639,0.371l-1.14,0.261l-1.881-0.13l-1.428,0.841l-0.654,0.113 l-1.26-0.194l-0.468,0.227l-0.79-0.017l-1.074-0.921l-0.655-0.018l-0.404-0.259l-1.089,0.032l-1.479-0.775l-1.058,0.452 l-0.94-0.485l-0.269-0.632l0.437-0.437l-0.016-1.117l0.671-0.452l0.503,0.017l0.638,0.727l1.393-0.08l0.572-0.243l-0.805-0.598 l-0.773-0.033l-0.655-0.776l0.269-0.404l1.294,0.032l1.19-0.988l1.58,0.017l0.671-0.551l0.89-0.032l0.586,0.308l0.773-0.163 l0.017-0.534l-0.487-0.388l-1.965,0.291l-1.593,0.129l-1.245,0.47l-0.873,0.129l-0.569,0.583l-0.773-0.016l0.016-0.647 l-0.234-0.874l1.108-0.437l1.342-1.004l1.444-0.096l0.723-0.373l-0.992-0.048l-0.42-0.42l0.151-1.23l-0.417,0.177l-0.204,0.875 l-0.485,0.291l-0.27-0.857l-0.521,0.081l-0.436,0.454l-0.94,0.096l-0.017,0.747l-0.351,0.548l-1.193,0.325l-0.101-0.825 l0.101-0.939l-0.369-0.097l-0.218-0.792l0.268-0.275l0.673,0.323l0.134-1.035l0.753-0.339l1.075,0.048l0.437-0.842l1.124-0.517 l0.755,0.112l1.378-0.71l1.931-0.13l0.453-0.355l0.722,0.257l0.102,0.632l-0.337,0.469l-0.067,2.104l0.654-0.211l0.454-1.326 l0.604-0.518l0.301,0.42l-0.301,0.373l0.115,0.646l0.539-0.357v-0.711l0.285-0.421l-0.134-0.63l0.184-1.052l0.571-0.113 l1.192-1.004l0.453,0.098l0.117,0.777v1.085l0.823,0.436l0.184,1.134l-0.234,0.662l0.319,0.679l-0.118,0.682l0.638,0.468 l0.369-0.292l-0.386-0.629l-0.051-1.037l0.555-0.259l0.957-1.441l0.503-0.015l0.806,1.196l0.051,1.118l-0.252,0.905l0.469,0.471 l0.219,0.613l0.437-0.533l-0.051-1.197l0.557-0.097l0.536-0.389l0.219,0.567l-0.303,0.323l0.101,0.809l0.421,0.47l0.671-0.859 l0.435-0.017l-0.134,0.987l0.487-0.518l-0.034-1.034l-0.789-1.263l-0.435,0.017l-0.455-0.664l-0.034-0.938l-0.571-0.648 l-0.418-0.792l-0.47-0.452l0.217-1.004l0.907,0.064l0.654,0.567l0.976-0.292l0.787,0.26l0.37-0.438l0.083-1.618l-0.687-0.663 l0.303-0.793l1.141-0.292l0.333,0.242l1.663,0.227l0.724,0.486l-0.086,0.663l-0.653,0.599l0.202,0.485l1.712,0.599l0.049,0.533 l-0.267,1.229l0.168,1.927l0.755-0.261l0.521-1.051l0.368,0.016l0.052,0.792l0.369,0.503l0.739-0.406l0.402-0.679l0.974-0.422 l0.236-0.485l-0.571-1.666l0.538-0.648l0.671-0.016l0.404,0.307l1.56,0.161L542.8,7.151l-1.46-1.004l-0.27-1.149l0.303-0.437 l0.253-0.89l0.587-0.064l1.746,0.922l0.202,1.327l0.234,0.923l-0.101,1.083l0.436,0.647l0.252,1.181l0.419,0.762l0.404-0.357 l0.033-1.036l-0.151-0.695l-0.118-1.15l-0.487-1.293l0.184-1.521l-0.117-1.603l0.32-0.955l0.604,0.049l0.889,0.792l0.588-0.017 l0.336,0.29l0.049,1.248l0.521,0.922l-0.15,1.07l0.167,1.422l0.438,0.178l-0.052-0.745l0.335-0.615l0.354-0.049l1.627,1.796 l0.168-0.307l0.722-0.194l0.051-0.404l-0.654-0.161l-0.79-0.972l0.27-0.323l0.099-0.536l-1.058-0.857l-0.302-0.646l0.271-0.373 l1.057-0.082l-0.472-0.42l-0.722-0.113l-0.554-0.696l0.539-0.275h0.806l0.956-0.809l1.966,0.307l0.369,0.469l-0.033,0.955 l-0.522,0.809l0.237,0.42l0.604-0.048l0.654-1.116l0.437-0.324l0.333,0.485l-0.419,1.295l0.488,0.291l0.571-0.113l0.184-0.421 l1.159-1.052l0.352,0.421l-0.116,1.052l-0.42,0.728l0.335,1.488l-0.52,0.648l0.42,0.389l1.023-0.194l0.604,0.162l0.404-0.356 l0.049-1.295l0.538-1.538l-0.722-1.957l0.202-1.198L560.362,1l0.637,0.438l0.655,0.016l0.874,0.291l1.142-0.452l1.074,0.274 l0.37,0.713l1.193,0.387l1.106-0.355l1.124,0.76l0.236,0.713l0.353,0.453l0.135,1.099l-0.488,1.02l0.218,0.502l0.738-0.178 l1.009-1.102l1.408-0.986l0.615-0.733l0.904-0.032l1.074,0.612l1.173,0.034l-0.134,0.579l-1.005,0.968l0.535,0.839l0.436-0.259 l0.234-0.806l1.005-0.743l0.906-0.322l1.44,0.613l1.742,0.324l0.57,0.611l-0.468,0.484l-0.469,0.064l0.268,0.678l-0.67,0.548 l0.469,0.581l0.571-0.451l0.871-0.388l0.167,0.968l0.568,0.225l0.537-0.741l1.408-0.194l0.067,0.677l-0.502,0.549l0.2,0.677 l0.638,0.162l0.369-0.419l0.804-0.515h0.402l0.335,0.708l1.598,0.931l0.905-0.015l0.269,0.42l-0.452,0.519l-1.747,0.711 l-0.89,1.102l-1.073,0.144l-1.294,0.663l-0.706,0.034l-0.722-0.324l-0.419,0.518l-1.343,0.371l1.965-0.08l1.812,0.241 l0.688,0.374h0.688l0.521-0.792l0.437-0.325l0.956,0.017l0.504-0.858l1.294-0.647l1.057-0.064l0.217,0.663l-0.468,0.972 l0.369,0.468l0.437-0.226l0.47-0.97l0.938-0.649l0.371,0.374l-0.455,0.775l-0.034,0.471l-0.452,0.599l0.368,0.436l0.689-0.243 l0.485-0.436l0.135-0.777l1.042-0.226l0.77,0.226l-0.519,1.861l-0.621,0.339l0.419,0.227l0.318,0.954l-0.168,1.199l-0.772,0.5 l-0.234,0.664l-1.075,1.424l0.368,0.323l0.623-0.242l0.569-0.873l0.839-0.049l0.203-0.21h0.638l1.142,0.696l0.453,1.02 l0.134,1.375l-0.353,2.088l-1.107,1.989l-1.748,0.923l-0.419,0.42l-0.905-0.21l-0.839,0.292l0.015,0.469l-0.571,0.485 l-2.804,1.312l-1.039,0.745l-0.908,0.194l-1.276,0.486l-1.343,0.016l-0.655-0.615l-0.437,0.891l-0.486,0.258l-1.059-0.743 l-1.04-0.472l-1.444-0.259v0.632l1.109,0.21l0.604,0.308l-0.722,0.388l-1.208-0.274l-0.638,0.097l-0.605-0.453l-1.695-0.097 l-0.521-0.518l-0.537,0.292l-0.503,0.032l-1.393-1.619l-0.941-0.938l0.201,1.002l0.989,0.938l0.168,0.551l-0.821,0.065 l-1.31-0.487l0.502,0.745l3.023,0.438l1.813,0.372l0.519,0.519l-0.586,0.533l-4.112,1.57l-2.57,0.405l-1.057-0.016l-1.427,0.322 l-1.192-0.177l-0.183-0.567l-0.892,0.357l-0.688-0.196l-0.924,0.164l-0.469,0.824l0.923-0.08l0.167,0.841l1.309-0.712 l2.586,0.017l1.193,0.194l3.458-0.259l2.35-0.371l1.478-1.424l1.007-0.035l0.739,0.26l1.074-0.192l1.487,0.013l-0.58,1.249 l-0.688,1.278l-1.595,0.777l-0.486,0.372l-1.798,0.325l-0.704,0.953l-0.69,0.097l-1.058,0.986l-1.427,0.633l-0.94,0.081 l-0.654,0.259l-1.007-0.162l-0.906,0.792l-1.712,0.34l-0.552,0.923l-1.872,0.316l-0.788,0.437l-0.683-0.186l-0.789,0.695 l-0.772-0.065l-0.336,0.356l0.034,0.988l-0.924,0.697l-0.554,0.759l-2.182,0.032l-0.622,0.452l-0.705-0.226l-0.17-0.517 l0.422-0.583v-0.759l-0.621-0.502l0.166,1.229l-0.452,0.47l-0.303,0.663l1.059,0.664l0.218,0.664l-0.923,0.938l-0.42,0.066 l-0.957-0.649l-0.587,0.356l-1.614-0.534l-0.519,0.356l-0.605,0.066l-0.102-0.777l-0.386-0.291l-0.351,0.791l-0.806,0.048 l-0.186,0.501l1.796,0.358l2.436,0.048l0.553,0.711l-0.184,0.761l-0.94,0.549l-1.192-0.193l-1.244,0.274l-0.335,0.34l0.438,0.34 l0.435-0.242l0.638,0.37l-0.118,0.713l-1.492,1.393l-1.276-0.082l-2.317-0.048l-0.319-0.455l-0.94-0.112l-0.303-0.453 l-0.117-1.473l-1.292-0.227l-0.403-0.42l0.067-0.809l-0.587-0.502l-0.537,0.26l-0.638-0.227l-1.494,0.177l-0.084,0.437 l0.604,0.326l0.302-0.26l0.757,0.081l2.015,1.926l-0.051,2.492l-0.336,0.421l-0.99-0.113l-0.806-0.745l-0.537,0.081l-0.052,0.713 l-0.352,0.257l-0.873-0.873l-0.756,0.065l-0.621,0.712l-0.435-0.083l-0.421-0.531l-0.939-0.261l-0.604-0.938l-0.487,0.324 l-0.235-0.97l-0.505-0.292l-1.36-0.129l-0.537-0.729l-0.335,0.308l0.117,0.615l0.857,0.549l1.143,0.275l1.041,1.668l-0.386,0.469 l-2.501-0.535l-0.705-0.565l-0.069-0.923l-0.604-0.6l-0.318,0.439l0.186,0.419l-0.285,0.599l-0.841-0.227l-0.486-0.518 l-0.823,0.226l0.1,0.566l1.243,0.471l-0.051,0.792h0.521l0.404-0.325l0.688,0.019l0.705,0.646l1.006,0.342l0.823,0.759h0.521 l0.756-0.227l2.584,0.55l0.505,0.518l-0.856,0.599l0.285,0.469l-0.1,0.81l0.201,0.857l-0.622,0.568l-0.385-0.099l-0.604-0.566 l-1.261-0.323l-1.207-0.908l-0.303-0.582l0.15-1.117l-0.501-0.776l-1.377-0.048l-2.064-0.309l-0.773-0.532l-0.874,0.112 l-0.15,0.406l1.192,0.452l1.831,0.146l1.929,0.697l-0.033,0.938l-0.353,0.113l-0.989-0.679l-1.696-0.034l-1.394,0.357 l0.016-0.487l-0.503-0.517l-1.561-0.226l-0.739-0.422l0.168,0.485l1.695,0.746L527.64,60.6v0.631l0.756,0.032l0.22-0.129 l0.336,0.227l0.738-0.275l0.217-0.226l0.486,0.226l0.823-0.082l0.671,0.243l1.344,1.197l-0.035,0.437l-1.142,0.049l-0.957,0.42 l-0.151,0.47l0.874-0.243l0.838,0.016l0.773-0.162l0.856,0.793l0.822,0.486l0.017,0.792l-1.093,1.65l-0.369,1.375l-0.419,0.097 l-1.291,0.956l-0.606-0.325l-0.788,0.017l-0.689-0.357l-0.135-0.452l-0.688-0.388l-1.091-0.035l0.135,0.423l1.006,0.404 l0.135,0.454l0.654,0.161l1.159,0.712l0.168,1.117l-0.369,0.517l-0.754,0.146l-1.007,0.858l-0.589,0.128l-1.427-1.181 l-0.821,0.261l-0.455-0.486l-0.907-0.081l-0.587,0.323l0.202,0.599l2.753,1.423l1.057,0.098v0.549l-0.771,0.341l-0.755,0.841 l-0.806,0.179l-0.722-0.775l-0.705,0.032l-0.857,0.631l-1.427-0.067l-0.587-0.646l-1.88-0.421l-1.175,0.291l-0.235,1.634 l-0.89,0.809l0.84-0.031l0.285,0.244l0.034,0.889l-1.327,0.68l-0.05,0.97l-1.075,0.551l-0.387-0.357l-0.251,0.276l-0.15,0.616 l-0.924,0.371l-0.64-0.178l0.422-0.501h-0.455l-0.537,0.486l-0.638,1.229l-0.487,0.308l-2.148-1.116l-1.259-0.017l-0.168,0.34 l-1.141-0.226l-1.981-2.282l-0.42-1.942l0.521-0.372l0.152-0.729l-0.286-0.533l0.084-0.584l-0.856,0.987l0.017,0.616 l-0.387,1.278l-0.419,0.696l0.756,0.955l-0.152,0.47l-0.47-0.113l-1.276,0.161l-0.202-0.13l-0.873,0.13l0.805,0.68l-0.469,1.375 h0.654l1.04-1.197l0.505,0.032l0.402-0.373l0.621-0.227l1.058,0.729l0.672,1.002l-0.403,0.908l1.058-0.745l1.696-0.42 l1.144,0.518l0.183,0.873l-0.47,0.535l-0.554,1.44l-0.519,0.129l-0.271,0.599l0.286,0.261l0.839-0.068l-0.135,0.616l-0.755,0.81 l0.875-0.048l0.418-0.6l1.125-0.631l0.621-0.032l0.422-0.211l0.485,0.243l-0.218,0.891l0.269,0.583l-0.334,1.488l-1.007,1.764 l-0.891,0.016l-0.924,0.567l-0.554,0.955l-0.873,0.631l-0.318-0.275l0.318-1.019l0.135-1.069l-0.218-0.194l-0.654,0.404 l-0.655,1.199l-0.773,0.193l-1.276,1.15l-0.385-0.26l-0.891-0.032l-1.444,1.101l-0.419-0.227l-0.84,0.356l-0.89-0.05 l-0.302-0.631l-0.402-0.274l0.806-0.6l0.604-0.824l0.016-0.712l-0.956-1.343l-0.622,0.582l-1.277-0.467l-0.168-0.535l0.471-1.069 l0.688-0.177l-0.554-0.276l-0.654-0.161l-0.538-1.229l0.287-0.711l0.033-0.81l-0.404-0.712v0.955l-0.653,1.423l0.773,1.327 l0.1,0.616l-0.486,0.486l-0.035,0.986l-0.604,0.355l-0.72-0.306l-0.79,0.226l-0.653-0.63l-0.117-0.565l0.638-1.604l-0.32-0.809 l0.186-0.811l0.873-0.889l-0.957,0.178l-0.654,0.711l-0.202,1.068l0.353,0.858l-0.772,1.36l-0.791,0.242l-0.839-0.487l0.05-0.76 l-0.319-0.341l0.067-0.599l0.387-0.712l0.186-0.501l-0.251-0.921l-0.338-0.082l-0.184,0.404l-0.152,0.956l-0.537,0.484 l-0.032,0.648l-0.27,0.355l-0.74,0.049l-0.167,0.275L488.59,88.903L488.59,88.903z M513.705,221.741l-0.166,1.425l-0.253,0.986 l0.419,0.711l0.285-0.338l-0.135-0.6l0.303-1.019l-0.133-0.89L513.705,221.741L513.705,221.741z M512.884,216.935l-0.302-0.403 l0.369-0.355l0.25,0.242L513.185,217L512.884,216.935L512.884,216.935z M511.44,214.12l0.636-0.939l0.707-0.323l0.116,0.501 l-0.671,0.501l-0.336,0.388L511.44,214.12L511.44,214.12z M504.086,147.304l-0.067-0.648l0.352-0.356l0.035,0.858 L504.086,147.304L504.086,147.304z M505.362,148.08l-0.202-0.501v-0.615l0.487-0.292l0.353,0.584l-0.235,0.711L505.362,148.08 L505.362,148.08z M503.801,150.377l-0.335-0.695l0.201-0.403l-0.067-0.875l0.436-0.34l0.32,0.614l0.302-0.08l0.487,0.306 l-0.688,0.501l-0.353,0.811L503.801,150.377L503.801,150.377z M517.87,170.284l0.471-0.503l0.721,0.244l-0.487,0.485h-0.538 L517.87,170.284L517.87,170.284z M516.156,170.006l0.018-0.565l0.94-0.146l0.336-0.259l0.269,0.405l-0.721,0.826l-0.622,0.048 L516.156,170.006L516.156,170.006z M513.421,179.247l0.569,0.389l0.47-0.178l-0.401-0.274L513.421,179.247L513.421,179.247z  M517.232,183.277l0.872,0.534l0.336-0.242l-0.168-0.551l-0.503-0.016C517.769,183.002,517.198,183.261,517.232,183.277 L517.232,183.277z M524.434,190.153l-0.234-1.052l0.587-0.582l0.554,0.484l0.05,0.924l-0.487,0.209L524.434,190.153 L524.434,190.153z M528.043,194.377l0.084-0.843l0.671-0.371l0.32-0.243l0.435,0.259l-0.503,0.826l-0.638,0.194 C528.412,194.2,528.043,194.427,528.043,194.377L528.043,194.377z M502.339,98.823l-0.083-1.052l0.47-0.276l0.571-0.793 l2.082-1.294l0.824-0.162l-0.539,0.906l-1.327,1.002l-0.285,0.68l0.353,0.535l-0.119,0.467l-0.47-0.111l-0.352-0.567l-0.42,0.274 l-0.302,0.437L502.339,98.823L502.339,98.823z M497.757,94.6c-0.017,0.015,0.385,0.437,0.385,0.437l0.471,0.08l0.319-0.582 l-0.27-0.341L497.757,94.6L497.757,94.6z M472.641,83.837l-1.073-0.355l-0.103-0.875l0.136-1.651l-0.32-0.438l-0.034-0.985 l-0.151-0.227l0.923-0.374l1.36,0.583l0.152,1.02l-0.621,1.765l-0.218,0.5l0.269,0.325l0.166,0.695L472.641,83.837 L472.641,83.837z M472.405,34.385l0.974-0.971l0.604-1.231l0.084-0.662l1.159-0.841l0.571-1.182l-0.253-0.599l-1.106-0.065 l-0.688-0.241l0.403-0.907l-0.353,0.047l-1.126,0.923l-1.375,0.42l-0.168,0.696l-0.554,0.501l0.016,0.68l1.125,0.339l0.822-0.291 v0.809l-0.822,0.761l-0.018,0.695l0.421,0.389L472.405,34.385L472.405,34.385z M460.397,61.169l-0.033-0.968l0.537-0.676 l-0.469-0.485l-0.068-1.033l-0.836-0.481l0.301-0.582l0.3-0.645l1.074,0.129l0.938,0.741l0.369,0.033l0.1-0.745l-0.938-1.353 l-0.906-0.516l-0.168-0.484l0.907-0.033l-0.538-0.871l0.57-0.838l0.066-1.419l0.504-1.195l0.637,0.068l0.636-0.421l0.101-1.29 l0.604-0.612l1.139-0.937l0.904,0.033l1.14,1.386l0.403,1l-0.1,0.677l0.268,0.581l0.534,0.193l0.068,0.968l0.536,0.259 l0.066,0.483l0.438,1l0.904,0.097v0.419l0.402,0.774l0.402,1.709l-0.938,0.677l-0.536,0.517l-0.837-0.032l-0.538,0.258 l0.403,0.387l0.501,0.032l0.237,1.389l-0.168,0.837l-1.61,1.032l-0.468,0.452l-0.571-0.097l-0.066-0.709l-0.437-0.324 l-1.071,0.743l-0.737-0.321l-1.309,0.386l-0.669-0.064l-0.134-1l-0.736-0.065l-0.168,0.613L460.397,61.169L460.397,61.169z  M471.029,59.807l0.42-0.065l0.234-0.678l-0.202-1.505l-0.503,0.016l-0.233,0.486l0.032,1.036L471.029,59.807L471.029,59.807z  M474.54,73.367l0.014,0.745l0.64,0.647l1.022,0.017l1.024-0.405l0.941-1.52l0.101-0.535l-0.386-0.339l0.134-0.389l-0.455-0.665 l-0.72-0.047l-0.47-0.922l-0.671-0.016l-0.991,0.68l-0.117,0.921l-0.371,0.89L474.54,73.367L474.54,73.367z M473.312,73.739 l-0.152,0.517l0.186,0.762l0.521,0.309l0.287-0.325l-0.085-0.501l-0.386-0.245l-0.132-0.614L473.312,73.739L473.312,73.739z  M459.627,66.779l-0.134-1.321l0.503-1.387l0.703-0.742l0.937,0.034l0.671-0.131l0.703,0.227l0.67-0.129l0.504,0.129l0.099,0.483 l0.806,0.098l0.335-0.258l0.703,0.385l0.705,0.098l0.938,1.096l0.671,0.355l-0.37,0.355l0.269,0.42h0.637l0.671-0.356 l0.569,0.743l0.57,0.45l-0.1,0.549l0.199,0.42l-0.4,0.354l-1.005-0.258l-1.174,1.033l-0.804,0.193l-1.139-0.708l-1.375-0.034 l-1.273-0.87h-1.038l-0.906-0.453l-0.602-0.775l-0.972,0.099L459.627,66.779L459.627,66.779z M448.339,51.91l0.168-0.364 l0.512-0.314l0.252,0.258l-0.252,0.649l-0.461,0.016L448.339,51.91L448.339,51.91z M449.038,57.073l0.468,1.322l0.503,0.808 l0.503-0.034l0.836-0.096l0.47,0.387h0.604l1.408-0.904v-0.484l0.703-0.451l0.772-0.967l0.068-1.097l0.367-1.386l0.67-1.129 l-0.469-0.354v-0.484l0.538-0.482l0.603-1.162l0.635-0.095l0.704-0.713l1.073-0.708l0.201-1.225l-0.066-0.676l0.804-0.613 l0.033-0.581l-0.3-0.774l-0.235-1.065l-0.537,0.032l-0.837-0.355h-0.973l-0.301-0.483l0.402-0.677l1.341-0.742l0.033-0.482 l-0.502-0.614v-1.096l0.234-0.744l-0.837-0.87l-0.637,0.033l-1.106,0.709l-1.34,0.225l-0.167,0.709l-0.705,0.71l-0.669-0.064 l-0.167-0.809l0.938-0.515l0.536-0.644V37.24l0.369-1.548l-0.301-0.902l-0.57-0.548l-0.268-0.743l-1.173-0.644l-0.804,0.321 l-1.106-0.321l-1.173,0.968l-0.637-0.195l-0.133-1.321l-0.201-0.354l-0.771,0.646l-0.233,0.708l-0.973,0.517l-0.336,0.934 l-0.938,1.161l0.034,0.743l0.736,0.483l0.437-0.355l1.073-0.224l0.267,0.386l-1.038,0.967l-1.24,0.517l-0.838,1.321l0.168,0.355 l1.273-0.581l1.273-1.063h0.436l0.671-0.355l0.535,0.709l-0.334,0.968L448.3,39.82l-1.105,0.87l-0.302,0.774l0.369,0.548 l1.239-0.257l0.738,0.418l-0.973,0.678l-1.307,0.451l-0.736-0.226l-0.069,0.548l0.973,0.29v0.58l-1.406,1.257h-0.402l-0.47-1.191 l-0.804-0.388l-0.737-1.031l-1.811,0.838v0.514l-0.938,1.517l0.771,1.13v0.837l0.705,0.324l0.67-0.645l0.77-0.033l1.441,0.483 l1.443-0.033l0.266,0.323l1.442-0.355l-0.067,0.678l-0.804,0.194l-0.302,0.482l0.134,0.904l1.341-0.161l0.971,0.772l0.604,1.42 h0.604l0.401,0.388l-0.335,0.581v0.998L449.038,57.073L449.038,57.073z M444.178,50.496l0.168-0.84l1.172-0.581l0.804,0.032 l-0.535,0.356l-0.167,0.581l-0.973,0.58L444.178,50.496L444.178,50.496z M442.235,55.43l0.402-0.872l1.608-0.161l1.241,0.354 l1.373,1.581l-0.1,0.839l0.134,1.451l-0.637,0.131l-0.937-0.55l-0.838,0.323h-0.637l-0.672-1.097l-1.071-0.806L442.235,55.43 L442.235,55.43z M430.506,62.975l0.669-0.515h1.34l-0.333,0.677l-1.073,0.259L430.506,62.975L430.506,62.975z M429.901,61.815 l-0.602-1.194l0.401-0.807l0.269-1.193l0.033-0.903l1.005-0.742l0.033-0.582l0.269-0.289v-0.581l0.671-1.258v-0.87l0.468-0.42 l0.671,0.517l0.168,1.191l0.266,0.549l-0.736,1.71l0.135,0.742l-0.603,0.967l0.468,0.582l-0.703,2.16l-1.107,0.581 L429.901,61.815L429.901,61.815z M419.313,41.271l-0.671-0.807l-0.235-0.968l0.469-0.549l-0.637-0.514l-0.837,0.127l-0.57-0.225 l-0.602,0.259l-1.005-0.097l-0.872,0.259l-0.034-0.774l0.805-0.839l0.2-0.612l1.006-0.065h0.972l2.68-0.742l0.839,0.162 l0.838,0.548l0.536-0.098l1.071-0.031l1.14-0.807l1.509-0.063l0.468,0.127l0.47-0.418l0.669,0.259l-0.066,0.612l0.535,1v0.708 l-0.769,1.161l0.57,1.226l-0.705,1.805l-1.04,0.517l-0.837,0.837l-0.771-0.159l-0.838,0.032L423.2,42.56l-0.939,0.259 l-1.172-1.256l0.067-1.066l-0.704-0.999l-0.403,0.419l0.034,0.71L419.313,41.271L419.313,41.271z M406.377,48.237l0.771-0.87 l0.067-0.645l1.005-0.969l0.067-0.966l1.039-0.387l0.77-0.582h0.705l2.211-0.45l0.503,0.354h0.838l0.671,0.322h1.005l0.536-0.194 l1.407,0.289l0.1,0.323l1.342-0.063l1.039,0.257l0.301,0.355l1.14,0.162l0.234,0.42l-0.871,1.482l-0.738-0.192l-2.244,0.708 l-0.839,0.065l-1.105,0.998v0.518l1.005,0.064l0.336-0.162l0.167,0.676l-1.139,1.324l-0.301,0.613l-0.806,0.192l0.034,0.484 l-0.569,0.743h-0.938l-0.973,0.451h-1.074l-0.904-0.677l-0.535,0.257l-0.939-0.161l-1.005,0.064l-0.268-0.354l0.535-0.582 l-0.669-1.095l-0.904-0.613l-0.604-0.096l-0.167-1.098L406.377,48.237L406.377,48.237z M405.238,45.044l0.637,0.322l1.207-0.354 l0.736-0.967l0.034-1.064l0.168-0.613l-0.068-0.678l0.302-1.162l-0.771,0.26l-0.537,0.031l-0.737-0.386l-0.603,0.516l-0.57,0.065 l-0.334,0.806l0.034,1.032l-0.201,0.903L405.238,45.044L405.238,45.044z M483.688,111.058c0-0.003,0.94,0.289,0.94,0.289 l0.89-0.404l0.186,0.908h0.854l0.169,0.37l0.873,0.034l1.612-1.037l0.806-0.08l1.426,0.647l0.823-0.097l0.521,0.273l0.518-0.45 l-0.034-0.453l0.604-1.126l0.569-0.033l0.034-0.516l-0.471-0.968v-1l0.537,0.549l-0.033,0.546l0.771,1.065l0.401-0.612 l0.569,0.096l0.603-0.128l0.437,0.226l0.167-0.485l-0.268-0.965l0.101-0.582l-0.569-0.418l-1.006,0.321l-1.073,0.066 l-0.234-0.744l0.437-0.257l0.569,0.226l0.973-0.322l0.535-0.774l0.503,0.453l0.57-0.098l0.502-0.837l-0.132-0.516l0.468-0.872 l-0.202-0.547l0.536-0.129l0.134-0.419l-1.105-0.289l-0.872,0.191l0.335-0.708l0.537-0.193l0.067-0.838l-0.806-0.515l-1.81,0.031 l-0.367-0.549l0.099-0.516l0.47-0.193l-0.302-0.806l-1.474-1.162h-0.737l-0.704,0.419h-1.206l-1.408,0.386l-1.575-1.062 l-0.235-0.677l-0.502-0.26l-0.837,0.517l-0.636-0.066l-0.503,0.225l-1.04,0.035l-0.369,0.838l-0.469-0.549l-0.736-0.451 l-0.872,0.324l-1.073,0.159l0.033,0.549l-0.367,0.321v-0.58l-0.402-0.386l-0.871,0.257l-2.011-0.289l-0.269,0.257l0.638,0.613 l-0.034,0.678l0.737,0.613l-0.972-0.193l-0.369-0.581l-0.635-0.16l-1.208,0.291l-0.535-0.291l0.972-0.356l0.033-0.676 l-0.972-1.065L475.042,95l-0.302-0.485l-1.104,0.613l0.201,0.612l-0.234,0.516L472.831,96l0.334-0.549l-0.1-0.548l-0.871-0.226 l-0.537,0.388h-0.637l0.269-0.807l-0.1-0.419l-0.034-0.97l-1.005,0.259l-0.939,1.033l0.102,1.064l-0.604,0.032l-0.369-0.806 l0.369-0.71v-0.58l0.535-1.322l-0.636-0.646l-1.071,0.42v-0.485l0.702-0.29l0.47-1l-0.101-0.677l-0.637,0.259l-0.803-0.227 l-0.335,0.259l-0.804,0.032l0.504-0.387l-0.136-0.418h-0.737l-0.569,0.549l-1.106,0.193v-0.453l0.569-0.289l0.437-0.71l0.2-0.677 l0.603,0.032l0.773,0.774h1.274l-0.136-0.517l-0.804-0.869l-0.838-0.098l0.471-0.29l-1.107-1.097l-0.906-0.484l0.503-0.127 l0.101-0.581h0.47l0.435,0.87l0.904,0.903l1.106,0.292l0.771,0.741l0.47-0.516l0.537,0.613l1.439,0.321h0.972l0.335-0.741 l-0.302-1l-1.876-1.354l-0.805-0.839l-0.571,0.097l-0.199-0.774l-0.839-0.805l-0.434-0.034l-0.404-0.451l0.3-0.516l0.671,0.226 l0.637,0.741h0.636l0.202,0.774l0.537,0.064l0.336-0.613l-0.369-1.45l-1.041-1.291l-0.769,0.031l-0.235-0.191l-0.938,0.032 l-1.04,0.613h-0.837l-0.804-0.581l-0.637,0.127l-0.57-0.708l-0.939,1.354L461,80.617l-0.234,0.677l-0.67,0.385l-0.034-0.611 l0.637-0.808l0.503-0.193l1.91-1.74l0.166-0.549l-0.434-0.87l0.032-1.969l0.269-0.258l-0.669-0.772l-0.403,0.452l-1.005-0.066 l-0.471-0.45l-0.032-0.807l-0.134-0.548l-1.508-0.483l-0.77-0.806h-0.904l-1.007-0.484l-0.401,0.421l-1.677,0.193l-0.201,0.321 l-0.468,0.034l-0.37,0.805l0.603,0.807l0.403,0.839l-0.636-0.034l-1.04-1.417l-0.201,0.934l0.303,0.838l0.938,0.387l0.87,1.516 h0.839l-0.537,0.483l-0.772-0.032l-0.167,0.872l1.141,1.451l0.904,0.353l-0.034,0.615l-0.335-0.354l-1.441-0.097V80.1 l-0.502,0.354l-0.268,0.678l1.24-0.483l0.604,0.483l1.474-0.515l0.135,0.579l1.005,0.193l0.134,0.58l1.24,0.968l0.469-0.032 l0.067-0.581l0.37,0.355l0.871-0.484l0.637,0.129l0.199,0.581l-0.367,0.806v1.579l-0.369,1.097v0.774l0.604,0.872l-0.302,1.063 v0.613l-0.369,1.032l-1.274,0.872l-1.14,0.257l-0.166,0.742l-0.973,1.161l0.033,0.581l-0.804,0.516l-0.502,0.742l0.067,0.966 l0.637,0.195v0.581l-0.838,0.355l-0.167,0.643l0.436,0.421l-0.669,0.837l-0.237,0.807l0.402,0.935l0.57,0.162v0.58l0.737,0.645 l0.502-0.097l0.1-0.805l0.303-0.452l0.437,0.322l0.4-0.032l0.839-1.064l0.301,0.354l-0.47,1.161l-0.803,0.195l-0.135,0.418 l0.336,0.42l0.1,0.483l0.871,1.033l0.871-0.258l0.236,0.356l1.138,0.128l0.537-0.484l1.072-0.388l-0.066-1.031l0.536-0.032 l0.401-0.387l0.168,0.516l-0.2,0.291l0.068,0.709l0.468-0.195l0.536-1.29l0.537-0.225l0.267,0.419l-0.234,0.968l-1.206,1.517 l-0.535,0.547l-0.035,0.678l1.006,0.322l0.77,0.612l0.805-0.063l0.268,0.289l0.972,0.098l0.268-0.646l0.94,0.096l-0.304,0.419 l0.103,0.454l0.669,0.191l0.637,0.453l0.57-0.354l-0.201-0.516l-0.033-0.71l0.569-0.773l0.235,0.644l-0.235,0.774l0.201,0.936 l0.636-0.032l0.235-0.872l0.301-0.483l0.671-0.097l-0.034,0.517l-0.436,0.355l0.034,0.708l1.206,0.032l0.703-0.483l0.639-1.355 l0.133,0.71l-0.401,0.547v0.646l1.072-0.193l0.369-1.226l0.367-0.516l-0.234,1.838l0.168,0.612l0.871,0.032l1.273,0.71 l0.804-0.29l0.604-0.193l0.234,0.515l1.072-0.289l0.637-0.356v-0.936l0.872-0.772l0.335-0.582l-0.437-0.871l0.402-0.74 l0.37,0.127l0.066,1.066l0.537,0.096l0.066,0.452l-0.669,0.58l-0.47,1.193L483.688,111.058L483.688,111.058z M451.839,70.568 l0.64-0.162v-0.405l-0.589-0.178l-0.453,0.388L451.839,70.568L451.839,70.568z M450.127,76.006l0.573-0.633l0.284-0.614 l0.051,0.696l-0.488,0.453L450.127,76.006L450.127,76.006z M427.815,83.74l-0.199,0.406l0.334,0.388l0.202-0.453L427.815,83.74 L427.815,83.74z M442.338,70.212l-0.017,0.388l0.521,0.745l0.185,0.469l0.454-0.194l-0.185-0.792l-0.57-0.583L442.338,70.212 L442.338,70.212z M435.354,70.52v0.501l0.401,0.403l0.621-0.403l0.958-0.194l0.653,0.177l1.361-0.775l0.723-0.017l0.822-0.339 l-0.302-0.291l-1.36-0.162l-1.025,0.21c0,0-0.669,0.47-0.804,0.47c-0.136,0-0.672-0.146-0.672-0.146l-0.873,0.258L435.354,70.52 L435.354,70.52z M428.185,72.898l-0.487-0.533l-1.309-0.13l-0.906-0.259l-0.27-1.197l0.722-0.647l0.134-0.63l-0.218-0.487 l0.134-0.873l0.554-0.405h1.208l0.369,0.259l0.353,0.227l0.203,0.42l-0.572,0.291l-0.219,0.486l0.369,0.112l0.856-0.017 l-0.033,0.405l-0.336,0.501l0.336,0.63l0.016,0.891l-0.318,0.697L428.185,72.898L428.185,72.898z M426.909,76.152l1.847,0.177 l0.638-0.551l0.654-1.261l-0.637-0.794l-0.789,0.097l-1.142-0.468l-1.158,0.081l-0.822-0.194l-0.689-0.065l-0.486,0.406 l-0.571,0.273l-0.134,0.664l0.152,0.372l0.353,0.064l0.285,0.518l0.722,0.146l0.722,0.42L426.909,76.152L426.909,76.152z  M423.585,77.396l2.132,0.583l0.823-0.373h0.806l0.352,0.26l0.621-0.293l0.856-0.112l0.018-0.584l-0.656-0.162l-2.081,0.211 l-0.874,0.225l-0.32-0.372l-1.14-0.08l-0.722,0.275L423.585,77.396L423.585,77.396z M423.249,79.678l0.638-0.226l0.706-0.033 l1.04-0.648l1.914-0.389L428,78.498l0.554-0.228l0.554,0.017l0.185,0.502l-0.706,0.47l-0.705,0.113l-1.058,0.096l-0.252,0.437 l-1.008,0.648l-0.923-0.503l-0.806-0.032l-0.386,0.258l-0.318-0.21L423.249,79.678L423.249,79.678z M401.375,52.768l-0.387-0.243 l0.302-0.567l1.075-0.096l-0.437,0.663L401.375,52.768L401.375,52.768z M395.144,55.438l0.724-0.162l0.553-0.325l1.31,0.567 l0.672-0.13l0.621,0.26l0.135,0.598l0.352,0.453l-0.537,0.665l-0.839,0.42l-0.74-0.339l-0.654-0.049l-0.335-0.856l-0.623-0.665 l-0.554-0.194C395.229,55.681,395.129,55.456,395.144,55.438L395.144,55.438z M362.44,57.153l-0.839-0.357l-0.217-0.354 l0.318-0.293l0.94,0.293l0.15,0.5L362.44,57.153L362.44,57.153z M365.917,61.539l0.957-0.729v0.405l-0.957,0.664 C365.917,61.878,365.917,61.522,365.917,61.539L365.917,61.539z M367.605,60.202l0.392-0.346l0.068-0.874l0.234-0.13l0.404-1.184 l0.503-0.078l1.057-0.47l0.487,0.21l-0.05,0.679l-0.838,0.502l-0.555,1.067l0.369,0.68l-0.587,0.502l-0.32,0.744l0.404,0.55 l0.453-0.484l0.588,0.079l0.067,0.648l0.318,0.048l1.511-0.874l0.589-0.761l0.569,0.083l0.589-0.809l-0.069-0.988l0.537-0.033 l0.604-0.728L375,57.17l0.402-0.308l0.335,0.259l-0.236,0.776l0.171,0.568l-0.27,1.05l0.369,0.858h0.404l0.856-0.939l0.048-0.923 l0.237-0.437l0.671-0.194l0.991-1.246l0.201-0.955l-0.151-0.875l0.387-0.761l0.554,0.891l1.577-0.988l0.504-1.165l0.084-0.841 l0.89-0.129l0.487-0.339l0.604,0.468l0.772-0.727l0.42,0.307l-0.42,1.57l-1.157,1.197l-0.219,0.988l-0.588,0.566l-0.116,0.436 l-0.706,0.406l-1.226,1.682l0.018,0.551l0.402,0.728l-0.167,0.76l0.738,0.211l0.856,0.355l0.487-0.535l0.906-0.436l0.218-0.729 l-0.101-0.875l0.706-0.549l0.453-0.761h0.722l0.419-0.275l0.453,0.468h0.874l0.554-0.517l1.427-0.033l0.554-0.754l0.436-1.515 l0.837-1.323l0.033-0.87l0.134-0.355l0.804,1.032l0.704,0.162l0.334-0.387l-0.065-0.582l-0.872-1.323l0.033-0.58l0.973-0.839 l0.904-0.064l0.939-0.484l0.568,0.29l0.604-0.097l0.771-0.967l-0.168-0.708l-0.167-1.773l0.302-0.453l-0.202-0.419l-0.2-1.097 l-0.471-0.225l-0.703,0.323l-1.072,0.483l-0.067,1.16l-0.101,0.613l0.168,0.55l-0.805,0.159l-0.267-0.838l-0.268,0.032 l-0.135,0.551l-0.302,0.353l-0.469-0.613l-0.168-1.29l-0.871-0.902h-0.469l-0.335,0.386l-1.039-0.032l-0.971-0.387l-0.605,0.128 l-2.011-0.193l-1.038,0.484l-0.268,0.87l-0.468,0.549l-0.369-0.161h-0.537l-2.211,1.644l-0.67,0.548l-0.77,0.064l-1.174,0.806 l-0.803,0.162l-0.738,0.581l-0.135,0.581h-1.54l-0.436,0.323l-0.906-0.162l-0.468,0.387h-0.637l-1.542,1.162l-1.006,0.58 l-1.072-0.355l-0.871,0.419l-2.143,0.356l-0.906,1.353l-0.736,0.033l-1.241,0.29l-0.501,0.936l0.871-0.032l0.368,0.387 l-0.737,0.096l-0.233,0.419l0.568,0.516l-0.234,0.582l-1.307,0.451v0.418l0.973,0.291l0.937-0.161l0.37-0.742l0.669-0.226 l0.839,0.451l0.669,1.097l0.066,0.935L367.605,60.202L367.605,60.202z M456.239,110.378l0.251-0.333l1.199,0.315l0.152,0.397 l-0.579,0.347l-0.445-0.12L456.239,110.378L456.239,110.378z M445.981,90.796l-0.755-0.566l-0.706-0.048l-0.336,0.484 l0.823,0.018l0.319,0.355l-0.118,0.355l-1.192,0.146l-0.402,0.242l0.419,0.859l0.202,0.095l-0.033,0.326l-0.974-0.326 l-1.057,0.261l-0.705,0.63l-0.387,0.857l-0.269,0.292l0.168,0.226l0.403,0.08l-0.202,0.448l-0.069,0.558l0.21,0.048l0.605-0.648 l0.21,0.122l-0.336,0.923l0.117,0.396l0.656,0.405l0.387-0.193l0.285,0.202l0.1,0.793l0.302-0.049l0.337-0.478l0.579,0.121 l-0.058,1.156l0.151,0.435l0.874-0.176l0.218,0.873l0.855-0.016l1.125,0.663l0.839-0.032l0.269,0.273l0.268-0.273l-0.235-0.615 l0.773-0.243l0.471-1.182l-0.219-0.922l0.671-1.214l0.335-0.34l0.471-1.504l0.016-1.1l0.353-0.323l-0.287-0.875l-0.703-0.63 l-0.018-0.906l-0.386-0.453l-0.219-0.729l-1.225-0.534l-0.907,0.357l-0.806-0.227l-1.124,0.112l-0.285,0.42l0.537,0.648 l0.034,0.469L445.981,90.796L445.981,90.796z M452.008,83.757l-0.588-0.34l0.169-0.389l0.704-0.063 C452.293,82.965,452.042,83.757,452.008,83.757L452.008,83.757z M450.882,88.321l-0.167-0.713l-0.333-0.245l0.033-0.419 l0.369-0.306l-0.051-0.988l0.252-0.404h1.258l-0.571,1.926l-0.486,0.824C451.185,87.996,450.867,88.321,450.882,88.321 L450.882,88.321z M444.453,86.348l-0.311-0.388l0.395-0.455l0.915-0.154l0.134,0.211l-0.463,0.283l-0.216,0.405L444.453,86.348 L444.453,86.348z M442.791,87.473l-0.185-0.348l0.563-0.373l0.384-0.025l-0.409,0.551L442.791,87.473L442.791,87.473z  M444.05,89.446l0.143-0.576l-0.26-0.314l0.142-0.736l0.345-0.072l0.445,0.403l0.344,0.624l-0.747,0.615L444.05,89.446 L444.05,89.446z M442.243,90.271l-0.554-0.323l-0.166-1.165l0.352-0.26l0.377-0.322l0.572-0.105l0.504,0.316l0.26,0.266 l-0.226,0.397l0.023,0.559l-0.552,0.129l-0.261,0.389L442.243,90.271L442.243,90.271z M439.777,90.724l-0.075-0.678l0.36-0.188 l0.183,0.283l-0.183,0.444L439.777,90.724L439.777,90.724z M430.237,91.871l-0.469-0.451l-0.837,0.064l-0.537-0.485v-0.87 l0.269-0.355l-0.1-0.451l0.401-0.87l0.336,0.096l0.435,0.58l0.402-0.064l-0.503-0.645l0.235-0.516l-0.669-0.162l-0.504-0.451 V86.84l-0.133-0.323l0.334-0.032l0.468,0.452l0.269-0.323l-0.133-0.42l0.536-0.321l0.705,0.257l1.441,0.322l0.435-0.259 l-0.502-0.419l-0.738-0.031l0.469-0.097l1.407-0.193l0.904-0.485h1.141l1.005,0.13l0.67-0.451l-0.502-0.388l-3.754-0.646 l-0.938,0.032l-0.705-0.322l-1.238,0.162l-0.972-0.484l-0.57,0.13l-0.604-0.259h-0.837l-0.403,0.291l-0.468-0.194l-0.537,0.064 l-0.369-0.354v-1.001l0.705,0.13l0.537-0.483l0.535,0.321l0.537-0.191l-0.369-0.485l0.269-0.582l0.502-0.387l0.904-0.032 l0.436-0.193l0.102,0.772l0.468,0.259l0.034,1.226l0.335,0.195l0.402-0.484l-0.135-0.871l-0.469-0.614l0.301-0.74l0.972-0.323 l0.066-0.485l-0.771-0.29l0.269-1.161l0.905-0.322l0.201-0.549l0.938-0.289l-0.503-0.613l-0.468,0.03l-0.47-0.159l0.134-0.517 l0.855-0.682l0.217-0.372l0.957-0.39l0.405,0.308l0.132,0.778l0.438,0.419l0.083,0.713l-0.234,0.323l0.234,0.647l0.537,0.583 l0.269,2.444l-0.218,0.792l0.084,0.453l0.806,0.486l0.925-0.662l-0.437-0.601l0.251-1.31l0.771-0.162v-0.711l-1.444-0.956 l0.185-0.404l0.723,0.081l0.823,0.469l-0.168-0.664l-0.839-0.89l-0.253-1.116l0.203-0.487l0.101-1.18l0.537-0.356l0.772-0.098 l0.336-0.452l0.806,0.048c0,0,0.889-0.55,0.973-0.55c0.084,0,0.622,0.079,0.622,0.079l0.236,0.632l0.705,0.356l0.621-0.209 l0.436,0.468l-0.268,1.796l-0.588,0.681l0.084,0.631l0.488-0.017l0.352-0.468l0.437,0.097l0.47-0.438l0.049-1.327l0.657-0.55 l0.704,0.518l0.689-0.194l-0.067-0.792l-0.202-0.324l0.655,0.032l0.302,0.646l-0.15,0.584l0.184,0.372l-0.201,0.403l-0.486-0.031 l0.436,0.776l0.856,0.291l0.371,0.794l-0.236,0.857l-0.874,0.565l-0.789,1.359l0.117,0.972l-0.252,0.599l-0.822,0.452 l-1.008,1.102l-0.285,0.516l-0.89,0.938l-0.016,0.47l-0.287,0.727l-0.638,0.034l-0.504-0.114l-0.453,0.339l0.033,0.391 l1.091,0.565l-0.083,0.438l-1.109,1.52l-0.335,0.478l-0.069-0.573v-0.536l-0.563-0.217l-0.468,0.234l-0.069,0.582l-0.543,0.318 l-0.455,0.589l-0.905,0.155l-0.322,0.784l0.514,0.227l0.796-0.113l-0.135,0.494l-0.395,0.518l0.035,0.38l-0.042,0.807 l-0.302,0.357l-0.521-0.859l-0.083-0.857l-0.219-0.484l-0.32,0.436l-0.134,0.712l0.219,0.565l-0.654,0.842l-2.435-0.129 l-0.118-0.729l-0.302-0.404l-0.638,0.663l-0.687-0.08l-0.119-0.536l0.688-0.809l-1.141,0.47l-0.336,0.614L430.237,91.871 L430.237,91.871z M369.75,67.393l-0.403-0.29l0.503-0.999l1.844-1.483l1.273-0.388l0.771-0.612l0.569-0.065l1.238-0.839 l1.375-0.226l0.704-0.354l0.468,0.065l1.577-0.387l0.401,0.096l-0.267,0.644l-1.375,1l-1.441,0.901l-2.748,2.001l-0.905,1.096 l-0.737,0.226h-0.537l-0.435,0.579l-0.4,0.034l-0.369-0.967l-0.604-0.161L369.75,67.393L369.75,67.393z M414.603,85.682 l-0.269-0.389l0.236-0.275l0.958-0.308l0.351-0.662v-0.42l1.376-0.729l0.252-0.325l0.858-0.03l0.016,0.841l0.167,0.502v1.148 l-0.236,0.809l-0.822,0.697l-0.822-0.049l-0.437,0.276h-0.722l-0.27-0.648L414.603,85.682L414.603,85.682z M378.704,84.429 l0.269-0.967l-0.134-0.71l0.134-1.422l1.409-0.259l1.411,0.387l0.669-0.451l1.075,0.259l0.871-0.13l1.208-0.646h1.478 l1.409,0.518h1.141l0.604,0.259l0.738-0.647l2.282-0.065l0.202-0.58l0.535-0.452l-0.333-0.453l-0.604,0.646h-1.276l-0.066-0.516 l-1.343,0.58h-1.141v-0.709l-0.605-0.452l-0.669,0.516l-1.009,0.129l-0.737,0.193l-0.469-0.323l-0.874,0.195l-1.141-0.324v-0.776 l1.007-0.71l1.074-0.773l-0.604-0.064l-1.006,0.191l-0.604,0.712l-0.471-0.969l-0.335,0.389l-0.135,0.838l-1.544,0.775 l-0.269,0.582l-0.804,0.193l-1.074-0.71l0.066-0.711l0.47-0.646l-0.805,0.066l-0.403-0.323l-0.135,1.161l-0.604,0.454 l-0.873-0.388l0.068-1.032l-1.007-0.712l0.268-0.709l-0.538-0.195l-0.134,0.904l-0.536-0.063l-0.941-1.292l-1.608-0.968v-0.388 l1.074-0.065v-0.839l-0.405-0.583l1.813-1.162l1.007-0.259l0.47,0.259l1.678-0.064l1.141,0.71l1.142,0.129l0.669-0.516 l1.142-0.065l1.074-0.71l-0.671-0.453l-0.47-0.386h-1.007l-0.938,0.257l-1.544-0.581h-1.007l-0.269-0.323l1.343-1.228 l1.073-1.228l0.941-0.129l0.603,0.194l1.746-0.324l2.014,0.195l1.141,0.322l0.47-0.194l-0.269-0.517h-0.537l-0.939-0.451h-0.94 l-1.879-0.518l-0.604-0.774l1.075-0.775l0.537-0.775l0.604-0.453h0.603l1.074-0.516h0.806l0.333,0.452h0.808l1.005,0.841 l0.604,0.258l-0.401-0.84l-1.007-0.711l-0.135-0.71l-0.402-0.387l0.537-0.518l2.482-0.516l0.806,0.193l1.477-0.065l0.94,0.776 l0.403,1.356l-0.738,0.387l-0.739,1.099l0.268,0.775l1.783-0.109l0.571-0.354l0.57,0.354h0.568l0.303,0.581l0.134,0.516 l0.536,0.516l-0.067,0.613l-0.57,0.291l-0.336,0.613l0.806,1l0.134,1.838l-0.336,0.612l-0.938-0.289l-0.838,0.321l0.235,0.548 l0.837-0.162l1.04,0.42h0.636l-0.636,1.838l-0.705,0.581l-0.067,1.612l0.503,0.258l1.039-0.258L398,75.134l0.401,0.385 l0.202,0.646l1.039,0.129l0.535-0.129l1.676,0.42l0.67,1l0.603-0.195l-0.134-0.58l-0.3-0.259l1.407-0.677l-0.369-1.482 l-0.837-0.904l0.066-0.645l-0.535-0.741l0.436-0.453h0.57l1.339-0.514l0.973,0.096l0.468-1.258l-0.603-1.322l-0.436-0.452 l0.067-1l-0.436-1.064l0.839-1.128l0.737-0.452l0.469,0.162l0.939,0.032l-0.236-0.516l0.402-0.774l1.074-0.354l2.076-1.871 l0.604,0.064l1.306,0.613l-0.2,0.517l0.369,0.709l-0.269,0.548l-0.838,0.032l-0.536,0.516v0.709l-0.269,0.872v1.095l0.269,0.323 v2.162l-0.437,0.385h-0.467l-1.308,1.13l-0.738,0.516v0.323l0.471,0.032l0.803-0.226l1.343,0.063l0.233,0.454l-0.67,0.999 l-1.475,0.806l-1.273,1.098l-0.302,0.806l0.369,0.451l0.436-0.837l1.609-0.711l0.604-0.581l0.569-0.226l1.241,0.582l-0.135,1.128 l-0.704,1.29l0.202,0.485l0.871-0.904l0.737,0.096l0.168-0.515l-0.2-0.227l0.535-0.837l0.134-0.903l1.44-1l0.57-0.032l1.14,0.71 l0.536,1.419l0.401,0.676l-0.267,1.257l-1.173,2.097l-1.072,0.903l-0.871,0.386l-0.637,0.064l-0.235,0.389l0.137,0.677 l-0.973,1.291l-0.738,0.032l-0.871,0.612l0.033,0.743l-0.335,0.451l-0.528,0.032l-0.419,0.242v0.486l-0.437,0.228l-0.654-0.534 l-0.807,0.338l-0.654-0.129l-1.511,0.728l-1.36,0.195l-1.108-0.452l-0.252-0.6l0.554-0.728l-0.084-0.533l-0.302-0.066 l-0.974,0.437l-0.203,0.55l-0.72,0.261l-1.176-0.34v-0.534l0.386-0.469l-0.251-0.647l-0.604-0.21l-0.068,0.534l-0.554,0.339 h-0.671l-1.477,0.632l-0.438,0.356l-0.973-0.017l-0.336-0.308l-1.192,0.129l-0.571-0.39l-0.369,0.519l-0.688-0.033l-0.654,0.291 l-0.135,0.713l-0.47,0.371l-1.091,0.017l-0.219,0.469l-0.956,0.291l-0.303-0.145l-0.974,0.404h-1.042l-0.318-0.487l-1.259,0.017 l-1.227,0.373h-1.375l-1.36-0.664l-1.209-0.226l-0.59-0.824L378.704,84.429L378.704,84.429z M323.329,112.399v-1.68l0.806-1.421 l-0.405-1.098l0.338-1.227l0.132-1.035l-0.603-0.516l-0.738-2.389l1.074,0.321v-0.773h-1.611l-1.544-0.517l-0.067-0.776 l0.738,0.258l0.94-0.71l1.208-0.58l0.133-0.71h0.539l0.737-0.841l0.806-0.13l0.468-1.291l1.747-0.388l0.134-0.387l0.604-0.259 l0.806-1.161l0.134-1.488l0.268,0.517l2.551,0.325l0.068-1.228l-0.54-1.292l0.067-0.646l0.94-0.323l2.081-1.485l0.873-1.227 l1.878-0.646l0.402-0.84l1.21-1.162h1.072l0.605-0.71l-0.671-0.841l0.267-1.809v-1.227l0.47-0.841l-0.403-0.452l0.337-0.711 l1.409-0.387l0.738,0.192l2.82-0.192l0.671,0.322h3.088l2.146-0.839l2.551,0.709l-0.268,0.969l0.604,0.453l0.603,1.035 l2.417,1.227l0.133,0.646l-0.604,0.646l0.738-0.129l0.806-0.388l0.939,0.517l-0.335,1.161l-1.275,1.294l0.067,0.45l1.812-1.096 v-1.035l0.671-0.582l1.276,0.13l1.206-0.388l0.538,0.195l0.269,0.838l1.745,1.746l0.201,2.196l-0.403,0.838l0.671,1.485 l-0.067,1.294l-0.336,0.451l0.471,0.583v0.903l0.201,0.841l-0.805,1.034l-1.745,0.387l-0.671,0.451l-1.963,0.23l-1.408-0.127 l-2.546,1.097l-1.642,0.128l-2.011,0.904l-0.804,0.032l-1.006,0.645l-1.606,0.065l-0.637,0.418l-0.469-0.483l-0.57,0.258 l-1.575,0.323l-0.436,1.161l-0.837,0.87l-0.537,0.034l-0.335,1.257l-1.207,0.257l-1.04,0.902l-1.273-0.095l-0.803-1.162 l-0.504,1.13l-0.132,0.902l-1.073,0.387l-1.173,1.162l-0.234,0.678l-1.072,1.128l0.166,0.615l-1.339,1.225l-0.839,0.935 l-1.374-0.097l-1.206,0.581l-0.77,0.032l-0.537-0.807l0.703-0.548l-0.067-1.096l-0.503-0.516l-0.77,0.678l0.034,0.417 l-0.569,0.257l-1.376,1.194l-1.172,0.29l-0.828-0.145l-0.975,0.259l-0.738,0.68l-0.454-0.211l-0.721,0.018L323.329,112.399 L323.329,112.399z M441.667,99l0.385,0.196l0.353,0.662l-0.251,0.809l-0.318,0.227l-0.319-0.42l-0.269-1.004L441.667,99 L441.667,99z M432.533,99.13l0.589-0.938l1.089-0.42l0.639,0.435l-0.284,0.52l-0.657,0.031l-0.636,0.453L432.533,99.13 L432.533,99.13z M423.703,104.049l0.369,0.566l1.159,0.307l1.191,0.858l0.403-0.468l0.856,0.307l1.107-0.552l0.705,0.259 l0.657-0.162l0.636-0.679l1.142,0.066l-0.1-0.664l-1.327-0.76l-0.755,0.42l-1.092,0.129l-0.451-0.243l-0.923,0.519l-1.245-0.583 l-0.957,0.663l-1.074-0.114L423.703,104.049L423.703,104.049z M418.497,135.265l-0.301-0.308l0.235-0.535l0.401-0.145v0.841 L418.497,135.265L418.497,135.265z M412.979,134.376l-0.57-0.452l-0.066-1l-0.369-0.386l-0.57,0.483l-0.2-0.483l0.233-0.872 l-0.202-0.936l-0.637-0.645l0.537-1l-0.167-1.29l0.301-0.548l-0.67-0.322l-0.402-0.774v-0.71l-0.771-0.936l0.067-1.387 l-0.602-1.063h-0.469l-0.303-0.419l0.067-1l-0.503-0.259l-0.702,0.42l-0.37-0.355l-0.669,0.128l-0.436-0.419l-0.067-0.966 l0.938-0.485l0.201-1.257l-0.468-0.614l0.235-0.515V114.8l-0.336-0.612l1.106-1.354l0.904-0.322l0.369-0.581l0.469-0.129 l0.268,0.419l1.375-0.419l0.804,0.227l0.402,0.548l-0.368,0.42l-0.403,0.128l-0.032,0.453l0.771,0.129l0.168,0.517l-0.103,0.773 l1.14,1.193l0.034,0.774l0.537,0.742l0.871,0.13l0.403-0.324l-0.169-0.742l0.504-0.354l0.603-0.966l-0.167-0.581l0.637-0.581 l0.134-0.645l-0.335-0.773l0.335-0.387l0.836-0.195l0.604,0.227l0.436,0.903h0.636l-0.099-0.548l-0.671-1.065l-0.202-0.838 h-0.269l-0.436,0.806l-1.038,0.098l-0.804-1.097v-0.581l-0.738-0.904l-0.033-1.032l0.57-0.546l0.703,0.095l0.201-0.708 l0.705,0.387l0.469,0.772l0.301,1.743l0.202,0.032l0.201-0.935l0.335-0.42l-0.033-0.934l-0.671-0.354l-0.1-0.838l-0.201-0.871 l0.402-0.227l0.268-0.902l0.87-0.322l0.403,0.193l0.437-0.129l0.67,0.969l1.106,0.258l0.437-0.742l-0.906-0.033l-0.402-0.421 l0.469-0.354l0.703-0.323l1.208,0.13l0.268,0.419l-0.403,0.323l0.033,0.548l0.636,0.42l0.638,0.868l0.736-0.257l0.938,0.421 l1.106,0.063l0.469-0.42l0.703,0.162h2.212l0.703,0.742l0.57-0.16l0.168,0.547l-0.134,0.484l0.234,0.645l-0.436,0.708 l-1.172,0.678l-0.705-0.288l-0.166-0.421l-0.47,0.453l-0.569,0.193l0.2,0.483l1.005,0.613l-0.333,0.548l-0.168,1.128 l-0.469,0.226l-0.336-0.322l-0.669,0.064l-0.973,0.227l-0.333,0.483l-1.777,0.388l-1.074,0.839l-0.535,0.063l-0.738,1.097 l0.034,0.517l0.603-0.065l0.236-0.386l1.373-0.291l0.502-0.194l1.408,0.773l0.267,0.937l-0.402,0.289l-0.603,0.096l0.669,0.291 l0.168,0.708l-0.1,0.84l-0.705,0.452v0.903l0.267,0.387l0.538-1l1.006-0.355l0.335-0.386l0.535,0.032l-0.502,0.582l0.1,1.289 l-0.535,1.355v0.806l-1.541,0.872l-0.738,0.032l-0.267,0.418l0.3,0.483l-0.403,1.194l-0.501,0.128l-0.235-0.387l-0.604,0.323 l0.033,0.388l1.173,0.613l-0.233,0.451l-0.906,0.064l0.537,0.806l-1.006,0.838l-0.401-0.387l-0.57,0.485l-0.871-0.033 l-1.073,0.483l-0.032,0.677l-1.274,0.388l-1.072-0.71l-0.906,0.485l-0.602-0.195l-0.369-1.74l0.804-1.097l0.067-0.645 l-1.542,1.418l-0.133,0.838l0.669,1.677l0.469,0.452l-0.235,0.806l-1.072,0.645l-0.436,0.936 C414.219,134.021,413.012,134.376,412.979,134.376L412.979,134.376z M428.554,113.563l-0.067,0.405l0.453,0.082l0.184-0.437 L428.554,113.563L428.554,113.563z M427.883,117.205l0.453-0.129l0.755-0.938l0.102-0.615l-0.285-0.387l-0.219-0.697l-0.638,0.26 l-0.236,0.694l-0.486,0.293l0.101,1.02L427.883,117.205L427.883,117.205z M427.329,119.132l0.42-0.31l0.437-1.1l-0.688,0.034 l-0.671,0.55l-0.067,0.582L427.329,119.132L427.329,119.132z M391.822,99.987l0.032,0.534l0.27,0.275l0.552-0.226l0.655,0.258 l0.32-0.338l-0.386-0.519l-1.091-0.177L391.822,99.987L391.822,99.987z M397.798,111.156l-0.67-0.806l-0.101-1.84l-0.536-0.901 V106.9l0.167-0.485l-0.269-1.031v-1.031l-0.737-1.033l-0.804-0.678l0.034-0.484l1.441-1.095l0.703-0.258l0.872-0.806l1.24-0.129 l0.703,0.549l0.637,0.032l0.805,0.516l0.535-0.161l0.906,0.354l0.535-0.159l0.671,0.031l0.837,1.127l-0.032,0.646l-0.235,0.387 l0.535,0.904v0.547l-0.402,0.356l-0.034,0.678l-1.072,1.032h-0.468l-1.309,1.19l-1.171,0.711l-1.072,1.257h-0.873l-0.568,0.387 l0.067,0.646L397.798,111.156L397.798,111.156z M431.192,129.518l-1.409-1.164l-0.672,0.259l-1.61-0.194l0.625-0.944l0.738-0.322 l0.535,0.226l0.302-0.292l-0.134-0.387l-0.804,0.032l-0.235-0.322l1.139-1.483l0.503-1.484l-0.033-0.805l0.468-0.259v-0.517 l-0.736-0.548l0.469-0.613l0.034-1.032l0.837-1.806l0.637-0.42v-0.807l0.771-0.548l0.436-0.935l0.302-0.58l0.134-0.968 l1.173-1.226l0.268-1.226l0.771-0.129l0.102-0.581l-0.235-0.354l0.669-1.096l0.569,0.193l0.738,1.063l0.235,0.84l0.971,0.096 l-0.167-0.968l-0.704-0.774l0.135-0.387l0.671-0.226l-0.738-0.87l0.803-1.226l2.044-0.452l1.374,0.031l0.772-0.258l0.435,0.324 l0.838-0.097l0.235,0.645l0.637-0.517l1.171,0.033l0.604,0.999l0.904,0.259l0.201,0.225h0.437l0.502,0.838l-0.101,0.708 l0.368,0.292l0.637-0.292l1.307,0.13l2.112,0.257l1.24,0.742l0.034,0.71l0.57,0.387l0.235,0.708l-0.369-0.225l-0.403,0.064 l-0.436,1l-1.34,1.193l-0.704,0.967l-0.805,0.227v0.354l-1.91,1.418l-0.971,1.291h-1.04l-0.133,0.419l0.333,0.291l-0.468,0.645 l-1.408,1l-1.139,1.128l-1.677,1.064l-1.072,0.484l-0.552-0.266l-0.184-0.406l-0.589,0.081l-1.224-0.954l-0.134-0.762 l-0.655-0.292l-0.654,0.357l-0.89-0.227l-0.772,0.031l-0.656-0.369l-0.704-0.018l-0.118,0.551l0.369,0.42l1.761,0.081l-0.3,0.647 l-0.64,0.664l0.488,0.47l0.051,0.97l-0.438,0.809l-0.604,0.389l-0.519,0.566l-0.923-0.017l-0.573,0.454l-0.434,0.858 l-0.688,0.646l-0.672-0.048l-0.052,0.809C431.458,129.18,431.173,129.504,431.192,129.518L431.192,129.518z M488.413,133.247 l-1.24-0.612l-0.971-0.258l-0.402-1.064l-0.57-0.291l-0.402-0.837l0.302-1.129l0.938-0.548l-0.102-0.678l0.503-0.612l-0.167-0.71 l-0.805-0.129l-0.871-0.678l0.871-1.838l0.604,0.098l0.268-0.582l-0.166-0.838l0.537-0.645l0.301-1.193l0.805-0.289l0.602,0.547 l0.202,0.742l1.776,0.581l0.669,0.679l1.04,0.258l0.367-0.355l1.676,0.548l1.34-0.033l0.571,0.421l0.234,0.805l1.306,0.775 l0.436,0.902l-0.369,0.968l0.068,0.548l0.77,0.549l-0.201,0.483l0.201,0.774l-0.066,0.549l0.469,1l-0.168,0.645l-0.436,0.615 l1.141,0.321v0.452l-0.569,0.418l-0.303,0.485l-1.743-0.356l-0.267-0.323l-1.711-0.387l-0.535-0.451l-1.206-0.225h-0.469 l-0.736-0.452l-1.306,0.386l-0.806,0.066l-0.906,0.806L488.413,133.247L488.413,133.247z M483.084,134.666L483,133.759 l0.336-0.469l0.285,0.387v0.552L483.084,134.666L483.084,134.666z M484.477,135.458l-0.336-0.567l0.369-0.323l0.336,0.048 l0.117,0.617L484.477,135.458L484.477,135.458z M486.895,135.458l-0.638-0.178l-0.101-0.52l0.402-0.08l0.64,0.501 L486.895,135.458L486.895,135.458z M429.209,154.423l-0.218-0.403l0.335-0.421h0.604l0.352,0.227l-0.217,0.436l-0.388,0.017 L429.209,154.423L429.209,154.423z M431.979,158.939l0.069,1.084l0.519-0.453l0.235-0.034l0.034-0.713l-0.401-0.289 L431.979,158.939L431.979,158.939z M431.124,158.972l-0.287,0.599l0.404,0.453l-0.018,0.42l0.234,0.259l0.235-0.356l-0.05-1.197 l-0.302-0.357L431.124,158.972L431.124,158.972z M449.002,155.896l-0.25-0.403l-0.67-0.018l-0.523-0.519l-0.184,0.373 l-0.57-0.129l-0.035-0.777l-0.386-0.273l0.94-0.226l0.168-0.275l0.738,0.047l0.504,0.665l0.974,0.162l0.152,0.727l-0.288,0.518 C449.573,155.767,448.968,155.896,449.002,155.896L449.002,155.896z M459.16,159.813l-0.587-0.034l-0.386-0.873l0.538,0.21h0.535 l0.153,0.485L459.16,159.813L459.16,159.813z M460.218,159.926l0.705,0.21l-0.284-0.47L460.218,159.926L460.218,159.926z  M461.729,160.379l0.571,0.08l0.369,0.341l0.504-0.082l-0.017-0.388l-0.706-0.372l-0.084-0.225h-0.722l-0.187,0.42 L461.729,160.379L461.729,160.379z M472.456,174.345v-0.452l0.352-0.423l-0.233-0.84l0.435,0.161l0.505,0.355l-0.218,0.551 l-0.102,0.598L472.456,174.345L472.456,174.345z M471.601,177.063l-0.335-1.051l0.384-0.68l0.269,0.176l0.774,0.066l-0.019,0.567 l-0.688,0.13l-0.084,0.582L471.601,177.063L471.601,177.063z M465.145,163.542l-0.309-0.393l0.417,0.072L465.145,163.542 L465.145,163.542z M463.843,163.68l-0.436-0.777l0.486,0.244l0.102,0.323L463.843,163.68L463.843,163.68z M464.112,164.296 l0.319,0.404l0.487-0.066l0.587,0.244l0.051-0.502l-0.504-0.324l-0.722,0.034L464.112,164.296L464.112,164.296z M470.124,161.949 l0.671,0.146l0.184,0.452l0.236,0.291l-0.119,0.389l0.218,0.421l0.521-0.194l0.066-0.598l0.571,0.226l0.707-0.162l0.336,0.082 l0.504-0.486l-0.437-0.583l-1.159-0.192l-0.672-0.616l-0.823-0.13l-0.084,0.469C470.844,161.462,470.105,161.917,470.124,161.949 L470.124,161.949z M480.599,161.252l0.152-0.582l0.453-0.178l-0.234,0.646L480.599,161.252L480.599,161.252z M476.956,165.38 l0.571-0.566l0.486-0.794l0.673,0.016l0.386-0.582l0.335-0.048l0.37,0.469l-0.068,0.404l-0.89,0.39l-0.755,0.566l-0.654,0.032 L476.956,165.38L476.956,165.38z M473.533,170.851l1.745-1.387l0.369-0.613h0.467l0.773-0.741l0.77-0.613l-0.066-0.87 l-0.436-0.228l-0.704,0.162l-0.167,0.71h-0.436l-0.804,0.838l-0.704,0.323l-1.207-0.034l-0.67,0.355l-0.336,0.709l-0.669,0.451 l0.269,1l0.334-0.257l0.871,0.193H473.533L473.533,170.851z M481.008,170.013l-0.236-1.29l0.335-0.356l0.468-0.967l0.503,0.098 l1.04,0.096l0.168,1l-0.402,0.741l-0.57,0.066l-0.57,0.741L481.008,170.013L481.008,170.013z M487.081,177.322l-0.169-1.295 l0.169-1.196l-0.471-0.696l-0.471,0.13l-0.067,0.758l-0.453,0.908l0.134,0.825l0.335,0.422l0.134,0.631l0.454-0.323 L487.081,177.322L487.081,177.322z M487.784,176.674l-0.202-0.695l0.252-1.004l0.269,0.857l0.302,0.502l-0.285,0.373 L487.784,176.674L487.784,176.674z M489.077,178.518l-0.32-0.5l0.303-0.583l0.235,0.163l0.051,0.678L489.077,178.518 L489.077,178.518z M486.005,180.347l-0.168,0.325l0.251,0.809l0.186,1.1l0.385,0.26l0.503-0.21l0.839,0.227l0.454,0.209 l0.756-0.146l0.839,0.26l0.32-0.568l-0.27-0.501l0.049-0.922l-0.922-0.063l-0.404-0.632l-0.722-0.082l-0.319,0.178l-0.017-0.469 l-0.049-0.486l-0.337,0.112l-0.335,0.535l-0.453,0.081L486.005,180.347L486.005,180.347z M461.636,213.163l1.006,0.097 l0.335-0.227l-0.435-0.418l-0.638,0.096L461.636,213.163L461.636,213.163z M448.012,191.417l0.688,0.5l0.471,0.099l0.049-0.324 l-0.521-0.373l-0.436-0.081L448.012,191.417L448.012,191.417z M444.982,196.393v-0.613l-0.502-0.515l-0.873-0.452l0.134-0.549 l-0.269-0.804l-0.568-0.453l0.066-1.161l0.268-0.321l0.269,0.902l0.838,0.323l0.202,0.581l0.537,0.418v1.257l0.938,0.451 l0.636,0.065l-0.135,0.903l-0.904-0.195L444.982,196.393L444.982,196.393z M439.588,196.103l0.066-0.806l-0.201-0.484 l0.168-0.582v-1.225l0.3-0.71l0.57,0.033l0.168,0.741l-0.37,0.259l0.068,0.547l0.402,0.613l-0.636,1.451L439.588,196.103 L439.588,196.103z M439.185,174.915l-0.101,0.806l0.27,0.225h0.971l0.57-0.581l-0.134-0.353l-0.872-0.131L439.185,174.915 L439.185,174.915z M439.386,174.559l0.436-0.772l-0.033-0.903l1.037-0.872l0.638-0.547l0.135,0.258v0.902l-0.202,0.904v0.838 l-0.771,0.259L439.386,174.559L439.386,174.559z M394.682,165.658l0.537-0.29v-0.774h-0.839l0.034,0.71L394.682,165.658 L394.682,165.658z M356.646,155.402l0.437-0.418h0.67l-0.57,0.387C357.182,155.371,356.58,155.402,356.646,155.402 L356.646,155.402z M353.564,156.726l1.005-0.033l-0.135-0.354l-0.568-0.128L353.564,156.726L353.564,156.726z M354.938,159.919 l-0.1-0.517l0.201-0.193l0.235,0.742L354.938,159.919L354.938,159.919z M354.972,160.304l-0.604-1.127l-0.233,0.387l0.335,0.451 L354.972,160.304L354.972,160.304z M356.446,162.37l0.367,1.127l0.369,0.13l0.671-0.807l-0.269-0.323l0.437-0.483h-0.57 l-0.302,0.517l-0.267-0.323L356.446,162.37L356.446,162.37z M355.171,167.754l-0.3-1.418l0.435-0.482l0.066-0.678l0.604-1 l0.269,0.483l-0.202,0.582l0.369,0.386l-0.268,0.484l0.268,0.547l-0.604,0.323l-0.2,0.517L355.171,167.754L355.171,167.754z  M389.696,147.362l0.025-0.437l0.311-0.316l0.117,0.382l-0.168,0.5L389.696,147.362L389.696,147.362z M401.206,140.604 l-0.185-1.117l-0.302-0.323l0.218-1.069l0.537-0.208l0.319,0.371l-0.067,0.419l0.453,0.487l-0.47,0.519l-0.083,0.889 L401.206,140.604L401.206,140.604z M388.294,154.085l0.085-0.339l-0.168-0.503l0.57-0.614v-0.373l0.437-0.518l-0.051-0.582 l-0.722-0.017l-0.151-0.68l0.287-0.713l0.722-0.13l0.084-0.758l-0.941-0.503l-0.587,0.195l-0.066,0.551l-0.336,0.323 l-0.536-0.308l-1.125-0.032l-1.091,1.085l-0.891,0.567l0.017-0.39l0.991-0.599l0.512-0.632l-0.034-1l-0.369,0.581l-0.401-0.194 l-0.033-0.708l0.77-0.549l-0.603-1.097l0.535-0.677l0.637,0.032l-0.133,0.485l0.4,1.225l0.604,0.581l0.437-0.195l0.938-0.03 l0.436-1.001l-0.504-0.419l0.035-0.355l0.637-0.032l0.3,0.323l0.47-0.128l0.737-0.678l0.302-0.936l0.167,0.774l0.336,0.032 l0.77-0.676l-0.67,1.419l0.067,1.128l0.369-0.194l0.403,0.227l-0.403,0.708h0.57l0.402-0.967l0.468-0.321l0.703-1.323 l0.571-0.226l-0.202,0.937l-0.736,0.838l0.202,1.387l0.669,0.032l0.569,0.354l0.404-0.612l1.038-0.872l0.335-1.289l0.435-0.935 l-0.234-0.969l0.333-0.387l-0.132-0.451l-0.537,0.066l-0.502-0.228l-0.537,0.388v-0.968l0.402-0.257l-0.268-0.453l-0.87,0.098 l-0.135-0.388l-0.847-0.657l-0.017-0.663l-0.638-1.358l-0.117-1.102l0.437-0.956l-0.426-1.295l-0.536,1.032l0.066,0.871 l-0.703-0.935l-0.971-0.517l-0.271-1.838l-0.568-0.324l-0.168-1.451l-0.636-0.806l-0.034-0.87l-0.335-0.583v-0.613l0.938-0.096 l0.302-0.935h0.604l0.168,0.258l0.602-0.388l0.034-0.773l0.837-1.742v-1.162l0.201-0.483l-0.669-1.451l0.333-1.033l0.571-0.096 l0.066-1.292l0.939-1.225l0.101-0.74l0.502-0.583v-1.709l0.57-0.224v-0.839l1.005-1.097l-0.102-0.967l0.102-0.613l0.604-0.162 l0.066-0.87l-0.47-0.936l0.135-0.549v-0.676l-0.805-0.419l-0.4-1.291l0.301-0.419l-0.637-1.516l-0.838-0.16l-0.369-0.388 l-0.369,0.064l-0.167,1.161l-0.436-0.032l-0.972-1.708l-0.602-0.098l-0.637-0.71l-0.604,0.323l0.167,1.129l-0.334,0.224 l-0.636-0.159l-0.47,1.063v0.549l-0.568,0.323l-0.738,2.159v0.903l-0.502,0.709l-0.068,1.064l-0.3,0.258l-0.069,0.742 l-0.669,0.419l-0.1,1.806l-0.705,0.453l-0.402-0.162l-0.637,1.451l0.303,0.517l-0.268,0.838l-0.101,0.902l-0.67,0.838 l0.468,0.678l-0.134,0.645h-0.971l0.369,0.418l0.805,0.355v0.775l-0.572-0.258l-0.602,0.129l-0.737,0.482l-0.57-0.191 l-0.401,0.417l0.066,0.872l-0.401,0.387l-0.638-0.354l-0.1-0.905l0.266-0.676l-0.5-0.582l-0.035-1.321l0.67-1.322l0.168-1.096 l0.636-0.518l0.068-0.741l0.234-0.741l0.503-1.871l1.072-0.548l0.101-1.064l-0.536,0.096l-0.437-0.096l0.067-0.645l0.57-0.612 l0.101-1.84l-0.503-0.321l-0.402-1.032l0.303-0.355l0.065-1.063l-0.57-0.099l-0.837-1.064l-1.307,0.42l-0.3,0.936l0.868,0.645 l-0.032,0.773l0.47,0.548v0.678l-0.604,0.032l-0.302-0.838h-0.637l-0.333,0.968l0.401,0.257l0.234,0.742l0.336,1.064 l-0.469,0.323l-0.134-0.355l-0.401-0.387l-0.235,1.033l-0.77-0.582v-0.743l-0.57,0.098l-0.503,0.902l-0.369-0.16v-0.936 l0.569-0.581l-0.268-0.193l-1.207,0.453l-1.04,0.966l-0.636-1.063l-0.604,0.064l-0.569,0.548l-1.04,0.032l-0.201-0.484 l-1.039,0.163l-0.436-0.389l0.738-0.645l1.174-0.128l0.568,0.193l1.038-0.259l0.067-0.547l0.604-0.194l0.637,0.194l0.938-0.774 v-0.742l0.168-0.517l-0.604-0.515l-0.771-1.484l-1.039-0.322l-0.132-0.614l-1.409-1.256l-0.201-0.485h-0.771l-1.006,0.709 l-0.603,0.065l-1.475,1.451l0.369,0.321l-0.034,0.583l-0.57,0.192l-0.637,0.291l-0.032-0.388l-0.705,0.129l-0.67-0.45 l-0.905,0.063l-0.403,0.354l-0.938-0.031l-0.369-0.323l0.336-0.322l1.34-0.291l0.335-0.774l0.771-0.291l0.57,0.131l0.669-0.873 l0.067-1.031l0.369-0.484h0.736l0.671-1.258l-0.101-1.322l0.234-0.71l-0.268-0.805l-0.77-0.033l-1.41,0.421l-1.708,0.354 l-1.776,0.676l-3.385,0.517l-4.155,1.548l-1.072,0.902l-2.547,0.581l-3.385,1.518l-1.172,1.031l-0.101,0.678l0.771,0.063 l0.469,0.355l-0.905,0.645h-0.87l-1.475,1.292l-1.273,0.064l-0.638,0.517l-0.234,0.805l-1.251,0.896l-0.554,0.696l-0.05,1.101 l0.654-0.325l0.621,0.518l-0.352,0.567l0.285,0.226l0.538-0.112l0.806-0.471l0.873,0.082l0.706,0.453l-0.285,0.679l-1.058,0.421 l-1.024-0.551l-0.688,0.372l0.201,0.81l1.595,0.792l0.537-0.323l0.185-0.665l0.521-0.015l0.319,0.435l-0.353,0.631l0.739-0.081 l1.527,0.26l1.444-0.388h0.89l1.309,0.548l0.99-0.192l0.907,0.387l0.521,0.729l0.705,0.081l-0.298,0.468h-0.67l-1.274-0.806 l-1.776-0.032l-0.335,0.321l1.141,0.388l0.267,0.484h-1.507l-0.67-0.548l-2.045,0.225l-0.536,0.483l-0.604-0.354h-0.534 l-0.705,0.194l-0.704-0.064l-2.178,0.128l-0.369,0.292l-1.742,0.321l-0.301,0.936l0.252,2.453l0.218,0.485l-0.018,0.938 l-0.351,0.227l0.102,0.631l0.419,0.356l0.789-0.115l0.487-0.014l0.537,0.387l0.823,0.034l0.218-0.372l0.202-0.081l0.587,0.288 l0.352,0.309l0.471-0.161l0.521,0.485l0.083,0.502l0.57,0.161l0.739-0.21l0.554,0.032l0.369,0.357l1.008,0.033l0.654-0.114 l0.839,0.34l0.755-0.357l0.556,0.227l1.106,0.099l0.94-0.243l0.74,0.323l0.303,0.63l0.552-0.371l0.134,0.743l0.789,0.616 l0.035,0.356l0.302,0.388h0.856l0.554,0.26l0.201,0.598l0.503,0.146l0.538,0.582l-0.134,0.306l-0.068,0.648l0.821,0.841 l1.177,0.729l0.015,0.486l-0.233,0.257l0.218,0.486l-0.437-0.225l-1.612-0.373l-1.343-0.372l-0.689,0.21l-0.688-0.21 l-0.216,0.178h-0.656l-0.655-0.728l-0.588-0.032l-0.519-0.745l-0.42-0.146l-0.976,0.129l-0.537-0.146l-0.42-0.388l-1.006-0.372 l-0.169-0.68h-0.352l-0.521-0.211l-0.991,0.064l-0.436-0.242l-2.048,0.081l-1.226-0.113l-0.906-0.258l-3.645-0.05l-0.604,0.227 l-1.072,0.275l-0.504,0.678l-0.084,1.377l-0.806,1.213l0.252,1.358l-0.303,0.534l0.219,0.47l0.638,0.259l-0.167,0.485 l-0.354,0.259l0.638,1.843l0.69,0.552l0.2,0.437l1.343,0.745l0.389,0.404l0.755-0.178l0.486,0.517l0.621,0.129l0.958-0.404 l0.571,0.032l0.654,0.664l1.007-0.016l0.587,1.004l0.537,0.194l0.202,0.485l-0.991,0.308l0.102,0.519l-0.437,0.453l0.051,0.437 l-0.336,0.583l-1.124,0.551l-0.052,0.438l-0.335,0.566l0.706,0.484l0.05,1.069l0.486,1.036l-0.083,0.534l-1.075,0.242 l0.319,0.355l1.528,0.293l0.622-0.181l0.436,0.066l0.302,0.308l0.385-0.502l0.505-0.082l0.386,0.244h1.175l1.46,0.647 l0.555-0.647l1.191,0.049l0.235,0.42l0.252,0.081l0.335-0.226l0.671-0.163l0.419,0.163l0.135,0.534l0.521-0.082l0.336-0.209 l0.438,0.258l0.168,0.665l0.453-0.017l0.386-0.389l1.157-0.114l0.521-0.55l0.757-0.243h0.669l0.94-0.889l1.11-0.471l0.771-0.176 l0.219-0.388l0.621,0.016l0.94,0.16l0.621-0.097l0.638,0.323h1.78l1.829-1.164l0.303-0.534l0.335-0.034l0.303,0.31l0.268-0.487 l0.706-0.405l-0.033-0.549l0.269-0.341l0.369,0.129l0.554-0.08l0.318-0.455l-0.066-0.452l0.386,0.162l0.435-0.08l0.287,0.5v0.438 l0.317,0.437l-0.671,0.42v0.55l-0.386,0.567l-0.437,0.291l0.051,0.308l0.621,0.114l0.705,0.55l0.27-0.211l0.569-0.065 l0.755,0.356l0.268,0.793l0.388,0.355l0.05-0.388l0.268-0.274l0.554,0.259l0.018,0.566l-0.572,0.533H375l-0.506,0.598l0.12,0.422 h0.47l0.57,0.128l0.721,0.583l0.587-0.179l0.672-0.889l0.287,0.017l-0.068,0.729l0.504,0.874l0.554,0.162l0.537-0.34l0.72,0.179 l0.388,0.564h0.688l0.403,0.47l0.319,0.016l-0.034-0.711h0.42l0.639-0.21l0.352,0.273l-0.034,0.616l0.317,0.177l0.707-0.193 l0.487-0.664l0.352,0.21l0.169,0.55l0.369-0.015l0.302-0.391l0.218-0.096l0.52-0.518l0.605,0.064l0.185,0.308l0.37,0.146 L388.294,154.085L388.294,154.085z M475.109,185.621l0.3-1l-0.267-0.355l0.101-1l0.1-1l1.207-1.16l0.501-1.001l0.705-0.452 l1.341-1.871l0.906-0.547h0.435l0.368-0.387l0.536,0.259l0.906-0.452l0.971,0.291l0.437,0.579h0.502l0.636,0.678l0.336,0.87 l-0.034,0.677l-0.804,0.646l-0.402,0.871l-0.068,0.902l-1.206,1.807l-0.401,0.677l-0.737,0.225l-1.14,0.549l-0.269,0.291 l-0.669,0.096l-1.005,0.419l-0.537-0.355l-1.307,0.258l-0.738-0.258l-0.568,0.031L475.109,185.621L475.109,185.621z  M392.643,151.251l-0.151-0.419l0.169-0.519l0.621-0.195l-0.468-0.615l0.283-0.533l0.436-0.081v0.583l0.456,0.404v0.5 l-0.354,0.536l-0.368-0.081l-0.305,0.485L392.643,151.251L392.643,151.251z M384.753,158.195l0.721-0.405l0.203-0.518 l-0.068-0.486l0.151-0.534l-0.168-0.161l-0.654,0.421l-0.134,0.306l-0.906-0.047l-0.202,0.389l0.621,0.777L384.753,158.195 L384.753,158.195z M394.054,156.608l-0.872,0.487l-0.135,0.518l-0.353,0.453l-0.554-0.809l-0.015-0.502l0.871-1.261l-0.05-0.631 l0.42-0.486l0.572,0.097l0.017,0.517l0.621,0.729L394.054,156.608L394.054,156.608z M395.144,155.493l-0.116-0.568l-0.319-0.323 l0.638-1.214l0.384-0.129l0.488,0.826l-0.47,0.549l-0.151,0.712C395.599,155.346,395.129,155.508,395.144,155.493 L395.144,155.493z M412.31,155.725l0.435-1.45l0.973-0.872l1.105,0.355l0.033,0.773l-0.906,1.452l-0.635,0.29l0.134-0.677 l-0.067-0.774l-0.335,0.452l-0.135,0.517C412.912,155.791,412.31,155.757,412.31,155.725L412.31,155.725z M411.605,154.661 l0.402,0.128l0.504-0.967l-0.537-1.031l-0.403,0.612L411.605,154.661L411.605,154.661z M410.989,162.396l0.415-0.446l1.306-0.837 l0.034-0.679l-1.072,0.388l-0.468-0.677l0.937-1.871l0.268-0.872l-1.039,0.581l-0.651,1.312l-0.065-0.839l0.671-2.068 l-0.471-2.973l-1.275-0.837v-0.905l-0.738-0.064l-0.739,0.904l0.067-1.033l0.672-0.581l-0.403-0.904l0.134-0.712v-0.968 l-1.343,0.388l-1.343,1.098l-0.604,1.55l0.337,1.356l-0.739-0.257l-0.336-1.165l-0.402-0.064l-0.201,1.034l-0.605,0.065 l0.472,0.839l-0.537,0.776h-0.738l-0.539,0.775l-1.476-0.13l-0.604,0.257l-0.604-0.127l-2.081,1.226l0.202,0.905l0.939,1.162 l0.806-0.451l-0.202-0.517l0.269-0.646l0.873,0.71l-0.336,1.229l1.007,0.774l0.537-0.904l0.335,0.581l-0.335,0.776l1.075,1.162 l0.873,0.193l0.468,1.292l0.604,0.646l0.74-1.099l0.066,0.84l1.208,0.97l0.671-0.064h0.873l0.94-0.906l0.671-0.129l1.075-0.774 L410.989,162.396L410.989,162.396z M506.066,156.22l-0.049-0.695l-0.302-0.455l0.453-0.729l0.806-0.484l0.688,0.193l0.167,0.616 h0.604l0.42,0.372l-0.521,0.697l-0.755,0.192l-0.386-0.242l-0.554,0.259l-0.302,0.437 C506.335,156.382,506.017,156.204,506.066,156.22L506.066,156.22z M503.985,234.671h-0.822l-0.806-0.485l-1.428-0.469 l-0.654-0.486l-0.621-0.097l-1.276-1.052l-0.236-0.518l-0.671-0.372l-0.537,0.081l-0.521-0.211l-0.352,0.276l-1.393-0.551 l-0.168-0.484l-0.505-0.47h-0.638l-0.955-1.052l0.015-0.584l-0.435,0.049l-0.555-0.372l-0.403-0.777l0.386-0.338l0.455-0.292 l-0.856-0.34l-0.287,0.21l-0.234,0.323l-0.485-0.291l0.015-0.373h-0.755l-1.428-0.938l-0.587-0.034l-0.47-0.418l-0.855-0.681 l0.067-0.469l-0.588-0.081l-0.538-0.616l-0.57-0.744l-0.083-1.051l-0.855-0.418l0.302-0.355l1.241,0.066l1.674-1.098l0.335-0.452 l-1.34,0.161l-0.636-0.936l-0.303-0.966l0.201-0.356l-0.503,0.227l-0.434,0.806l-0.101,0.645l-0.771-0.742l0.537-0.645 l0.168-1.355l-0.571,0.968l-0.401-0.388v-0.967l-0.737,0.129l-0.203-0.806l0.068-0.775l-0.437-1.16l-0.703-0.389l0.034-0.677 l0.972-0.903l-0.235-0.418l-1.575,1.289l-0.066,0.774l-0.27-0.612l0.537-1.033l-0.703-0.225l-0.436,0.256l-0.234-0.225 l-0.502,1.483l-0.772,0.452l-0.067-0.934l0.638-0.743l-0.069-0.87l0.169-0.548l-0.771,0.257l-0.705,0.679l-0.435,0.032 l-0.536,0.709l-0.303,0.516l-1.105-0.225l-0.568-0.645h-0.671l-0.906-1.452l-0.368-0.032l-0.269,0.645v0.871l-0.434,0.42 l-0.739-0.259l-0.57,0.227l-0.971,0.032l-0.335,0.45l-0.904-0.063l-0.403,0.418l-0.839-0.291l-1.374-0.097l0.168-0.548 l-0.938-1.031l-0.437,0.289l-0.804-0.742l-0.604-1.708l0.336-1l0.703-0.453v-0.838l0.67-0.677l1.005-0.096l0.538-0.581 l0.87-0.161l0.403,0.063L467,203.23l-0.386-0.572l-0.05-0.534l0.21-0.178l0.511,0.137l0.16-0.411l-0.1-0.527l0.31-0.343 l0.957,1.391l0.957,0.163l0.974,0.679l0.673,0.729l0.485,0.113l1.009,0.486l0.587-0.519l0.687,0.017l0.352,0.502l0.604,0.016 l1.041,0.206l0.637-0.678l0.434-0.838h1.174v0.354l-0.268,0.355l0.637,0.354l0.871-0.709l0.369-0.805l0.871-0.484l0.369,0.484 l0.034,1.226l0.269,0.742l0.166-0.904l0.502-0.388l0.437,0.227l0.436-0.388l-0.234-2.225l-0.772-1.129l-0.134-0.772l-0.57-0.808 l0.27-1.032l0.401-0.387l0.503-0.032l1.341-1.032l1.607-0.936l0.636-0.354l1.141-1.131h0.468l0.538,0.421l0.67-0.193l0.434-0.064 l-1.204-0.646l-0.033-0.677l1.674-1.29l0.2-0.645l0.504-0.29l1.34,0.29l1.374-0.452l0.167-0.58l-0.503-0.839l0.47-0.646 l0.202-1.612l0.084-0.304l-0.2-0.259v-0.713l0.485-0.841l0.018-0.793l-0.654-0.192l-0.017-0.373l0.403-1.229l0.635-0.115 l0.103-0.647l0.437-0.743l-0.068-0.518l-0.471,0.081l-0.485,0.55l-0.018,0.518l-0.386,0.128l-0.068-0.566l0.068-0.777 l-0.335-0.209l-1.846-0.065l-0.586-0.598l0.185-0.374l1.325-0.532l-0.168-0.355l-0.655-0.374l0.47-0.825v-0.599l-1.007-0.711 l-0.387,0.145l-0.065,0.536l0.302,0.55l-0.237,0.485l-1.074,0.259l-0.369-0.793l-0.403-0.145l-0.15-1.069l0.739-0.68 l-0.233-0.565l-1.21,0.145l0.117-0.273l0.974-0.309l0.067-0.373l-0.503-0.193l0.487-0.34l0.554-0.259l0.083-0.47l-0.453-0.371 l-0.807,0.597l-0.637,0.972l-0.604,0.371l-0.32-0.275l-0.117-1.003l-0.436,0.276l-0.454,0.777l-0.688,0.016l-0.57,0.373 l-0.84-0.016l-0.587,0.227l-0.117,0.289h-0.487l-0.134-0.468l0.503-0.582l-0.084-0.422l-0.369-0.21l0.654-0.891l0.42-0.161 l0.57,0.274l0.487,0.291l0.469-0.226l0.554-0.065l0.723-0.648l0.268-0.776l-0.302-0.519l-0.521-0.518l-0.889-0.274l-0.386-0.631 l-0.035-0.566l-0.285-0.372l0.017-0.601l-0.874-0.095l-0.133-0.227l-0.521-0.292l-0.168-0.55l0.689-0.291l0.316,0.42l0.371-0.211 l0.134-0.486l0.822-0.42l-1.208-0.209l-0.487-0.55l-0.571-0.018l-0.067-0.274l-0.755-0.179l-0.37,0.76l-0.285,0.082v-0.502 l0.638-1.407l0.788-1.182l0.068-0.355l0.487-1.166l0.017-0.857l0.286-0.47l-0.302-0.485l-0.822,0.437l-0.503-0.342l-0.319,0.18 l-0.084,0.516l-0.488-0.129l-1.141-1.163l-0.067-0.616l-0.42-0.536l-0.403-0.193l0.169-0.986l0.855-0.357l0.185-0.42 l-0.285-0.501l-0.068-0.891l-0.52,0.114l-0.504,0.502l-0.034,1.262l-0.503,0.743l-0.219-0.792l-0.453-0.357l-0.218,0.195 l-0.067,0.55l-0.437,0.146l-0.15,0.939l0.738,0.985l0.521-0.097l0.722,1.601l0.453,0.486l-0.287,0.842l-0.066,0.712l-0.621,0.922 l-0.621,0.436l-2.048-0.032l-0.27-0.242l-0.806,0.064l-0.923-0.566l0.219-0.339v-0.809l-1.46,0.016l-1.512-0.728l-1.293-0.113 l0.622,1.601l0.42,0.971l-0.186,0.195l-0.755-0.033l-0.403-0.874l-0.772-0.794l-0.32-0.128l-0.234-0.649l-0.89-0.888l-0.67-0.792 l-0.134-0.451l-0.637-0.129l-0.771-0.936l-0.569-0.224l-0.269-0.356l-0.736-0.386l0.166,0.676l1.776,1.355l0.402,0.676 l0.637,0.743l0.704,0.45l0.268,0.646l-0.47,0.582l-0.333-0.292l-0.47,0.452l-1.306-0.806l-0.504,0.129l-0.436-0.679l-0.838-0.289 l-0.335-0.742l-1.507,0.193l-0.771,0.42l-0.67-0.549l-1.005-0.194l-0.838,0.065l-0.469-0.614l-1.074-0.676l-0.033-0.549 l1.306-1.16l0.537-0.259l-0.033-0.354l-0.604,0.032l-0.803,0.806l-0.636,0.71l-0.471,0.16l-0.738-0.58l-0.871-0.161l-0.369,0.129 l0.771,0.516l-0.436,0.322l-1.206-0.065l-1.139-0.934l-0.167-1.194l-0.805-0.579l0.134-0.742l1.575-0.774l0.369-0.548 l-0.302-0.194l-0.704,0.515l-1.105,0.131l-0.402,0.934l-0.468,0.099l-0.168-0.646l0.2-0.708l-0.367-0.324l-0.456,0.106 l-0.166,0.565l0.132,0.469l-0.234,0.469l-0.655-0.194l-0.554-0.598l-0.755-0.179l-0.621,0.179l-0.084,0.534l-0.486,0.032 l-0.604-0.713l-0.251-0.711l0.268,0.047l0.47,0.325l-0.017-0.325l-0.873-0.792l-1.091-0.614l-0.136-0.745l0.152-0.97 l-0.133-1.085l-0.407-1.348l0.267-0.644h0.573v-0.517l-0.336-1.031l0.132-0.356l0.872,0.228l0.335,0.451l1.509,0.096l0.805,0.613 l0.266,0.84l1.643,0.612h1.475l0.436-0.258l1.307-0.034l-0.569-0.45l-0.135-0.583l-1.207-0.709l-0.134-1.19h-1.206l-1.038-0.614 h-0.705l-1.072-0.677l-0.904-0.032l-1.642-0.871l-0.437-0.807l0.336-1.419l0.771-0.483l-0.068-0.646l0.302-1h0.738l0.469-0.871 v-1.58l0.301-0.644l0.671-0.194l0.234-0.774l1.24-0.645l0.736-0.065l0.202-0.614l-0.302,0.033l-0.435,0.164l-0.103-0.71 l0.939-1.355l0.703-1.292l0.335-0.321l0.704-0.872h0.669l0.335,0.098l0.403-1.387l0.436,0.065l0.336,0.677l0.468-0.613 l-0.334-0.58l1.072-1.614l0.736,0.032l-0.066-0.805l0.771-1.032l0.972-0.032l0.569-0.775l0.704,0.035l0.57,0.289l-0.303-0.806 l0.236-0.838l1.642-0.71L461,116.8l2.514-0.806l1.674-0.096l0.706-0.258l1.205,0.226l0.705-0.226l0.501,0.194l1.475,0.032 l0.973,0.645l1.942,0.902l0.135,0.549l-0.234,0.709l-1.173,0.485l-1.507,0.58l-0.907-0.032l-0.434,0.677l-0.77,0.936 l-1.007,0.257l-1.708,1.581l-1.643,1.968l-1.374,0.872l-0.536,0.257l-0.871,1.709l-0.134,1.033l0.369,0.87l0.503,0.612v0.775 l-0.772,0.387l-0.67,0.872l-0.837,0.902l-0.067,0.903l-0.57,1.128l-0.468,0.323l-0.067,0.679l0.436,0.772l0.2,1.291l0.335,0.58 v1.16l0.803,1.033l0.168,0.452l0.872,0.482v0.904l-0.369,0.806l-0.301-0.742h-0.468l-0.067,0.418l-0.569,0.066l-0.603,0.226 l-0.453,0.176l0.353,0.212l0.57,0.678l0.655-0.08l0.184-0.18l0.302,0.325l-0.705,0.664l-0.353,1.278l-0.018,0.825l-0.233,0.502 l1.141-1.069v-0.597l0.974-1.651l0.454-0.405l0.251-1.633l0.386-0.551l0.807-0.535v-0.84l-0.253-0.55l0.168-0.566l-0.587-0.405 l-0.573-0.114l-0.048-1.115l-0.186-0.275l-0.049-1.116l-0.504-0.89l-0.118-0.873l0.403-0.227l0.302,0.647l0.419-0.356l0.94-0.276 l0.521-0.646l-0.202-0.567l0.486-0.743l0.706,0.21l0.57,1.166l-0.248,0.518l0.436,0.322l0.604-0.676v-0.806l0.636-0.743h0.603 l-0.1-0.484l0.369-0.289l0.839-0.258l-0.301-0.484l-0.638-0.097l-1.508,1.032l-0.637-0.034l-0.267-0.87l-0.504-0.483l0.067-0.517 l0.972-0.322l-0.57-0.741l0.336-1.226l0.67-1.194l0.099-0.677l0.705-0.676l1.105,0.096l0.772,0.807l0.1,0.58l1.242,0.645 l0.568,0.806l0.873,0.066l-0.705-0.548l-0.168-0.645l-1.307-0.839l-0.234-0.901l-0.234-0.484h-0.972l-0.402-0.42l0.303-0.128 l1.574-0.098l0.267-0.417h0.404l1.439,1.515l1.24,0.678l0.437-0.034l-1.14-0.644l-0.804-1.291l-1.073-0.74l-0.033-0.55 l0.368-0.805l1.341-0.258l0.469,0.193l-0.133,0.775l0.133,0.611l0.404-0.386l-0.035-0.614l0.537-0.645h1.04l0.501,0.967 l0.403,0.324l0.335,1.127l0.436-0.483v-0.676l-0.873-1l0.269-0.515l2.312-0.517l1.34-0.581l1.14-0.096l1.039-0.71l1.341,0.452 l1.475,0.064l1.409,0.32l0.118,0.532l-0.252,0.342l-0.184,1.957l-0.218,0.518l-0.605,0.664L483,125.733l0.218,0.469l0.822,0.372 l0.353,0.712l-0.168,0.47l-1.274,1.364l-0.234,0.548l-0.101,0.87l0.737,0.646l-0.033,0.419l-0.603,0.936l-0.704,0.064 l-0.636,0.709l-0.806,0.226l-0.637,0.582l-0.568,0.774l-0.604,0.677l0.637-0.064l0.972-0.936l1.172-0.872l0.47,0.033l0.401-0.064 l-0.604,0.645l-0.199,0.646l-1.308,1.162l-0.871,0.418l-0.066,0.322l0.066,0.419l-0.134,0.453l-0.469-0.259l-0.603,0.065 l0.034,0.484l0.401,0.03l0.37,0.388l-0.068,0.678l-0.713,0.516h0.755l0.386-0.518l0.654-0.244l0.587-0.81l0.018-0.63l0.854-0.291 l0.337-0.745l0.268,0.227v1.133l0.521,0.323v-1.003l-0.234-0.922l0.184-0.647l0.421-0.273l0.856,0.209l-0.117,1.002l0.284,0.478 l0.468-0.45l0.973-0.967l0.269,0.774l0.603,0.644l-0.267,0.744l-1.139,1.515l-0.906,0.677l-0.436,0.613l0.871,0.194l0.805,0.387 l0.604-0.387l-0.503-0.582l0.403-0.87l0.736-0.839l0.637,1.128l0.034,0.807l0.233-0.581l-0.134-1.096l-0.468-0.839l-0.034-1.644 l0.368-0.193l0.973,0.418l-0.202,0.838l-0.302,0.677l0.504-0.224l0.738-0.13l1.508,1.387v0.58h1.039l0.67,0.387h0.435 l-0.435-0.903l-0.637-0.128l-0.268-0.42l-1.676-1.419l-0.636-0.193l-0.302-0.42l0.938-1.353l1.04-0.034l0.871-0.772l1.374-0.227 l1.139,0.097l0.402,0.417l0.436-0.063l1.273,0.582l0.068,0.547l0.736,0.613l0.57,0.227l0.101,0.708l0.47-0.032l0.199-0.356 l0.74,0.13l0.334,0.709l1.005,0.451l0.033,0.582l-0.066,0.614l0.233,0.451l0.103,0.579l-0.807,0.903l-0.736-0.127l-0.839-0.226 l-1.306,0.353l-1.406,1.258l1.574-0.967l1.507-0.096l0.303,0.45l-0.636,0.613l-1.006,0.612l-1.038,1.452l-0.738,0.549 l-0.502,0.064l-0.134,0.677l0.468,0.065l1.675-1.646l0.705-1.063l1.207-0.42l0.971-0.903l0.939,0.291l0.403,0.387l0.638,0.065 v0.645l-0.37,0.679l0.067,0.677l-1.006,0.323l-0.468,0.902l-0.973,0.065l-0.436-0.323h-0.837l-0.469,0.581h0.938l0.201,0.485 l-1.608,0.836l0.603,0.131l0.537-0.517l1.005-0.291l0.536-0.289l0.134,0.419l-0.369,0.483l-0.973,0.195l-0.871,0.677l0.67-0.096 l0.27,0.191l-0.504,0.774l-0.973,0.806l-0.67,0.549l0.604,0.095l1.072-0.676l0.737-1.387l0.604-0.708l1.408-1.001l0.235,0.324 v0.452l0.771-0.355l0.135-0.612l1.138-0.71l0.603,0.065l-0.065,0.547l-1.409,1.161l-1.575,1l-0.636,0.162v0.419l0.401,0.195 l-0.47,0.773l-0.186,0.798l0.286,0.114l0.536-0.729l0.185-0.777l1.259-1.018l0.975-0.6l-0.034,0.583l0.117,0.518l-0.454,0.565 l-1.125,1.036l-0.134,0.549l-0.705,1.199l-0.486,0.404l0.049,0.227l0.839-0.227l0.353-0.665l1.143-1.488l0.721-0.309l0.369,0.583 l0.235,0.162l-0.035,0.453l-0.621,0.226l-0.822,1.167l-0.218,1.115l0.352,0.146l0.337-0.615l0.184-0.696l0.604-0.873l0.958-0.405 v-0.873l0.369-0.681l0.705-0.356l0.101-0.646l0.252-0.455l0.419-0.161l0.42-0.63l0.066-0.615l0.37-0.179l0.705,1.376l0.655,0.371 l0.805,0.809l0.185,0.793l0.185,0.86l0.858,0.92l0.065,0.389l-0.604,0.581l-0.888,1.052l-0.539,0.018l-0.603-0.484l-0.791-0.633 l-0.437,0.048l-0.419,0.324l-0.554,0.196l-0.419,0.825l-0.654,0.356l-0.545-0.007l-0.502,0.581l1.005-0.129h0.469l0.201,0.516 l-0.704,0.775l-0.771,0.354l-0.732,0.369l1.091,0.032l0.755-0.438l0.991-0.146l0.722,0.13l0.806-0.631l0.824,0.033l0.536,0.389 l0.084,0.404l-0.152,0.307l0.371-0.227l0.234-0.986l-0.068-0.744l0.521-0.665l1.326-0.599l0.234,0.227l-0.118,0.582l0.27,0.729 l-0.437,0.776l-0.806,1.052l-0.938,0.34l-0.656,0.565l-0.167,0.372l-0.839-0.015l-0.521-0.229l-0.537,0.018l-0.471,0.567 l-0.134,0.598l-0.84,0.793l-0.117,0.519l-0.251,0.516l0.454-0.08l1.058-1.1l0.671-1.117l0.503-0.209l0.235,0.259l0.352,0.032 l0.101,0.356l-0.419,0.437l-0.554,0.988l-1.142,1.083l-0.706,0.647l0.034,0.259l1.461-0.745l1.527-1.667l0.621-1.375l0.152-0.599 l0.369-0.469l0.521,0.017l1.325-0.89l1.192-0.486l0.604-0.178l0.084,0.307l-0.335,0.535l-0.957,0.939h-0.908l-0.536,0.437 l-0.117,0.743l0.216,0.161l0.605-0.598l0.923-0.097l0.824-0.696l0.67-0.209l0.438-0.356l0.653-0.405l0.639,0.081l0.386,0.81 l0.991,1.068l0.519,0.775l0.707,0.341l0.168,0.486l-0.117,0.745l-0.907,0.825l-0.369-0.195l0.083-0.873l-0.556,0.146l-0.166,0.42 l-0.403,0.486l-0.606,0.534l-1.444,0.096l-0.654,0.292l-0.974-0.05l-1.241,0.795l-0.772,0.064l-1.277,0.695l0.822-0.096 l0.437,0.225l-0.252,0.583l-1.158,0.26l-0.336,0.403l1.546-0.21l0.922-0.906l1.344-1.149l0.99-0.064l0.704,0.195l0.638-0.244 l0.587-0.017l0.034,0.325l-0.082,0.922l-0.604,0.42l-0.806,0.486l-0.503-0.034l-0.707,0.309l-0.521,0.793l-0.738,0.308 l-0.722-0.372l-0.503,0.211l-0.788,0.728l0.485-0.098l0.789-0.276l0.638,0.147l0.437,0.259l0.941-0.728l0.587-0.81l0.805-0.259 l0.587,0.227l0.824,0.162l0.588-0.68l0.889-0.388l0.317-0.259v-0.519l-0.3-0.275l0.52-0.727l0.034-0.47l0.604-0.161l0.203,0.193 l0.369-0.129l0.269,0.938l0.839,1.765l0.218,1.083l0.503,0.647l-0.169,0.679l-0.402,0.614l-0.99-0.046l-0.604-0.422l-1.276-0.098 l-0.671,0.341l-0.724,0.47l-0.552,0.014l-0.288-0.225l-0.721,0.049l-0.572,0.517l-1.409,0.21l0.621,0.225l1.596-0.225 l0.821,0.243l1.244,1.116l0.638,0.339l0.487-0.241l0.52-0.129l0.453,0.291l0.739,0.453l0.923,0.341l0.118,0.646l0.437,0.696 l0.033,0.955l-0.353,0.291l-0.638-0.017l-0.436-0.711l-0.319,0.065l-0.402,0.454l-0.42-0.194l-0.301-0.47l-0.488,0.242 l-0.57-0.144l-1.075-1.151l-0.437-0.145l-0.605,0.081l-0.773,0.08l-0.687-0.323l0.267,0.373l0.89,0.275l0.724,0.146l-0.238,0.372 l-1.106,0.098l-0.453,0.226h-1.009l-0.756,0.453l0.135,0.567l0.437-0.081l0.218-0.372l1.142,0.016l0.706-0.389l0.707-0.114 l0.468,0.616l0.018,0.324l0.555,0.242l0.084,0.308l-0.219,0.113h-0.857l-0.419,0.291l-0.386-0.225l-0.234-0.341l-0.503,0.048 l-0.236,0.179l0.673,0.485l0.654,0.258l0.351,0.406l-0.016,0.533l0.303,0.389l-0.481,0.073l-1.776-0.483l-1.105-0.032 l-1.709-0.613l-0.705,0.096l0.235,0.291l1.005,0.258l2.382,1.127l0.133,0.453l-0.403,0.096l-1.308-0.772l-0.4,0.128l-0.637,0.676 l0.601-0.096l0.405,0.257l0.501,0.419l0.302-0.16l0.401,0.192l0.068,0.581l0.3,0.484l0.336-0.227l0.1-0.483h0.77l-0.066,0.454 l-0.3,0.353v0.355l0.503-0.032l0.032-0.807h0.638l0.904,0.452l0.838,0.259l0.705-0.032l-0.303,0.708l-0.134,0.387l-0.803-0.259 l-0.503-0.322l-1.039,0.162l-1.407,0.645l-0.034,0.645l0.604-0.613h1.106l0.802,0.225l-0.736,0.13l-0.269,0.549l0.57-0.259 l1.14,0.032l0.402,0.387l-0.234,0.259l0.769,0.289l0.336,0.549l-0.267,0.483l-0.438,0.999l0.102,0.55l0.3-0.259l0.102-0.613 l0.604-0.613l0.637-0.064l0.135,0.678l-0.336,0.483l-0.856,1.412l-0.369,0.793v0.631l0.419-0.241l0.638-1.085v-0.502l0.437-0.566 l0.854-0.388l-0.066-0.228l0.32-0.598l0.654-0.453l0.233,0.194l-0.25,0.632l-0.839,1.084l-0.388,0.631l-0.032,0.809l0.101,0.809 l0.369-0.259l-0.066-0.534l0.101-0.793l0.587-0.486l0.486-0.647l1.075-0.84l0.705-0.55l0.202,0.325l-0.05,0.984l-0.403,0.39 l-1.007,0.227l-0.134,0.728l-0.336,0.696l0.269,0.162l0.285-0.276l0.419,0.291l0.47-0.339l1.058-0.354l0.302,0.484l0.286,1.067 l-0.067,0.518l-0.706,0.307l0.017,0.259l0.538,0.115l0.419,0.711l-0.647,0.203l-0.572-0.096l0.572,0.354l0.736,0.323 l-1.776,0.387l-0.871-0.064l0.435,0.419l0.871-0.066l1.208,0.259l0.369-0.387l0.837-0.162l0.201,0.064l-0.669,0.872l-0.369,0.87 l0.804-0.774l0.704-0.225l0.536-0.581l0.872-0.612l0.671,0.193l-0.167,0.419l-0.537,0.581l-0.369,0.032l-0.402,0.677 l-0.402,0.871l-1.039,0.387l-0.436,0.774l0.035,0.549l0.535,0.096l0.67-0.679v-0.353l0.904-1.064l0.806-0.291l-0.068,0.613 l-0.604,0.967l-0.1,0.936l-0.269,0.581l0.503-0.356l0.637-1.097l0.033-0.549l0.333-0.16l0.269,0.193l0.1,1.226l0.47,0.386 l0.3-0.032l-0.134-0.935l0.335-0.548l1.141-0.581l0.235,0.291l-0.403,0.515l0.268,0.098l0.738-0.032l0.436,0.548l-0.336,0.903 l0.772-0.097l0.302,0.418l0.065,0.581l0.538,0.453l0.129,0.533l-0.233,0.259l-0.371,0.292l-0.957-0.017l0.051-0.534l-0.404-0.582 l-0.486-0.227l-0.286-0.243l-0.418,0.34l-0.47,0.614l0.586-0.259l0.453,0.115l0.303,0.371l-0.303,0.162l0.419,0.227l0.186,0.469 l-0.387,0.162l-0.655-0.162l-0.521,0.308l0.304,0.243l1.139,0.032h0.437l0.069,0.325l-0.438,0.517h-0.722l-0.638,0.146 l-0.889-0.13l-0.739-0.145l0.203-0.632l-0.051-0.387l-0.622-0.339l-0.25-0.293l-0.387,0.112l0.084,0.472l0.402,0.291l0.202,0.68 l-0.135,0.356l-0.622,0.064l-0.655-0.42l-0.133-0.438l-0.134,0.777l0.47,0.486h0.908l0.469,0.404l0.521,0.163l0.117,0.5 l-0.268,0.614l-1.31-0.046l-0.302-0.52l-0.824-0.516l-0.386-0.389l-0.252,0.017l0.219,0.372l0.906,0.647l0.355,0.679 l-0.018,0.955l-0.302,0.502l-0.42-0.066l-0.235-0.598l-0.554-0.436l-0.621-0.21l0.134,0.242l0.319,0.274l-0.018,0.794 l-0.033,1.05l-0.234,0.179h-0.454l-0.285-0.291l0.033-0.81l-0.336,0.146l-0.134,0.486l-0.621,0.129l-0.403-0.163l0.117-0.583 l-0.219-0.631l-0.05-0.679l-0.285-0.325l-0.133,0.486v1.181l-0.403,0.325l-0.587,0.031l0.218,0.229l0.486,0.08l0.135,0.356 l-0.387,0.469l-0.537-0.114l-0.235-0.145l-0.067,0.258l0.504,0.388h0.386l0.084,0.356l-0.084,0.534l-0.369,0.13l-0.101,0.388 l0.285,0.648v0.486h-0.285l-0.37-0.259l-0.185,0.081l0.571,0.598l0.101,0.484l-0.118,0.681l-0.89,0.274l-0.218,0.356l-0.37-0.146 l-0.083-0.371l-0.185-0.179l0.034-0.355l-0.487-0.179l-0.1-0.291l0.319-0.452v-0.374l-0.269,0.051l-0.638,0.259l-0.201,0.469 l-0.302-0.049l-0.42-0.502l0.303-0.403l-0.321-0.406l-0.015-0.291l0.336-0.275l0.033-0.34l0.119-0.403l-0.152-0.083l-0.47,0.486 l-0.386,0.842l-0.505,0.55l-0.151-0.193l-0.015-0.518l-0.336-0.552l-0.167-0.518l0.302-0.339l0.823-0.323l0.017-0.194 l0.453-0.163l-0.167-0.226l-0.672-0.064l-0.572,0.146l-0.603-0.146l-0.15-0.291l0.184-0.389l0.705-0.178l0.604-0.745 l-0.405,0.114l-0.554,0.228l-0.385-0.178l-0.067-0.42l0.452-0.195l0.623-0.242l0.622-0.178l-0.54-0.227l-0.669,0.016 l-0.453,0.292l-0.302-0.211l0.067-0.388l0.704-0.955l0.438-0.145l0.94-0.163l0.722-0.599l0.603-0.355l0.354-0.728l0.672-0.713 l0.385-0.21l-0.084-0.307l-0.385,0.066l-0.84,0.647l-0.47,0.241l-0.386,0.647l-1.09,0.501l-0.571-0.016l-1.192,0.825 l-0.875,0.114l-0.587-0.227l0.036-0.325l1.226-1.261l0.94-0.486l0.25-0.421l0.337-0.371l-0.067-0.616l-0.656,0.94l-1.744,1.019 l-0.572,0.291l-0.42-0.146l-0.218-0.323l0.117-0.616l-0.234-0.29l-0.487,0.128l-0.436-0.258l0.219-0.325l0.452-0.146v-0.42 l-0.336-0.244h-0.452l-0.085-0.227l0.103-0.841l0.319-0.179l0.015-0.486l-0.486-0.257l-0.353-0.454l-0.186,0.034l-0.016,0.599 l0.151,0.453l-0.722,0.275l-0.403-0.356l-0.47-0.437l-0.79,0.014l0.874,0.503l0.503,0.84l0.118,0.746l-0.571-0.13l-0.149,0.242 l0.116,0.211l-0.688,0.113l-0.421-0.486l-0.217-0.873l-0.369-0.259l-0.269,0.242l0.486,0.47l0.084,0.582l-0.268,0.632l0.57,0.113 l0.571,0.68l0.286,0.745l-0.067,0.568l0.369,0.111l-0.083,0.374l-0.504,0.177l-0.957-0.114l-0.386-0.484l-0.251,0.777h-0.302 l-0.873-0.956l-0.135-0.582l0.302-0.518l-0.15-0.518l-0.739-0.452l-0.738,0.032l-0.134-0.47l-0.351-0.598l-0.455,0.323 l-0.806,0.194l-1.042-0.064l0.402,0.454l1.125,0.082l0.705,0.291l0.975,0.291l-0.017,0.889l-0.504,0.599l0.034,0.518l0.504-0.113 l0.285,0.404l-0.335,0.469l0.385,0.163h0.756l0.049,0.404l-0.519,0.761l-1.209,1.02l-0.771,0.597l1.645-0.372l0.503-0.582 l0.168-0.372l1.292,0.015l0.386,0.405v0.292l-0.806,0.421l-0.402,0.548l0.335,0.245l0.789,0.096l0.503,0.486l-0.436,0.274 l-0.84,0.099l-0.25,0.356l0.453,0.146l0.152,0.534l-0.119,0.098l0.1,0.291h0.319l-0.134,0.696l0.386,0.083l0.167,0.614 l0.101,1.083l0.202,0.147l0.252-0.502l0.084-0.825l0.402-0.242l0.537,0.468l0.119,0.906l0.354,0.405l-0.17,0.309l-0.688,0.404 l0.153,0.323l1.125-0.146l0.251-0.21l0.066,0.567l0.386-0.6l0.035-0.469l0.502,0.064l0.403,0.664l-0.185,0.745l-0.587,0.566 l-0.117,0.502l-0.185,0.274l0.437,0.388l1.093-0.114l0.552-0.258l0.386,0.34l-0.722,0.517l-0.185,0.309l-0.99,0.162l0.537,0.599 l0.539,0.938l-0.204,0.647l0.42,0.113l0.178,1.092l1.007,1.515l0.3,0.258l-0.603,0.324l-0.101,1.225l-0.437,0.904l0.203,0.936 l-0.267,0.322l-1.175-1.29l-0.268-1l0.134-0.903l-0.3-1.256L511,221.483l-0.168,1.257l0.57,1.484l-0.101,1.386L511,226.32 l0.502,0.838l-0.268,0.291l-0.804-0.162l-0.402-0.646h-0.736l0.501,1.646l-0.067,1.063l0.269,0.259v0.581l-0.837-0.098 l-0.502-0.548l-0.336-1.387l0.302-0.419v-0.872l-0.402,0.485l-0.637,0.097l-0.369-0.516v-1.291l-0.502,0.291l-0.067,0.645 l-0.201-0.29l0.033-0.549l-0.302-0.806l-0.569-0.128v0.355l0.334,0.418l-0.268,0.518l-0.57-0.388l-0.436-0.13l-0.099-0.707 l0.099-0.774l-0.503-1.355v-0.549l-0.233,0.774l0.067,1.323l0.235,0.836l-0.503,0.517l-0.636-1.451l-0.637-0.613v-0.419 l-0.636-0.128l-0.438-1.389l-0.402-0.354v-0.453l-0.402-0.645l-0.469,0.258l-0.066,0.387l0.435,1.032l0.068,0.71l-0.402-0.388 l-0.07-0.581l-0.467-0.387l-1.039-0.483l-0.604-1.129l-0.068-0.839l-0.905-0.192l-0.368,0.58l-0.604-0.323l-0.1,0.743 l0.235,1.097l1.272,1.03l0.034,0.42l0.101,0.613l0.1,1.063l0.369-0.064l1.072,0.195l0.57,0.741l-0.235,0.484l0.403-0.064 l0.602,0.129l-0.503,0.644l0.84,0.033l0.299,0.58l0.47,0.838l-0.168,0.742l0.74-0.09l0.487,0.193l0.219,1.004l-0.739,0.793 l0.487-0.016l0.235,0.565l0.033,0.438l0.772-0.73l0.218,0.21l-0.117,0.939l0.268,0.341l0.37-0.211l0.269,0.502l-0.253,0.549 l-0.689-0.178l-0.368,0.389l0.352,0.567l0.554,0.616l-0.033,0.5L503.985,234.671L503.985,234.671z M426.282,212.551 c-0.028,0.016,0.408-0.017,0.408-0.017l0.185-0.761l0.437-0.161l0.318,0.225l0.587,0.325h0.722l0.353-0.195l0.436,0.017 l0.503,0.324l0.136,0.519l-0.69,0.873l0.15,0.712l-0.536,0.713l0.017,1.196l0.202,0.355l0.503-0.242l0.337,0.242l0.671,0.034 l0.503-0.324l0.756,0.015l0.218-0.355l0.671-0.372l0.638,0.017l0.757-0.681l0.25-0.954l0.605-0.517l0.455-0.68l0.402-0.032 l0.42,0.403l0.671-0.469l0.452-0.275l0.556,0.082l0.336-1.148l-0.086-1.085l0.791-0.517l0.302-0.566l0.57-0.033l0.42,0.372 l0.437-0.455l0.521-0.209l0.453,0.227l0.117,0.712l-0.587,0.486l-0.386,0.485l0.722,0.436h1.31l0.621,0.228l0.203,0.631 l-0.554,0.825l-0.571,0.16l-0.049,1.053l0.57,0.259l0.37-0.242l0.621,0.032l0.285,0.26l0.554-0.113l0.268,0.55l0.824,0.049 l0.503,0.453h0.521l1.125,0.648l0.403-0.243l0.503-1.021l0.521-0.179l0.722-0.727l0.773-0.033l0.184-0.421l-0.569-0.259 l-0.438-0.55l0.553-0.178l0.288-0.518l-0.556-0.227l-0.352-0.695l-0.337,0.145l0.017,0.535l-0.351,0.243l-0.372-0.227 l-0.788-0.354l-0.05-0.567l-0.319,0.146l-0.604,0.631l-1.428-0.048l-0.604-0.486l0.806-0.468l0.604,0.016l0.672-0.486 l0.018-0.614l-0.287-0.26l-0.083-0.955l0.302-0.534v-0.453l-0.505-0.437v-0.598l-1.218-1.301l-1.139-0.451l-0.101-0.388 l-0.3-1.032h-0.637l-0.234-0.549l0.167-1.031l-0.302-0.645l-1.14-0.032l-1.507-0.549l-0.436-0.872l0.368-0.451l0.035-0.452 l-0.705-0.517l-0.199-0.612l-0.303-0.066l-0.838,0.967l-0.167,0.776l-0.501,0.419l-0.403-0.355l0.067-1.097l-0.403-0.838 l0.135-0.515l0.47,0.096h0.636l-0.234-0.582l0.167-0.71l-0.234-0.804l-0.805,0.192l0.034-0.581l0.67-0.837l-0.436-0.195 l-1.776,0.71l-0.905,0.742l-0.704,1.709l-0.837,1.193l-0.035,0.645l-0.569,0.744l-0.067,0.546l-0.905,1.419l0.336,0.613 l-0.503,0.259l-0.234,0.806l-0.068,0.708l-1.172,1l-0.402,0.742v1.225l-0.235,0.484l0.033,1.29l-0.535,0.549l-1.141,0.096 l-1.507,0.581v0.808l-0.468,1.515L426.282,212.551L426.282,212.551z M433.822,225.578c-0.032,0.033,0.202,0.259,0.202,0.259 l0.369-0.162l0.805-0.967l0.604-0.096l0.434,0.127l0.134,0.485l0.669,0.032l1.276-1.033l0.669-0.194l0.805-0.515l0.736-1.064 h0.772l1.072-0.744l0.033-0.613l0.737-0.836L442.803,220l-0.837,0.031l-0.403-0.258l-0.636-0.032l-0.704,0.354l-0.369-0.258 L439.386,220l-0.57,0.645l-0.736-0.354l-0.269-0.807l-0.335,0.192l-0.839,0.225l-0.971,1.162l-0.068,0.42l-0.367,0.452 l-1.642,0.419l-0.168,0.548l0.401,0.354l0.269,0.871l-0.269,0.645V225.578L433.822,225.578z M508.854,231.402l0.201,0.162 l0.722,0.032l0.806,0.729l0.419-0.259l0.151-0.598l0.251-0.341l0.051-0.438l-0.503-0.177l-0.621,0.274l-0.823,0.211 L508.854,231.402L508.854,231.402z M485.417,225.399l0.201,0.258l0.939,0.275l0.152,0.47l-0.066,0.243l0.083,0.582l0.571,0.276 l0.353,0.259l0.554-0.049l0.167-0.259l0.168-0.097l-0.034-0.533l-0.57-0.503l-0.604-0.273l-0.203-0.212l-0.821-0.453 l-0.622-0.032L485.417,225.399L485.417,225.399z M507.93,237.13l-0.856-0.63v-0.535l-0.386-0.323v-0.421l0.402-0.356l0.42,0.566 l0.135,0.405l0.403,0.5l0.084,0.665L507.93,237.13L507.93,237.13z M507.058,239.849l-0.336-0.324l-0.05-0.501l-0.437-0.323 l-0.486-0.098l-0.572-0.647v-0.471l0.387-0.079l0.437-0.243l1.377,0.21l0.89,0.502l0.052,0.356l-0.439,0.306l-0.083,0.502 l-0.335,0.292l-0.202,0.469L507.058,239.849L507.058,239.849z M483.923,253.345l-0.135,0.437l0.269-0.226L483.923,253.345 L483.923,253.345z M484.409,253.474l-0.217,0.455l0.234-0.018L484.409,253.474L484.409,253.474z M484.93,253.345l-0.251,0.47 l0.184,0.745l-0.033,0.373l0.302-0.083l0.101-0.775L484.93,253.345L484.93,253.345z M491.074,246.662l-0.134-0.534l0.285-0.745 l0.388-0.421l0.066-0.403l0.956-0.76l1.058-0.114l0.102,0.324l-0.083,0.467l0.233,0.147l-0.033,0.405l-0.687,0.486l-0.337,0.484 l-0.604,0.017l-0.855,0.647H491.074L491.074,246.662z M470.828,224.558l0.722,0.486l0.621,0.629l0.69,0.098l0.922,0.325 l-0.284-0.357l-0.74-0.356l-1.041-0.792l-0.571-0.113L470.828,224.558L470.828,224.558z M463.86,218.521l0.201,0.194h0.537 l0.32,0.275l0.419-0.195l0.084-0.291l0.286-0.081l0.1-0.422l-0.503-0.307l0.419-0.291v-0.228l-0.772-0.615l-0.688-0.064 l-0.084-0.291l-0.235-0.244l-0.436,0.048l-0.421-0.242l-0.621,0.194l-0.218,0.227l0.218,0.533l0.269,0.017l0.369,0.21 l0.269,0.455l0.42,0.467L463.86,218.521L463.86,218.521z M459.043,220.69l0.705-0.113l0.437-0.275l0.504-0.082l0.404-0.275 l-0.018-0.452l0.083-0.325l-0.05-1.149l-0.437-0.227l-0.957-0.08l-0.47-0.421l-0.572-0.567l-0.302,0.261l-0.806,0.047 l-0.418-0.226l-0.168,0.452l0.168,0.761l0.672,0.518l0.385,0.892l0.319,0.273l0.134,0.679L459.043,220.69L459.043,220.69z  M458.288,224.558c-0.034,0,0.134-0.308,0.134-0.308l-0.976-0.21l-0.2,0.127l0.236,0.325L458.288,224.558L458.288,224.558z  M447.928,231.452l0.251,0.016l0.252-0.356l0.117-0.339l0.319-0.422l0.069-0.388l-0.218-0.194l0.149-0.389l0.806-0.647 l0.537-0.729l0.489-0.112l0.183-0.212l-0.033-0.323l-0.099-0.519l0.419-0.436l0.387-0.568l-0.17-0.468l-0.016-0.534l-0.285-0.291 l-0.455,0.194h-0.402l-0.452-0.502l-0.32-0.128l-0.369,0.485l-0.874,0.809l-0.368,0.08l-0.539,0.518l-0.167,0.794l0.201,0.646 l-0.553,0.356l-0.236,0.517l0.101,0.777l-0.386,0.519l0.252,0.324l0.671,0.113l0.252,0.55l0.319,0.179L447.928,231.452 L447.928,231.452z M438.594,268.879l0.201,0.406l0.22-0.21l-0.137-0.261L438.594,268.879L438.594,268.879z M439.165,272.699 l0.604-0.744l0.202-0.697l0.268-0.063l-0.034,1.052l-0.671,0.485C439.534,272.731,439.182,272.715,439.165,272.699 L439.165,272.699z M433.709,271.534l0.42-0.906l0.636-0.016l0.269-0.26h0.32l0.653-0.388l0.419-0.325l-0.552,1.036l-1.194,0.777 l-0.737,0.259L433.709,271.534L433.709,271.534z M437.453,273.168l1.074-1.424l0.235-0.582l0.319-0.065l-0.067,0.567 l-1.176,1.344l-0.302,0.663l0.52-0.355l1.041-1.229l0.37-0.324l0.151-0.971l-0.369-0.405h-0.251v-0.632l-0.673-0.339 l-0.318,0.436l-0.404,1.231l-0.669,0.631l-0.706,0.453l0.168-0.582l0.739-0.647l0.268-0.777l-0.167-0.259l-0.588,0.42 l-0.555,1.067l-1.024,0.972l-0.133,0.469l-0.671,0.793l0.219,0.549l0.333-0.079l0.908-1.182l0.47-0.128l-0.234,0.565 l-0.604,0.922l0.302,0.098l0.621-0.372h0.485C436.763,273.994,437.435,273.134,437.453,273.168L437.453,273.168z M436.58,273.2 l0.135-0.663l1.242-1.214l-0.521,1.068l-0.553,0.728L436.58,273.2L436.58,273.2z M499.285,334.521l-0.37-0.048l-0.184-0.332 l0.328-0.163l0.201-0.533l0.697-0.552l0.034,0.115l0.059-0.227l-0.175-0.016l-0.806,0.639l-0.512,0.727l0.269,0.462l0.294,0.113 L499.285,334.521L499.285,334.521z M522.226,338.518l-0.226-0.51l0.209-0.607l-0.15-0.687l-0.269-0.591l0.285-0.381l0.319-0.308 l-0.05,0.315l0.302,0.349l-0.042,0.518l-0.302,0.274l0.018,0.406l0.268,0.25l0.176,0.364l-0.31,0.575L522.226,338.518 L522.226,338.518z M523.04,338.916l0.118-0.453l0.369-0.114l0.034,0.421l-0.303,0.421L523.04,338.916L523.04,338.916z  M532.082,307.479l0.361-0.825l0.562-0.429l-0.017,0.558l-0.246,0.591l-0.451,0.285 C532.292,307.659,532.065,307.489,532.082,307.479L532.082,307.479z M529.335,313.996l0.018,0.486l0.268,0.13l0.168-0.179 l0.303-0.017v-0.47l-0.321-0.081L529.335,313.996L529.335,313.996z M534.113,321.543l-0.193-0.924l-0.007-0.234l0.318,0.073 l0.193,0.244l0.219-0.155l0.41,0.276l0.075,0.363l-0.528,0.406C534.601,321.592,534.113,321.526,534.113,321.543L534.113,321.543 z M531.889,321.341l0.478,0.194l0.311-0.082l0.219-0.484l-0.067-0.26l0.176,0.048l0.126,0.486l-0.396,0.632l-0.68,0.306 l-0.386-0.259l0.042-0.365L531.889,321.341L531.889,321.341z M524.438,332.891l0.238-0.429l0.224,0.299l-0.195,0.215 L524.438,332.891L524.438,332.891z M534.205,330.258v0.325l0.453,0.195h0.722l0.118-0.31l-0.906-0.258L534.205,330.258 L534.205,330.258z M523.799,313.201l-0.423,0.487l-0.822,0.583l-0.487,0.26l0.134,0.226l-0.235,0.307l-0.369,0.081l-0.033,0.438 l0.386,0.211l-0.336,0.289l-0.588,0.049l-0.436,0.632l-0.033,0.339h0.234l0.269,0.146l-0.47,0.258l-0.521,0.081l-0.521,0.761 l-0.117,0.469l-0.974,1.392l-0.017,0.453l0.352,0.356v0.452l-0.302,0.05l-0.201-0.243l-0.268,0.065l-0.84,0.388l-0.319,0.582 l0.049,0.356l0.488,0.081l0.336,0.306l-0.303,0.245l-0.1,0.453l-0.521,0.387l-0.991-0.275l-0.219,0.26l-0.048,0.404l-0.539,0.534 l-0.47,0.907l-0.435,0.598l-0.287-0.017l-0.049-0.647l-0.287,0.615l-0.369-0.566l0.117-0.373l0.539-0.372l0.183-0.421 l-0.218,0.244l-0.653,0.453l-1.076,0.614l-0.453,1.084l0.336-0.015l0.655-0.195l1.292-0.144l1.025-0.033l-0.621,0.599 l-0.856,1.035l-0.539,0.842l-1.058,0.534l-0.873,0.762l-0.537,0.032l-0.186,0.454l0.201,0.468l-0.183,0.647l0.149,0.34 l0.504,0.063l0.908,0.276l1.024-0.146l0.636-0.486l0.772-0.096l0.606-0.502l0.167-0.355l0.084,0.275l-0.436,0.615l0.956,0.177 l0.706-0.259l0.318,0.438l1.208,0.063l0.739-0.194l0.151,0.309l0.336,0.356l0.822,0.047l0.285-0.113l0.168,0.259l0.538-0.017 l0.385-0.257l-0.016-0.276l0.722,0.032l0.251,0.245l0.387-0.05l0.286-0.324h0.437l0.436,0.212l0.168-0.39l-0.084-0.372 l0.05-0.664l0.252,0.259l0.302-0.502l0.319-0.097l-0.219,0.21l-0.235,0.859l0.168,0.193l0.202-0.437l0.503-0.518l0.202-0.047 v0.533l-0.302,0.469l0.033,0.34l0.571-0.129l0.234-0.065l-0.05,0.179l-0.908,0.55l-0.855,0.338l0.252,0.177l0.252-0.145 l0.521-0.032l0.168,0.26l0.521,0.015l0.218,0.259l0.336-0.242l0.537-0.13l0.285-0.615l-0.101-0.47l0.386,0.245l0.706,0.129 l0.369,0.387l0.503-0.113l0.455-0.273l0.62,0.08l-0.518,0.323l-0.053,0.291l-0.789,0.325l-0.771,0.086l-0.438,0.46l-0.051,0.34 l-0.251,0.114l-0.143,0.347l-0.561,0.007l-0.321,0.114l-0.201,0.31l-0.319,0.274l-0.806,0.194l-0.671,0.502l-0.117,0.339 l0.219,0.259l0.184,0.291h0.587l0.251-0.339l0.286-0.291l0.352,0.096l0.034,0.372l0.284,0.261l0.673-0.242l0.403-0.422 l0.268-0.502h0.201l0.185-0.485l0.117-0.567l0.336-0.114l0.791-0.856l0.386-0.227l0.384,0.276l0.604-0.049l-0.521,0.308 l0.487-0.049l0.402-0.275l0.353-1.003l0.438-0.873l-0.018-0.842l0.203-0.259l0.267,0.015l0.335,0.309l0.303,0.064l0.335,0.291 l0.102,0.875l-0.152,0.518l-0.133,0.63l0.233,0.422l-0.2,0.47l-0.688,0.55l-0.505,1.278l-0.031,0.583l-0.27,0.243l0.033,0.519 l0.438,0.145l0.67-0.388l0.623-1.148l0.333-0.034l0.64-0.729l0.335-0.469l0.133,0.273l0.74-0.015v0.307l-0.554,0.113 l-0.789,0.793l0.016,0.534l-0.185,0.599l0.203,0.291l0.101,0.793l0.453,0.389l0.132-0.599l0.404-0.42c0,0,0.336-0.017,0.42-0.017 c0.083,0,0.386,0.582,0.386,0.582l0.401,0.131l0.623-0.391v-0.437l0.269-0.047l0.168-0.438l-0.018-0.566l0.201-0.063l0.15-0.39 l-0.233-0.453l0.185-0.711l0.772-1.019l0.47-0.713l-0.051-1.294l-0.101-0.469l-0.251-0.016v0.323l-0.319,0.679l-0.638,0.406 l-0.554,0.614l-0.386,0.114l-0.287-0.55l0.119-0.631v-0.696l0.789-0.582l0.167-0.308l0.689-0.615h0.234l0.336-0.178l-0.185-0.436 l-0.403,0.338l-0.319,0.066l-0.571,0.291l-0.52,0.098l-0.571,0.501l-0.117,0.452l-0.925,0.698l-0.064,0.323l-0.454,0.306 l-0.638-0.533l-0.068-0.453l-0.218-0.518l-0.067-0.519l0.335,0.487l0.302-0.049l0.537-0.793l-0.351,0.081l-0.689-0.243 l0.455,0.032l0.72-0.066l-0.737-0.144l-0.369-0.324l0.015-0.485l0.252-0.163l0.791,0.032l0.234-0.178l0.688-0.55l0.302-0.745 h0.705l0.218,0.243l0.839-0.501l0.269-0.565v-0.632l-0.234-0.453l-0.588,0.614l-0.47,0.293l-0.135-0.293l-0.504-0.08 l-0.032,0.373l-0.084,0.582l-0.354,0.178l-0.367-0.017l-0.588,0.422l-0.438,0.258l-0.051,0.454l-0.318,0.145l0.15-0.372 l0.05-0.533l-0.302,0.291l-0.468-0.065l0.468-0.243l0.455-0.453l0.218-0.26l-0.335-0.193l0.386-0.323l0.268-0.631l-0.318-0.146 l-0.353,0.389l0.185-0.47l0.068-0.48l-0.295-0.097l-0.545,0.186l-0.864-0.13l0.848-0.023l0.234-0.209l0.789-0.152l0.604-0.275 l0.285-0.324l0.437-0.096l0.453-0.291l0.049-0.567l0.337-0.307l0.102-0.437l-0.554-0.307l-0.772-0.713l-0.757-0.066l-0.786,0.178 l-0.371-0.015l-0.033,0.437l-0.336,0.631l-0.168,0.712l-0.505,0.355l0.32-0.389l0.117-0.728l-0.201-0.275l0.219-0.436l0.32-0.616 l-0.287-0.064l-0.637,0.469l-0.319,0.47l-0.503,0.307l-0.269-0.258l-0.252,0.291l-0.488,0.178l-0.285-0.291l-0.604,0.388 l-0.133,0.856l-0.623,0.421l0.453-0.468l0.185-1.084l0.504-0.826l-0.201-0.112l-0.502,0.21l-0.235,0.438l-0.505,0.5l-0.168-0.308 l0.321-0.308l0.116-0.468l-0.084-0.178l-0.588,0.113l-0.756,0.662l-0.318-0.081l-0.252-0.694l-0.217-0.083l-0.69,0.552 l-0.352-0.066l-0.05-0.212l0.755-0.484l0.488-0.728l0.201-0.582l-0.302,0.065l-0.351,0.032l-0.64,0.485l0.337-0.551l0.72-0.583 l0.772-0.047l0.353-0.209l0.671-0.147l0.405-0.437l0.015-0.356l-0.251,0.128l-0.79,0.228l-0.47-0.146l-0.688-0.518l-0.371,0.08 l-0.367,0.259l0.351-0.762l0.253-0.225l-0.052-0.178l-0.488,0.112l-0.57,0.422l-0.369,0.55l-0.571,0.582l-0.453,0.276 l-0.168,0.485l-0.655,0.404l-0.504,0.535l-0.016-0.713l0.135-0.582l0.419-0.631l0.034-0.423l0.369-0.744l0.588-0.583l0.05-0.355 l0.419-0.39l0.286-0.289l0.402-0.747l0.539-0.355l0.351-0.502l0.453-0.146l0.118-0.292l-0.018-0.388l0.286-0.485l0.252-0.535 l-0.051,0.484l-0.117,0.389l0.253,0.373l0.535-0.84l0.858-0.828l0.233-0.468l-0.303-0.405h-0.317l-0.404,0.308l-0.135-0.63 l-0.285-0.259l0.218-0.404l0.47-0.113l0.671,0.145l0.671,0.373l0.369-0.18l0.319-0.485l0.034-1.116l-0.62,0.032l-0.521,0.212 l0.067,0.307l-0.403-0.016l0.052-0.454l-0.102-0.308l-0.402,0.243l-0.454,0.453h-0.571l-0.319,0.39l-0.554,0.405l-0.755-0.032 l-0.688,0.567l-0.823,0.582l-0.083,0.679l-0.47,0.098l-0.404-0.114l-0.1,0.146l0.235,0.276L523.799,313.201L523.799,313.201z  M493.945,321.439l0.488,0.065l1.762,1.262h1.309l0.925,0.211l0.688,0.518l0.637,0.082l0.856,0.357l1.091-0.357l0.118-0.52 l-0.521-0.468l-0.235-0.421l-0.486-0.387l-0.621-0.195l-0.738-0.842l-1.042-0.746l-0.402-0.064l-0.89-0.938l-1.108-0.404 l-1.227-0.098l-2.147-0.711l-0.825-0.341l-0.923,0.502l0.402,0.777l0.907,0.404l1.543,1.133l0.185,0.81L493.945,321.439 L493.945,321.439z M494.282,341.861l-1.091-0.485l-0.253-0.922l-2.097-0.244l-0.587-0.273l-0.084-0.501l-0.421-0.454l-0.37-0.017 l-0.335-0.549l-0.537-0.18v-0.68l-0.42-0.372l-0.504,0.098l-0.268-0.324l0.369-0.712l1.713-1.165l0.184,0.777l-0.585,0.567 l-0.019,0.323l0.353,0.454l0.017,0.76l0.722,0.387l0.136-0.565l0.687-0.016l1.175,0.891h0.505l0.437,0.403l1.343-0.032 l0.353-0.405l0.804,0.228l1.345,0.048l-0.404,0.292l-1.006,0.178l-0.285,0.825l0.133,0.55l-0.334,0.874L494.282,341.861 L494.282,341.861z M501.013,344.871l-0.336-0.63l-1.426-0.647l-0.1-1.214l-0.32-0.583l0.354-0.647l1.293-0.711l0.973-1.393 l0.437-0.437l0.453-0.938l1.091-0.824l0.403-0.697l0.688-0.113l0.083,0.373l-0.418,0.631l0.806,0.082l0.016,0.583l-1.007,1.666 l-0.621,0.55l0.956,0.323l0.37,0.649l-0.437,0.582l0.319,0.372l0.555-0.356l0.016-0.663l0.538-0.146l0.907,0.308l0.184,1.001 l0.236,0.374l-0.874,0.275l-0.469,0.372l-1.293,0.162l-1.427,1.019h-0.823l-0.343-0.469l-0.345,0.144l-0.176,0.827 L501.013,344.871L501.013,344.871z M428.976,290.807l0.066,0.938l0.234,0.292l0.217-0.422v-1.034l-0.268,0.162L428.976,290.807 L428.976,290.807z M428.772,300.888l0.318-0.695l0.672-0.146l0.318-0.275l0.235,0.711l-1.041,0.551L428.772,300.888 L428.772,300.888z M420.193,293.769l0.924-1.085l0.755,0.131l0.049-0.632l0.47-0.356h0.907l0.219,0.372l0.754-0.081l1.075,0.875 l0.201,0.938l0.235,0.404l-0.202,0.664l-2.182-0.421l-0.755-0.468l-0.823-0.034l-0.035,0.55l0.086,0.308l-0.505-0.454 l-0.083-0.42l-0.807,0.082L420.193,293.769L420.193,293.769z M229.828,297.389l1.006,0.741l0.838,1.16l-0.27,0.452l-1.339-1.161 L229.828,297.389L229.828,297.389z M228.166,295.374l-0.201-1.291l0.671-0.194L228.166,295.374L228.166,295.374z M223.059,291.1 l1.307,0.548l-0.066-0.678L223.059,291.1L223.059,291.1z M215.279,287.817l0.403,1.227l0.403,0.066l0.402,1.098l2.282,0.258 l-0.939,0.516l-1.142-0.064l-0.671,0.969l0.536,0.321l-0.499,1.085l0.268,0.29l1.072-0.355l0.134,0.838l1.006-0.064l0.033,0.872 l0.904,0.613l0.973-0.517l-1.24,1.387l0.57,1.096l0.67-0.226l0.102-0.806l1.207-0.321l-0.303,1.063l-0.771,0.677l0.068,0.743 l0.469-0.162l0.267,1.065l1.609-0.164l-0.102,0.742l0.604,0.098l0.335,0.838l-0.302,0.838l1.041,0.904l0.703-0.613l0.436,0.451 h0.837l-1.307,1.322l1.743,1.71l0.603,0.16l0.369,0.645l2.849,1.581l0.469-0.322l0.837,0.098l-0.637-2.291l0.168-1.161 l-0.336-0.708l0.202-1.744l-0.77-1.031l-2.112-1.387l-0.2-2.58l-1.106-1.612l-0.034-1.548l-0.502-0.516l-0.974-0.129 l-1.642-0.838h-0.938l-1.039-0.388l-0.402-0.774l-1.474-0.773l-0.67-0.774l-0.234-0.838l-1.073,0.065l-0.57-0.968l-0.835-0.194 l-0.37,0.323L215.279,287.817L215.279,287.817z M223.695,289.776l0.604-0.032l0.267-0.354l0.57,0.386l-0.703,0.613l-0.806,0.066 L223.695,289.776L223.695,289.776z M222.824,289.067l0.568-0.677l0.369,0.772L222.824,289.067L222.824,289.067z M217.511,269.33 v1.133l0.488-0.405L217.511,269.33L217.511,269.33z M219.947,278.569l-0.053-0.727l0.421-0.26l0.251,0.355l-0.335,0.616 L219.947,278.569L219.947,278.569z M219.741,281.359l-0.637,0.646l0.066,0.806l0.502,0.549l0.27-1.228L219.741,281.359 L219.741,281.359z M220.512,280.33l0.601-1.098l-0.367-0.387l-1.105,0.613l-0.203,0.872l0.402-0.068 C219.84,280.262,220.444,280.33,220.512,280.33L220.512,280.33z M221.383,279.426l1.105-1.516l0.705-0.032l0.67-0.774l1.273-0.42 l-0.132,0.483l-1.376,1.226l-0.703,0.098l-1.006,0.87L221.383,279.426L221.383,279.426z M220.679,274.619v-0.999l0.603-0.807 l0.302,0.903l-0.503,0.355v0.29L220.679,274.619L220.679,274.619z M218.735,274.362l1.072,0.484l0.369-0.517l-0.301-0.516 L218.735,274.362L218.735,274.362z M217.394,271.686l-0.133,1.645l0.57,0.386l0.032,0.646l0.537-0.839l-0.369-1L217.394,271.686 L217.394,271.686z M218.132,270.911l0.738,0.13l-0.234,0.579l0.032,0.678l0.705,0.127l0.906-0.87l-0.471,1.031l0.135,0.838 l0.938-0.967l0.168-2.095l-1.04-0.548l-0.938,0.225L218.132,270.911L218.132,270.911z M218.132,268.912l0.636,0.677l0.234-0.517 l-0.367-0.516L218.132,268.912L218.132,268.912z M219.845,267.47l0.369-1.036l0.957-0.518l0.454,0.064l-0.302,0.729l-0.89,0.324 L219.845,267.47L219.845,267.47z M214.211,264.88l1.909,2.162l0.705,1.29l-0.402,0.741l-0.703-0.289v-1l-1.375-1.453l-0.401-0.87 C213.943,265.46,214.143,264.848,214.211,264.88L214.211,264.88z M216.021,263.977l0.099,1.128l0.67,1.065l0.134,1.257 l0.938,0.741l0.137-1.417l-0.84-1.742l-0.436-1.193l-0.435-0.129L216.021,263.977L216.021,263.977z M214.378,262.752h1.342 l0.031,0.483h0.672l0.436-1.032l-0.805-0.614l-1.139,0.484L214.378,262.752L214.378,262.752z M204.593,263.3l-0.235-1.579 l1.443-2.322l1.473,0.418l-0.234,1.096l0.537-0.226l0.603-0.517l0.636,0.291l0.034,0.581l-0.1,1.031l-0.804,0.742l-1.744,0.645 l0.537,0.419l0.134,0.485l1.039-0.227l0.604-1.385l1.14-1.324l1.441-0.676l0.435,0.096l-1.675,1.807l-0.369,1.387l-0.838,0.967 l-0.101,1.483l-1.039,0.806h-0.838L206,268.04l0.771,0.033l0.57-0.322l1.039,0.127l0.1,1.066l-1.24-0.033l-0.57,1.096 l0.301,0.936l-0.167,1.257l0.502,1.516l0.27,1.13l0.67-0.032l0.402,0.547l-0.504,0.742l-1.204-0.259l-1.408-2.902l-0.135-1.257 l0.27-0.613l-1.073-0.195l-0.268-0.772l0.369-0.646l1.072,0.13l-0.838-0.902l-0.57-0.227l0.537-0.936l-0.703-0.772l0.133-0.485 l0.77,0.097l0.437,0.258l-0.034-0.774l-0.603-0.71l-0.771-0.16l-0.068-0.807L204.593,263.3L204.593,263.3z M215.785,258.654 l-0.167-0.901l0.705-0.42l0.035,0.838L215.785,258.654L215.785,258.654z M310.502,122.17l0.571,0.455l0.42-0.197l-0.017-0.403 l0.437-0.227l-1.024-0.113L310.502,122.17L310.502,122.17z M301.605,113.561l0.571,0.308l0.873-0.47l-0.016-0.987l-1.008,0.533 L301.605,113.561L301.605,113.561z M268.85,116.263l0.454,0.276l0.504-0.713l-0.403-0.129 C269.405,115.696,268.85,116.28,268.85,116.263L268.85,116.263z M268.699,117.8l-0.218-0.437l0.47-0.209l0.252,0.437 L268.699,117.8L268.699,117.8z M267.026,120.529l0.065,1.387l-0.535,0.741l0.168,0.807l0.904,0.033l0.637-0.519l0.803-0.062 l3.117-2.485l1.374-0.708l0.603-1.097l-0.57,0.289l-0.502-0.386l-0.201-1.549l-0.67,0.097l-0.57,1.095l-0.904,0.357l0.168,0.708 l-0.738-0.065l-0.334,0.291l-0.335,0.773l-0.437-0.773l0.369-0.453l-0.57-0.516l-0.569,0.678l-0.334-0.194l-0.437,0.967 L267.026,120.529L267.026,120.529z M263.674,123.271l0.3-0.805l0.034-1.807l-0.971,0.838l-0.168,0.807l-0.368,0.291l0.335,0.291 C262.836,122.886,263.573,123.239,263.674,123.271L263.674,123.271z M263.875,123.885l0.602-0.324l0.302-0.581l-0.436-0.965 l0.067-1.677l0.537-0.548l0.469,0.321l0.134-0.58l0.501-0.225l0.402,0.966l-0.133,2.161l-0.47,0.679l0.402,0.708l-1.24,0.613 L263.875,123.885L263.875,123.885z M265.316,128.431l0.502-0.773l-0.537-1.484v-1.386h-1.003l-1.208-1.129l-0.537,0.098v0.613 l1.709,1.384l-1.205-0.159v0.515l0.971,0.742L265.316,128.431L265.316,128.431z M254.917,112.202l0.687,1.02l0.588-0.179 l0.858,0.47l0.333-0.226l-0.955-1.248l-0.906-0.307L254.917,112.202L254.917,112.202z M235.53,303.41l-0.004-0.023l-0.705-0.13 l-0.302-1.514l0.873-1.806l0.268-1.129l-0.57,0.515l-1.072,0.354l-1.141,0.613l-0.837-1.159l0.035-0.904l0.502,0.096l0.334,0.742 l0.437,0.098l0.067-0.517l-0.436-0.74l-0.234-0.743h-0.669l-0.604,0.388l-0.972-0.453l-0.67-1.16l0.034-0.421l1.171-0.773 l0.503-1.064l0.604-0.581l-0.27-0.257L231,293.098h-1.005l-0.235-0.353l0.672-0.678l0.802-1.193l0.034-1.257l0.369-0.453v-0.547 l-0.569,0.161l-0.369,0.743l-0.122,1.561l-1.025,1.341l-0.57,0.097l-0.537-0.354l-0.505-0.18l-0.016-0.452l0.318-0.389v-0.403 l-0.755,0.468l-0.42,0.551l-0.285,0.015l-0.236-0.5l-0.503,0.129l-0.488,0.388l-0.636-0.339l-0.018-0.323l0.654-0.697 l0.757-0.048l1.103-0.284l1.207-0.839l0.436-0.838l-0.034-0.936l-0.134,0.774l-0.838,0.549l-0.536,0.934l-0.503,0.323 l-1.273-0.418l-0.268-0.645l-0.804-0.066v-0.322l0.669-0.257l-0.369-0.323l-1.173,0.226l-0.736-0.387l-0.637,0.063l-0.168,0.677 l-1.072-0.709l-0.435-0.871l0.334-0.323l0.57,0.421l1.072,0.257l1.072-0.193l0.068-0.454l-0.503,0.066l-1.241-0.034l-0.301-0.224 l0.168-0.226l0.804,0.193l0.905-0.193l0.134-0.386l-1.173,0.03l-0.604-0.354l-1.005,0.226h-0.637l-0.436-0.354l0.201-0.774 l0.838-0.194l0.57,0.388l0.904,0.066l0.537-0.485h-0.906l-0.67-0.355l-1.105-0.032l0.1-0.323l1.308-0.322l0.502,0.226l0.57-0.162 l-0.167-0.419v-0.451l0.536-0.483h1.172l0.804,0.16l0.268-0.258l-1.441-0.193l-0.436-0.451l-0.436-0.129l-0.468,0.71 l-0.838,0.386l-0.603,0.42l-0.301-0.259l0.066-0.645l-0.134-0.645l0.335-0.71l1.172-0.547l0.503-0.612l2.146-1.516l0.667-0.324 l0.37,0.548l0.035,1.226l0.502,0.709l0.302-0.226l-0.302-1.096v-1.291l0.871-0.355h1.038l-0.837-0.257h-1.072l-0.637,0.193 l-0.438-0.515l0.237-0.581l0.937-0.355l0.939-0.646l0.703-1.128l-0.234-0.645l-0.303,0.162l-0.233,0.774l-0.771,0.677 l-0.939,0.066l-0.871,1.127l-1.306,0.937l-1.308,0.45l-0.636-0.773l0.2-0.419l0.739-0.194l-0.705-0.161l-1.307,0.451 l-0.469-0.418l0.202-0.419l1.14-0.742l0.77-0.354l0.771,0.128l0.301-0.354l0.033-0.42l-0.535-0.386l0.168-0.356l0.435-0.388 l-0.369-0.354l-0.738,0.387h-0.436l-0.334-0.709l-0.135-1.871l-0.435-0.612l-0.068-0.71l0.335-0.645l1.173,0.097l0.872,0.387 l1.14-0.064l1.005,0.484l-0.336-0.484l-0.737-0.226h-0.871l-0.637-0.645l-0.771-0.581l-0.033-0.419l0.57-0.903l0.503-0.194 l0.434-0.806l-0.066-0.934l-0.368,0.096l-0.839,0.967l-0.803,0.548l-1.407,0.421l-0.705,0.708l-0.167,0.678l-0.536-0.13 l-0.671-1.291l-0.4-1.321l0.201-2.291l0.334-1.451l-0.134-0.581l-0.805-0.096l-0.033-1.257l0.669-0.419l0.437,0.387l0.502,0.193 l-0.199-0.936l0.904-0.708l0.469-1.193l0.737-0.161l1.006,0.161l0.503-0.419l-0.604-0.066l-0.1-0.29l1.273-1.386l0.502-0.774 l1.273-0.711l0.102-0.417l-0.604-0.13l-0.168-0.45l-1.14,0.902l-0.168,0.968l-1.541,1.675h-0.301l0.1-0.612l0.972-1.257 l0.168-1.451l1.207-2.194l0.434-0.968l-0.257-0.124l0.052-0.276v-0.696l0.32-0.145l-0.033-0.42l0.199-0.357l-0.199-0.485 l-0.488-0.227l-0.05-0.889l-0.471-0.875l-0.99-0.664l-0.605-0.438l-0.201-0.597l-0.873-1.133l-0.638-0.242l-0.788-0.017 l-0.017-0.325l0.302-0.436l-0.118-0.647l-0.42-0.372l-0.202-0.518l0.521-0.439l0.318-0.111l-0.118-0.388l-0.536-0.341 l-0.488-0.016v-0.517l0.757-0.503l-0.165-3.273l0.033-3.162l0.336-2.58l-0.27-0.774l-0.1-0.806l0.435-0.838l-0.134-0.807 l-0.436-0.709l-0.167-1.613l-1.039-1.128l-0.334-1.645l0.234-0.773l-0.972-2.58l0.202-0.615l0.703-1.192l-0.234-0.678 l-0.033-0.84l-0.972-0.74l-1.408,0.096l-1.607,0.452l-0.369,0.227l-1.676,0.516l-1.039,1l-1.308,1.871l-1.105,0.58l-1.542,0.194 l-1.776,0.291l-0.335,0.064l0.033-0.709l0.838-1.194l-0.469-1.161l-1.341-5.128l-0.837-2.321l-0.369-1.097l0.972-1.967 l-2.312-0.291l-1.777,0.936l-0.972-0.483l-3.05-0.032l53.897-94.628l0.221,0.58h0.536l2.614,1.837l0.803,0.034l0.839,0.708 l0.334,0.645l0.369-0.031l0.904,0.676v0.775l1.041,1.062l-0.202,0.516l0.134,0.292l-0.436,0.998l0.369,0.937l0.436,0.193 l0.336-0.419l0.267,0.163l0.033,1.386l0.335,1.322l1.542,1.548l0.803,0.613l0.335-0.259l0.604,0.354l0.133,0.743l0.603,0.29 l0.235-0.064l0.973,1.354l0.1,1.16l0.537,0.227l0.402,0.709l0.669,0.032l1.04,1.354v0.58l0.468,0.226l-0.166,0.679l-0.904,1.031 l-0.57,0.806l1.943-1.612l0.703-0.355l0.437,0.162l0.235-1.194l-0.167-2.482l0.099-1.453l0.503-0.837l1.541-0.484l1.207-0.644 l0.738-0.646l0.87-0.225l0.437-0.581l0.637-0.096l0.67-0.323h1.071l0.234,0.128h0.939l0.401,0.323l1.174-1.257l0.435-0.968 l0.604-0.097l0.805,0.193l0.502-0.323l-0.134-0.354l0.671-0.031l0.436,0.484l2.645-0.227l2.179-0.676l0.806-0.516l0.434-0.033 l0.47,0.71l0.604-0.323l0.335-0.905l1.54-0.644h0.973l0.267,0.354h0.471l0.233,0.483l0.771-0.162l0.034-0.613l0.3-0.451 l0.671,0.388v0.838l0.469,0.419l-0.369,0.418h-0.436l-0.234,0.839l-2.078,0.549l-1.81,0.515l-0.604,0.774l-1.105,0.29 l-0.737-0.096l-0.67,0.483h-0.468l-0.335-0.613l-1.441,0.647l-1.408-0.066l-0.267,0.323l-1.642-0.129l-1.006,0.388l-0.703,1.033 l-2.144,0.902l-0.134-0.388l-1.107,0.774l-0.167,0.645l-0.703,0.323l-0.469-0.453l-0.873,0.709l-0.569,0.871l-0.638,0.033 l-0.469,0.743l0.805,0.998l0.906,0.452l-0.927-1.033l0.134-0.323l0.873,0.258l0.47-0.323l0.805,0.258l-0.334-0.775l1.14-1.162 l1.544-0.388h0.872l2.416-1.486l0.202-0.711l0.739-0.195l0.604,0.648l0.604-0.454l0.671-0.128l0.134,0.387l1.41-0.904 l0.335,0.517l-1.141,1.421l0.134,0.709l1.007-1.549l1.475-0.323l2.686-1.939h1.41l1.073-0.646l1.679-0.065l0.806-0.451h0.806 l-0.269,0.904l-1.208,0.387v0.711l0.74,0.516l1.14-1.228l2.149-0.968l0.469,0.065l-0.067-0.582l0.873-0.646l0.737,0.324 l0.068-0.711l0.268-0.516l0.605,0.582l0.737,0.193l0.202-1.356l-0.402-0.969l0.47-0.518l-0.539-0.58l0.806-1.163l1.345-0.517 v1.163l0.266,3.423l-0.536,0.968l0.134,2.777l-0.807,1.617l-0.065,4.004l0.401,1.098l1.007,0.323l0.604,1.292l1.477-0.774 l-0.47-0.647h-0.873l-0.269-0.58l0.873-0.517l0.872,0.323l0.269-0.969l-0.537-0.194l0.938-0.775l1.208,0.063l0.136,0.711 l0.738-0.646l-0.941-1.681l0.874,0.13l1.744-1.033v-0.709l1.075-0.26l0.2,1.04l-0.033,0.645l-0.872,0.807l0.12,0.475 l-0.908,0.729l-0.117,0.535l0.353,0.356l0.687-0.195l0.236,0.486l-0.219,0.355l-0.704,0.324l-0.823,0.809l-0.554-0.08 l-0.318,0.433l-0.673,0.839l0.539,0.518l1.341,0.193l0.739,0.516l0.872-0.063l0.806-0.709l0.939-0.194l0.94-1.615l1.074-1.034 l1.007-0.323l0.603,0.516l0.94,0.129l0.739,0.582l0.805,0.064l1.141,0.84h0.807v0.841l0.805,2.131v1.163l1.073,1.549l3.759,2.262 l0.269,0.838l1.284,0.599l1.374,1.418h0.47l0.938,0.613l0.334,0.774l0.571,0.354l0.468-0.418l0.302,0.547l1.374,0.87h0.772v0.872 l0.635,0.806l0.336-0.806l-0.402-0.549l0.201-0.482l-0.837-0.679v-0.483l1.34,0.677l0.302,0.678l0.401-0.034l0.269-0.676 l0.369-0.096l1.24,1.161l0.2,0.613l0.604,0.257l0.502,1.129l0.469,0.773l0.101,1.097l0.436,1.032l-0.436,0.872l-0.101,0.998 l-0.838,0.904l-2.043-0.708l-1.139-0.096l0.034,0.353l-0.402,0.292l-1.174-0.453l-0.771-0.032l0.234,0.678l-0.771,0.516 l-0.099,0.936l-0.973-0.096l-0.837,0.289l0.335,0.452l0.904,0.387l0.268,1l0.771,0.612l0.57-0.354l1.072,0.837l0.067,0.776h1.273 l1.441,0.838l1.542,0.096l1.943,0.838l1.173,0.065v-0.485l0.469-0.064l0.837,0.452l-0.066,0.71l1.339-1.033l0.471,0.516 l0.568-0.064l0.638-0.71l0.401,0.032l-0.033,0.421l0.502,0.192l1.476-0.743l2.546-0.902l0.771-0.159l-0.033,0.838l-0.235,0.451 v0.324l0.436,0.032l0.067,0.935l-0.134,0.677l0.233,0.484l0.302,0.193l0.537-0.549l0.57,0.483l-0.134,0.775l-0.604,1.419 l0.201,0.937l0.269,0.193l0.669-0.646l0.134-1.097l0.335-0.547h0.269l-0.1,1.192l-0.638,1.452l-0.669,0.967l-0.067,1.581 l0.637,0.967l0.033,1.548l-0.335,1.096l0.971,0.678v0.548l-0.402,0.742l0.402,0.45l0.503,1.323l0.167,2.773l0.066-2.773 l-0.501-2.193l0.269-1.934l1.072-1.871l0.637,0.032v0.806l-0.336,0.129l-0.134,0.708l0.335,0.229l0.603-0.388l0.235,0.354 l0.402-0.42v-0.902l-0.537-0.807l-0.033-0.516l0.873-0.225l0.234-0.452l-0.839-0.646l0.068-0.613l0.436-1.676l0.803-2.259 l-0.201-0.74v-0.708l0.604-0.452l1.307-0.131l0.066-0.289l0.403-0.517l0.638-0.096l0.401,0.452l0.668-0.291l0.572-0.742 l0.435-0.031v0.611l0.469-0.225l1.005-0.162l0.469-0.871h0.537l0.3,0.677l0.436,0.097l0.234,1.129l-0.033-1.129l-0.302-0.967 l0.737-1.354l0.637-0.032l0.437,0.322l0.77-0.032l0.504-0.323l0.57,0.42l1.038-1.097l-0.336-0.581l0.604-0.613l-0.838-0.064 l-0.101-0.259l-0.703,0.034l-1.877,0.644l-0.537-0.065l-0.267,0.613l-0.805,0.066v0.546l-0.201,0.454l-0.771-0.904l0.1-0.709 l-0.536,0.419l-0.201,0.774l-0.636,0.258l-0.872-0.549h-0.703l-0.136-0.419l-0.602,0.162l-0.101,0.514l0.636,0.615v0.515 l-0.971,0.292l-0.269-0.419l-1.241-0.162l-0.166-0.451l0.569-0.484l0.268-0.806l-0.37-0.032l-0.534,0.322l-0.705-0.354 l0.369-0.71l0.836-0.483l1.173-1.612h0.839l1.004,0.258l3.385-0.128l2.379-0.709l0.638,0.128l1.172-0.389l0.437,0.647 l0.569,0.483l0.435,0.032l0.27,0.71l-0.168,1.806l-0.236,0.58l0.437,0.258l-0.136,0.354l-0.736,0.452l0.1,0.324l0.335,0.256 l0.236,1.743l0.703,0.032l0.571,0.257v0.453l-0.738,0.515l-0.066,0.677l-0.369,0.581l0.904-0.032l0.838,0.355l0.167,0.324 l0.369-0.098l0.636,0.676l0.973,0.032l0.803-0.45l0.335,0.194l-0.067,0.613l0.235,0.257l0.437-0.161l0.468,0.549l-0.233,0.419 v0.548l0.4,0.162l0.167,0.547l1.273,1.162v0.645l1.007-0.678l0.334,0.258l0.135,0.774l0.234,0.098l0.971,0.774l1.041-0.517 l1.541,0.065l0.468-0.71l1.241-0.646h0.268l0.269,0.516l1.81-0.095l1.542,1.16l0.704,0.194l0.704,0.645l0.403-0.322l1.673-0.354 l0.605,0.773l0.468-0.289l-0.134-0.968l-0.703-0.774l-0.268-1.225l0.333-0.387l0.537,0.098l0.502,1.451l0.234,1.16l1.273,1.483 l0.638,0.483l0.301,1l0.069-1.838l-0.469-0.613l-1.275-0.516l-0.302-1.29l-0.468-1.773l0.234-0.613l0.368,0.098l0.034,0.579 l0.369,0.354l0.502-0.387v-0.612l-0.401-0.742l0.303-0.483l-0.27-0.484l0.168-0.547l0.704,0.032l0.503,0.676l-0.035,0.581 l0.402,0.226l0.168-0.355l0.94-0.515l0.335-0.902h0.803l0.435,0.741l-0.3,0.515v0.517l0.233-0.58l0.469-0.128l0.705,0.581 l-0.135,1l-0.301,0.581l0.536,0.612l0.737-0.192l0.604,0.321l-0.234,0.71l-1.074,0.418l-0.168,0.355l0.637,0.257l1.038-0.676 l0.572-0.904l1.139-0.29l0.938,0.097l-0.033,0.354l-0.636,0.193l-0.572,0.483l-0.099,1.065l-1.375,0.806l-0.099,0.548 l-1.342,1.195v0.58l-0.368,0.483l-0.201-0.742l-0.571,0.806l-0.367,1.483l0.099,0.518l0.738-0.356l0.537-0.032l-0.036,0.808 l-0.972,0.645l-0.064,0.515l1.237-0.354l0.638-0.582l0.671,0.065l-0.604,0.936l-0.636,0.451l0.569,0.162l0.738-0.292 l-0.403,1.128l-0.1,0.71l-0.638,0.516l-1.004-0.387l-0.435-0.806l-1.107,0.515l-0.403-1.226L400.667,176l-0.3,1.226l0.603,0.871 l0.37,1.161l-0.336,1.935l0.805-1.773l-0.268-1.387l0.57-0.485l0.568,0.55l1.006,0.064l0.771,0.55l0.637-0.517l0.099-1 l1.208-0.354l0.806-0.872l0.902-0.032l0.637-0.806l-0.769,0.516l-0.904-0.129l-0.438,0.646l-0.602,0.257l-0.315,0.01l0.437-1.002 l0.587-0.454l-0.341-0.554l0.034-0.611l0.535-1.291l-0.066-0.646l-0.469-0.516l0.301-0.387l0.77-1.13l0.337-1.127l0.937-0.743 l0.268,0.355l-0.234,0.388l0.537-0.162l0.503-0.709l0.233,0.418l0.37,0.033l0.268,0.452l0.838-0.162l0.537-0.741l2.111-0.839 l0.435-0.774l-0.034-0.452l0.57-0.161l0.872-0.904l1.306-0.129l0.636-0.709l-0.067-0.549l0.234-1.16l0.637-1.064l0.168-0.808 l-0.335-0.419l-0.536,0.389l-0.737,0.128l0.168,0.355l-0.436,0.742l-0.871,0.162l-0.471-0.357h-0.604l-0.2-0.321l0.637-1.162 h0.568l0.537-0.644l1.207-0.517l0.067-0.579l-0.502-0.42l0.804-0.968l1.038-0.192l1.041,0.289l-0.771,0.483l-0.132,0.905 l0.3,0.192l0.939-0.451l0.803-1.678l0.034-0.708l-0.972-0.228l-0.805,0.033l-0.57-0.417l-1.307-0.291l-0.47-1.258l0.203-0.999 l-0.672,0.936h-0.502l-0.469-0.808l-0.839-0.485l-0.234-0.998l-0.402-0.194l-0.669,0.096l-0.201-0.709l-0.301-0.387l0.436-0.741 l-0.033-0.71l-0.369-0.838l0.133-2.159l0.641-0.732l1.545-1.327l0.906-0.34l0.757,0.032l0.084-0.34l0.737-0.565l0.084-0.533 l-0.504,0.015l-0.737,0.454l-0.47-0.21l0.007-0.55l-0.334-0.934l0.133-0.936l1.174-1.258l0.737-1.581l0.569-0.225l0.638-1.162 l0.603-0.032l0.67-1l1.105-0.452l0.636,0.517l-0.335,0.967l0.503,0.483l-0.201,0.646l0.938-0.483l0.135-0.581l1.072-1.548v-0.387 l-0.736-0.098l-0.771-0.321l-0.604-0.806l0.805-0.712h1.24l0.336-0.513l1.273-0.809l-0.034-0.741l0.67-0.323l1.039,0.355 l1.508,0.322l0.101,0.839l-0.201,0.387l0.57,0.226l0.736,0.71l0.705,0.45l-0.335,0.871l-0.436,0.194l0.167,0.774l-0.134,0.676 l0.771,0.711l0.268,0.708l-0.168,1.548l0.569,0.387v0.419l-0.669,0.871l-0.034,0.678l-0.705,1.032l-0.033,1.129l-0.468,0.291 l0.435,0.805l-0.336,0.872l0.939,1.063v0.71l-0.269,0.321l0.269,0.774l-0.269,0.808v0.611l0.603,0.162l0.604,0.806l-0.1,0.742 l-0.67,0.581l-0.57-0.291l-0.803,0.162l-0.47-0.838l0.302-0.967l-1.074,0.452l-0.433,0.936l-0.806,0.322v0.387l1.174-0.291 l0.602,0.58l-0.134,0.452l-2.479,1.677l-0.638,0.096l-0.134,0.485l-0.569,0.258l-0.235,0.871l0.468,0.484l0.906-0.227l0.57,0.195 l0.099,0.838l0.839,0.806l1.172-0.355l0.168-0.676l0.704-0.162l0.302,0.354l-0.438,0.355v0.258l0.805,0.289l0.57,0.581 l0.837-0.613l0.638,0.355l-0.604,0.645l-0.871,0.032l-0.937,1.033l-0.335,0.29l-0.202-1.063l-0.436,0.032l-0.369-0.194v0.452 l0.503,0.806v0.677l0.855,1.312l-0.133,1.068l0.15,0.193l-0.101,0.892l-0.638,0.372l-0.051,0.858l-0.135,0.906l-0.889,1.068 l0.234,0.486l0.068,0.938l-0.571,0.257l0.084,0.599l0.554-0.016l0.738-0.806l0.336-0.614l1.172-0.58l0.202-0.387l-0.167-0.259 l0.537-0.613l0.535,0.42l0.436-0.42v-1.546l0.201-0.872l1.172-0.934l1.073-1.581l0.335-0.904l0.403-0.065l0.401,0.386 l0.168,0.807l0.705,1.516l0.167,1.162l0.837,1v0.968l-0.333,0.837l0.301,1.806l-0.569,0.903l-0.671,0.29l-0.537-0.452 l-0.535,0.452l-0.402,0.774l0.236,0.936l-0.672,0.806l-0.401,1.097l0.3,0.579l0.036,1.484l0.737,3.095l0.702,1.291l-0.268,0.871 l0.705,0.677h0.67l-0.167-1.096l-0.303-0.322l0.671-0.646l0.569-0.064l0.47,1.063l0.468-0.096l0.204-1l0.669-0.71l0.133-1.387 l0.736-0.322l0.873-1.161l0.333-0.064l0.503-0.774l1.642-1.163l1.105-1.806l0.805-1.902l0.771-1.58l0.871-0.613l0.672,0.936 l0.568-0.516l0.502,0.355l0.872-0.13l0.033-0.515l-0.501-0.033l-0.771-0.742l0.367-0.516l0.972-0.13l0.503,0.421l0.403-0.323 l0.669,0.064l0.369-0.258l-0.435-0.837l-0.402-0.065l-0.437-0.774l-0.502-0.033l0.067-1.322l0.536-0.58l0.101-0.806l0.636-0.034 l-0.469-0.708l0.1-0.581l0.669-0.677l-0.301-0.323l-0.035-0.257h0.873l0.3-0.806l-0.704-0.389l-0.234-0.45l0.938,0.129 l0.402,0.645l0.705,0.065l0.602-0.389l1.441,0.097l1.274,0.904l0.101,0.452l0.401,0.548l1.743,0.839l0.806-0.518l0.905,0.613 l1.138,0.452v0.483l-0.468,0.291l0.536,0.581l-0.569,0.289l-0.637-0.58l-0.636-0.066l0.099,0.484l1.945,1.193l0.1,0.936 l-0.771,0.291l0.47,0.257l0.805-0.257l1.376,0.309l0.285,0.535l0.521,0.178l0.151,0.389l-0.571,0.873l-1.446,1.085l-0.872,0.161 l-0.654,0.308l1.259,0.017l0.452,0.273l0.1,0.676l0.335-0.033l0.302,0.258l-0.569,0.872l0.335,0.323l-1.105,0.708l-1.273,0.42 l-0.671-0.13l-0.437,0.548l-0.702-0.225l-0.736-0.837l-0.839-0.033l-0.268-0.451l-0.57,0.063l-0.033,0.709l-0.402,0.26 l0.771,0.161l0.57,0.452l-0.268,0.612l-0.538,0.549l0.771,0.064l-0.536,0.774l0.068,0.548l0.301,0.065l0.568-0.549l0.304,0.034 l-0.236,0.645l-1.1,0.429l-0.419,0.809l0.177,0.955l1.074,0.774l-0.168,0.612l1.005,1.903l-0.135,1.096l-0.336,0.225 l-0.132,0.645l-1.24,1.033l0.234,0.806l-0.435,0.582l-0.805-0.323l-1.441,0.032l-0.637,0.42l-0.233,1.031l-0.905,0.516 l-0.437,0.581l-0.736,0.032l-1.308,1.355l-0.469-0.161l-0.771,0.032l-0.467,0.871l-2.247,0.613l-0.435-0.386l0.336-0.549 l-0.303-1.065l-0.636-0.676v-0.484l0.537-0.193l0.034-0.71l0.736-1.225l-0.971,0.903l-0.336,0.096l-0.1-1.871l-0.435-0.161 l-0.538-0.839l-0.871,0.484l-0.302-0.289l-0.803,0.064l-0.839,1.225l0.438,0.097l1.205-0.773l0.47,0.226l-0.067,0.774 l0.805,0.355l0.569,1.355l-0.235,1.289l0.437,0.258l0.2,1.227l-0.368,0.547l0.303,0.323l-0.068,0.709l-0.469,0.033l-1.475-1.227 l-0.134-0.742l-0.636-0.226l-0.201-0.708l-0.537,0.742l0.873,0.773l-0.202,0.743l-1.071-0.581l-0.705-0.162l-0.167-0.419 l-0.636,0.291l-0.034-0.614l0.435-1.289l0.201-0.226l-0.501-0.226l-0.036-0.419l-1.34,0.517h-1.071l-0.771-0.548l-0.771,0.128 l-1.004-0.645l-0.168,0.677l0.269,0.549l-0.436,0.291l0.067,0.87l0.436,0.645l1.139,0.195l0.502,0.805l-0.736,1.225l-0.604,0.195 l-2.177,1.515l-0.938,1.161L432,196.221l-0.669-0.259l-0.704,0.451l-0.369,1.065l-0.837,0.321l-2.915-0.612l-0.638-0.87 l-0.401-0.968l-1.443-0.613l0.034-0.418l0.469-0.032l0.369-0.292l-0.469-0.482l-0.873-0.227l-0.97-1.773l-1.14-0.872h-1.877 l-1.34-0.774l-2.145-0.128l-0.838-0.258l-0.031,0.613l0.568,0.613l0.334-0.42l0.57-0.097l2.08,0.709l1.91-0.033l0.603,0.389 l-0.202,0.516l-0.367-0.032l-0.302,0.354l0.269,0.258l0.132,1.484l0.402,0.032l1.006,1.902l0.603,1.322l1.708,0.549l1.811,0.321 l3.317,0.904l0.135,0.968l-0.403,0.322l-1.039,0.742l-0.838,0.419l-1.341,1.71l-0.201-0.356l-0.402,0.29l-0.135,0.549 l-2.948,2.935l-1.206,0.549l-0.806,1.353l-0.803,0.163l-0.437-0.323h-0.535l-0.201,0.483l-1.14-1.29l-0.704-0.291l-0.537,0.647 l-0.234-0.615l-0.37-0.159l0.671-0.873l-0.302-0.226l-0.2-0.45l-0.906,0.482l-0.703,1.774l-0.067-0.807l-0.503-1.418 l-0.401,1.259l0.468,0.547l-0.102,1.677l-1.104,1.483l-0.603-0.161l-0.203-0.549l-0.669-1.063l-0.234,0.806l0.637,0.483 l-0.939,0.484l-0.1,0.968l-0.335-0.323l-1.005-0.321l-0.134-0.646l-0.77-0.484l-0.906-1.162l-1.841-0.644l-1.742-0.969 l-0.571-1.322l-0.736-0.257l-1.273-0.937l-0.436-0.709l-0.068,1.322l-0.804-0.194l0.503,1.292l0.805,0.677l0.303-0.355 l-0.369-0.646l0.166-0.387l0.369,0.032l1.877,1.869l1.675,1.002l0.168,0.387l-1.106,0.708l-1.106,0.161l-0.604-0.161l0.204,0.548 v0.29l0.468-0.225l1.81-0.129l0.971-0.935l0.436-0.099l0.57,0.646l0.201,1.129l1.744,1.966l-0.167,2.031l-1.207,1.227 l-0.771,0.064l-0.536,0.419l-1.073-0.064l-0.771-0.515l-2.076-0.387l-1.206-1.516l-0.436-1.451l-0.672-0.613l-0.234,0.354 l0.134,0.581l-0.034,0.872l0.806,0.968l0.669,1.837l0.939,1.547l-0.536,0.451l-0.537-0.256l-0.871,0.129l-0.301-1.162 l-0.169,0.581l-0.367,0.258l0.302,0.55l0.77,0.321l0.268,0.549l-1.643-0.388l-0.4-0.323l-0.067,0.774l0.536,0.451v0.676 l-0.705,0.872l-0.167-1.032l-0.569-0.098l0.301,0.388l-0.168,0.677l-0.3-0.225l-1.139-0.065l-0.438,0.548l-1.372,0.516 l0.736,0.451l0.167,0.645l-0.403,0.161l-0.167-0.387l-1.039-0.741l-0.738-0.129l-0.066,0.548l-0.468,0.257l1.139,0.808 l-0.401,0.483v0.485l-0.906-0.034l-0.736,1.162l-1.14,0.58l0.47,0.581l-0.235,0.516h-0.604l-0.535,0.677l0.166,0.743 l-0.803,0.323l-1.362,1.471l-1.007,0.258l-0.067,0.775l-0.938,0.84l-1.009-0.647l-0.064,0.518l0.469,1.034l-0.873,0.84 l-0.335,1.615l-0.537,0.837l-0.403,1.163l-0.738,0.389l-0.674,1.806l0.367,0.387v1.291l-0.837,1.387l-0.302,0.774l-0.837,0.257 l-0.4,0.419l0.97,0.193l0.234,0.679l-0.267,0.804l0.468,0.55l-0.033,1.161l0.369,0.192l-0.873,2.098l-1.205,1.13l-2.513,0.546 l-0.369,0.903l1.24-1l2.143-0.259l1.609-1.901l1.174-2.226l2.679-0.098l0.805,0.355v0.838l-0.368,0.968v1.064l0.535,1.193v1.808 l-0.703,1.74l0.569,0.774l0.334,1.742l-0.368,0.904l-2.848,2.61l-1.374,0.452l-1.006-0.16l1.039,0.418l1.374,0.032l3.318-1.031 l3.351-1.063l1.642-0.163l2.111,1.323l1.374,1.192l2.011,0.582l0.535,0.451l0.906,0.225l1.474,1.451l0.704,0.29l0.738,1.322 l0.804,0.484v0.773l0.602,0.646l0.638,1.517l-0.033,0.419l0.637-0.259l0.435,0.484l1.91,1.225l0.669,0.161l1.375,0.935 l0.703,0.228l1.575,1.354l0.168,0.646l1.171,1.095l-0.167,0.42l0.301,0.291l1.474,0.032l0.436,0.161l1.041-0.227l1.976,0.066 l0.469,0.419h0.369l1.44,0.419l1.577,0.291l1.138-0.354h0.671l-0.035,0.322l0.303-0.163h0.469l0.168,1.325l-1.208,2.191 l-0.066,0.774l-0.637,0.838l-0.671,1.195l0.17,0.999l0.3,0.259l0.067,1.934l-1.207,1.806v0.773l-0.369,1.161l-0.904,0.743 l-0.502,1.773l0.402,0.742l0.938,0.708v1.097l0.703,0.354l0.537,0.742l-0.201,0.742l0.135,0.387l-0.068,0.645l0.873,0.322 l1.104,0.549h0.235l0.134,0.613l0.568,0.74l0.17,1.42l0.234,0.58l-0.369,1.258l-1.776,1.516l1.339-0.645l1.14-0.808l1.24,0.42 l0.805,0.741l0.771,0.065l0.268-0.741v-0.775l1.576-1.869l0.367-0.034l-0.2,0.743l0.134,0.483l0.537,0.129l0.334,1.581 l-0.168,1.225l1.074,0.806l1.576,0.162l-0.873-0.388l-0.904-0.967l-0.168-1.064l0.201-1.386l0.47-0.615l-0.47-0.546l-0.066-0.871 l0.367,0.192l0.504-0.161l0.436-1.29l1.105-1.033l-0.333-0.354l-0.135-1.322l-0.537-0.291l0.034-0.935l0.871-1.032l-0.368-0.484 l0.032-0.517l-0.468-0.16l-0.135-0.583l0.738-2.191l-0.235-0.872l0.235-1.483l0.501-0.484l-0.201-0.838l0.437-0.29l-0.335-0.742 l0.537-0.387l-0.503-0.129l-0.303-0.579l0.47-0.259l-0.369-0.676l0.034-0.808l-0.403-0.708l-0.099-0.904l-0.302-0.482 l1.241-0.548l1.842-0.291l0.904-0.678l1.074,0.034l0.501-0.389l1.81-0.87l2.882-1.032l0.034-0.324l0.604-0.548l2.178-0.902 l0.133-0.774l1.074-0.482l1.273-1.936l0.568,0.063l0.437,0.42l0.937-0.064l0.704-0.743l-0.836-1.031l-0.068-1.13l-0.569,0.485 l-0.202,0.903l-0.402,0.097l0.335-1.162l0.838-2.16l0.335-0.354v-1.548l0.133-1.097l-0.736-1.354l0.133-2.709l-0.299-2.389 l-1.409-2.094l-1.004-0.646l-0.271-0.942l-0.941-0.258l-0.269-0.711l0.538-1.743l0.907-0.377l2.448-2.451l0.77-0.096l0.604-0.679 l-0.035-0.612l-0.334-0.194l-0.034-0.354l0.973-1.227h0.502l0.57,1.065l0.602,0.289l-0.334-0.483l0.065-1.034l1.006-0.418 l0.972-1.709l-0.167-0.58h-1.273l-0.102-0.388l0.838-1.031l-0.503-0.388l-0.3-0.646l0.636-0.709l0.904-0.29l-1.005-0.164 l-0.067-0.482l0.402-1.257l0.703-0.419l-0.535-0.098l-1.542,0.13l-0.436-0.194l0.067-0.678l1.978-1.515l1.24-1.709l0.201-1.032 l0.603,0.097l0.402-0.484v-1.032l-0.503-0.193l-0.067-0.388l-0.468-0.096l-0.57-0.872l0.034-1.71l0.637-1.321l0.032-1.129 l0.738-0.387l0.369,0.259l0.535-0.034v-0.549l0.638-0.612l0.569-0.064l0.569-0.226l0.569,0.356l1.542,0.095l1.564,0.821 l2.079,1.098h1.144l-0.27,0.84l-1.208,0.452l1.543-0.065l1.275-0.904l0.873,0.065l0.47,0.517h0.671l0.671,0.903v-0.968 l1.074,0.452l0.47-0.517l0.737-0.064l1.208-0.711l1.612,1.227v0.905l1.074,0.839h0.806v1.421l-0.538,0.711v0.646l0.605-0.388 l1.007,0.905l0.47,0.968l-0.739,0.195l0.806,0.579l0.671-0.579l0.805,1.097l-0.133,0.517l-0.805-0.581l-0.403,0.839h-0.807 l1.142,1.097v0.84l0.806-0.709v0.709l0.737-0.453l1.478,1.229l0.537-0.194l0.334,0.453l1.007-0.453l1.209,0.388l-0.202,1.615 l0.47,0.711l1.073-0.775l0.203-1.356l0.738-0.066l0.066,1.551l-0.267,1.485l-1.208,0.258l-0.873,1.293l0.201,2.196l-0.403,0.774 l-0.202-1.163l-0.402,0.516l-0.27,1.357l-2.012-0.258l-2.418-0.711l2.148,1.099l1.745,0.322l1.256,1.019l-0.101,1.548 l-0.805,1.128l-0.132,0.547l-0.973,1.195l0.269,0.128l1.157,1.724l0.76,0.241l-0.475,0.198l-1.609-0.743l1.073,1.547l0.838,0.581 l0.3-0.032l-0.3-0.936l0.837-0.032l0.938,0.772l0.504,0.904l-0.202,0.968l0.067,1l-1.005,1.515l-0.2,0.969l-0.671,0.838 l0.973-0.483l1.206-2.354l1.206-1.161l0.268,0.097l-0.134,0.869l0.1,1.808l-0.268,0.354l0.066,0.743l-0.367,0.87l1.038-1.129 l0.135-1.032l1.005-0.773l0.836-0.097l0.805-0.71l0.669,0.097l0.135,0.42l0.402-0.451l0.838-0.195l0.135-0.839l0.603-0.805 l1.241-0.872l0.603,0.579l0.266,1.292l-0.166,1.031l0.636-1.387l-0.066-1.321l0.401-0.097l-0.099-0.42l0.535-0.839l0.771-0.128 l0.233-1.161l0.704-0.452l0.57-0.838l0.3-0.581l0.503-0.032l0.77,0.772l0.035-0.547l-0.402-0.678l-0.771-0.032l-0.033-0.546 l0.603-1.355l0.468-0.225l0.537,0.546l-0.068-0.838l0.571-0.387l0.1-0.677l1.005-1.065l0.436-0.741l-0.201-0.612l0.804-1.034 l0.938-0.289l0.369,0.354l-0.738,0.613l0.804-0.322l0.303,0.387l-0.57,0.387l-0.1,0.613l0.602,0.389l-0.537,0.708l-0.501,0.097 l-0.033,0.192l0.57,0.129l0.57,0.098l-0.27,0.741l-0.267,0.355l0.671-0.034l0.066,0.776l-0.603,0.388l0.203,0.872l0.856,0.762 l0.066,1.116l-0.353,0.34l-0.453-0.372l-0.621,0.242l0.621,0.534l0.201,0.535h0.386l0.588-0.566l0.101,0.615l0.638,0.372 l-0.688,1.102l-0.823,0.241l-0.974-0.177l-0.469,0.55l0.704,0.404l2.133-0.565l0.705,0.145l-0.269,0.794l-0.811,0.894l0.67,0.289 l0.773-0.451v1l-0.773,1.063h-1.44l-0.67-0.483l-0.367,0.613l0.199,0.614l-0.335,0.708l1.275-0.548l1.441,0.032l1.005-0.418 l0.268,0.257l-0.537,0.582v0.417l-0.803,0.485h-0.873l-1.339,1.58l1.474-0.646h1.003l0.671-0.226l0.839,0.162v0.806l-0.736,0.098 l-0.973,0.613l-0.268,0.87l0.57-0.549l0.87,0.259l0.503-0.548l0.871,0.772l0.436,1.485l-0.937,0.742l-0.637-0.226l-0.468,0.387 h-0.906l0.669,0.581l0.637-0.128l0.402,0.258l1.005,0.031l0.402,0.389l-0.268,0.708l-0.636,0.42l0.837,0.291l0.67-0.129 l0.871,0.741l-0.201,0.774l-0.703,0.356l-1.139,0.902l-0.705-0.257l-0.268,0.387l0.838,0.354l0.065,0.549l-0.972,0.098 l-1.206-0.679l-1.306,0.032l1.205,0.646l0.034,0.838l0.938,0.838l0.403,0.517l-0.168,0.419l-1.005,0.128l-0.369,0.516 l-1.273-0.096l1.642,0.45l0.603-0.129l0.102-0.321l1.273-0.259l0.501,0.096v0.613l0.367,0.419l-0.434,0.387l0.569,0.064 l0.168,0.258l-0.168,0.677l0.269,0.324l0.87-0.549l0.302,0.161l0.604,0.16l-0.068,1.129l-0.335,0.516v0.419l0.437-0.064 l0.904-1.194l0.201,0.13l-0.134,0.742l0.537,0.581l-1.107,0.678l-1.407,1.773l-0.804,0.613l-0.973-0.258l0.904,0.516l0.805-0.225 l1.71-1.581h0.67l0.034,0.483l-0.772,0.549l-0.436,0.807l0.469,0.162l0.938-1.033l0.804-0.903l1.005-0.162v0.388l-0.702,0.387 l-0.403,0.388l0.302,0.193l1.239-0.517l0.403,0.355l-1.342,0.968l-0.568,0.677l0.434,0.098l0.74-0.581l1.741-1.452l0.335,0.129 l-0.469,0.387l-0.101,0.451l1.273-0.838l-0.134,0.451l-0.032,1.42l-0.537,0.161l0.135,0.548l1.005-0.129l1.072,0.614l0.704-0.806 l1.307-0.323l0.602,0.225l-0.434,0.839h-0.57l-0.334,0.354l2.211,0.612l0.871,0.743l-1.474,0.194v0.321l-1.81,0.323l-0.369-0.323 l-1.44,0.549l-0.772,0.806l-1.776,0.065l-2.412,0.418l-0.134,0.613l1.776-0.387l1.776-0.517l0.604,0.161l0.135,0.388 l-1.777,0.257l-1.71,0.323l-1.54,0.774l-0.604,0.548l-1.072,0.033l-0.134,0.806l-0.369,0.452l-1.642-1.064l-0.972-1.615 l0.076,0.75l-0.269,0.453l0.688,0.291l0.174,0.379l1.844,1.483l-0.268,0.548l-0.536-0.163l-0.604,0.517l0.369,0.677l0.47,0.097 l0.334-0.388l0.604,0.032l0.771-1.547l1.372,0.065l0.973-0.807l0.703-0.064l0.371-0.839l0.903-0.967l1.073-0.129l1.474-0.612 l1.207,0.127l0.971-0.064l-0.401-0.257h-1.071l-0.302-0.258l0.669-0.259l1.944-0.226l1.574,0.386l0.671,1.42l-0.134,0.806 l-1.04,0.904l-0.503,0.032l-0.67,0.677l1.173,0.065l0.334,0.741l0.47-0.418l0.301-0.774l1.342-0.679l1.005,0.034l0.167,0.354 l-0.335,0.129l-0.134,0.548l1.273,0.065l1.174,0.516l0.2,0.516l-0.837-0.42l-0.437,0.129l0.236,0.806l1.273,0.517l0.234,0.644 l-0.738,0.582l-0.736-0.226l-0.739,0.645l1.375,0.418l-0.369,0.839l-0.602,0.193l-0.29,0.779l-0.737,0.371l-1.109-0.695 l0.469,0.711l1.293,0.551l0.755-0.065l0.656,0.713l-0.673,0.209l-0.837-0.129l-0.455,0.034l0.638,0.501l0.758-0.206l0.57,0.29 l-0.469,0.839l-0.135,0.806l-0.67,0.032l-0.336,0.71l-1.273,0.902l-1.038,0.065l-0.904,0.741h-0.403l-0.703,0.71l-0.537,0.032 l-0.201,0.484l-0.804,0.128l-0.504-0.483l-0.668,0.386l-0.738-0.096l-0.235-0.322l-0.939,0.645l-1.039-0.129l-0.436-0.645 l-0.3,0.257l0.101,0.549l-0.872,0.193l-0.938-0.064l-0.302,0.354l0.37,0.129l-0.131,0.536l-0.687,0.616l-0.557-0.088 l-0.033,0.774l-0.637,1.258l-0.737-0.129l-0.268,0.388l-0.805,0.418l-0.604,0.871l-0.368-0.128l-0.537,0.323l-0.972-0.033 l-0.201,0.581l-0.837,0.355l-0.604-0.355l-1.475-0.033l-0.369-0.291l-1.039,0.324l-0.503-0.033l-2.111,0.71l-0.871-0.228 l0.201-0.483l-0.67-0.161l-0.837,0.322l-0.703,0.032l-1.342-0.58l-0.435,0.127l-1.072-0.127l-0.773-0.549h-0.467l-0.636,0.485 l-1.375-0.129l-1.106-0.678l-0.736,0.451l-0.838,0.032l-0.705-0.548l-1.037,0.548l-0.537-0.161l-0.604,0.032l-1.406-0.546 l-1.912,0.289l-1.139-0.323l-0.839-0.805l-0.737,0.354l-0.469,0.516l0.436,0.42l-0.401,0.387l-0.839,0.162l-1.675,1.484 l-1.071,0.483l-0.068,0.677l-0.402,0.483l-0.135,1.097l-0.568,0.743h-1.409l-0.737,0.354l-1.607,0.098l-0.738,0.999l-0.535,0.129 l-0.37-0.354l-0.77,0.45l-0.37,0.904l-0.905,0.194l-0.972,0.708l-0.235,0.452l-0.503,0.161l-1.105,1.614l-1.843,0.902 l-0.468,1.549l-1.24,0.613l-1.041,1.032l-0.937,0.225l-0.335,1.129l-0.637,0.934l-2.144,1.227l-0.135,0.689l-2.458,1.014 l-1.396,0.329l1.119,0.044l2.4-1.01l2.076-0.969l1.576-0.936l1.241-1.514l1.039-1.064l0.771-0.355l2.312-2.063l3.149-2.097 l2.078-1.291l1.34-0.161l1.206-0.677l2.381-0.387l2.915-0.968l0.971-0.064l0.906-0.484l3.149,0.065l1.675,0.612l1.844,1.066 v0.417l-1.408-0.258l0.101,0.193l-0.133,0.292l0.737-0.065l1.005,0.386l0.367,0.549l-0.568,0.227l0.434,0.321l-0.701,1.549 l-1.006,0.226l-0.94,0.742l-0.736,0.065l-1.24,0.901l-1.005-0.031l-0.771-0.614l-1.005-0.354l-0.67,0.417l-1.005,0.195 l-1.006-0.195l-1.24,0.55l1.307-0.162l1.273,0.129l1.81,0.483l0.268,0.839l0.335,0.581l1.039-0.452l0.904-0.613h0.906 l0.268,0.388l0.669-0.064l0.204,0.581l-0.873,0.708l-1.173,2.259l-0.568,0.096l-0.604,0.581l1.742,0.032v0.418l-0.535,0.743 l0.636,0.676l-0.135,0.808l0.101,1.225l0.437,0.322l0.501,1.128h0.939l0.402,0.356l1.34,0.064l-0.234,0.645l-1.039,0.323 l1.273,0.838h1.441l0.87,0.388l0.403-0.258l1.274,0.451l0.235,0.484l1.574,0.258l0.302-0.419l1.34-0.904l0.134,0.743 l-0.235,0.355l1.139,0.161l1.575,0.772l0.034,0.453l-0.636,0.16l-0.403,0.098l0.871,0.482l0.906-0.063l0.436,0.485l-0.739,0.321 l-0.57-0.225l-0.871,0.096l-1.34,0.356l-2.112,1.128l-0.836,0.032l-1.61,0.42l-1.441,0.323l-1.439,0.774h-0.739l0.102,0.418 l-1.239-0.129l-0.403-0.934l-0.437-0.065l-0.333,0.516l-0.537-0.064l-0.704,1.033l0.334,0.45l-1.408,1.097l-1.238,1.58 l-0.906,0.16l-1.039,0.774l-0.537-0.065l-0.369,0.227l-0.099,0.806l-0.402,0.355l-0.469-0.419l-0.501,0.354l-0.738-0.516 l-0.101-1.032l-0.47-0.29l-0.468,0.29l-0.135-0.903l-0.301-0.839l0.067-1.031l0.671-1.387l1.139-0.87l0.167-0.71l1.743-0.936 l1.978-0.482l1.54-1.034l1.474-0.354l0.604,0.227l0.168,0.806l0.57,0.42l-0.102-0.42l0.134-0.517l0.905-0.162l1.24-0.159 l1.039-0.486l-1.406,0.099l-1.943-0.162l-0.671-0.419h-0.871l-0.603,0.744l-1.072-0.292l0.938-1.129l0.905-0.193l0.972-0.967 l0.033-0.484l-0.604,0.321l-0.101-0.515l-1.005,1.355l-0.772,0.194l-0.971,0.966l-1.173,0.099l-0.336,0.547l-2.076,0.514 l-0.369-0.225l0.199-0.452l-0.301-0.031l0.569-0.905l-0.803,0.84l-0.47,0.84l-1.106,0.257l-0.704-0.325l-0.468,0.581 l-0.537-0.127l-0.201-0.645l-1.038,0.127l-1.352-0.285l-0.05-0.017l-0.218-0.293l0.233-0.388l-0.099-0.418l0.099-0.452 l0.033-0.742l-0.401-0.482l-0.302-0.518l-0.403-0.097l0.236-0.645l1.005-5.643l-0.067-1.453l-1.81-1.677l-0.401,0.354 l-1.275-0.324l-0.971,0.26l-0.654-0.596l-0.554-0.373l-0.285,0.081l-0.789,0.744l-0.353,0.712l-1.662,1.781l-0.806,1.003 l0.051,0.76l-1.177,0.599l-0.149,1.003l-0.402,1.003l-1.194,1.407l-0.585,0.195l-1.494,1.554l-0.251,0.663l-0.539,0.357 l-0.839-0.195l-0.587,0.033l-0.42,0.308l-0.386,0.081l-1.041,0.953l-13.574-0.227l-1.629,0.235l-0.788,0.753l-1.149,0.469 l-0.913,0.726l-2.077,1.871l-1.274,0.226l-0.871,0.612l-3.889,2.807l-8.757,2.452l-0.389,2.2l-2.021,0.633l-15.976,4.134 l-0.791-1.345l0.908-1.092l1.78-0.825l0.723-0.951l0.512-0.975l0.461-1.085l0.392-5.983l-3.028-13.727l-2.835-2.181l-1.208-1.421 l-18.571-8.389l-0.724-0.486l-1.106-0.242l-0.488-0.437l-2.2-0.13l-0.369-0.729l-0.487-0.42l-0.739,0.453l-1.511,0.032 l-0.705-0.306l-0.639-0.679l-0.923-0.245l-1.594-0.486l-0.47-1.002h-0.589l-1.091-0.825l-0.872,0.081l-0.722-0.226l-0.875,0.226 l-0.369,0.097l-0.453-0.583l-0.974-0.242l-0.151-0.227l-0.935-0.309l-0.184-0.146l-0.613-0.63l-0.085-0.33l-1.04-0.838 l-1.072,0.032l-0.881-0.1L235.53,303.41z ",
"M223.37,248.34l0.052-0.276v-0.696l0.32-0.145l-0.033-0.42 l0.199-0.357l-0.199-0.485l-0.488-0.227l-0.05-0.889l-0.471-0.875l-0.99-0.664l-0.605-0.438l-0.201-0.597l-0.873-1.133 l-0.638-0.242l-0.788-0.017l-0.017-0.325l0.302-0.436l-0.118-0.647l-0.42-0.372l-0.202-0.518l0.521-0.439l0.318-0.111 l-0.118-0.388l-0.536-0.341l-0.488-0.016v-0.517l0.757-0.503l-0.165-3.273l0.033-3.162l0.336-2.58l-0.27-0.774l-0.1-0.806 l0.435-0.838l-0.134-0.807l-0.436-0.709l-0.167-1.613l-1.039-1.128l-0.334-1.645l0.234-0.773l-0.972-2.58l0.202-0.615 l0.703-1.192l-0.234-0.678l-0.033-0.84l-0.972-0.74l-1.408,0.096l-1.607,0.452l-0.369,0.227l-1.676,0.516l-1.039,1l-1.308,1.871 l-1.105,0.58l-1.542,0.194l-1.776,0.291l-0.335,0.064l0.033-0.709l0.838-1.194l-0.469-1.161l-1.341-5.128l-0.837-2.321 l-0.369-1.097l0.972-1.967l-2.312-0.291l-1.777,0.936l-0.972-0.483l-3.05-0.032l53.897-94.628l-0.149-0.388l-0.971-0.29 l-0.736,0.128l-0.503-0.548l-0.336-1.742l-0.502-0.935l-0.604-0.354l-0.201-0.969l-0.604-1.161l-0.402-0.385l-1.642-0.066 l-0.268,0.259l-1.341-0.161l-1.172,0.257l-0.536-0.388l-0.368,0.131l-0.404-0.227l-0.301,0.258l-0.537-0.099l-0.066-0.225 l0.435-0.097l0.068-0.419l-0.805-0.516l-0.537,0.289l-0.603-0.225l0.133-0.291l0.403-0.291l-0.336-0.354l-0.535,0.063 l-0.705-0.128l0.067-0.451l-0.67-0.646l-1.375-0.967l-0.301,0.099l-0.369-0.259h-0.402l-0.436,0.386l0.1-0.321l-0.133-0.356 l-0.67-0.354l-0.537,0.805l-0.469-0.322l0.033-0.548l0.336-0.226l-0.27-0.388l-0.736-0.288l-0.67,0.16l0.235-0.387l-0.068-0.323 l-0.77-0.483l-0.637-0.774l0.133-0.258l-0.269-0.323l-0.601-0.17l-0.42,0.324l-1.793,1.621l-1.943,0.935l1.708-1.129l1.039-1.516 l1.039-1l0.234-1.095l-0.604-0.388l-1.24-0.84h-1.139l-1.173,0.453h-0.736l-0.37,0.258l-1.308,0.193l-1.238,1.322l-1.073,0.773 l0.871-0.935l-0.133-1.193l0.187-1.037l-0.033-0.745l-1.479-0.858v-0.372l0.858-0.323l0.738-0.031l-0.068-0.356l-2.266-1.214 l-0.218-0.55l0.47-0.697l1.259-0.582l0.639-0.679l-0.471-0.518l-0.503-0.956l-0.42-0.031l-0.486,0.226l-0.354-0.6l-0.706-0.338 l-0.889,0.096l-1.059-0.437l-0.52-0.162l-0.689,0.211l-1.041,0.016l-0.487,0.728l-0.018,0.406l-0.537-0.747l0.335-0.727 l0.403-0.242l-0.066-0.745l0.319-0.616l0.47-0.259l0.084-0.841l0.268-0.779l-0.268-0.499l-0.302-0.032l-1.091,1.002l-0.236,0.777 l-0.234,0.015l-0.638-0.436l-0.925,0.34l-0.185,0.453l0.185,0.89l-0.604,0.63l-0.437,0.048l-0.251-0.339l-0.504,1.118 l-0.033,0.906l-0.354-0.923l-0.014-0.922l0.452-0.762l-0.403-0.129l-0.604,0.616l-0.25,0.582l-0.707,0.195l0.521-1.329 l-0.521-0.856l-0.839,0.096l0.152-0.582l1.074-0.792l0.923-0.229l1.007,0.761l1.275-0.518l0.839-0.226l0.924-0.891l0.1-0.403 l0.251-0.421l-0.201-0.39l-1.091-0.437l-0.369,0.017l-0.05-0.746l-0.353-0.339l-0.303-0.242l0.167-0.259l0.471-0.161l0.186-0.354 l-0.455-0.083l-1.729,0.826l-0.42,0.372l-1.209,0.097l-0.974,0.567l-1.979,1.537l-1.174,0.421l-2.182-0.011l-1.207-0.741 l-0.5-0.354l-0.101,0.483l-0.671-0.097l-0.938-0.773l-0.771,0.353l-0.27,0.71l-0.467,0.032l-0.234-0.581l0.201-0.548l0.804-0.322 l-0.437-0.387l-1.106,0.323l-1.742,0.902l-1.273,0.613l-0.47,0.936l0.201,0.773l1.105,0.258l-0.637,0.517h-1.205l-1.173,0.968 l-0.906,1.966l-0.502,1.515l-0.437,0.065l-0.199-0.323l0.302-1.515l1.374-2l0.066-0.581l-0.469-0.032l-2.347,0.969h-0.971 l-0.603-0.29l-0.705-0.904l-1.105-0.259l-0.569,0.034l0.1,0.323l1.374,0.58l0.502,0.58l-0.469,0.259l-1.341-0.323l-1.574-0.226 l-1.91,0.901l-2.414,1.936l-2.681,1.225l-1.843,1.323l-1.944,1.676l-2.345,2.033l-1.541,0.613l-0.804,0.128l-1.308,0.744 l-1.039,0.064l-1.574,0.935l-1.374,0.032l-0.705-0.515l-1.373-0.131l-1.273-0.74l-0.939-0.485l-1.407-0.677l-0.536,0.129 l-1.106,1.033l-1.643,1.708l-0.435,1.032l-0.905,0.837l-0.468,1.098l-0.705-0.097l-0.601-0.42l-0.538,0.356l0.838,1.869 l1.134,3.958l1.142,3.035l0.47,2.714l-0.269,2.455l-1.071,1.867l-0.803,1.129v0.483l1.742,2.032l0.972,0.418l-0.033-0.967 l0.469,0.42l0.738-0.452h0.669l-0.669,0.547l-0.067,0.583l2.279,1.74l-0.563,0.379l-0.974-0.115l-0.27,0.615l-0.117,2.329 l0.1,1.004l0.47,0.373l0.671-0.55l1.042-0.291l0.746,0.318l0.334,0.582l1.207-0.354l1.441,0.417l1.239,0.646l-1.206,0.613 l0.267,1.001l-0.3,0.902l-1.542,0.161l0.133-0.613l-0.937-0.516l-0.57,0.323l-1.207-0.129l-0.502-0.483l-0.435-1.258 l-0.806-0.291l-0.434,0.065l-1.107-0.838l0.134-1.356l1.006-2.645l-0.134-0.839l-0.368-0.031l-0.806,0.839l-0.1,2.611 l-0.437,1.71l-0.836,0.904v0.708l0.603-0.934h0.637l0.435,0.418h1.141l0.467,1.033l-0.065,1.579l-0.939,1l-1.34,0.482 l1.206-1.483l-0.067-0.516l-0.603-0.29l-0.369-0.323l-0.537,0.452l-1.406,1.064l-0.101,0.774l-0.837,0.289l-0.838,0.388 l-0.235-0.838l-0.369-0.194l-1.172,0.097l-0.605-0.29l-0.133-0.935l-0.637-0.162l-0.503,0.192l-0.803-0.03l-0.101-0.709 l-0.637-0.419l-0.638,0.355l-0.4-0.066l-0.068-0.967l-0.368-0.711l0.033-0.515l0.837-0.29l0.972-1.356l0.535-0.094l0.57-0.646 l-0.066-0.548l-1.207-1.226l-0.737-0.323l-0.905-0.032l-1.476,0.773l-0.835,0.032l-0.771-0.514l-0.805,0.032l-2.782,1.096 l-0.2,0.453l0.436,0.45l1.039,0.904l-0.168,0.29l-0.771-0.128h-0.805l-0.334-0.453l-0.871-0.291l-1.643-0.258l-1.776,0.258 l-0.603,0.485l-0.067,0.451l-0.939,0.032l-0.201-0.291h-0.705l-1.306,0.743v0.484l-0.703,0.257l-1.408,0.612l-0.972,0.613 l-0.568,0.098l0.234-0.324l0.235-0.547l-0.77,0.322L118,122.979l-0.033,0.323l1.272,1.517l1.206,1.806l1.308,0.323l0.971,1.29 l1.005,0.516l0.402,1.064l0.939,0.225l1.072,0.549l-0.336,0.26l-1.574,0.031l-0.168-0.903l-1.073-0.71l-0.635-0.483l-0.436,0.064 l-1.038,1.033h-0.57l-0.636-0.87l0.804-0.84v-0.354l-0.738,0.065l-0.703,0.935l0.201,1.806l0.268,0.323l0.034,0.677l-1.006,0.903 l-0.736,1.129l-0.235,1.257l0.135,1.193l1.607,1.74l1.542,0.581l1.007,1.064l0.602,0.033l1.207-0.838l1.306-0.42l1.074,0.581 l2.078,0.257l0.771,0.518l0.301,1.063l0.502,0.257l0.403-0.451l-0.067-1.225l0.301-0.387l0.939,0.321l-0.033,0.517l-0.938,1.097 l0.032,0.839l0.47,0.032l1.207-1l0.334-0.518l1.51-0.321l1.909-1.129l1.34-0.129l0.604-0.903h0.368l0.202,0.549l0.468,0.161 l1.576-0.937l1.205-0.064l0.47-0.322l-0.402,0.645l-1.039,0.709l0.033,0.355l0.503,0.257l-0.838,1.484l-1.34,0.194l-0.436-0.419 l-0.569-0.065l-1.24,0.935l0.101,0.226l1.006,0.13l0.568,0.612l-0.1,1.225l-1.475,1.581l-0.24,1.047l-0.455,0.679l-0.234,0.518 l0.252,0.42l0.134,0.68l-0.287,0.891l-0.872,1.083l-0.771,0.566l-0.907-0.08l-0.589,0.307l-0.939,0.827l-0.724,0.243 l-0.973-0.131l-1.36-0.776l-0.437,0.178l-0.369-0.452l-0.722-0.793l-0.303,0.128l-0.874,1.167l-1.074,0.662l-0.689,0.891 l-1.88,0.631l-0.537,0.469l-0.823,0.032l-0.873-0.243h-1.444l-1.124,0.809l-1.075,0.098l-0.605,0.438l-0.033,1.115l-0.636,1.554 l-0.673,0.646l-0.102-0.598l-1.073-1.1l-1.343-0.065l-0.589,0.292l0.185,0.663l0.571,0.484l-0.42,0.713h-0.453l-0.353-0.81 l-0.772-0.907l-0.403,0.033l-1.342,1.263l-0.521,1.116l-0.554,0.242l-0.537,0.033l-2.049,1.781l-0.369,1.375l-0.404,0.276 l-1.007,0.225l-0.89-0.308l-0.218,0.227l0.94,1.02l-0.218,0.631l-0.554,0.048l-0.47-0.761l-0.402,0.049l-0.437,0.841 l-1.108,1.261v0.552l0.806,1.148l0.151,1.117l-0.185,0.729l-0.437,0.792l0.2,0.745l0.572-0.129l0.537-0.696l0.202,0.486 l0.151,1.246l-0.453,0.254l-0.336,0.438l0.269,0.341l0.622-0.098l0.427-0.372l0.538-0.016l0.293,0.324l0.083,0.484l1.007,0.116 l0.755,0.503l0.975-0.064l0.738-0.628l0.386-1.637l0.571-0.649h1.695l0.705-0.485l-0.821,0.923l-0.74,0.097l-1.479,1.407 l-0.167,0.843l-0.604,0.598l0.873,0.922l0.067,0.615l-1.209,0.309l-0.419-0.357v-0.551l-0.402-0.468l-0.84,0.064l-0.453-0.728 l-1.276-0.21l-0.454-0.614l-0.721,0.533l-0.772,0.162l-0.235,0.728l-0.688,0.47l-0.974-0.225l-0.167,0.614l0.47,0.711 l0.453,0.049l-0.554,0.695l-0.186,1.182l0.27,0.792l0.638,0.049l0.084,1.52l0.15,0.502l-0.016,0.679l0.856,0.711l0.018,0.34 l-1.026,0.13l-0.267,0.486l3.056,1.359l1.174-0.016l1.376-0.551l0.739-0.295l0.521,0.312l0.554-0.049l1.241-1.601l0.034-0.776 l-0.486-0.649l0.018-0.388l1.208-0.615l1.343-0.988l2.065-1.309l0.873,0.193l-0.94,0.083l-1.931,1.843l-1.192,0.696l-0.066,0.503 l0.771,0.631l-0.017,0.518l-0.772,1.293l-1.007,0.616l-0.135,0.938l0.234,1.149l-0.285,0.842l0.068,0.452l-0.068,0.762 l0.152,0.986l-1.276,0.388l-0.555,0.453l-0.235,0.68l-0.436-0.163l-0.369,0.275l0.319,0.89l0.033,0.906l0.42,0.163l0.839-0.258 l0.655-0.019l0.15,0.488l-0.486,0.549l-1.058-0.032l-0.386,0.404l0.218,0.5l-0.118,0.357l0.236,0.647l-0.538,0.404l-0.738,0.146 l-0.839,0.502l-0.605-0.146l-0.368,0.178l0.57,0.436l0.874,0.114l0.554,0.437l1.024-0.938l1.913-1.198l0.388,0.082l0.705,0.113 l0.671-0.679l1.495-0.535l-0.203,0.599l-0.654,0.388v0.323l0.705,0.292l0.185,0.858l-0.15,0.47l0.654,0.356l0.79-0.551 l0.436-0.679l0.335,0.42l-0.302,0.438l0.587,1.035l0.287,1.407l-0.203,0.81l0.437,1.133l0.521,0.098l0.437-1.085l-0.102-0.89 l0.84-1.312l0.15-0.728l1.006-0.792l0.304-0.032l0.924-0.665l1.342-0.048l-1.175,0.535l-1.293,1.328l-0.033,0.501l1.125,1.278 l0.604,0.146l1.327-0.664l1.83-0.259l0.874-0.648l0.57-0.032l1.627-0.76h0.537l-0.586,0.259l-1.008,1.132l0.018,0.503 l-0.639,0.582l-2.57,1.327l-1.157,0.938l-0.772,1.393l-0.134,0.856l0.353,0.744l0.873,0.551l-1.544-0.258l-0.587,0.21 l-0.824,1.052l-0.319,1.082l-1.175,1.295l-0.553,0.842l0.268,0.47l0.319,0.339l-0.151,0.663l-0.604-0.209l-0.25-0.584 l-0.623-0.112l-0.671,0.874l-1.276,0.695l0.386,0.536l-0.369,0.63l-0.656-0.114l-0.202-0.469l-0.52,0.324l-2.048,1.57 l-0.537,0.906l0.133,0.534l-0.318,0.39l-0.723-0.293v-0.89l-1.342,0.583l-1.04,0.696l-0.841,0.324l-0.117,0.645l-0.772,0.341 h-1.309l-1.259,1.132l-2.166,0.745l-1.46,1.133l-0.571,1.245l-0.084,0.471l0.369,0.711l-0.068,0.631l-0.284,0.195l-0.538-0.745 h-0.471l-0.167,0.421l0.134,0.647l-0.437,0.243l-0.519-0.632v-0.777l0.352-0.6l-0.654-0.322l-0.907,0.081l-0.454-0.194 l-0.907,0.243l-1.376,0.145l-0.84,0.356l-0.569,0.744l-1.209,0.47l-1.042,0.663l-1.142,1.149l0.219,0.371l-0.353,0.422 l-0.436-0.098l-1.126,0.389l-0.621,0.469l-0.101,0.518l-0.386,0.08l-0.806-0.225l-0.907,0.241l-0.302,0.583l-0.183,0.955 l0.218,0.533l0.604-0.242l0.269-0.565l-0.101-0.551l0.639-0.323l0.234,0.323l-0.068,0.616l0.068,0.275l0.839-0.034l0.755-1.39 l0.403-0.21l0.353,0.598l-0.167,0.484l0.133,0.373l0.772-0.031l0.503-0.826l0.119,0.55l0.3,0.081l0.17-0.631l0.57-0.357 l0.891,0.045l0.871-0.516l0.535-1.001l-0.133-0.741l0.737-0.419l0.77-0.838l0.471-0.033l0.937,0.71l-0.267,0.387l-0.705,0.13 l-0.537,0.741v0.775l0.303,0.193l1.339-0.872l0.203-0.645l0.535-0.223l0.234,0.418l0.201-0.484l0.469,0.032l0.202,0.549 l-0.302,0.58l0.335,0.063l0.636-0.903l0.703,0.1l0.705-0.549h0.803l0.873-1.227l0.837-0.45l0.604,0.225v0.517l-0.637,0.805 l-0.57,0.969l0.034,0.353l0.436,0.034l1.275-1.292l0.065-1.354l0.134-0.289l0.502,0.546l0.572-0.321l0.67,0.162l0.937-0.032 l0.84-0.967l0.28-0.063l0.219,0.225l0.47-1.002l0.52-0.438l0.167,0.276l-0.151,0.598l0.051,0.794l0.503-0.229l0.722-0.744 l-0.368-0.195l0.72-0.516l-0.033-0.389l-1.444-0.016l-0.301-0.26l1.175-0.306l1.427-0.73l1.805-0.072l0.437-0.387l-0.101-0.581 l-0.369-0.097l0.436-0.257l0.704-0.129l0.57-0.387l0.468,0.033l0.235,0.74h0.435l0.334-0.58l-0.166-0.291l0.67-0.515l0.033-0.774 l0.369-0.323l0.334,0.387v0.581l0.47,0.323l1.139-0.71l0.404-0.645l0.67,0.032l0.501-0.741l0.301-0.193l0.437,0.452l0.77-0.163 l0.973-1.128l0.033-0.709l-0.268-0.034l-0.637,0.034l-0.167-0.13l1.273-0.903l0.838-0.29l0.669-0.742l0.336,0.066l0.301,0.321 l0.972-0.967l0.839-0.355l0.268-0.676l0.537-0.194l0.301-0.419l0.637-0.096l0.301,0.516l0.404,0.226l0.232-0.646h0.771 l0.369-0.29l-0.033-0.548l0.805-0.195l0.267-0.354l0.234,0.227l1.339,0.128l0.27-0.773l0.402-0.033l0.066,0.451l0.335-0.032 l0.469-0.386l0.401,0.354l0.336-0.227l0.436-1.257h-0.402l-0.469,0.194l0.301-0.645l0.904-0.708h0.47l0.335,0.255l0.168-0.255 l-0.336-0.518l-0.535-0.257l0.468-0.227l0.838,0.291l0.973-0.936h1.106l0.938-0.74l0.67-0.13l1.105-1.001v-1.321l-0.368-0.322 h-0.268l-0.334-0.967l-0.469-0.291l-1.24,0.032l0.2-0.839l-0.067-0.839l1.24-0.482l0.234-0.453l0.638-0.129l0.233-0.547 l-0.233-0.097l0.502-0.354l0.938,0.191l1.173-0.804l0.838,0.708l1.14-0.612L143,196.962l0.233,0.484l0.537-0.065l1.004-1.032 l-0.268-0.387l-0.469-0.162l-0.168-0.451l0.47-0.162l0.87,0.323l1.609-0.484l0.335-1.192l-0.369-1.001l-1.341-0.871l-0.535,0.065 l-0.502,0.388v-0.227l0.637-0.483l1.173-0.097l0.67,0.58l1.239-0.096l0.904-0.806l-0.033-0.517l2.111-1.032l1.14-0.936 l0.971-0.064l0.402-0.419v-0.516l1.978-1.419l1.642-0.161l1.91-1.645l1.408-0.13l1.576-1.903l-0.537,1.163l0.067,0.999 l0.47,0.259l0.703,0.129l0.268,0.323l1.173-1.226l0.906-0.322l1.91-0.548l0.602-0.646l-0.368,0.936l-1.44,0.838l-1.107,0.098 l-2.01,1.998l-0.168,0.776l1.004,1.419l0.269,1l-0.971-0.71l-0.739-0.064l-0.435,0.194h-0.705l-0.937-0.613l-0.235-1.129 l-1.476,0.645l-0.736,0.065l-1.341,0.902h-1.24l-0.937,0.838l-0.068,0.872l0.167,0.452l-0.736,1.386l-1.073,0.614l-0.436,1.225 l-2.681,2.226l-0.704,0.902l0.101,0.645l0.905,1.259l0.503-0.71l0.469-0.032l0.838-0.548l0.703,0.128v0.485l-1.609,1.225 l-0.736,0.032l-0.437,0.809l-0.87-0.388l-0.705,0.033l-0.704,0.257v0.774l-0.604-0.163l-0.736,0.163l0.034,1.097l1.274,1.354 l0.4-0.193l0.436-0.613l0.502,0.517l0.336-1l0.669,0.032l-0.033,0.741l0.569-0.354l0.168-0.517l0.703-0.322l0.905-0.646 l0.1-0.967l0.637-0.58l0.101,0.451l-0.336,0.45l0.403,0.518l1.039-0.032l1.408-1.097l1.005-0.033l0.234,0.518l0.571-0.388 l0.401-1.581l1.04-0.678l0.469,0.096l-1.105,1.129l0.033,0.709l0.568-0.387l0.973-1.257l0.577-1.482l0.671-0.373l-0.035,0.649 l-0.619,1.066l0.083,0.357l1.14-1.068l0.32,0.534l-0.06,0.574l1.004,0.129l0.402,0.322l0.737-0.581l0.404-1l1.24-0.128 l0.771-0.517l-0.571-0.291l0.302-0.935l1.708-0.581l0.303-0.613l0.033-0.872l-0.837,0.13l-0.604-0.387l-1.039-0.13l0.369-0.548 l0.804-0.031l0.704,0.257l0.402-0.517v-0.74l-0.804,0.322l-0.938-0.741l-0.034-0.71l1.206-0.127l0.537-0.259l0.402,0.259 l0.133-0.419l-0.334-1.033l1.507-0.613l0.872,0.613l0.636-0.16h1.14l-1.708,1.127l0.1,0.743l0.301,1.482l0.402-0.096l0.57-1.709 l0.705-0.452h0.436l-0.301,0.547l-0.471,0.678l0.168,0.581l1.105-0.774l0.236-0.515l0.704,0.515l0.904-0.645l0.369-0.033 l0.905-0.613l1.04-0.192l0.772,0.258l-0.169,0.323l-0.971,0.032l-0.972,0.967h-0.637l-0.469,0.613l0.368,0.483l1.744,0.356 l0.604,0.581l-0.101,0.451l-1.005-0.807l-1.241-0.129l-0.77,0.355l-0.101,0.742l0.671,0.225l0.77-0.418l0.738,0.517l-0.435,0.224 l-0.973,0.034l0.1,0.644l1.275,0.323l0.436,0.58l-0.705,0.227l-0.737,0.258l0.101,0.484h0.905l0.938-0.389l0.804,0.678 l0.805,0.355l1.306-0.484l0.402,0.517l-0.003,0.428l-0.576,0.382l0.144,0.512l0.402,0.162l0.135,0.548l0.736,0.258l0.604-0.903 l-0.269-0.387l0.235-0.388l1.139,0.032l-0.669,0.839l0.065,0.548l-1.172,1.128l0.905,0.807l-0.401,0.225l-0.488-0.192 l-0.571,0.21l0.302,0.533l2.217,0.421l0.654-0.259l0.688,0.161l0.932-0.096l1.167,0.096l1.041-0.195l0.453,0.146l-0.029,0.656 l0.637,0.063l0.604,0.711l0.603,0.42l0.233,0.613l0.804-0.033l1.275-0.613l0.267-0.289l0.469,0.225l-0.066,0.677l-0.669,0.516 l-0.873,0.226l0.167,0.419l1.341,0.323l0.234,0.804l0.558,0.513l1.384,0.424l1.709-0.387l0.738-0.259l0.234,0.452l0.537-0.675 l1.207-0.84l0.469,0.032l-0.37,0.549l-0.871,0.645l-0.167,1.548l-0.403,0.935l-0.603,0.098l-0.971-0.516l-0.335,0.128 l0.624,1.054l0.247,0.85l0.57,0.45l0.77-0.225l0.537,0.291l-0.268,0.548h-0.537v0.323l1.341,1.257l0.436-0.258l1.039,0.128 l0.435-0.87l1.072-1.871l-0.501,1.451v1l-0.232,0.608l-0.489,0.28l-0.654,0.725l0.134,0.513l0.703,0.485l-0.333,0.484 l-0.035,2.032l0.469,0.451l0.638,0.033l-0.235,0.74l0.269,0.774l1.373,1.514l0.504,0.227l0.1,0.485l0.503-0.388l0.503,0.613 l0.67-0.225l-0.301-0.388l0.267-0.387l0.37,0.419l0.534,0.129l0.335-0.708l-0.535-1.259l-0.502,0.033l-0.335,0.193l-0.303-0.29 l0.638-0.806l-0.068-0.583l-0.281-0.61l-0.624-0.26l-0.033-0.451l0.334-0.419l0.134-1l0.537,0.064l0.064,0.904l0.302,0.546 l0.538-0.838l0.269,0.517l0.333,0.612l-0.333,0.873l0.199,0.676l0.502,0.128l0.806-0.743l0.402-0.062l-0.269,0.708l-0.669,0.581 l0.033,0.677l0.235,0.808l-0.334,0.935l0.268,0.451l0.972,0.259l0.133-0.387l0.469-0.71l0.102,0.645l-0.268,0.323l0.301,1.128 l0.603,0.421l0.804-1.485l0.1-1.129l0.335-0.645l0.168-2.161l0.67-1.902v-1.871l-0.234-1.289l-0.336-0.646l0.068-0.163 l0.334,0.163l0.437,1.097l0.501,0.193l0.469-1.098l0.972-0.676l-0.636,1.225l-0.369,1.548l0.268,1.258l-0.871,1.643l-0.101,1.066 l0.301,0.547l-0.604,0.517l-0.067,1.321l0.168,0.742l0.201,0.904l0.803,0.741l0.134,1.031h0.436l0.066,0.968l0.67,0.55 l0.503-0.356l0.504,0.289l0.77-0.321l1.14-0.064l-0.034,0.257l-1.239,0.774l-0.47,0.193v0.385l0.603,0.453l-0.4,0.323 l-0.705,0.097l0.068,0.484l0.636,1v0.871l-0.369,0.162l-0.705-0.516l-0.32-0.7l-0.25,0.307l0.234,0.55l-0.486,0.697l0.049,0.97 l0.252,0.308l-0.319,0.438l-0.622,0.096l-0.417,0.681l0.148,0.356l0.539,0.064l0.521-0.064l0.251,0.743l0.621,0.566l0.537-0.082 l0.472,0.356l0.033,0.293l-0.755-0.066l-0.304,0.259l0.186,0.486l0.656,0.42l0.302,0.76l0.755,0.631l0.454,0.017l-0.556,0.225 l-0.553,0.083l-0.554,0.713l0.116,0.97l0.79,1.294l0.7,0.463l1.006-0.032l0.537,0.193l-0.972,0.516l-1.006-0.193l-0.636,0.161 l-0.571,1.162l-1.406,1.45l-1.041,0.806v0.872l0.369,0.838l0.972-0.805l0.57-1.258l0.066-0.387l0.738-0.162l1.071-1.031 l0.201,0.353l0.703-0.063l1.14-0.096l-0.704,0.772l0.135,0.291l1.072,0.033v0.355l-0.938,0.838v0.775l0.169,0.58l-0.638,1.033 l-0.295,0.627l0.235,0.471l0.2,0.42l-0.636-0.082l-0.856,0.065l-0.638,0.681l0.033,0.355l0.704,0.098l0.421-0.195l0.906,0.032 l0.084,0.244l-0.772,0.646l-0.621-0.082l-0.47,0.032l-0.471,0.356l-0.218,1.037l0.453,0.905l0.589-0.323l0.133-0.616l0.605,0.097 l0.838-0.339l1.159-1.294l0.963-1.365l0.368-1.837l1.039-2.098l0.37-0.289L223.37,248.34L223.37,248.34z M209.655,253.261 l-0.337-0.403l0.218-0.616l0.335,0.519L209.655,253.261L209.655,253.261z M214.715,254.851l0.77-0.549l0.67,0.42l-0.636,0.709 L214.715,254.851L214.715,254.851z M215.049,252.433l0.771-0.324l0.469,1.032l-0.871,0.806l-0.67-0.451l0.502-0.453 L215.049,252.433L215.049,252.433z M214.848,250.433l0.704,0.969l-0.803,0.708l0.1-0.773l-0.402-0.452L214.848,250.433 L214.848,250.433z M215.72,250.303l0.77-0.742l-0.066-0.419l0.467-1.225l0.94-0.388l0.032-0.45l1.074-0.034l0.37,0.937l-0.37,1 l0.301,0.741l-1.207,1.68l-1.406,1.095l-0.435-0.453l0.602-0.999l0.938-0.645v-0.388l-1.708,0.806L215.72,250.303L215.72,250.303 z M207.505,253.101l0.386-0.114l0.603,0.356l-0.117,0.501l0.656,1.068l-0.737,1.085l-0.32-0.357l-0.018-0.842l-0.705-1.083 L207.505,253.101L207.505,253.101z M207.64,251.902l0.386-0.226l0.437,0.096l0.27,0.632l-0.739,0.307L207.64,251.902 L207.64,251.902z M207.241,250.916l0.604-0.678l0.033,1.001L207.241,250.916L207.241,250.916z M206.571,249.561l0.703,0.259 l-0.803,0.903L206.571,249.561L206.571,249.561z M206.135,245.401l-0.201-0.708l0.67,0.322L206.135,245.401L206.135,245.401z  M208.514,246.531l0.536-0.355l0.335,0.549l-0.47,0.321L208.514,246.531L208.514,246.531z M208.718,245.144l0.713-1.036 l0.788-0.267l0.605,0.494l-0.537,0.558h-0.512l-0.613,0.427L208.718,245.144L208.718,245.144z M210.828,245.805l0.422-1.25 l-0.222-0.848l-0.639-0.742l0.539-0.466l0.769,0.193l0.605,0.935l-0.605,0.838l-0.199,0.517l0.535,0.548l0.236-0.13l1.039,0.581 l0.032,1.322l-0.637,0.064l0.771,0.806v0.645l-0.668,0.066l-0.235-0.225l-0.403,0.838l1.039,0.708l0.469,0.774l-0.939,0.549 l-0.099,0.289l0.638-0.096l0.368,0.193v0.645l-0.837,0.549l-0.536,0.129l-0.403,0.708l0.403,0.032l0.368,0.452l-0.403,0.388 l0.369,0.612l-0.502,0.452l-0.771,0.032l-0.436-0.355l0.268-0.74l-0.871-0.679l0.132-0.677l0.604-0.516l-0.503-0.55l0.168-0.483 l0.67-0.387l-0.368-0.419l-0.604,0.13l-0.268,0.451l-0.369-0.42h-0.67l-0.268-0.452l0.334-0.483h0.503l0.234-0.614v-0.386 l0.939-0.677v-0.419l-0.537-0.128l-0.538,0.161l-0.234-0.355l0.267-0.388l0.873-0.225l0.234-0.838L210.828,245.805 L210.828,245.805z M216.39,244.949l-0.502-0.677l0.335-0.452l0.435-0.741l0.301,0.257l-0.034,0.969L216.39,244.949 L216.39,244.949z M214.547,246.046l0.669-1.354l0.503,0.129v0.936l-0.671,0.418L214.547,246.046L214.547,246.046z  M213.909,245.046l0.134-0.74l1.508-0.937v0.613l-0.468,0.452l-0.503,0.742L213.909,245.046L213.909,245.046z M212.971,242.821 l0.771-0.742l1.474,0.129l-0.133,0.581l-0.872,1.063l-0.77-0.321L212.971,242.821L212.971,242.821z M214.245,240.628l0.871-1.257 l0.67-0.323l0.469,1.418l-0.568,0.838l-1.105,0.291l-0.336-0.419V240.628L214.245,240.628z M211.195,241.822l0.033-1.098 l0.57-2.03l0.436-0.612l-0.838-0.323l0.202-0.742l-0.369-0.517l0.101-0.579l1.173-0.034l0.939,1h0.869l0.636,0.807v1.129 l-0.703,1.129l-0.436,0.128l-0.134-1.162l-0.502,0.193v0.968l-0.368,0.387l0.502,0.743l-0.605,0.387l-0.367-0.291l-0.537,0.646 L211.195,241.822L211.195,241.822z M208.85,240.532l-0.738-0.485l0.67-0.902l-0.469-0.387l0.102-0.937l0.367-0.548l0.806,0.323 l-0.035-0.903h0.437l0.803,1.066l-0.369,0.708l0.101,0.549l0.47-0.518l0.302,0.452l-0.704,1.773l-1.374,1.389l0.008,0.763 l-0.446,0.656l-0.937,0.289l0.335-0.838l-0.302-0.483l-0.536,1.578l-0.35-0.424l0.116-0.64l0.399-0.704l-0.063-0.489l0.367-0.645 l0.537,0.419l0.469-0.484L208.85,240.532L208.85,240.532z M208.245,232.774l0.671,0.034l-0.253,0.631L208.245,232.774 L208.245,232.774z M206.011,233.016l0.823-0.323l0.402-0.467l0.505,0.176l0.367,1.214l0.107,1.555l-0.257,1.438l-0.419,0.388 l-0.252,1.586l-0.52,0.551l-0.37,1.166l-0.135,1.1l-0.248,0.682l-0.391,0.193l-0.117-0.631l0.17-0.696l-0.438-0.308l-0.286-1.18 l0.369-0.679l0.622-0.115l0.47-0.371l-0.117-0.404l-0.533,0.278l-0.442-0.004l-0.049-0.551l0.399-0.222l0.221-0.41l-1.007-0.273 l0.033-0.39l0.806-0.112l0.453-0.633l0.102-0.872l0.538-0.552l-0.69-0.583L206.011,233.016L206.011,233.016z M204.316,233.179 l0.587-0.452l0.268,0.646l-0.218,0.615l-0.118,0.938l-0.772,0.227l-0.184-0.453l0.52-0.535l-0.185-0.274L204.316,233.179 L204.316,233.179z M208.716,235.275l0.498-0.938l0.071-0.998l0.603-0.548l1.072,0.033l-0.334-0.548l0.434-0.549l-0.769-0.387 l0.167-1.483l0.904-1.192l0.201-2.773l0.637-1.195l0.302,0.454v0.837l1.172,0.742l0.57,0.71l0.234,3.257l-0.536,1.291 l-0.402-0.289l0.201-2.002l-0.369-1.839l-0.235,0.84l-0.068,3.063l-0.266,0.549l-0.103,0.774l-0.469,0.387l-0.703-0.29 l-0.251,1.322l-1.324,0.741l-0.77,0.679L208.716,235.275L208.716,235.275z M206.431,225.073l1.259-0.276l0.925,0.48v0.708 l-0.436,0.58l0.267,0.549l0.369-0.484l0.736-0.29l1.006,0.774v0.679l-0.838,0.191l0.269,0.55l-0.503,0.483l-0.67-0.193 l-0.671-0.969l-1.07-0.934l-0.068,0.226l1.139,1.742v0.71l1.006,0.127l0.47,0.71l-0.47,0.452l-0.067,1.257l-0.569,0.097 l-0.905-0.967l-0.033-0.871l-1.106-1.903l-0.201,0.871l0.568,1.256l0.034,0.969l-0.569,0.677l-0.837-0.064l-0.771-0.936 l0.536-0.677l-0.569-0.42l0.234-0.87l-0.637-1.162l0.502-0.87l0.504,0.451l0.367-0.517l-0.537-0.353l-0.133-1.066l0.435-0.967 l0.404,0.872l0.469-0.162L206.431,225.073L206.431,225.073z M206.616,224.118l0.856-0.713l0.319,0.501l-0.671,0.486 L206.616,224.118L206.616,224.118z M67.473,168.857l-0.203-0.342l0.419-0.468l0.302,0.663L67.473,168.857L67.473,168.857z  M67.354,169.421l0.521,0.356l0.033,0.777l1.26,1.279l-0.169,0.727l-1.678-1.261l-0.167-0.891l-0.285-0.647 C66.868,169.762,67.321,169.406,67.354,169.421L67.354,169.421z M115.688,154.325l-0.503,1.035l-0.201,1.968l-0.669-0.389 l0.033-0.579l-0.67-0.388l-1.061,0.293l-0.923-0.598l0.016-0.534l2.501-2.443l1.076-0.55l0.453,0.372L115.688,154.325 L115.688,154.325z M116.461,154.275c-0.066-0.016,0.47-0.454,0.47-0.454l0.084-0.468l-0.554-0.551l0.084-0.697l-0.789-0.759 l0.705-0.372l1.762-0.147l1.629,1.036l0.084,0.567l-0.989,0.437l-1.898,1.635L116.461,154.275L116.461,154.275z M125.375,148.612 l0.421-0.275l1.106-0.082l0.521,0.681l-0.303,0.663l-0.554,0.098L125.375,148.612L125.375,148.612z M172.837,191.802l0.471-0.42 l0.637,0.225l-0.452,0.405L172.837,191.802L172.837,191.802z M168.335,205.186l0.836-0.516l0.536,0.418L168.335,205.186 L168.335,205.186z M178.555,202.799l1.107-0.418h0.602l-0.837,0.934l-0.905,0.225L178.555,202.799L178.555,202.799z  M171.081,193.64l0.136-0.612l0.67,0.065l0.1,0.676L171.081,193.64L171.081,193.64z M172.322,197.22l-0.033-1.419l0.603-0.386 l0.569,0.257l0.034,0.773h0.603l0.301,0.613l-0.804,0.356L172.322,197.22L172.322,197.22z M164.85,200.833l0.661-0.162 l0.345-0.226l0.132-0.484l1.709-1.338l0.805-0.242l0.958-1.02l0.412-0.124l0.909-1.114l0.168,0.483l-0.235,0.484l0.436,0.355 l-0.502,0.452l-1.039,0.386l-1.374,1.517l-0.838,0.258l0.175,0.533l-0.242,0.498l-1.04-0.225l-0.535,0.354h-0.938L164.85,200.833 L164.85,200.833z M164.614,199.123l1.242-0.936l0.066,0.678l-0.838,0.485C165.084,199.35,164.648,199.187,164.614,199.123 L164.614,199.123z M166.96,196.979l1.293-1.263l0.102-0.565l0.57-0.615l0.57,0.048l0.219,0.371l-0.621,0.631l-0.403,0.615 l-0.907,0.777l-0.151,0.469l-0.454-0.048L166.96,196.979L166.96,196.979z M168.32,191.234l0.538-0.647l0.621,0.275l-0.167,0.519 l0.134,0.468l-0.302,0.437L168.32,191.234L168.32,191.234z M112.315,128.934c-0.067,0,0.671-0.145,0.671-0.145l0.671,0.129 l-0.654,0.663L112.315,128.934L112.315,128.934z M94.273,147.684l0.839-1.162l-0.269-1.063l-1.039-0.516l0.236-1.128 l-0.335-1.485l-1.006-0.773l-1.541-0.032l-0.334,0.741l-0.94,0.032l-0.938-1.064v-1.128l2.144-1.87l0.771-1.742h0.537v1.676 l-0.404,0.582l1.174,0.42l0.033,0.581l1.072,0.127l0.47-0.418l1.742,0.162l0.905,0.838l-0.099,0.548l-0.537,0.483l0.537,1.128 l0.904,0.615l-0.033,0.902l1.709,1.58l0.267,0.838l-0.771,0.516l-1.206-0.742l-0.503,0.193l-0.367,0.453l-0.939,0.031 l-1.307,1.032L94.273,147.684L94.273,147.684z M88.042,178.031l1.106-0.064l1.105,0.354l0.906-0.064l0.736,0.323L93,177.645 l1.273-0.257l-0.1,0.676l1.074,0.742l0.1,0.742l-0.871,1.226l-0.335,1.095h-1.239l-0.873-0.323l-0.803,0.548l-0.839-0.612 l-0.904-0.163l-0.971-1.611L88.042,178.031L88.042,178.031z M149.752,191.769l1.31-1.343l0.705-0.017l0.033,0.696l-1.191,0.76 L149.752,191.769L149.752,191.769z M140.015,198.161l0.722-0.179l0.688,0.229l-0.704,0.371L140.015,198.161L140.015,198.161z  M140.049,205.767l0.403-0.081l0.672,0.049l-0.066,0.679l-0.722,0.503l-0.521-0.405L140.049,205.767L140.049,205.767z  M136.255,210.07l-0.167-0.372l0.403-0.405l0.57,0.259l0.437-0.355l0.52,0.243l0.521-0.76l-0.369-0.453l0.402-0.583l0.873-0.244 l0.521,0.194l-0.184,0.809l0.419,0.097l0.218-0.404l0.588-0.179l0.353,0.68l-0.455,0.405l-0.335,0.63l0.554,0.178l0.302,0.551 l-0.704,0.179l-0.47-0.357l-0.722,0.713h-0.487l-0.217-0.583l-0.874,0.712l-0.656,0.033L136.255,210.07L136.255,210.07z  M126.584,219.409l-0.15,0.501l-0.588,0.145l-0.604-0.339l-0.101-0.906l0.452-0.534l0.203-0.906l-0.05-1.1l-0.285-0.437 l0.218-0.533l1.224-0.907l2.016-0.956l1.174-0.146l0.336,0.212l0.05,1.73l0.337,0.179l0.804-0.971l-0.285-0.81l0.218-0.145 l0.621,0.403l0.252-0.711l-0.789-0.534l-0.201-0.422l0.84-0.89l0.62-0.048l0.605,0.437l-0.034,0.891l-0.353,0.42v0.646 l0.538-0.145l0.418-0.728l0.386-0.194l0.47,0.258l0.15-0.809l-0.25-0.55l0.468-0.308l0.808,0.534v0.681l-0.437,0.307v0.324 l0.537,0.145l0.839-0.97l0.823-0.162l0.621,0.21l0.371,0.939l-0.79,0.209l-0.857,0.017l-0.033,0.518l0.437,0.259l0.269,0.599 l-0.604,0.938l-0.707-0.113l-0.218-0.42l-0.603,0.194l-0.604-0.292l-0.689,0.08l-0.419,0.422l0.873,0.21l0.454,0.923 l-0.554,0.777l-0.722-0.065l-0.536-0.858l-1.16-0.097l-0.705,0.275l0.957,0.404l0.252,0.566l-0.504,0.388l-0.772-0.177 l-0.856,0.21l-0.418-0.114l-0.488,0.972l-0.421,0.047l-0.519,0.357l0.251,0.484l-1.024,0.552l-0.017,0.598l-0.586,0.307 l-0.403,0.551l-0.94-0.146l0.135-0.42l1.645-1.262v-0.486l0.554-0.793l-0.353-0.032l-0.705,0.565l-0.369-0.355l0.268-0.438 l-1.005-0.032l-0.471,0.47l0.452,0.112L126.584,219.409L126.584,219.409z M124.737,222.892l0.67-0.097l-0.369,0.548 L124.737,222.892L124.737,222.892z M122.088,223.891l0.705-1.161l1.909-0.645l-1.775,1.708L122.088,223.891L122.088,223.891z  M115.823,228.955l-0.403-0.048l0.085-0.534l1.007-0.307l-0.184,0.679L115.823,228.955L115.823,228.955z M112.348,220.914 l0.923-0.033l0.503,0.501l-0.638,0.292L112.348,220.914L112.348,220.914z M94.301,228.875c-0.018-0.032,0.386-0.292,0.386-0.292 l0.201,0.502L94.301,228.875L94.301,228.875z M93.226,229.118l0.638,0.291l-0.536,0.502L93.226,229.118L93.226,229.118z  M97.389,232.467l0.049,0.598l-0.385,0.404l-0.134-0.533L97.389,232.467L97.389,232.467z M96.516,232.127l0.589-1.035 l-0.067,0.743C97.037,231.835,96.466,232.16,96.516,232.127L96.516,232.127z M92.773,233.26l0.503-1.213l1.007-0.825l0.051-0.356 l1.225-0.064l-0.689,0.598l-0.236,0.566l-1.257,0.616L92.773,233.26L92.773,233.26z M91.546,230.525l-0.418-0.566l0.285-0.84 l0.654-0.325l0.571,0.453l-0.402,0.729l-0.102,0.518L91.546,230.525L91.546,230.525z M86.914,229.975l0.519-0.064l0.521,0.548 l-0.721,0.406L86.914,229.975L86.914,229.975z M83.959,232.192l-0.438-0.711l0.89-0.598l0.167,0.646L83.959,232.192 L83.959,232.192z M80.567,234.312l0.89,0.81l-0.671,0.39l-0.757-0.681L80.567,234.312L80.567,234.312z M-1.501,249.659 l-0.502,0.903l0.904-0.29L-1.501,249.659L-1.501,249.659z M-0.831,247.756l-0.604,0.418l0.536,0.645l0.939-0.707L-0.831,247.756 L-0.831,247.756z M0.343,245.658l0.604,0.583l0.133-0.906L0.343,245.658L0.343,245.658z M6.211,246.335l-1.09-1.117l-0.689-0.081 l-0.688,0.566l0.184,0.486l0.975,0.42l-0.772,0.194l0.251,0.681l0.688-0.146l0.572-0.697L6.211,246.335L6.211,246.335z  M6.73,248.099l0.538,0.292l1.109-0.68l0.117-0.81l0.504-0.728l-0.32-0.227l-0.838,0.811l-0.353,0.792L6.73,248.099L6.73,248.099 z M11.567,247.467l-0.336-1.148l-0.454-0.146l-0.285,0.987l-0.487,0.162l-0.537,1.117h0.974L11.567,247.467L11.567,247.467z  M22.764,247.112l-0.049-0.776l0.671-0.42l-0.167-0.938l-0.656-0.228l-0.907,0.598l-0.049,0.682l-0.437,0.241l-0.453-0.177 l-0.706,0.664l-0.621-0.018l-0.74-0.21l-0.269,0.439l0.673,0.484l0.503-0.178l0.957,0.098l1.125-0.404L22.764,247.112 L22.764,247.112z M24.275,247.436l2.233,0.422l0.655-0.146l0.722,0.501l-1.108,0.259l-2.115-0.518l-0.755,0.209l-0.488-0.485 C23.419,247.678,24.275,247.452,24.275,247.436L24.275,247.436z M31.977,246.336l-0.873-0.548l-1.139,0.129l-0.301,0.902h1.306 L31.977,246.336L31.977,246.336z M37.105,246.014l-0.403-1.13l-0.404,0.84L37.105,246.014L37.105,246.014z M40.59,244.562 l-0.873-0.774l-0.803,0.71l-0.067,0.806l1.005-0.806L40.59,244.562L40.59,244.562z M42.902,244.401l-0.537-0.452l-0.568,0.42 l0.635,0.291L42.902,244.401L42.902,244.401z M43.236,243.014l-0.234-0.515l-0.637,0.547L43.236,243.014L43.236,243.014z  M43.438,243.563l0.671,0.514l0.67-0.418l-0.369-0.483L43.438,243.563L43.438,243.563z M54.194,238.758l0.302,0.934l0.57,0.193 l-0.905,0.355l-0.301,0.838l-1.373,0.484l-1.476,1.581l-1.24,0.032l-1.006,1.097l-1.742,0.033l0.904-0.774l0.536-0.034 L49.1,242.5l0.569-0.323v-0.453l1.14-0.937l0.906-0.16l0.367-0.838l-0.234-0.517l1.474-0.064 C53.323,239.209,54.194,238.822,54.194,238.758L54.194,238.758z M61.982,235.752l-0.806,0.098l-0.905,0.76v0.68l0.737,0.696 l-0.369,0.259l-0.958-0.437l-0.805,0.664l0.066,0.582l-0.453,0.129l-0.823,0.972l-0.537,0.047l-1.091,0.745l-0.823-0.018 l-0.589,0.098l0.604,0.583l1.479-0.033l1.309-0.354l0.99-1.118l0.119,0.793l0.47,0.179l0.317-0.859l0.271-0.713l0.537,0.179 l0.234,0.486l0.487-0.115l0.722-0.856l1.242-0.582l-0.033-0.373l-0.722-0.193l0.907-0.647l-0.234-0.794l-1.008-0.292 L61.982,235.752L61.982,235.752z M64.921,237.031l-0.018-0.501l-0.688-0.405l-0.083,0.534L64.921,237.031L64.921,237.031z  M69.621,236.335l-0.083-0.438l0.84,0.016l0.268,0.454l-0.841,0.112L69.621,236.335L69.621,236.335z M68.043,236.513l0.487-0.404 l0.469,0.421L68.043,236.513L68.043,236.513z M67.473,235.672l0.201-0.665l-0.018-0.711l0.371,0.112l0.233,0.907L67.473,235.672 L67.473,235.672z M65.979,234.83l-0.923,0.274l0.066,0.68l0.822,0.647l0.673-0.372l0.234-0.437l-0.504-0.177L65.979,234.83 L65.979,234.83z M108.941,198.453l-0.253-0.339l0.839-0.308l-0.251,0.519L108.941,198.453L108.941,198.453z M107.061,198.856 l-0.471-0.209l0.084-0.777l1.106-0.663l0.774-0.437l0.101,0.453l-1.041,1.214L107.061,198.856L107.061,198.856z M71.468,232.808 l0.251-0.792l0.386-0.439l0.437,0.131l0.791-0.552l0.352-0.21l0.755-1.471l0.335,0.046l0.875,0.713l0.436-0.373l0.855,0.097 l0.739-0.323l0.252-0.389l1.258,0.081l0.587,0.793l-0.436,0.81l1.242,1.132l-0.016,0.469l-1.192-0.274l-0.688,0.567l-1.411,0.177 l-0.991-0.274l-1.677,0.032l-0.976,1.036l-0.385-0.065l-0.688,0.308l-0.889-0.47L71.468,232.808z",
"M392.629,481.387 391.691,481.421 391.389,482.161  392.327,482.032 			",
"M406.637,485.645 407.675,485.741 409.418,485.385  412.971,485.579 413.841,486.967 415.016,487.193 415.785,487.968 415.685,488.384 414.144,488.384 413.506,488.064  413.139,488.805 412.67,488.933 412.301,488.516 411.497,488.516 411.462,489.447 410.356,489.417 409.62,488.869  408.547,488.901 407.91,488.418 407.375,487.257 406.805,486.997 406.201,487.193 405.33,486.547 405.865,485.806 			 ",
"M434.778,487.312l-0.078-0.496l1.107-1.127l0.066-0.549 l0.033-0.74l-0.435-0.939l0.134-0.354l0.738-0.354l0.301-0.969l-0.369-0.707l0.469-0.841l-0.135-0.454l-0.015,0.024l-0.835-0.194 l-0.807,0.161L434.15,479l-1.979-0.226l-0.568,0.323l-0.806-0.26h-1.741l-0.268,0.485c0.033,0,0.938,0.515,0.938,0.515 l2.479,0.808l-0.267,0.451l0.334,0.71l-0.334,1.128l0.435,0.773l0.871,0.227l1.005,0.871l-0.234,0.549l-1.911-0.063l-0.367,0.256 l-0.805-0.225l-1.106,0.097l-0.973-0.388l-1.138,0.452l-0.067-0.452l-0.401-0.16l-1.441,0.355l-0.771-0.71l-0.971,0.481 l-0.369,0.549l0.334,0.74l1.106,0.132l1.139,1.258l0.503,0.159l0.1-0.771l0.504-0.39h2.044l0.871,0.453l2.547,0.065l0.469-0.291 l0.77,0.354L434.778,487.312L434.778,487.312z M431.167,477.809l0.838-0.451l1.609,0.901l-1.743,0.034L431.167,477.809 L431.167,477.809z M429.426,483.354l0.803-0.387l0.905,0.644l0.201,0.68l-1.307-0.454L429.426,483.354z ",
"M385.256,469.373l0.335-0.646l0.842,0.179l0.807,0.921 l-0.135,0.825l-1.311,0.37l-1.026-0.403l-0.134-0.468l0.404,0.272l0.47,0.084l0.438-0.34l-0.438-0.275L385.256,469.373 L385.256,469.373z M378.722,467.165l0.536,0.678l-0.234,0.42l-0.77-0.42l-1.642,0.935l-0.671-0.191l-0.034,0.579l0.873,0.42 l0.937-1.033l0.336,0.194l0.034,0.708l1.139-0.646l0.806-0.062l0.938-1.389l1.206,0.225l0.469-0.386l0.603,0.453l0.938-0.161 l1.375-1.612l0.804-0.163l0.57-0.612l1.273,0.195l0.904-0.032l2.044,0.225l0.537,0.484l-0.537,0.418l-1.038-0.098l-0.704,0.484 l0.704,0.55l2.748,0.418l0.569-0.193h0.837l0.738,0.613l1.308,0.161l0.637-0.033l0.341-0.487l0.605,0.438l0.068,0.483 l1.514,1.051l1.192,0.194l0.506-0.276l0.79,0.647l0.875-0.128l0.688,0.306l1.295-0.421l0.555,0.195l0.757,2.665l1.546,1.763 l0.756,0.016l0.337-0.291l1.042,0.599l1.648,0.017l0.235,0.45l0.757,0.26l-0.117,0.871l-1.178,0.275l-1.547,1.343l-0.033,0.805 l1.615,0.275l1.093-0.548l0.806,0.323l2.271-0.502l1.26,0.145l1.597,0.697l2.389-0.535l0.319-0.499l0.577,0.095l0.671-0.517 l1.575,0.194l1.173-0.29l0.502-0.904l-0.402-0.418l-0.837-0.098l-0.569-1.226l-2.043-0.807h-2.414l-0.637-0.226l0.503-0.451 l0.336-1.098l-0.571-0.191l-0.771,0.289l-0.871-0.064l-1.675-1.194l-0.468,0.42l-0.738-0.645l-1.24-0.903l-0.736,0.741 l-0.369-0.418l0.201-0.549l-0.503-0.225l-0.302,0.549l-0.568-0.583l-1.777-0.384l-1.174-1.067l-1.072-0.579l-1.173-0.872 l-2.582-0.128l-0.938-0.42l-0.336-0.967l-1.072-1.129l-0.838,0.193l-0.435-0.516l-3.452-0.483l-1.139,0.419l-1.441-0.29 l-0.838-0.968l-2.145-0.355l-1.877,0.065l-0.938,0.741l-2.548,0.129l-1.942,0.452l-0.704,0.612l-1.978,0.548l-0.67,0.773 l-0.838,0.452L378.722,467.165z ",
"M431.101,471.067l0.503,0.291v-0.808L431.101,471.067 L431.101,471.067z M427.916,474.163l2.414-0.257l0.771-0.999v-1.065l-0.336,0.193l-0.569,0.644l-0.938-0.515l-1.106,0.677 L427.916,474.163L427.916,474.163z M430.599,466.745l0.803-0.354l1.408,0.774l-0.068,0.354l-0.87-0.387l-0.873,0.064 L430.599,466.745L430.599,466.745z M428.051,464.553l-0.904,0.258l0.067,0.741l-0.939,1.001l-0.501,0.064l-0.102,0.483 l0.471,0.031l2.01-1.128l0.067-1.031L428.051,464.553L428.051,464.553z M425.37,463.811l1.107,0.581l0.099,0.742l-0.703-0.13 l-0.57-0.645L425.37,463.811L425.37,463.811z M421.75,460.296l0.805,1.418l0.269,1.098l0.804,1.418l-0.569-0.063l-0.571-0.678 l-0.771-1.193l0.503-0.321l-0.603-1.129L421.75,460.296L421.75,460.296z M418.434,459.876l-0.167,0.742h0.736L418.434,459.876 L418.434,459.876z M425.67,458.038l-0.569,0.902l0.469,0.421l0.403-0.743L425.67,458.038L425.67,458.038z M420.568,455.561 l-0.152,0.55l0.708,0.775l0.184,1.228l-0.386,0.42l0.404,0.502l1.092-0.082l0.051-0.532l-0.724-1.26l-0.251-0.953 L420.568,455.561L420.568,455.561z M416.835,451.73l1.295,0.712l0.823,1.148l-0.368,1.388l-0.522,0.146l-0.404-0.452l0.555-0.274 l0.319-0.678l-0.689-0.938l-1.11-0.404L416.835,451.73L416.835,451.73z M411.999,443.977l1.308-0.032l1.406,0.935l0.168,0.871 l0.669,0.418v1.225l-0.904,0.549l0.066,0.773l-0.769,0.774l0.333-1.484l-0.268-0.837l0.604-0.549l-1.039-1.289l-0.168-0.904 L411.999,443.977L411.999,443.977z M406.402,444.88h1.174l0.569,0.388l1.306-0.774h1.441l1.006,0.901l-0.738-0.095l-0.904-0.193 l-1.742,1.192l-0.938-0.162L406.402,444.88L406.402,444.88z M412.127,453.412l1.176-0.598l1.077,0.242l-0.387,0.678l-1.261-0.032 L412.127,453.412L412.127,453.412z M410.85,457.709l-0.286-0.435l0.823-0.244L410.85,457.709L410.85,457.709z M409.923,457.936 l0.421-0.341l0.083,0.566L409.923,457.936L409.923,457.936z M410.143,456.66l1.11-0.712l-0.808-1.406l-0.202-1.05l-0.639-0.259 l-0.351,1.213l-0.724,1.228l0.638,0.581l0.774-0.387L410.143,456.66L410.143,456.66z M411.455,457.871l-1.194,0.63l0.034,0.775 l0.47,1.101l0.774-0.146l0.42-0.793l-0.252-0.58l0.119-0.615L411.455,457.871z ",
"M235.53,303.41l120.807,11.599l0.881,0.1l1.072-0.032 l1.04,0.838l0.085,0.33l0.613,0.63l0.184,0.146l0.935,0.309l0.151,0.227l0.974,0.242l0.453,0.583l0.369-0.097l0.875-0.226 l0.722,0.226l0.872-0.081l1.091,0.825h0.589l0.47,1.002l1.594,0.486l0.923,0.245l0.639,0.679l0.705,0.306l1.511-0.032 l0.739-0.453l0.487,0.42l0.369,0.729l2.2,0.13l0.488,0.437l1.106,0.242l0.724,0.486l18.571,8.389l1.208,1.421l2.835,2.181 l3.028,13.727l-0.392,5.983l-0.461,1.085l-0.512,0.975l-0.723,0.951l-1.78,0.825l-0.908,1.092l0.791,1.345l15.976-4.134 l2.021-0.633l0.389-2.2l8.757-2.452l3.889-2.807l0.871-0.612l1.274-0.226l2.077-1.871l0.913-0.726l1.149-0.469l0.788-0.753 l1.629-0.235l13.574,0.227l1.041-0.953l0.386-0.081l0.42-0.308l0.587-0.033l0.839,0.195l0.539-0.357l0.251-0.663l1.494-1.554 l0.585-0.195l1.194-1.407l0.402-1.003l0.149-1.003l1.177-0.599l-0.051-0.76l0.806-1.003l1.662-1.781l0.353-0.712l0.789-0.744 l0.285-0.081l0.554,0.373l0.654,0.596l0.971-0.26l1.275,0.324l0.401-0.354l1.81,1.677l0.067,1.453l-1.005,5.643l-0.236,0.645 l0.403,0.097l0.302,0.518l0.401,0.482l-0.033,0.742l-0.099,0.452l0.099,0.418l-0.233,0.388l0.218,0.293l0.05,0.017l-0.023-0.004 l1.741,0.968l-0.312,1l0.654,0.681l0.386-0.615l0.89,0.501l-0.622,0.744l-0.82,0.115l-0.321-0.535l-1.127,0.625l-0.703-0.065 l-0.836,0.549l-0.503,0.257l-0.705-0.289l-0.77,1h-0.639l-0.268-1h-1.039l-0.803,0.838l-0.872,0.13l-0.234-0.71l0.268-0.87 l-1.205,1.451l-0.873,1.386l-0.535,0.356l-0.269-0.42l-0.536,1h-0.536l-0.133-0.937l-0.503,0.903l-0.436,0.549l-0.636-0.195 l-0.068-0.58l-0.536,0.805h-0.504l-0.569,1.195l-1.709,1.29l-0.604,1.58l-0.569,0.678l-0.201,0.645l-0.47,0.354l-0.1,0.547h0.604 l0.067,0.679l-1.643,1.419v0.418l1.173,0.645l0.503,1.451l0.134,0.743l1.341-0.032l0.367-1l-0.1-0.774l0.435-0.13l0.436,1.517 l-0.57,0.936l-2.178,1.031l-0.57-0.194l0.033-0.612l-0.436-0.838l-0.871,1.548l-0.839,0.836l-0.603-0.096l0.101-0.613v-0.872 l-0.938-0.966v1.032l-0.134,1.193l0.368,0.421l-0.536,0.193l-1.91,0.128l-1.173,0.258l-0.871-0.225l-1.844,0.129l-0.369-0.291 l-0.535,0.031l-1.474,1.001l-1.005,0.032l-1.44,0.741l-0.822,0.258l-0.752,0.612l-0.034,0.598l-1.239,0.677l0.369,0.597 l0.584,0.467l0.135,0.549l-0.52,0.627l0.033,0.32l-0.402,0.842l0.134,0.405l-0.353,0.567l-0.369,0.938h-0.404l-0.453,0.5 l-0.401,1.344l-0.657,0.193l-0.352,0.518l-0.385-0.016l-0.101,0.565l-0.74,0.891l-0.082-0.244l-0.69,0.486l0.504-1.197 l-0.387-0.404l-0.672,0.161l-1.073-1.035l-0.381-0.649l0.264-0.662l1.51-1.57l-1.013,0.495l-0.832,0.735l-0.439,0.842l0.117,0.91 l0.42,0.433l0.117,1.214l0.454,0.47l0.599,1.493l-0.033,1.129l-0.77,1.676l-1.04,0.581l-0.737,1.805l-0.537,0.873v0.548 l-0.268,0.354l-0.066-0.354l-0.099-0.323l-0.939,1.612l-0.102,0.419l-0.234,0.355l-0.101-0.872l0.243-0.979l0.528-0.859 l-0.137-0.566l0.571-0.711l-0.151-0.21l0.806-0.423l-1.108,0.017l-0.318-0.631l0.285-0.42l-0.034-0.195l-0.419,0.034 l-0.119-0.373l-0.301,0.357l-0.756-0.922l-0.016-0.842l0.654-0.922l0.219-1.279l-0.74-1.181l0.521-0.955l0.772-0.453 l-0.234-0.293l0.217-0.841l-0.25-0.339l0.034,0.258l-0.252,0.841l-0.924,0.712l-0.604,0.421l-0.387-0.049l0.437,0.631 L425.677,380l-0.144,1.303l0.202,0.515l-0.133,0.613l0.065,0.871l-0.1,1.74l-0.269,0.066l-1.104-1.258l-0.906-0.129l-0.57-0.999 l-0.436-0.033l-0.167-0.453l0.402-0.934l-0.669,0.87v0.774l0.669,0.29l0.537,0.838l1.039,0.388l1.04,1.225l0.669,0.389 l0.134,0.772l-0.269,0.937l-0.669-0.065l-0.301-0.774l-0.436-0.193l0.402,1.098l1.004,0.613l0.269,0.613l-0.303,0.257 l-0.066,0.419l-0.971-0.194l1.172,0.968l-0.369,0.613l-0.568-0.259l-0.47-0.805l-1.139-0.032l-0.771-0.356l0.637,0.742 l0.748,0.249l0.559,0.01l0.369,1.096l0.804,0.194l0.637-0.161l0.432,0.367l0.239,0.826l-0.359,0.86l-0.486-0.227l-0.033,0.437 l0.387,0.372l0.168,0.97l-0.285,0.47h-0.605l-0.218,0.243l-1.243,0.323l-0.469,0.42l-0.588-0.193l-0.453-0.938l-0.318,0.193 l-0.035,1.343l-0.168,0.519l0.924-0.276l1.88-0.274l0.369,0.162l0.135,1.326l0.454,0.194l0.05-0.567l0.487-0.888l0.235-0.064 l0.353,0.76l-0.218,0.955l-0.302,0.017l-0.974,0.792l-0.335,0.662l-0.394,0.311l-0.636-0.386l-0.639,0.097l-0.367-0.969 l-0.101,0.613l-0.637,0.259l-0.636-0.291l-0.637-0.032l0.503,0.581l1.105,0.193l0.301,0.451l-0.469,0.387l0.202,0.322 l-1.24,0.516l-0.837-0.322l0.703,0.645l1.173,0.097l0.838-0.741l0.201,0.322l0.333,0.13l-0.87,0.966l-0.803,0.032l-0.101-0.291 l-0.57,0.065l-0.301,0.225l-1.14,0.097l-2.179,1.258l-2.344,1.838l-0.771,1.387l-0.405,0.064l-0.468-0.292l-1.34,0.163 l-0.904,0.772l-1.744,2.227v0.515l-0.737,0.613l-0.468-0.032l-0.069,0.581l-0.804,0.87l-0.537-0.225l-0.501,0.129l-0.235,0.419 l-0.973-0.097l-0.503,0.645l-1.405,0.161l-0.234,0.483l-0.907-0.064l-0.165,0.547h-1.108l-0.268,0.226l0.336,0.227l-0.101,0.742 l-0.636,0.871l-0.403,0.064l-0.402,0.549l-0.772,0.193l-0.804,1.258l-0.67,1.29v1.516l-0.233,2.774l0.134,1.257l-0.268,1.934 l0.502,1.226l0.2,1.935l0.401,0.806l0.471,2.161l0.602,0.774l0.336,0.806l-0.402,1.031l-0.135,1.356l0.334,0.451l0.503,2.87 l0.938,0.58l0.302,1.322l-0.537,0.516l0.234,0.323l-0.166,1.58l-0.237,0.42l0.103,0.772l-0.805,1.581l-0.436,1.064l-0.568,0.806 l-0.136,1.13l-0.77,0.258l-0.87,0.289l-0.871-0.224l-0.438-0.549l-0.971-0.259l0.536-0.226l-1.124-0.874l0.117-0.762l-0.336-0.6 l-0.789-0.032l-0.353-0.307l0.05-1.181l-0.134-0.906l-1.141-0.841l-0.085-0.536l0.369-0.42l0.167-0.744l0.689-0.649l-0.873,0.229 l-0.37-0.259v0.372l-0.301,0.406l-0.236-0.826l-0.369,0.097l-0.185-0.438l-0.57-0.646l-0.068-0.859l-0.268-0.55l1.142-1.569 l-0.035-0.825l-0.67-0.276l-0.354,0.276l0.169,0.371l-0.538,0.729l-0.251,0.227l-0.554-0.906l0.033-0.664l0.907-1.634 l0.622-2.087l0.084-1.036l-0.604-1.117l-0.689-0.114l-0.419-0.647l0.034-0.322h-0.403l-0.673-0.471l-0.115-0.921l-0.321-0.099 l-0.486-0.469l-0.47-1.553l-1.059-0.355l-0.604-0.323l-0.923,0.144l-0.62,0.47v0.209l-0.151,0.146l-0.386-0.161l-1.192,1.148 l-0.857,0.096l-1.343,0.195l-0.218-0.325l0.117-0.337l0.135,0.291l0.218-0.081l-0.236-0.42l-0.453-0.632l-1.141-0.762l0.15-0.046 l0.605,0.273l0.151-0.291l-0.874-0.598l-0.168-0.469l-0.402-0.048l-0.117,0.404l0.452,0.599l-0.705-0.389l-0.722-0.615h-1.192 l-1.208-0.163l0.168-0.225l1.09,0.065l0.555-0.164l-0.219-0.274l-1.007-0.066l-1.023,0.697l-0.421-0.21l-1.394,0.178 l-0.537-0.371l-0.672,0.269l-1.307-0.065l-0.738,0.29l-0.904-0.741l-0.033-0.517l0.133-0.58l-0.57-0.097l-0.402,0.774 l-0.434,0.708l-0.671-0.128l-0.57,0.193l-1.039-0.161l-2.748,0.483l-0.77,0.646l-1.543,0.613l-0.837,0.838v0.613l0.603-0.225 l0.537-0.518l0.302,0.065l0.333,0.421l0.806,0.321l-0.303,0.323l-1.474,0.549l0.033,0.774l0.269,0.643l1.474,0.485l1.105,0.806 l-0.068,0.289l-0.703,0.195l-0.302,0.548l-0.032-0.87l-0.47-0.291l-0.535,0.064l-0.469-0.612l-0.671-0.259l-0.669-0.968 l-0.837,0.065l0.401,0.743l-0.034,1.096l-0.704,0.386l-0.363-0.567l-0.771-0.535l-0.688,0.486l-0.47,0.518l-1.158-0.339 l-0.639-0.373l-0.773,0.131l-0.485-0.211l0.369-0.453l0.622-0.469l-0.32-0.486l-0.939,0.096l-0.286-0.338v-0.664l-0.302-0.323 l-0.638,0.226l-0.504-0.162l0.353-0.518l-0.503-0.21l-0.94,0.342l-0.069,0.453l0.151,0.549l-0.826,0.109l-2.681-0.258 l-0.369-0.418l-2.179-0.516h-1.206l-1.575,0.323l-0.637,0.418l-0.671,0.064l-0.77,1.064l-1.04,0.129l0.169-0.806l-0.234-0.677 l0.536-0.71l-0.336-0.936l-0.066,0.55l-0.904,0.74h-0.47l-0.502-0.644l0.535,1.322l-0.032,0.903l0.2,0.901l-0.602,0.485h-0.604 l-1.475,1.29l-1.976,0.935l-0.604-0.032l-0.871,0.708l-0.637,0.066l0.805-0.679l-0.705-0.483l-0.436,0.227l-0.334-0.227 l-0.873,0.483l0.501,0.452l-0.971,0.356l-0.503-0.388l0.068,1.128l-0.838,0.388l-0.468-0.291l-0.839,1l0.537,0.581l-0.939,0.708 l-0.669,0.291l0.302,1.71l-0.638,0.87l-0.402,1.289l-0.536,1.098l0.401,0.677l-0.101,1.936l0.235,0.614l-0.302,0.966 l-0.474,1.325l-0.407-0.195l-0.286-0.551l-0.842-0.193l-0.874-0.421l-1.528-0.493l-0.755-0.722l-0.588-0.315l-0.587,0.082 l-0.55-0.2l-0.111-0.117l-0.394-0.454l0.051-1.166l-0.939-2.617l-0.078-0.27l0.005-0.23l0.087-0.832l0.084-0.791l-0.771-0.777 l-0.437-0.745l-0.22-0.873l-0.722-0.373l-0.2-0.566L310.189,436l-0.602-1.634l-0.236-0.615l-0.504-0.242l-0.068-1.052 l-0.118-0.679l-0.252-0.389l-0.353-0.939l-0.722-1.067l-0.907-0.729l-0.403-0.663l-0.616-0.299l-0.596,0.104l-0.201-0.258 l-0.353-0.169l-0.881,0.064l-0.799-0.114l-0.839-0.008l-0.26,0.542l-0.37,0.066l-0.092-0.139l-0.343-0.081l-0.538,0.185 l-0.487,0.462l-0.67,1.213l-0.404,0.495l0.092,0.233l-0.102,0.382l-0.461,0.112l-0.662,0.511l-0.093,0.282l-0.437,0.17 l-0.395-0.064l-0.277-0.306l-0.94-0.462l-0.781-0.242l-0.126-0.308l-0.948-0.46l-0.529-0.008l-0.311-0.308l-0.06-0.284 l-0.166-0.323l-0.445-0.17l-0.294,0.015l-0.386-0.371l-0.286,0.008l0.033-0.243l-0.207-0.632l-0.637-0.728l-0.806-0.923v-0.324 l0.537-0.128l0.269-0.196l-0.034-0.68l-0.538-0.485l-0.151-0.339l-0.269-0.048l-0.32-0.372l-0.1-0.989l-0.42-0.646l-0.638-0.405 l-0.571-0.161l0.235-0.341l0.05-0.404l-0.705-0.566l-0.722-0.258l0.15-0.438l-0.42-0.598l-0.485-0.016l-0.084-0.405l-0.404-0.47 l-0.739-1.019l-0.872-0.518l-7.521-0.227l-0.092,1.639l-13.306-0.388l-15.818-6.966l0.168-0.354l-0.234-0.386l-11.139,0.187 l-0.094-0.723l0.234-1.098l-0.201-1.355l-1.609-2.354l-1.037-1.032l-0.605,0.128l-0.469,0.033l-0.3-0.161l0.033-0.774 l-0.202-0.483l-1.138-0.322l-0.771-0.033l-1.241-0.645v-0.774l-0.569-0.612h-1.239l-0.686-0.121l-0.738-0.438l-0.941-0.258 l-1.595,0.016l-0.469-0.325l-0.253-0.743l0.202-0.132l0.235-0.727l0.335-1.359l-0.285-0.922l-0.755-0.825l-0.067-0.245 l0.184-0.306l-0.394-0.292l-0.705-0.935l-0.972-2l-0.2-1.547l-0.738-0.517L218,387.204l0.065-0.838l-0.233-0.936l0.032-0.388 l0.404,0.066l0.604-0.646l-0.035-0.709l-0.502-0.483l-0.703-0.42l-0.203-0.87l-0.434-0.226l-0.103-0.71l0.236-0.807l-0.099-0.419 l0.435-0.419l-0.1-0.549l0.334-0.451l0.402,0.259l0.402,0.806l0.771,0.386l-0.302-0.386l-0.303-0.677l-0.133-1.162l-0.369-0.257 l0.068-0.613h0.402l0.334,0.29l0.804-0.225l0.838-0.194l-1.174-0.129l-0.235-0.321l-0.736-0.033l-0.102-0.355l-0.234,0.193 l-0.604-0.354l-0.033,1v0.966l-0.234-0.128l-0.371,0.033l-0.167-0.452l-1.072-0.968l-0.234-0.644l0.268-0.549l-0.134-0.871 l-1.943-2.871l-0.202-0.514l0.168-0.581l0.4-0.677l-0.1-0.904l-0.402-0.774v-0.418l0.537-0.806l0.167-1l-0.066-1.808 l-0.738-1.642l-0.804-1.065v-1l0.501-1.031l1.375-0.902l0.471-1.195l-0.304-0.193l-0.133-0.581l0.502-0.483l0.503-0.999 l0.201-1.838l-0.334-1.097l0.033-0.708l0.4-0.517l-0.637-0.968l0.068-1.161l0.469-1.709l-0.134-1.71l0.331-0.781l1.209-1.485 l0.269-0.904l0.47-0.452l0.537-1.486l0.873-0.971l0.604-1.161l0.335-2.39l1.142-2.131l0.201-2.002l1.276-2.714l0.469-0.97 l0.731-1.225l-0.1-0.646v-0.677l0.939-1.161l-0.035-0.709l0.303-0.225l0.537,0.388l1.574,0.063l0.67,0.452l0.57-0.096 l0.837,0.482l0.436,1l-0.167-1.097l-0.469-0.579l-0.972-0.162l-0.77-0.613l-1.273-0.097l-1.275-0.321l-0.1-0.485l0.334-0.354 l0.302,0.128l0.535-0.613l0.034-0.871l0.269-0.678l-0.738-0.29l-0.334-0.387l0.234-0.708h0.469l0.369-0.517l-0.066-0.324 l-0.605-0.161l-0.066-0.579l0.203-1.129l-0.236-1.162l0.468-2.29l-0.501-1.644l-0.034-0.807l0.738-1.645l0.133-0.904l0.334-0.096 l2.146,1.805l1.14,0.71l2.078,0.129l0.737,0.355l0.437,0.806l0.434-0.193l0.437,0.032l0.302,0.548l-0.269,0.516l-0.972,0.355 l-0.871,0.838l-0.033,0.452h0.736l0.335-0.548l0.971-0.775l0.47-0.098l0.102,0.711l-0.705,0.58l-0.537,1.063l-0.033,1.098 l-0.303,0.321l-0.133-0.677l-0.603,0.485l-0.202-0.354l-0.67,0.805l0.269,0.452l0.771,0.386l1.005-0.644l0.301-0.774l0.504-0.548 l0.033-1l0.535-0.452l0.27-1.129l0.771-0.483l0.77-0.904l-0.436-0.515l-0.066-0.614l-0.302-0.257l0.537-0.709l0.302-0.354 l-0.671-0.452l-0.133-0.742l0.804-0.58l0.1-0.613L235.893,305L235.53,303.41L235.53,303.41z M454.212,367.048l0.184,0.339 l0.512-0.042l0.404-0.378l0.645,0.006l-0.418-0.429l-0.773,0.008l-0.184,0.235L454.212,367.048L454.212,367.048z  M440.105,370.722l-0.386,0.338l0.671-0.2l0.303-0.291l1.022-0.049l0.941-0.275l1.527-0.032l0.706-0.389l1.326,0.049l0.335-0.294 l0.395,0.074l1.251-0.378l0.503-0.454l-0.771,0.261l-0.487-0.214l-0.903,0.373l0.333-0.468l0.352-0.391l-0.034-0.225 l-1.309,0.696l-1.46,0.015l-1.192,0.341l-0.973-0.226l-1.327,0.532l-1.024,0.146l-0.52,0.631l0.133,0.396L440.105,370.722 L440.105,370.722z M235.559,307.892l-0.89,0.729l-0.016,1.23l0.638,1.342l0.369-0.291l-0.521-1.667l0.167-0.743l0.521-0.21 L235.559,307.892L235.559,307.892z M323.788,438.482l0.384-0.26l0.974-1.149l0.673-0.857l-0.957,0.68L323.788,438.482 L323.788,438.482z M322.729,440.813l0.319-0.21l0.436-1.102l-0.034-0.435L322.729,440.813L322.729,440.813z M322.319,446.899 l-0.435-1.517l0.133-2l0.57-2.129l-0.837,1.999l-0.101,2.033C321.648,445.285,322.353,446.899,322.319,446.899z ",
"M613.631,849.351l-0.335-1.151l-0.705-0.37l-0.169-0.762 l-0.738-0.29l-0.371-0.552l-0.923-0.243l-0.015-0.227l1.124-0.031l1.042,0.355l0.051,0.293c0,0,0.402,0.128,0.487,0.191 c0.083,0.064,0.887,0.684,0.887,0.684l0.321,0.063l0.25,0.955l0.673,0.26l0.604,0.127l-0.369,0.422l-0.689,0.032l-0.386,0.34 l-0.486,0.111L613.631,849.351L613.631,849.351z M513.405,831.072l1.211-0.162l0.569,0.628L513.405,831.072L513.405,831.072z  M511.841,831.411l0.403,0.663l0.722-0.229L511.841,831.411L511.841,831.411z M508.546,835.284l0.463-0.354l0.596,0.362 l0.564,0.098l-1.187,0.469L508.546,835.284L508.546,835.284z M515.185,836.646l0.64,0.178l0.673,1.066l0.622,0.112l0.034-0.323 l-0.572-0.807l0.286-0.289l0.806,0.483l0.42-0.178l-0.386-0.471l-0.068-0.583l0.909,0.18l0.857-0.193l0.035-0.228l-0.657-0.014 l-0.471-0.388l0.421-0.275l0.741,0.242l1.092-0.194l0.825-0.68l0.857-0.239l-0.118-0.519l-0.471-0.179l-0.201-0.209l0.454-0.355 l0.655,0.033l-0.335-0.471l-1.127-0.306l-0.673,0.242l0.27,0.501l-0.572,0.275l-0.639-0.875l-0.035-0.646l-1.362-0.255 l-0.133,0.71l-0.657,0.29l0.269,0.599l-0.286,0.403l0.858,1.097l-0.185,0.341l-0.54-0.29l-0.722,0.144L515.185,836.646 L515.185,836.646z M514.007,832.169l0.636,0.612l0.504-0.033l0.335-0.546l0.637-0.195l0.436,0.646l-0.469,1.031l-1.173,0.84 l-0.034,0.968l-1.006,0.483l-1.374-0.131l-0.804,0.451l1.005,0.451l-0.535,0.842l-0.906-0.646l-0.501,0.516l-1.006-0.516 l0.033-0.421l0.637,0.033l0.905-0.902l-0.167-0.549l0.637-0.386h1.038v-0.421l-1.038-0.127l-1.105-1.452l0.334-0.387l0.906,0.74 l0.903,0.131l0.336-0.936L514.007,832.169z",
"M405.838,537.573 404.876,536.74 403.836,535.348  403.45,534.184 403.819,533.844 404.59,532.729 405.062,532.66 405.448,532.273 405.229,531.658 404.724,531.675  404.121,532.354 403.836,532.58 403.349,532.209 403.028,531.386 402.225,530.346 401.602,530.236 400.762,529.441  400.176,529.136 399.051,529.232 397.656,529.942 397.555,530.8 397.824,531.012 397.875,531.433 396.565,532.58  395.105,532.888 394.333,533.276 394.182,533.78 394.534,534.507 395.306,535.041 396.028,535.656 395.962,536.562  395.491,536.706 394.651,536.578 394.013,537.211 393.459,538.052 392.15,537.856 391.848,537.355 392.016,536.706  391.781,535.803 391.949,535.317 391.663,534.943 391.042,534.847 390.739,535.317 391.059,535.656 390.774,536.188  390.002,536.223 389.262,535.803 388.675,534.651 388.456,533.504 386.761,533.276 386.241,533.131 386.291,532.809  385.888,532.388 385.452,532.694 384.596,532.842 383.807,532.71 383.15,532.777 382.851,532.34 382.822,531.872  383.022,531.163 383.76,530.613 383.191,529.84 382.655,529.682 382.788,528.971 383.357,528.358 383.324,527.584  383.76,527.292 384.577,527.33 384.762,527.823 385.266,528.341 385.838,528.52 386.207,528.49 386.46,528.763 386.141,528.859  385.956,529.038 386.19,529.394 386.961,529.782 387.7,529.653 387.7,529.198 387.163,528.876 387.432,528.65 388.502,529.136  390.111,530.199 391.621,530.263 392.424,530.165 393.263,529.394 396.109,528.004 397.517,527.685 398.824,526.779  399.294,526.716 399.998,527.008 400.267,527.425 400.937,527.587 402.98,527.587 404.119,527.846 406.063,528.939  406.902,529.876 407.069,530.361 407.706,530.714 408.086,531.037 407.89,531.822 408.041,532.404 408.46,533.521  407.789,534.668 407.468,535.755 406.899,536.191 406.446,536.223 			",
"M382.856,532.421 382.851,532.34 383.15,532.777  383.016,532.791 383.066,533.31 382.917,533.746 382.329,533.713 382.002,533.359 381.752,533.218 381.432,533.037  381.465,532.232 380.663,531.296 380.159,530.939 379.823,531.168 379.823,531.33 380.627,531.714 381.065,532.263  380.963,533.007 380.594,533.198 379.857,532.747 378.751,532.359 378.349,531.748 378.349,531.135 378.953,530.395  378.786,529.973 377.781,528.845 377.177,528.49 376.373,527.779 375.3,527.2 374.998,526.298 374.094,525.686 374.026,524.941  373.154,524.523 372.351,523.912 371.95,524.234 372.25,524.716 373.489,525.588 373.725,526.362 373.188,527.264  372.753,527.264 372.318,526.523 371.579,526.071 370.34,526.038 369.101,525.009 368.899,524.137 369.335,523.104  370.14,522.652 369.937,521.75 369.234,521.589 368.966,521.363 369.268,521.104 369.536,520.104 369.431,520.035  369.751,519.906 369.751,519.647 371.328,519.423 373.84,520.133 374.679,520.004 375.952,519.94 376.455,520.617  377.059,520.81 377.059,521.165 378.03,522.004 378.5,521.745 378.995,521.745 378.786,522.073 379.757,522.073 379.891,521.652  380.331,521.561 380.649,522.354 380.784,523.326 381.355,524.197 382.296,525.105 382.58,525.832 383.085,526.432  383.824,526.643 384.496,527.11 384.577,527.33 383.76,527.292 383.324,527.584 383.357,528.358 382.788,528.971  382.655,529.682 383.191,529.84 383.76,530.613 383.022,531.163 382.822,531.872 382.851,532.34 382.851,532.34 			 ",
"M369.431,520.035l0.32-0.129v-0.259l1.577-0.225l2.513,0.71 l0.838-0.129l1.273-0.063l0.503,0.677l0.604,0.192v0.355l0.971,0.839l0.47-0.259h0.495l0.059-0.093l0.435-0.258l-0.134-0.677 l-0.503-0.58l-0.232-0.935l0.568-1.065l0.302-0.709l0.034-0.937l-0.267,0.515l-0.135,0.422l-0.469,0.259v-0.646l0.234-0.71 l0.435-0.966l-0.135-0.582l0.034-0.612l0.537-1.323l0.402,0.098l-0.168,0.356c0,0-0.033,0.545-0.033,0.707s0,0.936,0,0.936 l0.256,0.03l0.368-0.598l0.218-1.733l-0.017-2.07l0.17-0.438l-0.353-0.516l-0.303-0.131l0.015-0.453l0.32-0.323l0.285,0.032 l0.167,0.272l0.285-1.112l0.757-0.925l0.351-0.6l0.086-0.45l-0.456-0.31l-0.05-0.387l0.278-0.577l-0.134-0.742l0.066-1.192 l0.27-0.485l0.281-0.286l-0.534,0.092l-0.655,0.066l-0.185-0.356h-0.522l-0.401,0.21l-0.184,0.599l-0.622,0.275l-0.816,0.558 l-0.77,0.062l-0.201,0.55l-0.604-0.161l-0.837,0.127l-0.167-0.384l-0.637-0.485l-0.369,0.034l-0.2,0.805l-0.872,0.03 l-0.738,1.098l-0.066,0.484l-0.435,0.226l-0.939,0.871l-0.972,0.354l-0.268,0.484l-0.636-0.226l-0.469,0.128l-0.537-0.484 l-1.106-0.192l-1.541,0.808l-1.441,0.161l0.1,0.839v0.645l-0.133,1.16l-0.336,0.646l-1.138,0.098l-0.787,0.128l-0.033,0.489 l-0.367,0.064l-0.839-0.289l-0.168,0.289l1.676,1.966l0.803,0.516v0.549l1.342,1.161l1.171,1.549l2.146,2.259l0.569,0.063 L369.431,520.035z",
"M362.799,511.199 363.586,511.071 364.724,510.974  365.06,510.328 365.193,509.168 365.193,508.523 365.094,507.685 366.535,507.523 368.076,506.716 369.182,506.908  369.719,507.393 370.188,507.265 370.824,507.49 371.092,507.006 372.064,506.651 373.003,505.78 373.438,505.555  373.504,505.07 374.243,503.973 375.114,503.942 375.314,503.138 375.684,503.104 376.321,503.589 376.488,503.973  377.326,503.846 377.93,504.007 378.13,503.457 378.9,503.395 379.716,502.837 380.338,502.562 380.522,501.963 380.924,501.753  381.446,501.753 381.63,502.109 382.286,502.043 382.82,501.951 383.108,501.659 382.84,501.208 381.766,500.37 380.762,499.95  380.696,500.11 381.098,500.852 380.092,500.82 378.886,500.689 378.417,500.336 377.544,500.238 376.774,500.238  376.976,499.885 377.577,499.724 377.513,499.304 377.913,499.208 378.651,499.37 379.891,499.724 380.059,499.596  379.22,498.949 378.082,498.336 377.277,498.272 376.507,498.432 376.004,498.208 375.803,498.757 375.199,498.336  373.154,498.145 371.179,498.048 370.105,497.176 369.134,496.726 368.932,497.273 369.301,497.532 368.565,497.819  368.095,498.145 367.324,497.886 365.782,498.272 363.806,498.11 361.059,498.175 359.852,498.821 359.285,498.373  359.128,498.753 358.525,499.169 358.224,499.943 356.916,500.684 356.211,500.653 355.006,501.846 354.269,502.589  354.502,503.362 353.934,504.555 352.697,505.432 352.66,505.6 352.66,505.942 352.579,505.964 352.054,508.317 352.759,509.324  353.148,509.303 354.725,509.979 356.198,510.754 356.399,510.367 355.729,510.011 356.065,509.817 356.902,509.849  357.606,510.754 358.108,511.171 360.22,511.205 360.822,510.397 360.588,509.979 360.891,509.688 361.393,509.945  361.627,510.27 362.03,510.239 362.229,509.945 362.599,510.139 362.599,510.689 362.8,511.171 			",
"M353.824,504.633 354.6,504.795 354.75,505.021  355.269,505.201 355.707,505.686 356.597,505.558 357.537,505.749 358.108,506.463 358.259,506.98 358.83,507.354  359.015,506.946 359.216,506.445 360.005,506.365 360.458,506.51 361.08,506.721 361.08,507.448 360.878,508.292  360.979,508.632 360.744,509.312 360.857,509.718 360.588,509.979 360.822,510.397 360.22,511.205 358.108,511.171  357.606,510.754 356.902,509.849 356.065,509.817 355.729,510.011 356.399,510.367 356.198,510.754 354.725,509.979  353.148,509.303 352.613,509.333 351.542,509.108 350.804,508.432 349.899,508.432 349.478,508.289 349.811,507.78  349.844,507.328 350.717,506.426 351.855,506.168 352.66,505.942 352.66,505.46 			",
"M354.812,489.067 354.818,489.067 354.885,488.418  355.386,488.09 356.057,488.12 356.1,488.468 356.309,488.604 356.485,488.371 356.838,488.29 356.887,488.097 357.476,487.326  357.661,486.654 357.854,486.298 358.417,486.105 358.752,486.126 358.981,486.532 359.45,486.111 360.053,486.111  360.153,486.597 360.018,487.081 359.885,489.275 359.381,490.08 359.18,491.403 359.683,491.888 359.65,493.371 359.18,494.597  357.875,496.337 357.372,495.917 356.5,496.788 356.13,497.532 356.141,497.546 355.64,497.577 355.371,497.432 354.7,497.398  354.829,489.083 			",
"M349.478,508.289 349.811,507.78 349.844,507.328  350.717,506.426 351.855,506.168 352.66,505.942 352.66,505.46 353.934,504.555 354.502,503.362 354.269,502.589  355.006,501.846 356.211,500.653 356.916,500.684 358.224,499.943 358.525,499.169 359.128,498.753 359.285,498.373  358.913,498.078 358.075,497.981 357.84,498.531 357.103,498.048 356.433,498.048 356.141,497.546 355.64,497.577  355.371,497.432 354.7,497.398 354.829,489.083 354.812,489.067 346.742,488.952 346.557,491.3 344.609,491.462 345.297,492.011  345.549,492.464 346.288,493.354 347.027,493.822 347.547,493.822 347.899,494.422 348,495.069 348.319,495.41 349.109,495.458  349.612,495.733 349.63,496.315 349.158,496.833 343.216,496.866 340.429,501.104 340.518,501.828 340.593,502.054  340.518,502.508 340.711,502.865 340.837,502.976 340.796,503.365 340.375,503.68 340.192,504.165 340.037,504.29  340.782,505.173 341.353,506.075 342.056,506.14 342.694,506.883 345.141,507.786 346.581,507.818 347.687,507.688 			 ",
"M235.183,409.632l11.139-0.187l0.234,0.386l-0.168,0.354 l15.818,6.966l13.306,0.388l0.092-1.639l7.521,0.227l0.872,0.518l0.739,1.019l0.404,0.47l0.084,0.405l0.485,0.016l0.42,0.598 l-0.15,0.438l0.722,0.258l0.705,0.566l-0.05,0.404l-0.235,0.341l0.571,0.161l0.638,0.405l0.42,0.646l0.1,0.989l0.32,0.372 l0.269,0.048l0.151,0.339l0.538,0.485l0.034,0.68l-0.269,0.196l-0.537,0.128v0.324l0.806,0.923l0.637,0.728l0.207,0.632 l-0.033,0.243l0.286-0.008l0.386,0.371l0.294-0.015l0.445,0.17l0.166,0.323l0.06,0.284l0.311,0.308l0.529,0.008l0.948,0.46 l0.126,0.308l0.781,0.242l0.94,0.462l0.277,0.306l0.395,0.064l0.437-0.17l0.093-0.282l0.662-0.511l0.461-0.112l0.102-0.382 l-0.092-0.233l0.404-0.495l0.67-1.213l0.487-0.462l0.538-0.185l0.343,0.081l0.092,0.139l0.37-0.066l0.26-0.542l0.839,0.008 l0.799,0.114l0.881-0.064l0.353,0.169l0.201,0.258l0.596-0.104l0.616,0.299l0.403,0.663l0.907,0.729l0.722,1.067l0.353,0.939 l0.252,0.389l0.118,0.679l0.068,1.052l0.504,0.242l0.236,0.615l0.602,1.634l0.388,0.244l0.2,0.566l0.722,0.373l0.22,0.873 l0.437,0.745l0.771,0.777l-0.084,0.791l-0.087,0.832l-0.005,0.23l0.078,0.27l0.939,2.617l-0.051,1.166l0.394,0.454l0.111,0.117 l0.55,0.2l0.587-0.082l0.588,0.315l0.755,0.722l1.528,0.493l0.874,0.421l0.842,0.193l0.286,0.551l0.407,0.195l-0.229,0.642 l0.803-0.517l0.269-1.289l0.637-0.515l-0.134,0.449l-0.134,1.163l-0.368,0.386l-0.269,0.999l-0.703,0.97l-0.134,0.772 l-0.537,0.063l0.167-0.45l0.135-0.807l-0.806-0.063v1.257l-0.569,0.677l0.604,0.452l-0.201,0.419l-0.302,1.258l-0.469,0.452 v1.064l0.301,0.386l-0.334,0.613l0.066,0.645l-0.502,2.227l0.235,1.387l-0.235,2.127l-0.736,0.937l0.234,0.709l0.302,1.708 l-0.135,0.969l1.207,1.839l0.034,1.322l-0.301,0.257l-0.135-1.579l-1.039-1.29l-0.134,0.966l0.702,0.614l0.537,1.838l0.234,0.615 l-0.334,0.612l0.537,0.771l0.201,0.872l2.547,2.646l0.426,0.997l0.856,1.214l-0.066,0.68l0.25,0.729l1.932,2.2l0.622,0.632 l0.435-0.101l1.277,0.033l0.302,0.34l1.36,0.552l1.058,1.405l0.353,1.134l1.116-0.495l1.573-0.323l0.403,0.451h0.537l1.944-1.063 l0.267-0.387l1.642-0.129l1.074-0.032l0.837-0.678l1.24-0.033l1.006,0.292l0.402-0.519l1.307,0.354l-0.905,0.454l-0.235,0.548 l1.074,0.452l0.535,0.515l0.202-0.483l0.537-0.031l0.904-1.034l0.033-1.289l0.236-0.773l-0.905,0.58l-0.168-0.163l2.077-1.063 l0.704-0.161l0.893-1.031v-1.55l1.679-1.744l-0.134-0.323l0.134-2.778l1.745-1.871l-0.738-0.064v-0.648l3.021-0.71l3.959,0.063 l0.671-0.902l1.141-0.131l0.403,0.391l1.141-0.519l-0.067-0.451l1.812-0.067l2.147,0.519l0.538-0.195l-0.202-0.515l0.874-0.066 l1.356,1.646l0.069,0.985l-0.736,1.127l-1.041,1.678l-2.044,1.773l-0.403,0.646l-0.101,1.191l-0.905,0.551l-0.301,0.32 l0.604,0.485h0.771l-0.168,0.643l-1.038,1.066v0.354l0.402,0.194l0.468-0.454l0.436-0.064l-0.468,0.744l-0.737,2.805l-0.872,1.45 l-0.201,0.194l-0.369-0.837l-1.039-0.613l-0.033-0.258l0.435-0.419l0.102-0.904l-0.536,0.161l-1.006,1.128l-0.804,0.676 l0.007,0.015l-0.335-0.021l-0.563,0.192l-0.193,0.356l-0.185,0.672l-0.589,0.771l-0.049,0.193l-0.353,0.081l-0.177,0.233 l-0.208-0.137l-0.043-0.348l-0.671-0.03l-0.501,0.328l-0.066,0.649l-8.077-0.115l-0.185,2.348l-1.947,0.162l0.688,0.549 l0.251,0.453l0.739,0.891l0.739,0.468h0.52l0.353,0.6l0.101,0.647l0.318,0.341l0.79,0.048l0.503,0.275l0.019,0.582l-0.472,0.518 l-5.942,0.033l-2.788,4.238l0.089,0.724l0.075,0.226l-0.075,0.454l0.193,0.357l0.126,0.11l-0.041,0.39l-0.421,0.314l-0.184,0.485 l-0.155,0.125l-0.729-0.857l-1.306-0.969l-0.135-0.515l-1.005-0.29l-3.216-2.581l-0.402-0.516v-0.388l-0.805-0.968l-0.805-0.677 l-0.904-0.159l-0.167-0.162l-0.335,0.03l0.068,0.26l1.506,0.646l1.073,1.03v0.257l-0.637-0.546l-1.407-0.872l-0.837-0.288 l-0.671,0.03l-0.335-0.162l0.201-0.192l0.47-0.03v-0.39h-0.604l-0.569,0.292v-0.484l-0.334-0.162l-1.041,0.582l-0.033,0.418 h0.771l0.904,0.129v0.258l-0.468-0.063l-1.174,0.098l-0.938,0.159l-1.273,0.807l-1.007,0.064l-2.378,0.969l-0.939,0.063 l-2.312-0.807l-1.239-0.645h-1.608l-1.709-0.646l-0.871-0.515l-0.369,0.095l-0.771-0.063l-1.172-0.516l-0.636-1l-0.268-0.191 l-0.671,0.256l-1.206-0.549l-1.307-0.098l-0.571-0.901l-1.104-0.547l-2.314-0.322l-2.009-0.774l-1.341-1.322l-0.604-0.099 l-2.271-2.127l-0.42-0.52l-0.52,0.031l-0.235,0.344l-0.706-0.051l-1.797-0.663l-0.585-0.05l-0.924-0.37l-0.387,0.128 l-0.933-0.334l-0.67-1l-0.804-1.226l-1.173-1.062l-1.14-0.388v-0.387l0.437-0.549l-0.571-0.098l-1.006,0.195l-1.473-0.357 l-0.269-0.515h-0.702l-0.437-0.354l-0.336-1.098l-0.871-1.097v-0.646l-0.604-0.578l-0.637-1.582v-0.418l0.57-0.322l1.072,0.033 l0.403-0.451l-0.538-0.485l-0.468-0.063l0.134-0.519l1.072-0.902l0.501-0.807l-0.066-0.997l-1.006-2.454l-0.501-1.288 l-0.335-0.613l0.335-0.838l-0.167-0.872l-1.709-2.062l-0.035-0.903l-1.507-1.485l-1.04-1.837l-1.407-1.774l-1.24-1.032 l-0.436-0.29l-0.066-0.547l-1.375-0.55l-0.77-0.419l-0.068-0.322l0.57-0.227l0.369-0.774l-0.369-0.548l-0.335-0.838l-0.235-0.517 h-0.57l-1.072-0.258l-1.843-1.386l-0.535-0.451l-0.838-0.064l-0.771-0.517l-0.134-0.902l0.468-1.258l0.806-0.838l0.602-0.195 l0.47,0.484l0.368-0.419l-0.133-0.579l-0.235-0.292l-0.302,0.292l-0.636-0.324l-0.133-0.677l-0.806-0.969l-0.736,0.098 l-0.805-0.194l-0.401-0.741l0.201-0.807l-0.57-0.193l-0.568,0.063l-1.609-1.387l-0.168-1.225l0.368-0.549l0.033-1.032 l-0.503-0.385l-0.636,0.258l-0.336-0.258l-0.602-0.033l-0.201-0.419l-0.604-0.484l-0.268-0.773l-0.502-1.034l-0.604-0.161 l-0.369-0.386l-0.1-1.032l-0.267-0.709l-0.637-0.291l-0.503-1.451l-0.333-0.483h-0.369l-0.302-0.613l0.268-0.418l0.067-0.453 l-1.14-1.547l-0.334-0.774l0.201-0.58l-0.135-1.065l-0.402-0.709l-0.235-1.549l-0.469-1.063l-0.066-0.775l0.636-0.708v-0.452 l-0.971-0.516l-0.904-0.032l-0.27-0.515l-0.77-0.709l-0.437,0.323l-0.77,0.128l-0.537-0.451l-0.838-1.257l-1.239-0.549 l-0.604-1.033l0.335,1.033l0.167,0.838l-0.436,1.548l-0.402,1l0.234,1.903l0.135,3.127l-0.402,0.742l0.501,0.518l0.639,1.289 l-0.034,0.87l0.502,0.034l0.436,0.645l1.273,0.837l0.27,1.194l-0.167,0.58l0.233,0.808l0.771,0.354l0.604,0.612l0.1,0.969 l0.369,0.386l0.604,0.128l0.77,1.161l-0.1,0.936l0.032,1.065l0.873,0.773l0.368,0.13l0.771,1.192l0.269,1.806l0.401,0.033 l0.269,0.452l-0.302,0.645l0.067,0.58l0.839,1.226l0.333-0.291l-0.033-0.517l0.033-0.354l0.336,0.064l0.268,0.612l0.569,0.904 l0.268,1.678l-0.201,0.646l0.101,1.127l0.268,0.421v0.869l0.536,0.582l-0.036,0.636l0.455,0.501l0.017,0.551l-0.202,0.614 l0.705,0.938l0.033,0.938l-0.47,0.923l0.102,0.541l0.805,0.935l0.703,0.55l0.136,0.516l0.4-0.161l-0.034-0.613l0.269-0.194 l0.434,0.226l0.469,0.582l0.302,0.581l0.705,0.386l0.267,0.84l0.437,0.418l0.269,0.807l0.568,0.355l-0.065,1.127l-0.838,1.226 l-1.407,0.613l-0.571-0.161l-0.401-0.935l-0.066-0.677l-0.537-0.42l-0.1-1.194l-0.435-0.581l-0.973-0.097l-0.705-0.805 l-0.334-0.612l-0.704-0.29l-1.978-2.064l-0.435-0.87l-0.904-0.194l-0.236-0.611l-0.4,0.096l-0.906-0.709l-0.134-0.71l0.771-1.259 l0.302-1.452l-0.135-1.837l-0.57-1.709l-0.469-0.677l-0.469,0.129l-0.67-0.291l-1.609-1.484l-0.235-1.418l0.302-0.741 l-0.369-0.098l-0.804,0.904l-0.604,0.031l-0.603,0.258l-0.336-0.645l0.134-0.324l-0.601-0.225l-0.603,0.033v-0.452l-1.074-0.485 l-0.805-0.257l-0.468-0.804l-0.066-0.872l-0.838-0.355l-0.939-1.193l0.236-0.257l1.206-0.096l0.704,0.258l1.139,0.193 l0.637,0.387l0.334-0.453l0.135-0.547l-0.77-0.129l-0.101-0.225l0.468-0.485l0.537,0.226l0.234-0.709l-0.334-0.516l0.033-0.483 l0.535-0.678l-0.603-0.968l-0.402-0.16l-0.468-1.355l-1.139-1.095l-0.201-0.71l-0.67-0.904l-1.308-1.257l-0.535,0.033 l-0.806-0.742l-0.436-1.226l-0.033-1.517l-0.267-0.515l-0.569-0.482l0.066-0.905l0.301-0.418l-0.133-0.871l-0.973-0.839 l-0.201-0.548l0.302-0.291l0.032-0.483l-1.238-1.452l-0.302-0.839l0.134-0.708l0.369-0.259l-0.503-0.645l-0.537-0.967 l-0.637-2.289L235.183,409.632L235.183,409.632z M259.251,452.606l0.501-0.322l-0.134-0.645l-0.537-0.711l-0.234,0.388 l0.234,0.387L259.251,452.606L259.251,452.606z M260.121,454.572l-0.066,0.581l0.402,0.034l0.135-0.484L260.121,454.572 L260.121,454.572z M319.623,453.256l0.285-0.112l0.151-0.52l-0.319,0.034L319.623,453.256L319.623,453.256z M319.438,454.341 l0.118,0.146l0.235-0.762h-0.252L319.438,454.341L319.438,454.341z M318.884,456.314l0.437-0.776l-0.033-0.68L318.884,456.314z",
"M530.822,573.963l0.354-0.454l0.638-0.386l0.219,0.207 l-0.253,0.568l-0.688,0.129L530.822,573.963L530.822,573.963z M529.984,573.929l0.353-0.08l0.151-0.322l1.024-0.955l0.487-0.048 l0.789-0.794l-0.201-0.323l-0.335,0.098l-0.421-0.05l-0.436,0.178l-0.874,0.857L529.984,573.929L529.984,573.929z  M533.979,570.743l-0.117-0.372l-0.571-0.26l-0.084,0.519l0.269,0.387l0.471,0.144L533.979,570.743L533.979,570.743z  M533.997,569.836l-0.169-0.794l0.521-0.564l0.47-0.229l0.622-0.451l0.419,0.064l-0.386,0.632l-0.521,0.162l-0.453,0.679 L533.997,569.836L533.997,569.836z M534.333,570.434l0.419,0.227l1.142,0.034l0.353,0.212l0.604-0.276l0.185-0.569l-0.521-0.403 l-1.309,0.324l-0.687,0.066L534.333,570.434L534.333,570.434z M536.934,571.504l0.706-0.292l0.202-0.388l0.638-0.033L539,571.16 l-0.335,0.521l-1.042,0.064L536.934,571.504L536.934,571.504z M534.043,562.189l-0.47-0.674l-0.368-1.131l0.134-0.323 l0.638,0.421l0.669,1.161l-0.101,0.612C534.545,562.256,534.111,562.189,534.043,562.189L534.043,562.189z M529.922,553.323 l-0.386-0.354l-0.151-0.872l-0.57-1.063l-0.232,0.128l0.065,0.71l-0.368,0.549l-1.073,0.677l0.012-0.017l-0.057,0.052 l-0.351,0.519l-1.142,1.361l-1.21,1.504l-0.015,0.811l-0.892,1.859l-0.755,1.183l-0.571,1.082l-0.805,0.131l-0.487,0.34 l-0.185,0.729l-0.823,0.583l-0.554-0.179l-0.034-1.18l-0.336-0.147l-0.118-0.37l-0.519-0.051l-0.655,0.244l-0.503,0.533 l-0.798-0.135l-0.638-0.687l0.009-0.438l-0.251-0.208l-0.294-0.73l-0.166-0.423l-0.633-0.13l-0.906-0.825l-1.209-0.05 l-0.891,0.39l-1.931,0.081l-1.041-0.259l-0.906,0.581l-0.151,0.811l0.856,0.808l0.219,0.519l0.436,0.972l-0.167,0.339 l-0.789,0.034l-1.176-0.314l-0.287-0.215l-0.384-0.006l-0.081-0.025l0.024,0.018h-1.509l-0.837,0.128l-0.369-0.387l-1.373,0.066 l-0.972,0.387l-0.537,1.417l-1.91-0.062l-0.972,0.289l-0.134,0.42l-0.637,0.741l-1.072,0.099l-0.134-0.292l-0.637,0.163 l-0.57,0.706l-0.737-0.289l-1.843-1.514l-0.67-0.809l-0.034-0.643l-1.006-0.97l-0.837-0.838l-0.101-0.903l0.202-0.611 l-0.234-0.451l0.134-0.809l0.336-0.646l-0.069-0.967l0.906-1.514l0.302-1.225l0.837-1.001l-0.033-0.484l-0.871,0.064 l-0.436-0.646l-0.302-0.644l-0.971,0.065l-0.804-0.389l0.402-0.548l0.57-0.871v-1.192l-0.771-0.936l-1.04-0.098l-0.503,0.323 l-0.367-0.388l-0.46-0.064l0.09,0.937l-0.436,1.063l-2.413,1.646l-1.509,0.128l-2.077,0.839l-0.771-0.354l-1.307,0.128 l-1.507,1.289l-1.475,0.485l-0.503-0.324l-2.077,0.26l-1.609,0.095l-1.441-0.774l-1.442-0.227l-1.34-0.386l0.604,1.097 l0.972,0.354l1.006,0.904l0.336,0.838l-1.309,1.936l0.502,0.901l-0.301,1.485l2.146,0.677l1.474-0.162l1.475,0.29l0.067,0.904 l-1.072,0.482l-2.18,0.42l-0.769,0.809l-0.436,1.16l-2.38,1.192l-0.771,0.872l-1.601,1.007l-1.09,1.263l-1.896,0.097 l-1.076-0.145l-1.848-1.376l-1.788-1.175l-1.217,0.139l0.033-1.229l-0.184-0.986l-0.772-0.908l-0.258-0.685l-1.273,0.322 l-0.906,0.967l-0.603,0.098l-0.502-0.451h-0.905l-0.569,0.613l-5.262,0.03l-0.302,1.45l0.436,1.067l1.776,0.451l0.671,1.19 l-0.503,0.549l0.537,0.548l-0.235,0.741l-1.105-0.707l-3.117,1.03l0.135,2.454l0.803,0.999l1.743,1.289l1.14,1.936l-0.068,1.515 l-0.034,0.677l-2.612,9.34l-0.776,2.471l0.105,0.447l-0.403,0.644l-1.005-0.258l0.101-0.291l-1.039-0.646l-0.369,0.098h-0.906 l-0.401-0.162l-0.335,0.71l-3.184,1l-2.378,0.485l-0.604,0.579l-0.537,0.161l-0.972,0.936l-1.107,0.483l-0.836,0.517l0.134,1.161 l-0.47,0.68l0.201,0.707l-1.273,1.226l0.436,1.548l0.435,0.808l-0.77,0.71l-0.671-0.131l-1.307,0.808l-0.067,0.903l-0.468,0.483 l0.3,0.613l-0.166,0.999l-0.369,0.839l0.335,0.74l-0.235,0.68l1.273,1.225l2.278,3.548l-1.173,1.417l2.882-0.225l1.375,0.225 l1.005,1.421l0.301,1.259l1.995,0.072l2.367,0.145l1.964-1.731l1.663-0.923l0.47,0.485l-0.219,0.987l-0.335,0.341l-0.033,1.602 l0.252,2.636l0.05,1.054l0.57,0.518l0.924-0.145l0.891-0.245l1.002-0.064l0.512-0.063l0.463,0.211l0.133,0.056h-0.001 l2.954-0.005l1.342,0.064l1.343-0.711h0.738l1.007-0.777h1.142l1.34-0.386l0.807-2.003l2.216-1.356l1.544-0.259l1.475-0.71h1.007 l0.94,0.646l1.074-0.646l0.537,0.451l-0.134,1.033l0.536,1.615l-0.737,1.291l0.605,2.069l-0.404,0.906l0.805,1.679l1.075,0.451 l0.334,1.356l1.076,0.518l1.475,0.902l1.008,0.904l0.403-0.451l1.946-0.453l1.612,1.551l1.208-0.322l1.679,1.746l0.737-0.068 l2.014,0.646l1.276,0.453l0.268,1.292l0.94,0.26l1.208,0.646l2.686-0.259l1.877,1.033l0.403,0.773l-0.269,2.065l0.403,1.684 l-0.538,1.033l1.746,2.84l-0.134,2.068l8.188,0.129l0.404,2.843l-0.134,1.81l2.417,0.516l2.416,4.135l0.135,2.195l-2.282,4.394 l0.135,0.646l-0.625,0.827l0.423,0.465l-0.269,0.969l1.142,0.838l0.067,1.358l0.94,1.354l-0.47,2.715l0.268,1.097l-0.336,0.97 l0.336,0.969l1.746-0.129l0.738,0.324l2.148-0.131l1.342,0.453l2.147-0.841l1.142,0.777l0.873,0.256l0.335,1.036l1.175,4.862 l0.804,1.709l0.838,0.226l1.842-0.969l1.039,0.387l0.703,0.613l0.669,0.131l-0.451,0.724l-0.117,4.208l-0.191,0.495l-0.126,0.156 l0.004,0.562l-0.117,0.466l-0.045,0.542l0.809-0.509l2.146,0.289l0.066,0.902l0.872,1.902l-0.067,1.514l0.201,1.744l0.168,1.612 l-0.269,0.646l-0.938-0.034l-1.14,0.582l-0.166,0.354l-0.671,0.548l-0.301-0.162l-1.911,1.226l-0.369,0.582l-0.736,0.192 l-1.742,1.387l-0.57,0.196l-0.068,1.096l-0.636,0.192l-0.57-0.098l-1.475,1.743l-0.268,0.677l0.034,1l-0.669,0.191l-0.369,0.548 l-0.939,1.646l-0.669,0.677l-0.772,1.226v0.42l-0.87,0.579l-0.125,0.401l0.695,0.021l0.503,0.259l2.345-0.681l0.972,0.613 l1.071,1.42l0.94,0.388l0.568,1.226l1.107,1.742h0.535l0.906-0.936l0.469,0.063l1.072,1.678l1.273,0.548l1.106,0.227l1.072,1.033 l0.068,1.225l0.904-0.195l1.81,0.774l1.072,1.292l1.139,1.644l1.041,0.709l-0.202,1.26l-0.872,1.16l0.436,1.354l0.167,0.335 l0.126,0.217l0.544,0.695l0.263,0.21l1.757-1.4l0.604-1.354l0.771-3.129l0.703-2.128l0.302-0.42l-0.402-0.482l-0.672-1.065 l0.336-0.902l0.671-0.323l0.033-0.58l0.77-0.839v-0.646l0.47,0.357l0.637,0.095l0.769-0.872l0.101-0.902l0.301-0.288l0.068-1.035 l0.334-0.416h0.471l0.333-0.872l-0.235-0.644l-0.501-0.519l0.066-1.353l-0.402-0.354l0.468,0.129l0.537,1.063l1.105,1.161h0.436 l0.471-0.259l0.301,0.289l0.099,0.774l-0.367,0.097l-0.436,1.548l-1.073,1.775l-0.971,0.03l-0.134,1.131l-0.334,0.612 l-0.303-0.098l-0.972,0.515l-0.704,0.582l-0.066,0.485l-0.771,0.127l-0.369,0.354l0.033,0.484l0.904,0.26l2.95-2.226l1.508-1.646 l2.179-3.579l0.836-1.807l0.839-2.322l2.11-3.87l2.078-2.385l0.336-0.713l-0.201-0.256l0.1-0.613l0.436-0.127l0.335-1 l0.603-0.356l-0.201-0.806l0.201-0.582l-0.201-0.258l-0.369-0.291l0.069-0.901l-0.906-1.225v-0.549l0.168-0.549l-0.168-0.579 l-0.302-1.29l-0.47-1.355l0.37-0.323l1.173-0.225l-0.302-0.742l-0.569-0.322l1.105-0.259l0.034-0.869l-1.139-0.484l0.938-0.26 l0.604-0.837l0.47,0.356l1.474-1.323l0.872-0.548l-0.033-0.451l1.24-1.034l1.441-0.902l1.909-2.097l1.675-0.194l0.905-0.837 l1.006-0.773h0.938l0.604,0.482l0.703,0.162l0.034-0.645l0.705-1.194l1.977-1.195l0.771-0.225v-0.354l-0.468-0.288l-0.637-0.132 l-0.302-0.545l0.705-0.162l1.206-0.71l0.705,0.191l0.787-0.061l0.571-0.438l0.791,0.05l-0.052,0.354l-1.125,0.614l-1.174,0.229 l-0.235,0.26l0.385,0.289l1.797-0.646l2.166-0.827l-0.185-0.339l0.571-0.468l0.539,0.079l-0.185,0.501 c0,0,0.049,0.744,0.132,0.778c0.086,0.033,1.36,0.193,1.36,0.193l0.755-0.403h1.276l1.546,0.159l0.939-0.612l0.019-0.454 l-0.237-0.226l0.136-0.454l2.099-1.376l1.762-0.599l0.906-0.533l0.269-0.549l-0.252-0.34l-0.772-1.702l0.57-1.164l0.658-0.766 l0.034-0.869l0.436-0.355l0.77-0.516l0.168-0.904l-0.234-0.129l1.307-2.03l1.778-2l0.031-0.905l-0.367-2.836l-0.302-0.55 l0.57-1.709l0.469-0.677l0.1-0.579l1.376-1.064l0.199-0.518l-0.367-1.657l0.738-2.002l-0.201-1.547l0.268-1.166l-0.067-0.646 l0.404-1.68l-0.471-6.069l-0.01-1.125l0.369-0.842l0.007-0.81l-0.402,0.42l-0.738-0.518v-0.516l0.672-0.999l-0.168-1.001 l0.168-0.676l0.603-0.162l0.134-1.065l-0.637-0.997l-1.239-0.549l0.333-0.13l0.168-0.386l0.236,0.482l0.735,0.42l0.67,0.227 l0.269-0.97l0.637,0.034l0.268,0.548l0.469,0.227l-0.502,0.676l-0.67,0.484l-0.169,0.549l0.47,0.03l0.904-0.806l1.239-0.611 l1.576-2.322l0.704-1.71l0.234-1.033l0.603-0.516l0.604-1.549l0.671-1.319l2.446-1.615l0.299-0.771l0.74-0.229l0.535-0.839 l2.078-1.804l1.842-2.388l0.47-0.646l1.139-2.417l0.303-1.065l0.568-0.772v-0.773l-0.603-0.873l0.234-0.901l0.537-0.485 l-0.139-2.21l-0.535-0.323l-0.203-1.098l-1.61-3.422v-1.164l-0.269-1.42l-3.021-1.292l-1.745,0.063l-1.274,0.516l-0.873-1.161 l-1.007-0.194l-1.007-1.099l-1.343-0.646l-0.939-0.128l-2.082-2.133l-1.678-2.259l-0.804-0.194l-1.142-1.034l-1.007,0.064 l-2.819-1.938h-1.276l-1.408-0.582l-0.873,0.454h-1.342l-0.806-0.39l-0.871,0.39l-0.404,0.58l-0.537-0.516l-1.274-0.904 l-0.201,0.386l-0.537-0.451l-0.203,0.583v0.45l-0.74-0.582l-0.133-0.451l-0.556-0.152l0.169,0.453l-0.27,0.179l-1.377-0.519 l-0.453,0.082l-1.157-0.213l-2.554-1.164l-0.973,0.064l-0.051,0.275l0.202,0.502l-0.219,0.241l-0.537-0.272l-0.234,0.129 l-0.152,0.37l-0.889,0.407l-0.319,0.453l-0.128,1.048l-0.471-0.774l-0.267-0.677l-0.469,0.195l0.067,0.837l-0.771,1.418v1.194 l-0.269-1.128l0.304-1.13l-0.169-1l0.47-1.45l0.402-0.354l-0.336-0.291l-0.736-0.031l0.97-1.065l-1.273-1.322l-0.737-1.126 l-0.705,0.062l-1.037-0.162l-0.604,0.741l-0.604,0.29l-0.301-0.677l-0.437-0.255l-0.2-0.647l-0.535-0.421l-0.738,0.065 l-0.369-0.452l-0.637-0.225l-0.369,0.454v-0.391l-0.503-0.289l-0.334-0.644l-0.568,0.226l-1.04-0.293l-1.374-0.771l-0.402-0.066 l-0.236,0.387l-0.837-0.548l-0.604,0.066l-0.133,0.55l-0.402,0.029l-0.236-0.612l-1.07-0.033l-0.906,0.484l-0.503,0.871 l0.067,0.516l-1.005,0.966l-1.309,0.744l-1.674,0.936l-0.803,0.967l-0.503,1.258l-0.201,1.225l-0.436,0.646l-0.759,0.771 l0.051,0.535l0.151,0.921l-0.168,1.686l-0.303-1.021l-0.636-1.003l0.033-0.743l0.638-0.777l0.755-0.599l-0.117-1.231l0.384-1.036 l-0.082-0.549l-0.554-0.017l-1.093,0.374l-1.19-0.34l-1.041,0.064l-0.839,0.212l-0.589-0.488l0.672,0.081l0.788-0.564 l0.824-0.183l1.393,0.245l0.789-0.178l0.739-0.892l0.336-0.014l0.437,0.323l0.47-0.145l0.806-0.454l1.359-0.451v-1.036 l1.207-1.356v-0.968l0.471-0.644l0.068-0.777l-1.276-0.26l-1.007-0.773h-0.94l-1.342,0.773l-1.142,0.067l-1.61-0.646 l-1.747-0.131l-1.274,1.292l0.068,0.518l0.416,0.298l0.269,0.438l-0.607,0.064l-0.368,0.194l-0.336,0.774l-0.235-0.677 l-0.434-0.162l-1.007,0.388l-1.072,1.451l-1.44,1.578l1.072-1.451l-0.035-0.935l0.235-0.516l0.1-0.646h-0.469l-0.938,0.743 l-0.469,1.03l-0.468,1.161l-0.771,0.484l0.736-1.354l0.134-1.066l1.642-1.966l0.402-1.323l0.604-0.805l0.904-0.484l0.972-0.677 l0.704-0.289l0.871-1.258l2.18-2.131l0.134-0.515l0.436-0.323l-0.469-0.58l0.167-0.613l0.301-0.258l0.033-0.872l-0.871-0.612 l-0.971,0.067l-0.303,0.319l-0.435-0.708l-0.603-1.679l-1.041-2.48l-0.938-1.293l-0.67-1.706l0.033-0.936L529.922,553.323z",
"M515.069,559.463 515.235,559.886 515.529,560.616  515.78,560.824 515.771,561.263 516.409,561.949 517.207,562.084 517.71,561.551 518.366,561.307 518.885,561.357  519.002,561.728 519.339,561.875 519.373,563.055 519.926,563.233 520.749,562.65 520.934,561.922 521.421,561.582  522.226,561.451 522.797,560.369 523.552,559.187 524.444,557.327 524.459,556.517 525.669,555.013 526.811,553.651  527.162,553.133 527.219,553.081 528.012,552.063 527.945,550.937 527.107,550.034 526.704,550.452 526.135,549.97  526.034,549.26 524.392,547.614 523.956,547.453 522.884,546.453 520.27,545.807 519.096,545.131 517.723,545.002  516.886,545.582 516.048,546.035 516.051,546.03 516.01,546.063 515.644,546.45 514.907,547.405 515.008,548.637  515.359,549.528 515.243,550.53 515.243,551.273 516.082,551.76 516.452,552.471 516.971,553.281 517.156,554.204  517.324,554.606 517.171,555.383 516.435,556.079 516.536,557.213 516.872,557.796 516.435,558.783 515.309,559.511 			",
"M506.027,562.172 506.108,562.197 506.493,562.203  506.78,562.418 507.956,562.732 508.745,562.698 508.912,562.359 508.477,561.388 508.258,560.869 507.401,560.062  507.553,559.251 508.459,558.67 509.5,558.929 511.431,558.848 512.321,558.458 513.531,558.508 514.437,559.333  515.309,559.511 516.435,558.783 516.872,557.796 516.536,557.213 516.435,556.079 517.171,555.383 517.324,554.606  517.156,554.204 516.971,553.281 516.452,552.471 516.082,551.76 515.243,551.273 515.243,550.53 515.359,549.528  515.008,548.637 514.907,547.405 515.644,546.45 516.01,546.063 516.051,546.03 516.952,544.968 516.886,544.356  515.914,543.939 514.305,543.68 512.461,543.003 511.858,543.067 511.021,543.422 509.58,543.293 507.771,543.646  506.262,543.229 504.217,543.263 503.045,543.68 502.846,544.701 502.852,544.804 502.616,545.707 502.648,546.337  501.996,547.065 501.156,547.486 500.015,547.519 499.411,548.619 499.377,549.574 498.586,551.451 498.67,552.017  499.509,552.439 500.063,553.053 500.198,553.506 500.736,554.204 500.785,554.785 501.324,555.238 501.929,555.272  502.282,555.545 502.466,556.21 502.834,557.552 502.801,558.458 503.289,558.813 504.044,559.655 504.161,560.436  505.102,560.789 505.102,561.145 505.37,561.728 			",
"M485.987,546.87 486.447,546.935 486.813,547.322  487.317,546.999 488.356,547.097 489.127,548.032 489.127,549.225 488.557,550.096 488.155,550.644 488.959,551.032  489.93,550.967 490.232,551.61 490.668,552.257 491.539,552.192 491.572,552.677 490.735,553.678 490.434,554.902  489.528,556.416 489.597,557.383 489.261,558.028 489.127,558.837 489.361,559.288 489.16,559.899 489.261,560.803  490.098,561.641 491.104,562.61 491.138,563.253 491.809,564.062 493.651,565.575 494.388,565.864 494.958,565.158  495.595,564.995 495.729,565.287 496.801,565.188 497.438,564.447 497.572,564.027 498.544,563.738 500.455,563.801  500.991,562.384 501.963,561.997 503.336,561.931 503.705,562.317 504.542,562.189 506.052,562.189 505.37,561.728  505.102,561.145 505.102,560.789 504.161,560.436 504.044,559.655 503.289,558.813 502.801,558.458 502.834,557.552  502.466,556.21 502.282,555.545 501.929,555.272 501.324,555.238 500.785,554.785 500.736,554.204 500.198,553.506  500.063,553.053 499.509,552.439 498.67,552.017 498.586,551.451 499.377,549.574 499.411,548.619 500.015,547.519  501.156,547.486 501.996,547.065 502.648,546.337 502.616,545.707 502.852,544.804 502.846,544.701 502.843,544.712  502.575,543.808 502.575,542.714 502.274,542.034 500.53,541.582 499.024,540.068 498.169,539.427 497.6,539.7 496.659,540.01  496.021,540.705 495.821,541.547 495.653,540.477 495.854,539.088 496.156,538.277 495.685,536.804 494.981,536.286  493.149,535.203 491.925,533.874 491.809,533.164 490.918,532.337 490.061,532.159 489.8,532 489.663,532.421 488.288,534  487.317,534.71 486.612,534.646 485.339,536.097 485.708,536.709 486.044,537.678 487.282,537.742 488.054,538.324  488.054,539.389 486.547,540.032 485.742,539.742 485.106,540.065 484.368,539.742 483.73,540.452 483.529,541.806  482.592,542.646 483.028,543.773 484.234,545.387 485.976,546.772 			 ",
"M456.234,565.506l1.788,1.175l1.848,1.376l1.076,0.145 l1.896-0.097l1.09-1.263l1.601-1.007l0.771-0.872l2.38-1.192l0.436-1.16l0.769-0.809l2.18-0.42l1.072-0.482l-0.067-0.904 l-1.475-0.29l-1.474,0.162l-2.146-0.677l0.301-1.485l-0.502-0.901l1.309-1.936l-0.336-0.838l-1.006-0.904l-0.972-0.354 l-0.604-1.097l1.34,0.386l1.442,0.227l1.441,0.774l1.609-0.095l2.077-0.26l0.503,0.324l1.475-0.485l1.507-1.289l1.307-0.128 l0.771,0.354l2.077-0.839l1.509-0.128l2.413-1.646l0.436-1.063l-0.101-1.034l-1.742-1.386l-1.207-1.613l-0.436-1.127l0.938-0.841 l0.201-1.354l0.637-0.71l0.738,0.323l0.636-0.323l0.805,0.29l1.507-0.644v-1.064l-0.772-0.582l-1.238-0.064l-0.335-0.969 l-0.369-0.612l1.273-1.45l0.705,0.063l0.971-0.71l1.375-1.579L489.8,532l-0.242-0.146l-1.781-0.777l-0.637-0.017l-0.622,0.245 l-0.939-0.195l-0.521,0.015l-0.756,0.325l-1.496,0.226l-1.091-0.114l-0.554-0.069l0.972-0.161l0.535,0.061l0.671-0.417 l0.401-0.711l0.973-0.71l0.2-0.45l-0.636-0.419l0.068-0.289l-0.268-0.71l-1.274-0.646l-1.541-0.389l-0.468-0.451l-0.57-0.353 l-0.904-0.033l-0.301-0.419l-0.939-0.386l-0.503,0.03l0.035,0.741l-0.603-0.771l-0.369-0.872l-0.938-0.451l-0.268-0.485 l0.501-0.387l2.08,0.064l0.77-0.484l1.307-0.129l0.135-0.74l-1.206,0.226l-2.079-0.418l-1.507,0.192l-1.005-0.064l-2.045,0.708 l-0.702-0.29l-0.839,0.098l-1.708,1.162l-0.872,0.191l-1.04,0.518l-0.401,0.481l-1.373,0.163l-0.437,0.258l-0.704-0.226 l-2.044-1.323l-0.401-0.807l-0.604-0.095l-2.278,0.161l-4.39,0.711h-2.146l-0.838-0.422l-0.333-0.646v-0.771l0.534-0.033 l-0.1-0.902l-0.938-1.225l-0.871-0.229l-2.211,0.161l-1.006-0.546l-0.738-0.032l-0.604,0.191l-0.771-1.192v-1.194l-0.334-1.48 l-0.435-0.165l-1.307,0.519l-1.275,1.45l0.303,0.969l0.434,0.385l0.873-0.452l0.838,0.067l0.737,0.774l-0.134,0.546l-0.805,0.229 l-0.939-0.42l-0.435-0.293l-0.201,0.259l-0.034,0.354l-1.072,0.552l-2.044,0.354l-2.045,0.838l-0.636,0.774v0.74l0.519,0.934 v1.808l0.201,1.228l0.403,1.032l-0.671,1.357l-1.611,0.904l-0.806-0.128v-1.292l-0.94-1.033l-0.268-0.905l0.873-0.713 l0.067-0.515l1.746-1.68v-1.42l-0.551-0.931l0.067-0.42l-0.033-0.549l-0.736-0.516l-0.369-0.739l0.235-0.614l1.072-0.45 l1.105-0.259l0.979-1.083l-0.517-0.013l-0.218,0.163l-2.384,0.89l-1.392,2.07l-0.435,0.515l-0.805,0.195l-0.736,1.033 l-0.738,0.612l-1.474,2.03l-0.269,0.904l0.302,0.772l-0.135,1.483l-0.703,1.451l-0.102,0.454l0.604-0.067l0.805,0.033 l1.836,3.239l0.824,1.197l0.233,0.841l-0.47,0.973l0.068,0.615l-0.32,0.518l0.05,0.646l1.058,0.844l1.309,0.548l0.824,0.097 l0.974,0.455l0.755-0.373l1.193,0.032l1.125,0.323l0.335-0.276l1.343-0.225l1.477,0.275l0.839,0.34l3.51,3.334l1.276-0.259 l0.336,0.275l0.368-0.132l0.941,0.276l0.604,0.323l0.873-0.468l0.924-0.017l1.275,0.114l0.235-0.245l0.806-0.031l0.755,0.371 l0.287,1.732l-0.371,0.711v0.795l-0.302,0.549l-1.107,0.325l-0.521,0.616l0.268,1.601l0.101,0.582l-0.355,1.119l0.033,1.418 l0.502,0.709l0.034,0.516l1.005,2.387l-1.504,2.64l0.134,0.646l0.504,0.162l0.453-0.323l0.201,0.211l0.201,0.71l0.454,0.26 l0.488,0.892l-0.253,0.5l0.538,1.133l0.923,2.266l0.084,0.86L456.234,565.506L456.234,565.506z M450.068,514.443l0.904-0.063 l0.871,0.838l-0.201,0.739l-0.536-0.675l-0.636-0.096L450.068,514.443L450.068,514.443z M446.985,514.056l0.871,0.967 l0.804,0.098l-0.469,0.484l-1.039-0.226l-0.437-0.871L446.985,514.056L446.985,514.056z M442.562,513.09l0.602,0.805l0.906-0.033 l-0.805-0.707L442.562,513.09L442.562,513.09z M468.759,520.706l0.959-0.68l0.454,0.579l1.379-0.999l0.403,0.595l-0.74,0.875 l-0.942-0.242l-1.024,0.209C469.249,521.043,468.776,520.688,468.759,520.706z",
"M442.304,590.415 443.08,587.944 445.692,578.604  445.726,577.928 445.794,576.413 444.654,574.478 442.911,573.188 442.108,572.189 441.974,569.735 445.09,568.705  446.196,569.412 446.431,568.671 445.894,568.123 446.397,567.574 445.726,566.384 443.95,565.933 443.514,564.865  443.816,563.415 449.078,563.385 449.647,562.771 450.553,562.771 451.055,563.223 451.658,563.125 452.563,562.158  453.837,561.836 454.095,562.521 454.867,563.429 455.051,564.415 455.018,565.645 456.293,565.501 456.209,564.641  455.286,562.375 454.749,561.242 455.002,560.742 454.514,559.851 454.06,559.591 453.859,558.881 453.658,558.67  453.205,558.993 452.701,558.831 452.567,558.185 454.071,555.545 453.066,553.158 453.033,552.643 452.53,551.934  452.497,550.516 452.852,549.396 452.751,548.814 452.483,547.214 453.003,546.598 454.111,546.272 454.413,545.724  454.413,544.929 454.783,544.218 454.497,542.485 453.741,542.114 452.936,542.146 452.701,542.391 451.425,542.276  450.501,542.293 449.628,542.761 449.024,542.438 448.083,542.161 447.715,542.293 447.379,542.018 446.103,542.276  442.593,538.942 441.753,538.603 440.276,538.327 438.934,538.552 438.598,538.828 437.473,538.505 436.28,538.473  435.525,538.846 434.551,538.391 433.728,538.294 432.418,537.746 431.36,536.902 431.31,536.256 431.63,535.738  431.562,535.123 432.032,534.15 431.798,533.31 430.975,532.112 429.138,528.873 428.333,528.84 427.729,528.907  427.831,528.453 428.534,527.002 428.668,525.519 428.366,524.746 428.635,523.842 430.109,521.812 430.848,521.199  431.584,520.166 432.389,519.971 432.824,519.456 434.215,517.386 436.6,516.496 436.818,516.333 437.335,516.346  437.464,516.204 437.999,515.815 438.2,515.302 437.665,514.624 435.989,513.753 435.318,513.719 435.083,514.107  435.017,514.527 434.314,514.624 433.945,514.913 433.173,514.816 432.504,515.075 432.135,515.493 432.538,515.944  432.236,516.364 431.03,516.943 429.421,517.879 428.349,518.621 427.109,518.879 425.734,518.977 424.226,518.815  423.288,519.3 423.354,519.846 423.657,520.556 423.555,521.267 422.852,521.878 422.382,521.686 422.552,520.976 422.45,520.75  423.121,520.525 422.149,520.427 420.976,519.943 420.373,519.977 418.832,520.878 418.462,521.491 417.425,522.652  416.184,524.911 416.017,525.554 416.384,525.395 416.72,525.749 416.854,526.49 416.586,527.296 415.917,527.62  415.044,527.685 414.375,528.038 413.167,529.168 412.666,529.425 411.761,530.714 411.223,530.778 410.453,530.812  410.721,531.65 411.525,532.521 411.525,533.619 411.057,534.584 410.554,534.555 409.716,533.874 409.817,533.555  410.12,533.037 409.415,532.747 409.113,531.909 408.086,531.037 407.89,531.822 408.041,532.404 408.46,533.521  407.789,534.668 407.468,535.755 406.899,536.191 406.446,536.223 405.838,537.573 406.035,537.742 406.236,538.778  406.32,539.8 407.243,540.884 407.596,540.85 408.049,540.625 408.301,541.027 408.419,542.015 407.848,542.63 407.831,543.02  408.385,543.602 408.385,544.846 407.78,545.283 407.411,545.933 407.78,546.077 408.15,546.901 408.033,548.408  408.117,550.493 407.477,551.223 407.361,551.855 407.915,552.6 408.738,552.259 408.62,552.76 409.091,553.406 409.577,553.358  409.627,553.779 409.146,554.355 408.743,555.354 407.001,557.031 406.533,557.968 405.224,559.193 403.486,559.563  402.143,560.532 400.867,562.406 400.666,563.891 400.46,564.713 401.812,565.208 403.339,566.211 405.422,567.522  406.245,567.538 407.336,568.639 407.168,569.302 407.351,569.883 408.779,569.997 410.407,570.758 410.961,571.131  412.456,571.454 413.027,570.953 412.977,570.031 413.656,569.516 413.982,569.524 415.377,570 416.106,570.39 416.308,570.973  416.938,571.312 417.042,571.373 417.375,571.348 417.911,571.866 419.585,572.254 420.625,572.479 420.894,572.963  421.999,574.22 422.1,575.058 422.869,576.443 423.475,576.443 425.686,577.153 426.624,578.476 426.589,579.541  426.925,579.639 427.696,579.992 428.098,581.122 427.798,581.572 428.065,582.217 428.937,582.573 429.908,582.347  430.713,582.54 431.852,582.51 432.32,582.122 433.796,581.476 435.069,581.701 436.175,582.217 437.783,581.541  438.623,581.541 438.99,582.059 439.527,582.024 440.565,582.51 441.034,583.121 441.94,582.83 442.006,583.442 438.99,588.346  439.158,588.894 440.197,588.796 441.37,588.7 442.075,589.442 			 ",
"M417.042,571.373l-0.104-0.062l-0.63-0.339l-0.201-0.583 l-0.729-0.39l-1.395-0.476l-0.327-0.009l-0.679,0.516l0.05,0.922l-0.571,0.501l-1.495-0.323l-0.554-0.373l-1.628-0.761 l-1.428-0.114l-0.183-0.581l0.168-0.663l-1.091-1.101l-0.823-0.016l-2.083-1.312l-1.528-1.003l-1.352-0.495l-0.264,1.051 l-1.343,0.065l-2.213,1.487l-1.142,0.063l-1.21,0.582l0.604,1.033l0.067,0.646l0.403,0.646l-0.267,1.225l-1.746,1.811 l-0.136,0.774l0.405,0.518l-0.875,1.229l-1.005,0.129l-0.806,1.097l0.335,0.712l0.352,0.922l-0.102,0.71l0.167,1.323 l-0.503,0.837l-0.469,0.419l0.537,0.68l1.005,0.387l0.938,0.936l0.771,0.481l0.368-0.257l0.404-1.066l0.302-0.545l0.669-0.646 l0.034,0.774l0.1,0.677l0.167-0.419l-0.069-0.71l0.303,0.063l0.301,1.162l-0.233,1.259l0.133,0.677l-0.47,1.128l-1.209,0.983 l0.423,0.211l0.402,1.225l-0.973,0.485l-0.77,0.835l0.134,0.872l0.938,0.033l1.039-0.452l0.436,0.678l1.407,0.289l0.838,0.323 l1.341,1.838h0.602l0.872-0.871l3.618-7.224l0.671-0.58l4.759-1.518l2.011-1.354l3.218-2.84l1.292-2.924l0.823-0.048l0.201-0.402 l0.234-1.037l-0.102-0.844l-0.956-1.746l0.033-0.47l-0.218-0.663H417.042L417.042,571.373z M393.98,585.837l-0.05-0.324 l0.503-0.793l0.84-0.727l0.066,0.225l-0.25,0.6l0.066,0.552l-0.353,0.662l-0.536,0.161L393.98,585.837z",
"M445.091,621.694 444.958,621.639 444.495,621.428  443.983,621.491 442.98,621.556 442.09,621.801 441.166,621.945 440.596,621.428 440.545,620.374 440.293,617.738  440.327,616.137 440.662,615.796 440.881,614.809 440.411,614.323 438.748,615.246 436.784,616.978 434.417,616.833  432.422,616.761 432.121,615.502 431.116,614.081 429.74,613.856 426.858,614.081 428.032,612.664 425.753,609.116  424.48,607.892 424.715,607.212 424.379,606.472 424.749,605.633 424.914,604.634 424.614,604.021 425.082,603.537  425.149,602.634 426.456,601.826 427.127,601.957 427.897,601.247 427.462,600.439 427.026,598.892 428.299,597.666  428.098,596.959 428.568,596.279 428.434,595.118 429.27,594.602 430.377,594.118 431.349,593.183 431.886,593.021  432.49,592.442 434.868,591.957 438.052,590.957 438.388,590.247 438.789,590.409 439.694,590.409 440.063,590.312  441.102,590.957 441.001,591.248 442.006,591.506 442.409,590.862 442.075,589.442 441.37,588.7 440.197,588.796  439.158,588.894 438.99,588.346 442.006,583.442 441.94,582.83 441.034,583.121 440.565,582.51 439.527,582.024 438.99,582.059  438.623,581.541 437.783,581.541 436.175,582.217 435.069,581.701 433.796,581.476 432.32,582.122 431.852,582.51  430.713,582.54 429.908,582.347 428.937,582.573 428.065,582.217 427.798,581.572 428.098,581.122 427.696,579.992  426.925,579.639 426.589,579.541 426.624,578.476 425.686,577.153 423.475,576.443 422.869,576.443 422.1,575.058  421.999,574.22 420.894,572.963 420.625,572.479 419.585,572.254 417.911,571.866 417.375,571.348 417.039,571.373  417.257,572.036 417.224,572.506 418.18,574.252 418.282,575.096 418.048,576.133 417.847,576.535 417.024,576.583  415.732,579.507 412.515,582.347 410.503,583.7 405.745,585.218 405.074,585.798 401.456,593.021 400.583,593.893  399.981,593.893 398.641,592.055 397.802,591.731 396.395,591.442 395.959,590.765 394.92,591.217 393.982,591.184  393.848,590.312 394.618,589.477 395.591,588.991 395.188,587.767 394.766,587.556 394.702,587.605 392.424,588.571  391.587,589.312 389.979,590.83 389.643,591.957 389.274,592.829 389.375,593.249 390.111,593.828 390.212,594.475  389.643,594.859 389.643,595.344 390.548,596.118 391.251,597.376 391.151,598.245 390.447,598.278 389.711,598.602  389.442,599.278 390.212,599.988 391.151,600.342 392.525,601.473 393.798,601.632 395.709,602.857 396.646,603.085  396.881,603.825 397.92,605.246 398.054,606.472 398.591,607.374 400.468,608.309 401.304,609.631 401.573,610.921  402.11,611.79 402.276,613.244 402.913,614.243 403.65,614.663 404.488,616.114 404.656,617.178 404.388,617.532 405.125,619.08  406.601,620.854 407.169,621.789 406.936,622.53 407.101,623.143 407.706,623.338 409.28,624.69 409.683,625.499  409.851,626.755 410.286,627.304 411.493,627.724 411.727,628.788 413.068,630.85 413.402,631.884 414.944,633.979  414.978,634.818 414.576,634.978 414.14,634.688 414.104,635.14 414.272,635.883 414.272,636.56 414.809,636.463  415.413,636.849 415.547,637.428 415.347,637.882 416.887,638.913 418.362,639.623 418.43,640.235 419.133,641.074  420.005,641.17 420.355,641.599 420.69,642.346 421.278,642.716 422.689,642.652 423.142,642.117 422.857,642.895  423.664,643.769 425.155,644.529 425.829,645.128 425.946,645.791 426.65,646.244 427.776,646.632 428.18,646.486  428.967,646.698 430.764,647.751 431.989,648.202 432.863,648.252 433.282,648.461 433.534,649.06 434.81,649.951  435.515,650.372 436.524,651.276 437.144,651.52 437.446,652.087 437.378,652.555 437.396,653.187 438.453,653.395  439.511,653.818 440.788,655.08 441.979,656.146 442.785,656.392 442.957,656.548 444.12,656.01 445.123,655.364  445.726,655.495 446.632,654.946 446.966,654.203 446.128,653.429 446.431,652.657 446.9,651.914 447.553,652.059  447.436,651.493 446.865,651.398 446.464,650.978 447.169,649.527 448.208,648.85 449.145,647.656 449.245,646.593  447.905,643.627 448.374,642.917 448.273,641.785 447.972,641.207 447.771,640.271 448.341,639.659 448.676,638.11  448.542,635.239 448.106,633.983 448.676,632.563 448.642,629.467 449.413,628.241 449.379,627.596 			",
"M500.314,662.761 500.939,661.934 500.804,661.287  503.086,656.894 502.951,654.698 500.536,650.563 498.119,650.048 498.253,648.238 497.85,645.396 489.661,645.267  489.795,643.198 488.049,640.358 488.587,639.325 488.184,637.642 488.453,635.576 488.049,634.803 486.172,633.77  483.486,634.028 482.278,633.382 481.338,633.122 481.07,631.83 479.794,631.377 477.78,630.73 477.042,630.799 475.364,629.053  474.156,629.375 472.544,627.824 470.598,628.277 470.195,628.729 469.188,627.824 467.712,626.922 466.637,626.404  466.303,625.048 465.228,624.597 464.422,622.918 464.826,622.012 464.221,619.942 464.958,618.651 464.422,617.036  464.557,616.003 464.02,615.552 462.946,616.197 462.006,615.552 460.999,615.552 459.523,616.262 457.979,616.521  455.763,617.877 454.956,619.88 453.616,620.266 452.474,620.266 451.467,621.043 450.729,621.043 449.386,621.754  448.044,621.689 445.09,621.694 449.379,627.596 449.413,628.241 448.642,629.467 448.676,632.563 448.106,633.983  448.542,635.239 448.676,638.11 448.341,639.659 447.771,640.271 447.972,641.207 448.273,641.785 448.374,642.917  447.905,643.627 449.245,646.593 449.145,647.656 448.208,648.85 447.169,649.527 446.464,650.978 446.865,651.398  447.436,651.493 447.553,652.059 447.771,652.105 447.872,653.237 448.811,654.044 449.312,654.495 449.446,655.334  449.245,656.205 449.413,656.688 449.647,658.205 450.385,659.204 452.497,660.848 452.675,661.547 452.138,662.838  452.474,663.741 451.333,666.132 452.004,667.034 454.287,669.104 457.71,677.954 458.986,677.954 459.32,677.371  460.059,677.243 460.064,677.252 460.665,676.53 461.469,674.918 463.281,673.108 464.49,672.721 465.631,673.69 466.974,673.56  467.778,673.366 468.785,673.626 470.463,673.303 471.338,673.431 471.537,674.595 472.209,676.466 472.544,676.985  472.948,676.466 472.88,675.629 473.417,674.788 473.417,673.949 474.156,672.913 476.841,672.913 479.191,672.98  480.068,673.768 480.446,672.265 481.687,669.814 481.788,668.623 481.62,667.397 481.15,666.687 482.625,664.59 483.229,662.91  483.229,662.17 484.3,661.493 490.668,659.801 495.972,659.864 499.059,662.061 499.797,662.192 			",
"M480.068,673.768 480.446,672.265 481.687,669.814  481.788,668.623 481.62,667.397 481.15,666.687 482.625,664.59 483.229,662.91 483.229,662.17 484.3,661.493 490.668,659.801  495.972,659.864 499.059,662.061 499.797,662.192 500.737,663.226 500.469,664.194 501.61,665.032 501.677,666.391  502.617,667.745 502.147,670.46 502.415,671.557 502.079,672.526 502.415,673.495 504.161,673.366 504.899,673.69  507.048,673.56 508.39,674.013 510.537,673.172 511.679,673.949 512.551,674.205 512.887,675.241 514.062,680.104  514.866,681.812 515.704,682.038 517.546,681.069 518.585,681.456 519.289,682.069 519.958,682.2 519.507,682.924  519.39,687.132 519.199,687.627 519.073,687.783 519.078,688.346 518.961,688.812 518.916,689.354 518.651,689.52  518.552,690.777 518.719,691.229 518.619,692.873 517.781,693.551 517.145,694.647 516.843,695.616 514.731,697.034  514.362,698.195 513.523,699.195 512.519,698.905 512.084,699.131 511.145,700.293 510.675,699.808 510.073,699.808  509.001,700.262 507.058,699.131 504.276,698.326 500.991,698.808 500.187,698.841 500.455,697.842 501.896,696.422  502.565,694.682 502.298,693.745 502.766,693.005 503.571,692.423 504.276,691.359 504.576,690.39 504.039,689.293  502.667,688.198 501.562,687.003 498.779,686.649 496.701,685.649 494.656,683.94 493.824,683.769 492.011,682.862  489.192,682.216 488.453,681.053 487.312,680.084 486.172,679.956 483.285,677.176 482.144,675.174 481.271,674.982  480.197,673.885 			",
"M506.898,712.625 507.593,712.646 508.097,712.904  510.442,712.224 511.414,712.837 512.485,714.257 513.425,714.645 513.993,715.87 515.101,717.612 515.635,717.612  516.541,716.677 517.01,716.74 518.083,718.418 519.355,718.966 520.462,719.192 521.534,720.226 521.602,721.45  522.506,721.255 524.316,722.029 525.388,723.321 526.527,724.965 527.567,725.674 527.366,726.934 526.494,728.094  526.929,729.447 527.097,729.782 527.223,729.999 527.767,730.694 528.029,730.904 527.643,731.212 526.904,732.052  526.904,733.31 526.006,734.114 525.552,734.808 525.72,734.956 525.418,735.423 524.293,736.672 522.565,737.286  522.178,736.96 521.944,737.125 521.826,737.656 521.373,737.979 520.685,737.916 519.997,737.656 519.509,737.754  518.921,737.414 517.999,737.107 516.689,737.334 515.68,737.933 514.74,737.899 514.759,737.414 514.893,737.092  514.658,736.866 513.936,736.816 513.229,736.702 512.121,735.958 510.913,735.878 508.864,736.072 508.176,735.906  506.884,734.663 506.414,734.565 505.054,732.739 504.416,731.151 504.382,729.169 504.388,729.08 504.563,728.788  505.253,728.172 505.549,727.513 505.146,726.062 504.912,724.062 505.247,723.578 504.777,722.191 505.348,721.225  505.247,720.451 505.582,719.74 505.75,717.74 505.48,716.998 505.849,716.32 505.549,714.903 506.386,713.87 506.822,712.87 			  ",
"M460.064,677.252l0.601-0.722l0.804-1.612l1.812-1.81 l1.209-0.388l1.141,0.97l1.343-0.131l0.804-0.193l1.007,0.26l1.678-0.323l0.875,0.128l0.199,1.164l0.672,1.871l0.335,0.52 l0.403-0.52l-0.068-0.837l0.537-0.841v-0.839l0.74-1.036h2.685l2.35,0.067l1.006,0.904l1.074,1.098l0.873,0.191l1.142,2.002 l2.887,2.78l1.14,0.128l1.141,0.969l0.739,1.163l2.819,0.646l1.813,0.906l0.832,0.172l2.045,1.709l2.078,1l2.783,0.354 l1.105,1.195l1.372,1.095l0.537,1.097l-0.3,0.97l-0.705,1.063l-0.805,0.582l-0.468,0.74l0.267,0.937l-0.669,1.74l-1.441,1.42 l-0.268,0.999l0.805-0.033l3.285-0.481l2.782,0.805l1.943,1.131l1.072-0.454h0.603l0.469,0.485l0.94-1.162l0.435-0.226 l1.004,0.29l0.839-1l0.369-1.161l2.111-1.418l0.302-0.969l0.637-1.097l0.838-0.678l0.1-1.645l-0.167-0.451l0.099-1.258 l1.073-0.675l2.146,0.289l0.066,0.902l0.872,1.902l-0.067,1.514l0.201,1.744l0.168,1.612l-0.269,0.646l-0.938-0.034l-1.14,0.582 l-0.166,0.354l-0.671,0.548l-0.301-0.162l-1.911,1.226l-0.369,0.582l-0.736,0.192l-1.742,1.387l-0.57,0.196l-0.068,1.096 l-0.636,0.192l-0.57-0.098l-1.475,1.743l-0.268,0.677l0.034,1l-0.669,0.191l-0.369,0.548l-0.939,1.646l-0.669,0.677l-0.772,1.226 v0.42l-0.87,0.579l-0.202,0.646l-0.436,1l-0.837,1.033l0.3,1.417l-0.369,0.678l0.27,0.742l-0.167,2l-0.335,0.711l0.101,0.773 l-0.57,0.967l0.469,1.387l-0.335,0.484l0.234,1.999l0.403,1.451l-0.295,0.659l-0.69,0.616l-0.175,0.292l-0.006,0.089v-0.008 l-0.235,1.829l0.336,1.618l-0.185,0.501l0.59,0.585l0.034,0.773l-0.303,0.293l0.468,0.805l1.945,1.453l1.943,0.708l2.413,1.807 l0.537,0.644l-0.067,0.905l-1.139,2.191l-0.067,0.646l0.704,1.289l1.207,0.773l1.005,0.034l0.604-0.616l0.234,0.034l0.202,0.743 v1.901l-0.202,0.869l-0.906,1.421l-0.333,1.419l-0.336,0.451l-0.135-0.483l-0.336,0.289l-0.467,1.387l0.268,1.033l-0.369,0.869 l-2.546,1.518l-1.978,0.644l-0.369-0.482l-0.134,0.58l-2.848,1.128l-3.251,0.807l-1.944,0.097l-1.54-0.225l-1.441,0.257h-0.905 l-1.039-0.644l-1.307-0.421h-0.636l-0.402-0.515l-0.303,0.289v0.74l0.235,0.518v1.58l0.434,0.612l-0.1,0.484l0.771,0.064 l0.167,0.774l-0.134,0.578l-0.336,0.099l0.034,0.291l-0.837,0.806l0.2,0.421l-0.335,0.612v0.805l0.57,0.936l0.805,0.226 l-0.268,0.743l-0.269,0.484l0.235,0.645l-0.201,0.837l-1.073,0.741l0.134,0.293l-1.574,1.029l-2.615,0.033l-1.407-0.322 l-1.642-1.322l-1.775-0.549l-1.041,0.097l-0.268-0.161l0.303-0.516l-0.704,0.031l-0.938,0.903l-0.034,1.581l1.005,0.871 l0.369,1.613l-0.033,2.127l0.301,0.807l1.074,0.58l1.406-0.095l0.503,0.257l-0.535,0.288l-0.437,0.422l0.705,0.258l1.574-0.454 l0.066-0.481l-0.77-0.194l-0.269-0.191l0.437-0.357l0.703-0.031l0.906-0.581l0.703,0.063l0.637,1.033l-0.201,0.805l-0.369,0.162 l0.604,0.71l0.435,0.935l-0.267,0.872l-1.81,0.999l-0.67-0.225l-0.369-0.872l0.168-0.386v-0.516l-1.14-0.583l-1.239,0.451 l-0.837,0.613l-0.167,0.484l0.4,0.647l0.939,0.028l1.375,0.388l0.033,0.454l-1.005,0.902l-1.44,0.516l-0.538,0.583l0.336,0.352 l-0.37,0.872l-0.736,0.741l0.301,1.128l0.335,0.484v0.613l-0.168,0.548l1.105,1.161l-0.034,0.418l-0.435,0.612l0.234,0.26 l-1.274,0.807l-0.167,0.677l-0.134,0.388l0.906,0.322l0.436,0.418l-0.068,0.386l-1.473,0.261l-0.839-0.129l-1.341,0.192 l-0.87,0.901l-1.04,0.132l-0.771,0.868l-0.604,0.131l-0.333,1.063l-0.371,0.774l-1.037,0.708l-0.068,0.548l0.57,0.744v0.966 l1.005,1.615l0.939,0.741l0.636,0.192l1.241,1.032l1.841,1.644l1.542-0.128l0.839,0.033l0.403-0.195l0.736,0.226l0.302,0.485 l-0.335,0.353v0.485l0.537,1.062v0.711l-0.805,0.74h0.537l0.837,0.744l-0.569,0.387l-0.1,0.579l0.168,0.323l-0.738,0.808 l-0.737,0.354l-0.167,0.71l-0.471,0.16l-0.669,0.869l-0.336,1.034l-0.905,0.063l-1.073,1l-0.2,1l-0.335,0.969l-0.804,0.74 l-0.201,0.579l0.437-0.322l0.703,0.16l0.302,1.356l-0.268,0.711l-0.837,0.936l-0.135,0.707l-0.972,0.773l-0.703-0.224 l-0.604-0.644l-0.603-0.323l0.435,0.549v0.803l0.335,0.355l-0.402,0.71l-1.138,0.904l-0.538,1.485l0.166,1.319l0.906,1.356 l0.771,2.062v0.646l0.268,0.129l-0.167,0.579l-0.703,0.388l0.501,0.484l0.537-0.161l0.805,0.74l0.166,0.872l1.575,0.935 l0.939,0.711l0.101,0.837l-0.402-0.032l-1.082-0.477l-1.277-1.113l-1.009-0.149l-0.317-0.369l-6.012-0.002l-3.352,0.547 l-0.771-0.421l-2.244-0.16l-0.738-1.871l-0.468-1.579l-1.006-0.872l-0.302-2.579v-1.193l-0.972,0.033l-1.479,0.702l-0.807,0.871 l-0.956-0.015l-2.048-3.934l-0.274-1.433l0.604-3.999l0.973-1.355l1.609-1.612l0.468-2.289l-0.468-2.353l-0.604-1.743 l0.369-2.033l0.938-1.03l-0.928-2.121l0.15-1.037l0.839-0.824l-0.536-1.909l-0.353-2.476l-0.604-1.182l0.085-0.873l1.191-1.004 l-0.034-1.021l-0.956-1.648l-1.545-1.036h-0.973l-0.303,0.259l-0.571-0.534l0.335-0.763l2.1,0.017l1.022-1.147l-0.066-1.083 l-0.621-0.245l-0.706,0.471l-0.873-0.162l-0.441-2.063l-0.872-1.807l-0.068-1.29l0.101-1.514l-1.475-0.484l-0.436-1.324 l-0.202-3.416l1.005-0.646l0.303-1.161l-0.502-0.902l-0.873-0.421l-0.402-2.097l-0.167-2.935l0.302-3.354l-0.873-1.387 l-0.2-1.547l1.708-2.194l0.268-2.451l1.242-0.579l0.669-0.774l-2.783-5.257l0.335-1.744v-1.288l-0.035-3.098l0.973-1.872 l1.106-1.093l-0.235-1.612l-0.938-1.519l-0.637-0.514l1.072-1.519l-0.267-1.773l0.77-1.805l0.906-0.289l0.233-2.132l-0.401-3.449 l-0.671-0.612l-0.569-2.612l-0.737-1.355l-1.073-1.644l-0.167-0.838l-0.838-1.098l-0.469-2.194l0.234-1.711l1.306-0.578 l0.036-2.225l0.736-0.905l0.067-1.966l-0.839-1.485l-0.134-2.803l0.638-0.616l0.335-3.318l0.872-1.131l1.239-3l1.207-1.194 l0.903-0.451l0.705-0.804l-0.437-0.451l-0.064-1.259l-0.336-0.646l-0.57-0.452l0.201-0.871l0.837-0.612v-1.128l-1.005-1.226 l-0.268-1.515l0.568-0.97l-0.233-0.807l-0.971-0.771l0.367-1.161l5.562-2.84l1.208-5.062L460.064,677.252L460.064,677.252z  M498.271,856.078l0.737,0.632l1.026-0.632l0.939-0.226l0.84-0.76l-1.075-0.051l-0.64,0.632l-1.257,0.064L498.271,856.078 L498.271,856.078z M477.429,841.836l0.182-0.072l0.703,1.001l1.508,1.45l0.47,2.193l-0.504-0.483l-0.705,0.293l-0.327,0.705 L477.429,841.836L477.429,841.836z M478.813,847.133l1.008,0.371l1.14-0.192l0.501,0.871l0.536,1.481l1.208,0.161l1.173,0.937 l0.065,1.034l1.005,0.322l3.62,1.127l0.436,0.485l1.341,0.387l1.139,1l0.972,0.095l1.708-0.388l0.804,0.293l0.168,0.774 l-1.174,0.644l-0.435-0.354l-1.006,0.289l-0.201,0.775l-0.838,0.807l-1.039,0.257l-1.072-0.354l-1.039-0.549l-1.909-0.191 l-1.342,0.094l-1.944-0.161l-1.574,0.517h-0.502l-0.444-1.695l2.22-0.077l1.24-0.422l0.763-0.152l0.151-0.292l-1.243,0.228 h-1.275l-1.662,0.307l-0.321-0.075L478.813,847.133z ",
"M481.565,857.664l-0.444-1.695l-0.528,0.02l-0.872-0.548 l-1.608-0.583l-2.345-0.677l-1.074-0.353l-0.066,0.353l0.301,0.388l-0.362,0.281l-0.388-0.147l-1.576-0.629l-0.857-0.438 l-0.218,0.208l0.353,0.422l2.014,0.924l0.118,0.34h-0.588l-0.183,0.081l-0.033,0.37l-0.354,0.063l-0.268-0.515l-0.958-0.567 l-0.301,0.241l0.083,0.585l-0.553,0.098l-1.545,0.11l-0.335,0.195l0.335,0.324l-0.134,0.241l-0.755-0.145l-0.89,0.229 l0.151,0.498l1.023,0.178l0.823-0.029l0.252-0.422l0.253-0.178l0.552,0.242l0.89,0.565l0.453-0.191l0.27,0.323v0.5l0.579,0.34 l-0.671,0.323l-0.402,0.802l0.52,0.573l0.596-0.017l0.547,0.213l0.771,0.751h0.545l0.11-0.298l-0.554-0.398l-0.906-0.517 l-0.125-0.461l0.233-0.05l0.672,0.293l0.537-0.373l0.135-0.388l-0.621-0.131l-0.508-0.327l1.978-0.742l0.804-0.387l3.686,0.905 l0.47-0.293l-0.102-0.482H481.565L481.565,857.664z M480.994,855.484l-1.057-0.247l-2.214-1.423l-1.58-0.552l-0.772,0.081 l-1.007-0.6l-0.839-0.808l-0.138-0.4v-0.388l1.442-0.677l0.167-0.45l0.906-0.26l0.636-1.033l-0.268-0.74l-1.005-0.031 l-1.34,0.711l-0.671,0.74l-0.669,0.031l-0.904-1.095l-0.069-1.033l-0.267-0.548l0.77-0.74l0.135-0.646l-0.704,0.097l-0.57-0.421 l0.57-0.771l0.569,0.157l0.938,0.519l0.236-0.387l0.804-0.743l0.134-0.579l-0.202-0.711l0.367-0.678l0.671,0.163l0.705,0.643 l0.401-0.322l1.26-0.508l1.328,5.087l-0.074,0.163l0.131,0.047L480.994,855.484L480.994,855.484z M477.333,840.353l-1.277-1.113 l-1.009-0.149l-0.317-0.369l-6.012-0.002l-3.352,0.547l-0.771-0.421l-2.244-0.16l-0.738-1.871l-0.468-1.579l-1.006-0.872 l-0.302-2.579v-1.193l-0.972,0.033l-1.479,0.702l-0.807,0.871l-0.956-0.015l-2.048-3.934l-0.274-1.433l0.604-3.999l0.973-1.355 l1.609-1.612l0.468-2.289l-0.468-2.353l-0.604-1.743l0.369-2.033l0.938-1.03l-0.928-2.121l0.15-1.037l0.839-0.824l-0.536-1.909 l-0.353-2.476l-0.604-1.182l0.085-0.873l1.191-1.004l-0.034-1.021l-0.956-1.648l-1.545-1.036h-0.973l-0.303,0.259l-0.571-0.534 l0.335-0.763l2.1,0.017l1.022-1.147l-0.066-1.083l-0.621-0.245l-0.706,0.471l-0.873-0.162l-0.441-2.063l-0.872-1.807l-0.068-1.29 l0.101-1.514l-1.475-0.484l-0.436-1.324l-0.202-3.416l1.005-0.646l0.303-1.161l-0.502-0.902l-0.873-0.421l-0.402-2.097 l-0.167-2.935l0.302-3.354l-0.873-1.387l-0.2-1.547l1.708-2.194l0.268-2.451l1.242-0.579l0.669-0.774l-2.783-5.257l0.335-1.744 v-1.288l-0.035-3.098l0.973-1.872l1.106-1.093l-0.235-1.612l-0.938-1.519l-0.637-0.514l1.072-1.519l-0.267-1.773l0.77-1.805 l0.906-0.289l0.233-2.132l-0.401-3.449l-0.671-0.612l-0.569-2.612l-0.737-1.355l-1.073-1.644l-0.167-0.838l-0.838-1.098 l-0.469-2.194l0.234-1.711l1.306-0.578l0.036-2.225l0.736-0.905l0.067-1.966l-0.839-1.485l-0.134-2.803l0.638-0.616l0.335-3.318 l0.872-1.131l1.239-3l1.207-1.194l0.903-0.451l0.705-0.804l-0.437-0.451l-0.064-1.259l-0.336-0.646l-0.57-0.452l0.201-0.871 l0.837-0.612v-1.128l-1.005-1.226l-0.268-1.515l0.568-0.97l-0.233-0.807l-0.971-0.771l0.367-1.161l5.562-2.84l1.208-5.062 l-0.616-1.215l-0.739,0.128l-0.334,0.583h-1.276l-3.423-8.851l-2.283-2.069l-0.671-0.902l1.142-2.391l-0.336-0.903l0.537-1.291 l-0.178-0.699l-2.112-1.644l-0.737-0.999l-0.235-1.518l-0.167-0.482l0.201-0.871l-0.134-0.839l-0.501-0.451l-0.939-0.807 l-0.102-1.132l-0.87-0.191l-0.47,0.743l-0.302,0.771l0.838,0.774l-0.334,0.743l-0.906,0.549l-0.604-0.131l-1.003,0.646 l-1.163,0.538l0.397,0.362l0.102,1.261l-0.117,0.939l0.218,1.261l0.742,3.342v1.259l-0.269,0.901l-0.502,0.518l0.368,1.708 l0.57,1.676l0.604,1.42v2.322l-0.269,0.647l-0.201,0.417l0.167,3.16v0.774l-0.67,0.388l-0.636,0.418l0.1,1.776l0.303,0.451 l0.603-0.42l0.368,0.322l-0.569,0.515l0.033,4.676l0.67,1.776l0.134,1.384l-0.167,1.164l-0.771,1.192v1.161l0.873,1.515 l-0.202,0.936l-0.1,2.26l-0.502,0.836v1.226l0.234,0.646v0.548l-0.771,1.129l-0.066,1.161l-0.47,0.741l0.269,1.42l-0.167,0.612 l-0.77,1.676v0.711l0.837,1.256l0.167,1.292l0.536,0.805l-0.669,0.45l-0.402,1.001l0.637,0.773l-0.671,0.773l-0.637,0.26 l-0.032,1.162l0.2,0.998l0.1,0.937l1.074,2.677v1.484l-0.437,0.481l0.101,0.808l0.972,1.353l0.066,1.582l-0.302,1.094 l0.034,0.455l0.235,0.771l-0.135,0.68l-0.234,0.774l0.268,0.451l1.039,1.386l0.134,0.774l-0.501,0.774l-0.705,0.418l-0.636,1.258 v0.389l0.368,0.42l-0.335,1.063l-0.536,0.58v0.742l-0.134,1.354l-0.401,0.74l0.065,0.809l-0.234,0.387l-0.099,1.099l-0.538,0.545 l0.068,0.483l0.334,0.516l-0.569,0.808l-0.034,1.225l-0.102,0.744l-0.637,0.418v0.838l-0.3,0.549l-0.067,0.646l0.3,0.741 l0.036,0.903l-0.537,0.743l-0.537,0.062l-0.569-0.42l-0.67,0.162l-0.101,0.549l0.167,0.966l0.034,1.356l0.637,0.901l1.005,0.808 l0.134,0.937l-0.168,1.19l1.442,2.354l0.234,0.646l0.568,0.519v1.514l-0.402,1.968l-0.367,0.288l0.168,0.612l-0.168,0.582 l-0.335-0.194l-0.504,0.066l-0.3,0.805l0.233,0.838l0.604,0.484l-0.502,1.838l0.167,0.809l-0.436,0.514l0.501,0.419l-0.201,0.612 l-0.2,0.293l0.3,0.451l1.441,2.161l0.437,0.418l0.335,0.679l1.34,0.546l1.307-0.32l0.066-1.259l0.203-0.259l0.838,0.033 l0.703,0.805l0.301-0.191l0.603-0.098l-0.468,0.677l-1.006,0.871v0.581l0.771,0.323l0.537-0.323l0.1,0.678l0.099,1.545 l0.437,0.519l-0.235,0.227l-0.436-0.451l-0.333-0.745l-0.537-0.223l-0.268,0.451l0.067,0.452l0.871,0.612l0.168,0.452 l-0.604,0.194l-0.402,0.319l0.067,1.098l0.77,0.71l-0.704,0.774l-0.066,0.611l0.334,0.257l-0.805,0.839l0.135,0.453l1.006,0.612 l-0.269,0.741l-0.167,1.098l-0.57,0.677l-0.032,0.549l0.468,0.451l0.906,0.032l0.568,0.546l0.101,0.681l0.805,0.126l0.367,0.551 l-0.099,1.415l-0.671,0.971l-1.205,0.71h-0.537l-0.1,0.868l0.37,0.97l-0.336,0.418l0.033,0.549l0.369,0.228l-0.67,0.772 l-0.503,1.386l-0.033,0.999l0.502,0.227l-0.233,0.517l-0.068,1.677l-0.636,0.323l-0.168,0.87l-0.336-0.517l0.336-0.417 l0.268-1.42l-0.133-0.741l0.166-0.454l-0.4-0.128l-1.206,0.387l-0.871,0.582l-0.503-0.065l0.034-0.388l0.837-0.29l0.537-0.387 v-1.227l-0.336-0.225l-0.937,0.323l-1.643,0.063l-0.537-0.162l-0.637,0.162l-0.032,0.516l0.469,0.936l0.335,0.033l0.201,0.71 l-0.57,0.096l-0.302,0.84l-0.636,0.449l-0.334,0.744l-1.207,0.646l-0.067,0.677l1.274,1.354l0.703,0.098l0.436-0.452 l-0.067-0.548l-0.837-0.226l-0.102-0.451l0.437-0.839l1.171-0.098l0.235-0.289l0.202,1.031l0.871,0.547l1.038-0.033l0.436-0.45 l0.57,0.226l0.333,0.518l1.208,0.579l0.47,0.518l-0.503,0.095l-0.234,0.454l0.402,0.513l-0.537,0.39L445.774,811l0.369,0.515 l0.837,0.514l-0.135,0.26l-0.837-0.354l-0.301-0.42l-0.503,0.063l-0.065,0.71l0.702,0.612l0.303,0.614l1.239,0.191l1.24-0.612 l0.502,0.483l0.47-0.029l0.77-0.323l-0.333,0.579l0.167,0.322l-0.302,0.195l-0.838,0.031l-0.235,0.322l-0.636-0.483l-1.408,0.355 l-0.335,0.644l0.168,0.452l0.904,0.547l0.169,0.745l0.802,0.191l0.671-0.354l-0.101,0.482l-0.705,0.645l0.035,0.453l0.132,0.387 l-0.267,0.515l-0.504,0.034l-0.065,0.578l0.535,2.161l0.502,0.612l-0.033,1.002l0.537,0.87l0.738,0.289v-1.481l0.468-1.679 l0.637-0.419l0.235,0.389l-0.436,0.03l-0.537,1.872l0.067,0.484l0.704,0.45l0.603-0.033l-0.234,0.228l-1.073,0.227l-0.803,0.707 l0.133,0.451l-0.201,0.808v0.773l-0.469,0.324l-0.369,0.773l0.066,0.58l1.275,0.901l1.774,0.357l0.705,0.514l-0.133,0.421 l-0.403,0.03l0.269,0.839l0.335,0.451l0.737-0.805l-0.033,0.677l-0.203,0.549l-0.736,0.258l-0.538,0.711l0.47,0.29h0.671v0.548 l0.704,0.805l0.435-0.03l0.519-0.499l-0.084,0.857l0.269,0.843l-0.437-0.019l-0.403-0.289l-0.436,0.064l-0.201,0.518l0.841,0.975 l0.3,0.095l0.302,0.936l0.403,0.518l0.805,0.708l0.636-0.094l-0.437-1.196l0.201-0.515l-0.235-0.677l0.772,0.516l0.134,0.709 l0.535,0.711l0.335-0.871l0.57-0.549l-0.033-0.583l-0.604-0.191l-1.106-0.161v-0.354h0.704l1.475,0.418l0.234,0.322l0.938,0.034 l-0.235-0.744l-0.904-0.45l-1.642-0.098l-0.066-0.384l0.501-0.195l1.441,0.515l1.477,0.809l0.232,1.063l-0.603,0.646 l-0.033,0.678l0.603,1.193l-0.066,0.644l-0.669,0.485l0.334-1.034l-0.637-1.45l-0.637-0.516l-0.369,0.549l-0.066,0.707 l0.402,0.55l-0.369,0.676l-0.302-0.354l-0.202-0.74h-0.502l-0.703,0.484h-1.039l-0.872,0.32l0.805,0.583l0.067,1.063l0.387,0.676 l0.153,0.533l-0.285,0.47l0.149,0.292l0.623,0.112l0.351-0.68l0.42,0.258l0.705,0.229v0.26l-0.655,0.242l-0.654,0.549 l0.185,0.471l1.109,0.097l1.274,0.697l0.455-0.179l0.384-0.551l-0.369-0.906l0.236-0.68l-0.27-0.694l-0.353,0.19l-0.669-0.095 l0.234-0.244l0.521-0.357l-0.018-0.514l0.404-0.213l1.022,0.34l0.455-0.274l0.167,0.47l0.47,0.191l0.219-0.434l0.906-0.212 l0.806,0.259l0.907-0.097l0.788,0.063l0.084,0.326l-0.503,0.226l-0.403,0.564l-0.538-0.127l-0.57-0.438l-0.605,0.161l-1.443,1.23 l-0.336,0.048l-0.419-0.08l-0.554,0.582l0.134,0.534l-0.304,0.582l-0.25,0.34l0.033,0.342l0.386,0.243l-0.335,0.403v0.355 l1.36,0.438l0.974,0.824l0.302,0.017l0.184-0.404l-0.201-0.682l0.537-0.629l0.604-0.146l0.084-0.354l-0.722-0.778l1.225-0.242 l0.755-0.649l0.79-1.116l0.57-0.339l0.151,0.228l0.638,0.337l0.521-0.013l0.116,0.225l-0.638,0.259l-0.454,0.729l-0.151,0.532 l-0.805,0.763v0.922l0.269,0.599l-0.47,0.516l-0.739,0.31l0.035-0.374l0.385-0.272l0.017-1.104l-0.302-0.176l-0.436,0.307 l-0.135,0.582l-0.335-0.113l-0.519,0.049l-0.355,0.422l0.472,0.746l1.495,1.39l1.326,0.211l0.873,0.469l0.571-0.031l0.604,0.306 l0.42-0.419l0.556-1.005l-0.472-1.36l0.134-0.663l-0.066-0.582l0.151-1.181l0.088-1.333l-0.234-0.901l0.134-0.613l1.139-0.646 l1.072-1.226l0.637-0.259h0.938l0.369-0.354l-0.101-1.131l0.535-0.481l1.041-0.259l1.206,0.677l0.57-0.319L477.333,840.353 L477.333,840.353z M486.62,864.137l0.404,0.275l0.638-0.615h-0.454C487.208,863.797,486.637,864.187,486.62,864.137 L486.62,864.137z M444.534,782.907l-0.904-0.481l-0.537,0.03l0.067,0.519l1.038,1l-0.4,0.388l1.001,0.904l-0.184,0.175 l-0.923-0.29l-0.388,0.646l0.102,0.925l-0.016,0.387l-1.545,0.146l-1.076-0.438l0.472-0.985l-0.185-2.735l-0.388-1.116 l-0.268-0.242l-0.234-0.552l0.199-0.679l0.521-0.388l0.069-0.696l-0.318-0.437l0.032-0.484l0.655-0.6l1.025,0.03l0.856,0.357 l0.806,1.116l-0.051,1.196l0.201,0.341l-0.016,0.874l-1.024-0.292l1.108,0.764l0.336,0.417L444.534,782.907L444.534,782.907z  M445.138,780.717l0.669-0.294l0.47,0.455l-0.335,0.481L445.138,780.717L445.138,780.717z M439.711,789.132l0.353-0.388h0.705 l0.588,0.421l-1.157,0.42L439.711,789.132L439.711,789.132z M446.143,790.087l0.822-0.531v0.599l-0.521,0.483L446.143,790.087 L446.143,790.087z M444.732,789.959l0.687,0.195l0.119,0.888l-0.604,0.322l-0.066-0.532l-0.605-0.484L444.732,789.959 L444.732,789.959z M442.601,789.763l0.217-0.355l1.226,0.275l-0.923,0.568L442.601,789.763L442.601,789.763z M442.953,791.415 l0.183-0.242l0.405,0.275l-0.168,0.468L442.953,791.415L442.953,791.415z M441.752,792.528l0.319-0.612l0.687,0.03l0.464,0.48 l-0.102,0.377l-0.722,0.275l-0.495-0.123L441.752,792.528L441.752,792.528z M441.006,794.019l0.485,0.47l-0.586,0.422 l-0.354-0.34L441.006,794.019L441.006,794.019z M445.438,793.746l0.269,0.999l-0.669-0.063L445.438,793.746L445.438,793.746z  M443.832,793.423l0.904-0.323v1.161L443.832,793.423L443.832,793.423z M441.887,800.39l0.401-0.033l0.134,0.774l-0.502-0.034 L441.887,800.39L441.887,800.39z M441.953,794.583l0.067-0.709l-0.2-0.549l0.938,0.033l0.469,0.868l-0.705,0.132L441.953,794.583 L441.953,794.583z M440.043,796.065l-1.174-0.481l0.102-0.582h0.872l0.502,0.518L440.043,796.065L440.043,796.065z  M443.362,799.033l0.77-0.064l-0.034,0.839L443.362,799.033L443.362,799.033z M444.567,800.097l0.938-0.029l-0.503,0.578 L444.567,800.097L444.567,800.097z M446.243,792.262l0.369-0.227l0.804,0.613l-0.939,0.063L446.243,792.262L446.243,792.262z  M447.75,792.972l0.872,0.162l0.201,0.643l0.738,0.774l-0.503,0.709l-0.268,0.613l-0.603,0.128l-0.437-0.226l-0.469-0.095 l-0.669,0.677l-0.067-1l-0.168-0.71l0.435-1.322L447.75,792.972L447.75,792.972z M442.556,795.648l0.236-0.711l1.943,0.034 l-0.436,0.451l-1.172,0.226l-0.167,0.353C442.96,796.001,442.556,795.681,442.556,795.648L442.556,795.648z M443.63,797.357 l-0.437-0.387l1.04-0.323l0.67-0.064l-0.068,0.74L443.63,797.357L443.63,797.357z M443.999,797.97l0.803-0.45h1.005l0.102,1.417 l-0.502,0.68l-0.604-0.293l-0.301-0.966L443.999,797.97L443.999,797.97z M442.691,800.356l0.369-0.518l0.268,0.39l0.804,0.161 l0.369,0.707l-0.939,0.195L442.691,800.356L442.691,800.356z M445.138,817.705l0.569-0.482l-0.435-0.354l-0.202,0.321 l-1.107-1.613l-0.871-0.71l0.369-0.515l0.805-0.098l0.736-0.417l0.102,1.416l0.871,0.357l0.068,0.965l0.737,0.646l0.469,1.484 l-0.971-0.098l-0.906,0.098L445.138,817.705L445.138,817.705z M441.711,815.995l0.034-0.535l0.283-0.306l0.772,0.209l1.21,1.812 l0.804,1.15l-0.049,0.972l-0.302,0.485l-0.74-0.439l-0.369-1.311l0.102-0.355l-0.587-0.453l-0.94-0.178L441.711,815.995 L441.711,815.995z M441.878,817.498l0.353,0.098l0.653,0.275l0.304,0.875l-0.17,0.646l-0.536,0.083l-0.066-0.39l-0.506-0.373 L441.878,817.498L441.878,817.498z M443.606,822.808l-0.351-0.211l0.049-0.679l-0.486-1.523l0.504-0.45l0.185,0.258l1.074,0.469 l0.353,0.729l-0.537,0.194L443.606,822.808L443.606,822.808z M444.85,826.189l-0.587,0.407l-0.486-0.488l0.167-0.501 l-0.435-0.501l1.006-0.534l0.554,0.874L444.85,826.189L444.85,826.189z M447.181,825.769l-0.233,0.903l-0.436,0.288l-0.805-0.707 l-0.3-1.066l-0.939-1.773l0.939-0.161l0.669-0.545l0.067-0.614l-0.369,0.516l-0.403,0.03l-0.134-0.48l0.269-0.774l-0.536-0.548 l-0.034-1.001l0.501-0.42h1.309l0.603,0.42l0.469,1.969l0.535,0.966l0.134,1.644l-0.201,0.323l0.503,1.225l-0.034,1.356 l-0.637,0.482l-0.501-0.291l-0.168-0.965L447.181,825.769L447.181,825.769z M446.461,830.334l-0.252-0.681l-0.553-0.403 l0.352-0.453l0.034-0.519l0.218-0.195l0.436,0.209l1.042,0.147l-0.387,0.743l0.034,0.761l-0.52,0.407L446.461,830.334 L446.461,830.334z M445.909,831.64v-0.743h1.072l-0.603,0.421L445.909,831.64L445.909,831.64z M447.717,831.155l0.269,0.484 v0.773l-0.236,0.32l-0.268-0.933L447.717,831.155L447.717,831.155z M448.41,830.704l0.05-0.324l0.386-0.016l0.621,0.487 l0.587,0.03l0.79,1.23l0.319,0.956l-1.143-0.986l-0.839-0.309L448.41,830.704L448.41,830.704z M448.375,832.227l0.453-0.114 l0.991,0.519l0.94,1.328l-0.369,0.582l-0.79-0.033l-0.99-1.147L448.375,832.227L448.375,832.227z M449.282,836.627l-1.292,0.242 l-0.419-0.29l0.403-0.389l0.454-0.906l-0.47-0.743l0.587-0.146l0.638,0.567l0.587-0.05l1.309,0.843l-0.034,0.484l-0.722,0.033 l-0.101,0.272L449.282,836.627L449.282,836.627z M450.407,840.381l-0.554-0.104l-0.445-0.293l-0.26-0.665l0.251-0.451 l0.378-0.323l-0.226-0.194l-0.185-0.349l0.738-0.08l0.335,0.582l-0.033,0.843l-0.47,0.341L450.407,840.381L450.407,840.381z  M450.59,838.91l0.186-0.453l0.286-0.18l0.386,0.407l0.471,0.451l0.016,0.794l-0.538,0.356l-0.385-0.098l-0.085-0.374 l-0.167-0.242L450.59,838.91L450.59,838.91z M452.153,839.33l0.94,0.468l0.201,0.502l-0.251,0.033l-0.705-0.484L452.153,839.33 L452.153,839.33z M451.784,842.309l-0.437,0.225l-0.134-0.307l0.335-0.34l-0.033-0.874l0.453-0.145l0.235,0.437L451.784,842.309 L451.784,842.309z M454.436,840.012l-1.108-0.503l-0.521-0.568l-0.016-1.342l0.386-0.016l0.503,1.068l0.789,0.824l0.252,0.501 L454.436,840.012L454.436,840.012z M454.284,841.353l-0.705-0.68l0.285-0.209l0.622,0.146l0.187,0.695L454.284,841.353 L454.284,841.353z M454.738,843.067l-1.024-1.054l-0.335-0.547l0.251-0.306l1.494,1.113l-0.032,0.665L454.738,843.067 L454.738,843.067z M455.763,845.123l-0.404-0.21l-0.47-0.389l-0.15-0.467l-0.89,0.046l-0.353-0.275l0.705-0.26l0.64,0.131 l1.106-0.161l0.287,0.855L455.763,845.123L455.763,845.123z M458.55,849.62l-1.244-0.452l-0.369,0.21h-0.704l-0.455-0.646 l-1.292-0.534l-0.955-0.128l-0.589-1.084l-0.218-0.859l0.251-0.421l0.538,0.343l0.973,1.1l0.638,0.37l0.774,0.034l0.788,0.289 l0.74,0.39h1.073l0.405,0.421l0.907,0.632l0.384,0.046l0.251,0.342l-0.15,0.275h-0.907L458.55,849.62L458.55,849.62z  M455.544,849.996c-0.033,0.03,0.587,0.582,0.587,0.582l-0.989-0.276L455.544,849.996L455.544,849.996z M461.958,854.039 l0.386,0.276l0.352-0.307l-0.487-0.454l-0.487,0.34L461.958,854.039L461.958,854.039z M464.323,854.429l-0.653,0.273l-0.57-0.564 l-0.102-0.6l-0.488-0.293l-1.022,0.195l-0.688-0.114l-0.925-1.05l-0.855-0.194l-0.335-0.794l-0.872-0.454l-0.069-0.468 l0.285-0.356l0.724-0.063l0.468,0.437l0.453,0.209l0.824-0.322l0.991-0.048l1.292,0.888l0.571,0.242l0.218,0.501l0.957-0.289 l0.655,0.259l0.318,0.662l-0.688-0.046l-0.453,0.191l0.369,0.276l0.051,0.453l-0.705,0.649L464.323,854.429L464.323,854.429z  M465.433,854.168l-0.538,0.6l0.017,0.582l0.605-0.193l0.436-0.663l0.185-0.259l-0.436-0.178L465.433,854.168L465.433,854.168z  M470.637,853.41l-0.353,0.676l0.236,0.505l-0.554,0.403l-0.755-0.211l-0.302-0.436l-0.386,0.354l-0.537-0.484l-0.823-0.114 l-0.403,0.39l-0.42-0.714l-0.521-0.288l-0.016-0.438l1.26-0.113l0.319-0.276l1.627,0.421l0.404,0.567l0.404-0.39l0.451-0.081 L470.637,853.41L470.637,853.41z M473.24,853.118l-1.009-0.729l0.605-0.582l-0.402-0.502l0.099-0.323l-0.57-0.857l-0.185-0.938 l-0.554-0.323l-0.134,0.888l-0.319,0.842l0.42,0.76l-0.32,0.535v0.662l0.823,0.455l0.89,0.225l0.32,0.293L473.24,853.118 L473.24,853.118z M469.781,859.767l0.755-0.339l0.386,0.309l-0.537,0.566L469.781,859.767L469.781,859.767z M470.083,858.942 l-0.302-0.292l0.234-0.534l0.638,0.309l-0.05,0.502L470.083,858.942L470.083,858.942z M488.248,863.652l-0.436-0.469l0.521-0.648 l-0.252-0.484l0.604,0.209l0.134,0.679l-0.033,0.743L488.248,863.652L488.248,863.652z M476.739,859.181l0.671-0.323h0.736 l0.469-0.095l1.072,0.157l2.247-0.48l1.205-0.519l1.441,0.131l1.138-0.097l1.341-0.034l0.873,0.226l0.166,0.773l0.471,0.451 l-0.471,0.453l-0.704,0.453l-0.435-0.549l-0.503-0.226l-0.872,0.579l-1.072,0.064l-0.403-0.549l-0.401-0.835l-0.705-0.034 l-0.704,0.71h-0.537l-1.105,0.159l0.872,0.646l0.234-0.097l1.106,0.228l0.403,0.32l-0.302,0.323l0.77,0.29l0.973,0.808v0.808 l-0.369-0.066l-1.039-0.903l-0.671-0.161l-0.702,0.354l-0.671-0.45l-0.301-0.806l-0.973,0.098l-0.101,0.418l0.705,0.387 l-0.102,0.679l-0.402,0.031l-1.071-0.484l-0.604,0.26l-0.234-0.453l-0.637-0.225l0.303-0.68l-0.671,0.549l-0.737-0.514 l0.034-0.389l0.737-0.356l1.341-0.481l-0.739-0.357l-0.568,0.26L476.739,859.181z",
"M479.793,493.288 479.458,494.16 480.127,494.028 			 ",
"M484.584,497.223l-0.771,0.516l0.671,0.29L484.584,497.223 L484.584,497.223z M484.149,494.255l-0.939,0.837l0.537,0.937l1.072,0.098L484.149,494.255L484.149,494.255z M482.373,495.16 l0.873,0.966l-0.606,1.677l-1.172-1.711l0.302-0.901L482.373,495.16z ",
"M483.512,498.995l0.704,0.71l0.032,1.258l-0.871,0.191 l-0.369-1.384C483.008,499.771,483.579,498.899,483.512,498.995z ",
"M485.321,506.188l-1.104,1.419l0.167,0.869l0.771,0.356 l0.469-1.226L485.321,506.188L485.321,506.188z M483.377,502.379l1.911,0.486l0.47,1.611l-0.067,0.808l-0.739-0.354l-0.602-0.066 l0.202-0.613l-1.174-1.158V502.379z",
"M492.066,509.62 491.191,510.476 491.779,511.269  492.939,511.235 492.906,510.397 			 ",
"M482.843,515.379l-0.369-0.549l-0.973,0.192l-0.334,1.066 l1.105,0.03L482.843,515.379L482.843,515.379z M483.21,513.347l0.469,0.837h-0.704 C482.975,514.184,483.245,513.315,483.21,513.347L483.21,513.347z M484.015,509.348l0.401,0.999l-0.703,1.323L484.015,509.348z",
"M485.609,520.234l0.958-0.419l-0.167,0.743L485.609,520.234 L485.609,520.234z M485.137,520.962l-1.698,0.71l-0.842-0.337l-1.042,0.29l-0.286,0.532l0.891,0.743l0.068,0.824l-0.908,0.76 l-0.958,0.357l1.06,0.4l2.288-0.354l0.958-0.776l-0.033-0.987l-0.488-0.79l1.059-1.033L485.137,520.962z"]}
var carsSprite = [[5,5],[95,5],[275,95],[455,185],[635,275],[5,455],[185,545],[365,635],[545,725],[815,725],[185,5],[275,5],[365,5],[455,5],[545,5],[635,5],[725,5],[5,95],[95,95],[185,95],[365,95],[455,95],[545,95],[635,95],[725,95],[5,185],[95,185],[185,185],[275,185],[365,185],[545,185],[635,185],[725,185],[5,275],[95,275],[185,275],[275,275],[365,275],[455,275],[545,275],[725,275],[5,365],[95,365],[185,365],[275,365],[365,365],[455,365],[545,365],[635,365],[725,365],[95,455],[185,455],[275,455],[365,455],[455,455],[545,455],[635,455],[725,455],[5,545],[95,545],[275,545],[365,545],[455,545],[545,545],[635,545],[725,545],[5,635],[95,635],[185,635],[275,635],[455,635],[545,635],[635,635],[725,635],[5,725],[95,725],[185,725],[275,725],[365,725],[455,725],[635,725],[725,725],[815,5],[815,95],[815,185],[815,275],[815,365],[815,455],[815,545],[815,635],[5,815]];
var raceTitle = [
	[["#FFFFFF", "M804.641,394.264h14.561v4.42h-9.517v3.094h8.606v4.187h-8.606v6.5h-5.044V394.264z"],
		["#FFFFFF", "M825.701,394.133h4.862l7.748,18.331h-5.408l-1.326-3.25h-7.02l-1.301,3.25h-5.304L825.701,394.133z M830.121,405.287l-2.028-5.174l-2.054,5.174H830.121z"],
		["#FFFFFF", "M840.079,394.264h5.33l4.342,7.046l4.343-7.046h5.33v18.2h-5.019v-10.452l-4.654,7.124h-0.104l-4.629-7.072 v10.4h-4.939V394.264z"],
		["#FFFFFF", "M862.022,403.363c0-5.226,4.212-9.464,9.828-9.464s9.776,4.186,9.776,9.464 c0,5.227-4.212,9.465-9.828,9.465S862.022,408.642,862.022,403.363z M876.479,403.363c0-2.626-1.897-4.914-4.68-4.914 c-2.757,0-4.603,2.236-4.603,4.914c0,2.626,1.898,4.914,4.654,4.914C874.633,408.277,876.479,406.042,876.479,403.363z"],
		["#FFFFFF", "M884.019,404.481v-10.218h5.122v10.114c0,2.626,1.326,3.874,3.354,3.874s3.354-1.196,3.354-3.744v-10.244 h5.123v10.088c0,5.876-3.354,8.45-8.528,8.45C887.269,412.802,884.019,410.176,884.019,404.481z"],
		["#FFFFFF", "M902.582,409.76l2.808-3.354c1.794,1.431,3.796,2.185,5.902,2.185c1.352,0,2.08-0.468,2.08-1.3 c0-0.755-0.598-1.171-3.068-1.742c-3.874-0.884-6.864-1.977-6.864-5.772c0-3.38,2.679-5.824,7.047-5.824 c3.094,0,5.512,0.832,7.488,2.418l-2.522,3.562c-1.664-1.17-3.484-1.794-5.096-1.794c-1.223,0-1.82,0.52-1.82,1.222 c0,0.832,0.624,1.196,3.146,1.768c4.187,0.91,6.786,2.263,6.786,5.721c0,3.718-2.938,5.928-7.357,5.928 C907.886,412.775,904.817,411.762,902.582,409.76z"],
		["#FFFFFF", "M928.218,394.264h5.07v18.2h-5.07V394.264z"],
		["#FFFFFF", "M941.062,398.684h-5.461v-4.42h15.965v4.42h-5.46v13.78h-5.044V398.684z"],
		["#FFFFFF", "M957.728,394.133h4.862l7.748,18.331h-5.408l-1.326-3.25h-7.021l-1.3,3.25h-5.304L957.728,394.133z M962.147,405.287l-2.027-5.174l-2.055,5.174H962.147z"],
		["#FFFFFF", "M972.105,394.264h5.044v13.78h8.814v4.42h-13.858V394.264z"],
		["#FFFFFF", "M989.994,405.651l-6.916-11.388h5.746l3.744,6.63l3.771-6.63h5.642l-6.916,11.31v6.891h-5.07V405.651z"],
		["#FFFFFF", "M1010.741,394.264h8.606c2.782,0,4.706,0.728,5.928,1.949c1.066,1.066,1.612,2.471,1.612,4.316 c0,2.782-1.482,4.628-3.744,5.59l4.342,6.345h-5.824l-3.666-5.513h-2.21v5.513h-5.044V394.264z M1019.113,403 c1.716,0,2.704-0.832,2.704-2.211c0-1.43-1.04-2.158-2.73-2.158h-3.302V403H1019.113z"],
		["#FFFFFF", "M1035.415,394.133h4.862l7.748,18.331h-5.408l-1.326-3.25h-7.021l-1.3,3.25h-5.304L1035.415,394.133z M1039.835,405.287l-2.027-5.174l-2.055,5.174H1039.835z"],
		["#FFFFFF", "M1047.999,403.363c0-5.304,4.082-9.464,9.594-9.464c3.719,0,6.032,1.612,7.645,3.848l-3.692,2.86 c-1.04-1.3-2.262-2.106-4.004-2.106c-2.548,0-4.342,2.158-4.342,4.862c0,2.73,1.794,4.862,4.342,4.862 c1.898,0,3.017-0.884,4.108-2.21l3.796,2.704c-1.716,2.366-4.03,4.108-8.061,4.108 C1052.185,412.828,1047.999,408.85,1047.999,403.363z"],
		["#FFFFFF", "M1067.604,394.264h14.639v4.29h-9.646v2.756h8.736v3.978h-8.736v2.887h9.776v4.29h-14.769V394.264z"],
		["#FFFFFF", "M804.744,420.264h5.07v18.2h-5.07V420.264z"],
		["#FFFFFF", "M813.143,420.264h4.706l7.488,9.62v-9.62h4.992v18.2h-4.42l-7.774-9.984v9.984h-4.992V420.264z"],
		["#FFFFFF", "M840.754,420.264h5.33l4.342,7.046l4.343-7.046h5.33v18.2h-5.019v-10.452l-4.654,7.124h-0.104l-4.628-7.072 v10.4h-4.94V420.264z"],
		["#FFFFFF", "M862.698,429.363c0-5.226,4.212-9.464,9.828-9.464s9.776,4.186,9.776,9.464 c0,5.227-4.212,9.465-9.828,9.465S862.698,434.642,862.698,429.363z M877.154,429.363c0-2.626-1.897-4.914-4.68-4.914 c-2.757,0-4.603,2.236-4.603,4.914c0,2.626,1.898,4.914,4.654,4.914C875.309,434.277,877.154,432.042,877.154,429.363z"],
		["#FFFFFF", "M884.928,420.264h4.706l7.488,9.62v-9.62h4.992v18.2h-4.42l-7.774-9.984v9.984h-4.992V420.264z"],
		["#FFFFFF", "M904.766,434.798l9.126-10.271h-8.814v-4.264h15.783v3.666l-9.127,10.27h9.127v4.265h-16.095V434.798z"],
		["#FFFFFF", "M929.777,420.133h4.862l7.748,18.331h-5.408l-1.326-3.25h-7.02l-1.301,3.25h-5.304L929.777,420.133z M934.197,431.287l-2.028-5.174l-2.054,5.174H934.197z"],
		["#FFFFFF", "M950.604,434.668l6.812-5.2c1.717-1.3,2.341-2.185,2.341-3.276c0-1.145-0.807-1.846-2.028-1.846 c-1.223,0-2.185,0.701-3.614,2.34l-3.406-2.834c1.95-2.522,3.874-3.9,7.41-3.9c3.979,0,6.708,2.366,6.708,5.851 c0,2.912-1.481,4.446-4.212,6.37l-3.12,2.184h7.515v4.108h-14.404V434.668z"],
		["#FFFFFF", "M967.035,429.363c0-5.148,3.275-9.464,8.45-9.464c5.174,0,8.398,4.264,8.398,9.464 c0,5.148-3.25,9.465-8.451,9.465C970.233,438.828,967.035,434.563,967.035,429.363z M978.813,429.363 c0-2.886-1.378-4.992-3.381-4.992c-2.002,0-3.328,2.028-3.328,4.992c0,2.912,1.353,4.992,3.381,4.992 C977.513,434.355,978.813,432.302,978.813,429.363z"],
		["#FFFFFF", "M988.797,424.84l-3.068,0.701l-0.962-3.899l5.33-1.509h3.666v18.331h-4.966V424.84z"],
		["#FFFFFF", "M996.024,435.941l2.886-3.38c1.482,1.248,2.887,1.977,4.421,1.977c1.664,0,2.678-0.832,2.678-2.185 c0-1.3-1.092-2.105-2.678-2.105c-1.118,0-2.055,0.39-2.912,0.909l-2.99-1.664l0.52-9.229h12.169v4.16h-8.19l-0.156,2.756 c0.832-0.391,1.69-0.65,2.912-0.65c3.276,0,6.24,1.82,6.24,5.824c0,4.057-3.094,6.475-7.515,6.475 C1000.185,438.828,997.923,437.71,996.024,435.941z"],
		["#FFCB65", "M811.896,462.464l-1.297-2.945h-4.531l-1.328,2.945h-1.953l5.539-11.891l5.531,11.891H811.896z M806.755,457.972h3.188l-1.172-2.609c-0.067-0.167-0.138-0.358-0.211-0.574s-0.146-0.457-0.219-0.723 c-0.062,0.25-0.129,0.483-0.199,0.699s-0.142,0.415-0.215,0.598L806.755,457.972z"],
		["#FFCB65", "M816.435,455.058v4.172c0,0.719,0.148,1.234,0.445,1.547s0.778,0.469,1.445,0.469s1.148-0.156,1.445-0.469 s0.445-0.828,0.445-1.547v-4.172h1.695v3.664c0,1.417-0.284,2.445-0.852,3.086s-1.474,0.961-2.719,0.961 c-1.266,0-2.183-0.317-2.75-0.953s-0.852-1.667-0.852-3.094v-3.664H816.435z"],
		["#FFCB65", "M824.599,462.464v-5.922h-1.297v-1.484h1.297v-2.805h1.695v2.805h1.297v1.484h-1.297v5.922H824.599z"],
		["#FFCB65", "M828.505,458.769c0-0.542,0.103-1.054,0.309-1.535s0.501-0.91,0.887-1.285 c0.38-0.37,0.817-0.653,1.312-0.852s1.013-0.297,1.555-0.297c0.558,0,1.082,0.099,1.574,0.297s0.934,0.489,1.324,0.875 c0.391,0.38,0.688,0.81,0.891,1.289s0.305,0.981,0.305,1.508c0,0.547-0.101,1.06-0.301,1.539s-0.493,0.903-0.879,1.273 c-0.406,0.391-0.856,0.687-1.352,0.887s-1.016,0.301-1.562,0.301c-0.536,0-1.052-0.101-1.547-0.301s-0.935-0.491-1.32-0.871 c-0.391-0.386-0.688-0.817-0.891-1.297S828.505,459.311,828.505,458.769z M834.872,458.784c0-0.688-0.222-1.27-0.664-1.746 s-0.984-0.715-1.625-0.715c-0.636,0-1.176,0.238-1.621,0.715s-0.668,1.059-0.668,1.746s0.223,1.27,0.668,1.746 s0.985,0.715,1.621,0.715s1.176-0.238,1.621-0.715S834.872,459.472,834.872,458.784z"],
		["#FFCB65", "M843.731,450.354h1.695v12.109h-1.695v-0.961c-0.302,0.427-0.655,0.745-1.059,0.953 s-0.866,0.312-1.387,0.312c-1.047,0-1.871-0.358-2.473-1.074s-0.902-1.696-0.902-2.941c0-1.183,0.308-2.137,0.922-2.863 s1.417-1.09,2.406-1.09c0.604,0,1.121,0.126,1.551,0.379s0.743,0.616,0.941,1.09V450.354z M843.778,458.737 c0-0.766-0.179-1.362-0.535-1.789s-0.855-0.641-1.496-0.641s-1.145,0.22-1.512,0.66s-0.551,1.051-0.551,1.832 c0,0.786,0.177,1.394,0.531,1.82s0.854,0.641,1.5,0.641c0.614,0,1.112-0.23,1.492-0.691S843.778,459.498,843.778,458.737z"],
		["#FFCB65", "M849.466,456.237c0.183-0.489,0.423-0.852,0.723-1.086s0.671-0.352,1.113-0.352 c0.239,0,0.476,0.028,0.707,0.086s0.46,0.141,0.684,0.25l-0.609,1.438c-0.146-0.104-0.304-0.181-0.473-0.23 s-0.358-0.074-0.566-0.074c-0.562,0-0.966,0.226-1.211,0.676s-0.367,1.207-0.367,2.27v3.25h-1.695v-7.422h1.695V456.237z"],
		["#FFCB65", "M853.114,458.769c0-0.542,0.103-1.054,0.309-1.535s0.501-0.91,0.887-1.285 c0.38-0.37,0.817-0.653,1.312-0.852s1.013-0.297,1.555-0.297c0.558,0,1.082,0.099,1.574,0.297s0.934,0.489,1.324,0.875 c0.391,0.38,0.688,0.81,0.891,1.289s0.305,0.981,0.305,1.508c0,0.547-0.101,1.06-0.301,1.539s-0.493,0.903-0.879,1.273 c-0.406,0.391-0.856,0.687-1.352,0.887s-1.016,0.301-1.562,0.301c-0.536,0-1.052-0.101-1.547-0.301s-0.935-0.491-1.32-0.871 c-0.391-0.386-0.688-0.817-0.891-1.297S853.114,459.311,853.114,458.769z M859.481,458.784c0-0.688-0.222-1.27-0.664-1.746 s-0.984-0.715-1.625-0.715c-0.636,0-1.176,0.238-1.621,0.715s-0.668,1.059-0.668,1.746s0.223,1.27,0.668,1.746 s0.985,0.715,1.621,0.715s1.176-0.238,1.621-0.715S859.481,459.472,859.481,458.784z"],
		["#FFCB65", "M864.763,462.464h-1.695v-7.406h1.594v1.211c0.339-0.516,0.723-0.892,1.152-1.129s0.937-0.355,1.52-0.355 c0.578,0,1.058,0.121,1.438,0.363s0.669,0.61,0.867,1.105c0.391-0.511,0.806-0.883,1.246-1.117s0.941-0.352,1.504-0.352 c0.489,0,0.917,0.09,1.281,0.27s0.648,0.441,0.852,0.785c0.094,0.161,0.163,0.354,0.207,0.578s0.066,0.544,0.066,0.961v0.594v4.492 h-1.695v-3.805c0-0.995-0.105-1.649-0.316-1.965s-0.587-0.473-1.129-0.473c-0.667,0-1.142,0.212-1.426,0.637 s-0.426,1.168-0.426,2.23v3.375h-1.711v-3.805c0-0.917-0.11-1.552-0.332-1.906s-0.603-0.531-1.145-0.531 c-0.333,0-0.638,0.075-0.914,0.227s-0.495,0.359-0.656,0.625c-0.104,0.172-0.177,0.383-0.219,0.633s-0.062,0.711-0.062,1.383 V462.464z"],
		["#FFCB65", "M876.521,458.769c0-0.542,0.103-1.054,0.309-1.535s0.501-0.91,0.887-1.285 c0.38-0.37,0.817-0.653,1.312-0.852s1.013-0.297,1.555-0.297c0.558,0,1.082,0.099,1.574,0.297s0.934,0.489,1.324,0.875 c0.391,0.38,0.688,0.81,0.891,1.289s0.305,0.981,0.305,1.508c0,0.547-0.101,1.06-0.301,1.539s-0.493,0.903-0.879,1.273 c-0.406,0.391-0.856,0.687-1.352,0.887s-1.016,0.301-1.562,0.301c-0.536,0-1.052-0.101-1.547-0.301s-0.935-0.491-1.32-0.871 c-0.391-0.386-0.688-0.817-0.891-1.297S876.521,459.311,876.521,458.769z M882.888,458.784c0-0.688-0.222-1.27-0.664-1.746 s-0.984-0.715-1.625-0.715c-0.636,0-1.176,0.238-1.621,0.715s-0.668,1.059-0.668,1.746s0.223,1.27,0.668,1.746 s0.985,0.715,1.621,0.715s1.176-0.238,1.621-0.715S882.888,459.472,882.888,458.784z"],
		["#FFCB65", "M891.442,462.464v-11.891l7.266,6.992c0.198,0.198,0.398,0.409,0.602,0.633s0.417,0.477,0.641,0.758v-7.93 h1.719v11.883l-7.414-7.117c-0.198-0.192-0.39-0.396-0.574-0.609s-0.36-0.438-0.527-0.672v7.953H891.442z"],
		["#FFCB65", "M911.122,462.464h-1.695v-0.961c-0.302,0.427-0.655,0.745-1.059,0.953s-0.866,0.312-1.387,0.312 c-1.047,0-1.871-0.358-2.473-1.074s-0.902-1.696-0.902-2.941c0-1.183,0.308-2.137,0.922-2.863s1.417-1.09,2.406-1.09 c0.604,0,1.121,0.126,1.551,0.379s0.743,0.616,0.941,1.09v-1.211h1.695V462.464z M909.474,458.737c0-0.766-0.179-1.362-0.535-1.789 s-0.855-0.641-1.496-0.641s-1.145,0.22-1.512,0.66s-0.551,1.051-0.551,1.832c0,0.786,0.177,1.394,0.531,1.82s0.854,0.641,1.5,0.641 c0.609,0,1.105-0.231,1.488-0.695S909.474,459.492,909.474,458.737z"],
		["#FFCB65", "M919.161,462.464h-6.883l4.125-5.922h-3.711v-1.484h6.469l-4.039,5.922h4.039V462.464z"],
		["#FFCB65", "M920.505,451.854c0-0.286,0.105-0.534,0.316-0.742s0.462-0.312,0.754-0.312 c0.302,0,0.554,0.101,0.754,0.301s0.301,0.452,0.301,0.754s-0.102,0.556-0.305,0.762s-0.453,0.309-0.75,0.309 c-0.292,0-0.543-0.105-0.754-0.316S920.505,452.146,920.505,451.854z M920.731,462.464v-7.406h1.695v7.406H920.731z"],
		["#FFCB65", "M924.302,458.769c0-0.542,0.103-1.054,0.309-1.535s0.501-0.91,0.887-1.285 c0.38-0.37,0.817-0.653,1.312-0.852s1.013-0.297,1.555-0.297c0.558,0,1.082,0.099,1.574,0.297s0.934,0.489,1.324,0.875 c0.391,0.38,0.688,0.81,0.891,1.289s0.305,0.981,0.305,1.508c0,0.547-0.101,1.06-0.301,1.539s-0.493,0.903-0.879,1.273 c-0.406,0.391-0.856,0.687-1.352,0.887s-1.016,0.301-1.562,0.301c-0.536,0-1.052-0.101-1.547-0.301s-0.935-0.491-1.32-0.871 c-0.391-0.386-0.688-0.817-0.891-1.297S924.302,459.311,924.302,458.769z M930.669,458.784c0-0.688-0.222-1.27-0.664-1.746 s-0.984-0.715-1.625-0.715c-0.636,0-1.176,0.238-1.621,0.715s-0.668,1.059-0.668,1.746s0.223,1.27,0.668,1.746 s0.985,0.715,1.621,0.715s1.176-0.238,1.621-0.715S930.669,459.472,930.669,458.784z"],
		["#FFCB65", "M934.255,462.464v-7.406h1.594v1.211c0.339-0.511,0.737-0.883,1.195-1.117s1.016-0.352,1.672-0.352 c0.552,0,1.022,0.087,1.41,0.262s0.691,0.434,0.91,0.777c0.13,0.203,0.224,0.44,0.281,0.711s0.086,0.745,0.086,1.422v4.492h-1.711 v-3.805c0-0.974-0.118-1.621-0.355-1.941s-0.657-0.48-1.262-0.48c-0.396,0-0.749,0.073-1.059,0.219s-0.554,0.352-0.73,0.617 c-0.125,0.177-0.212,0.405-0.262,0.684s-0.074,0.723-0.074,1.332v3.375H934.255z"],
		["#FFCB65", "M950.63,462.464h-1.695v-0.961c-0.302,0.427-0.655,0.745-1.059,0.953s-0.866,0.312-1.387,0.312 c-1.047,0-1.871-0.358-2.473-1.074s-0.902-1.696-0.902-2.941c0-1.183,0.308-2.137,0.922-2.863s1.417-1.09,2.406-1.09 c0.604,0,1.121,0.126,1.551,0.379s0.743,0.616,0.941,1.09v-1.211h1.695V462.464z M948.981,458.737c0-0.766-0.179-1.362-0.535-1.789 s-0.855-0.641-1.496-0.641s-1.145,0.22-1.512,0.66s-0.551,1.051-0.551,1.832c0,0.786,0.177,1.394,0.531,1.82s0.854,0.641,1.5,0.641 c0.609,0,1.105-0.231,1.488-0.695S948.981,459.492,948.981,458.737z"],
		["#FFCB65", "M953.052,462.464v-12.109h1.695v12.109H953.052z"],
		["#FFCB65", "M964.302,459.011h-5.922c0.042,0.692,0.247,1.233,0.617,1.621s0.862,0.582,1.477,0.582 c0.547,0,1.003-0.114,1.367-0.344s0.683-0.599,0.953-1.109l1.43,0.797c-0.417,0.745-0.933,1.3-1.547,1.664 s-1.336,0.547-2.164,0.547c-1.188,0-2.133-0.362-2.836-1.086s-1.055-1.69-1.055-2.898c0-1.161,0.363-2.116,1.09-2.863 s1.66-1.121,2.801-1.121c1.192,0,2.122,0.341,2.789,1.023s1,1.638,1,2.867V459.011z M962.544,457.87 c-0.067-0.531-0.271-0.937-0.609-1.215s-0.802-0.418-1.391-0.418c-0.558,0-1.005,0.136-1.344,0.406s-0.575,0.68-0.711,1.227 H962.544z"],
		["#FFCB65", "M980.364,456.815c-0.021-0.089-0.055-0.333-0.102-0.734c-0.042-0.333-0.078-0.609-0.109-0.828 c-0.047,0.261-0.113,0.521-0.199,0.781s-0.194,0.526-0.324,0.797l-2.992,6.094l-2.992-6.219c-0.125-0.255-0.233-0.503-0.324-0.742 s-0.171-0.477-0.238-0.711c-0.005,0.239-0.024,0.491-0.059,0.754s-0.085,0.538-0.152,0.824l-1.227,5.633h-1.711l2.703-11.922 l3.375,7.219c0.052,0.114,0.132,0.305,0.238,0.57s0.235,0.594,0.387,0.984c0.109-0.328,0.281-0.745,0.516-1.25 c0.062-0.136,0.109-0.239,0.141-0.312l3.297-7.211l2.766,11.922h-1.727L980.364,456.815z"],
		["#FFCB65", "M984.153,458.769c0-0.542,0.103-1.054,0.309-1.535s0.501-0.91,0.887-1.285 c0.38-0.37,0.817-0.653,1.312-0.852s1.013-0.297,1.555-0.297c0.558,0,1.082,0.099,1.574,0.297s0.934,0.489,1.324,0.875 c0.391,0.38,0.688,0.81,0.891,1.289s0.305,0.981,0.305,1.508c0,0.547-0.101,1.06-0.301,1.539s-0.493,0.903-0.879,1.273 c-0.406,0.391-0.856,0.687-1.352,0.887s-1.016,0.301-1.562,0.301c-0.536,0-1.052-0.101-1.547-0.301s-0.935-0.491-1.32-0.871 c-0.391-0.386-0.688-0.817-0.891-1.297S984.153,459.311,984.153,458.769z M990.521,458.784c0-0.688-0.222-1.27-0.664-1.746 s-0.984-0.715-1.625-0.715c-0.636,0-1.176,0.238-1.621,0.715s-0.668,1.059-0.668,1.746s0.223,1.27,0.668,1.746 s0.985,0.715,1.621,0.715s1.176-0.238,1.621-0.715S990.521,459.472,990.521,458.784z"],
		["#FFCB65", "M994.106,462.464v-7.406h1.594v1.211c0.339-0.511,0.737-0.883,1.195-1.117s1.016-0.352,1.672-0.352 c0.552,0,1.022,0.087,1.41,0.262s0.691,0.434,0.91,0.777c0.13,0.203,0.224,0.44,0.281,0.711s0.086,0.745,0.086,1.422v4.492h-1.711 v-3.805c0-0.974-0.118-1.621-0.355-1.941s-0.657-0.48-1.262-0.48c-0.396,0-0.749,0.073-1.059,0.219s-0.554,0.352-0.73,0.617 c-0.125,0.177-0.212,0.405-0.262,0.684s-0.074,0.723-0.074,1.332v3.375H994.106z"],
		["#FFCB65", "M1009.208,462.464h-6.883l4.125-5.922h-3.711v-1.484h6.469l-4.039,5.922h4.039V462.464z"],
		["#FFCB65", "M1017.669,462.464h-1.695v-0.961c-0.302,0.427-0.655,0.745-1.059,0.953s-0.866,0.312-1.387,0.312 c-1.047,0-1.871-0.358-2.473-1.074s-0.902-1.696-0.902-2.941c0-1.183,0.308-2.137,0.922-2.863s1.417-1.09,2.406-1.09 c0.604,0,1.121,0.126,1.551,0.379s0.743,0.616,0.941,1.09v-1.211h1.695V462.464z M1016.021,458.737 c0-0.766-0.179-1.362-0.535-1.789s-0.855-0.641-1.496-0.641s-1.145,0.22-1.512,0.66s-0.551,1.051-0.551,1.832 c0,0.786,0.177,1.394,0.531,1.82s0.854,0.641,1.5,0.641c0.609,0,1.105-0.231,1.488-0.695S1016.021,459.492,1016.021,458.737z"]]
]
var mapCities = ["M1250.428,563.104c1.103,0,2,0.897,2,2s-0.897,2-2,2s-2-0.897-2-2S1249.325,563.104,1250.428,563.104  M1250.428,561.104c-2.21,0-4,1.792-4,4c0,2.21,1.79,4,4,4s4-1.79,4-4C1254.428,562.896,1252.638,561.104,1250.428,561.104 L1250.428,561.104z",
	"M1436.405,769.999c1.103,0,2,0.897,2,2s-0.897,2-2,2s-2-0.897-2-2S1435.303,769.999,1436.405,769.999  M1436.405,767.999c-2.21,0-4,1.792-4,4c0,2.21,1.79,4,4,4s4-1.79,4-4C1440.405,769.791,1438.615,767.999,1436.405,767.999 L1436.405,767.999z ",
	"M1392.666,366.581c1.103,0,2,0.897,2,2s-0.897,2-2,2s-2-0.897-2-2S1391.563,366.581,1392.666,366.581  M1392.666,364.581c-2.208,0-4,1.792-4,4c0,2.209,1.792,4,4,4c2.211,0,4-1.791,4-4 C1396.666,366.372,1394.877,364.581,1392.666,364.581L1392.666,364.581z ",
	"M1239.178,552.514c1.103,0,2,0.897,2,2s-0.897,2-2,2s-2-0.897-2-2S1238.075,552.514,1239.178,552.514  M1239.178,550.514c-2.21,0-4,1.792-4,4c0,2.21,1.79,4,4,4s4-1.79,4-4C1243.178,552.306,1241.388,550.514,1239.178,550.514 L1239.178,550.514z ",
	"M325.333,415.911c1.103,0,2,0.897,2,2s-0.897,2-2,2s-2-0.897-2-2S324.23,415.911,325.333,415.911  M325.333,413.911c-2.209,0-4,1.792-4,4c0,2.209,1.791,4,4,4s4-1.791,4-4C329.333,415.702,327.543,413.911,325.333,413.911 L325.333,413.911z ",
	"M309.333,482.404c1.103,0,2,0.897,2,2s-0.897,2-2,2s-2-0.897-2-2S308.23,482.404,309.333,482.404  M309.333,480.404c-2.209,0-4,1.792-4,4s1.791,4,4,4s4-1.792,4-4S311.543,480.404,309.333,480.404L309.333,480.404z ",
	"M561.055,673.734c1.103,0,2,0.897,2,2s-0.897,2-2,2s-2-0.897-2-2S559.952,673.734,561.055,673.734  M561.055,671.734c-2.209,0-4,1.792-4,4c0,2.21,1.791,4,4,4s4-1.79,4-4C565.055,673.526,563.264,671.734,561.055,671.734 L561.055,671.734z ",
	"M768.245,371.316c1.103,0,2,0.897,2,2s-0.897,2-2,2s-2-0.897-2-2S767.143,371.316,768.245,371.316  M768.245,369.316c-2.21,0-4,1.792-4,4c0,2.209,1.79,4,4,4c2.209,0,4-1.791,4-4C772.245,371.108,770.455,369.316,768.245,369.316 L768.245,369.316z ",
	"M759.476,312.514c1.103,0,2,0.897,2,2s-0.897,2-2,2s-2-0.897-2-2S758.373,312.514,759.476,312.514  M759.476,310.514c-2.209,0-4,1.792-4,4c0,2.209,1.791,4,4,4s4-1.791,4-4C763.476,312.305,761.685,310.514,759.476,310.514 L759.476,310.514z ",
	"M823.513,335.748c1.103,0,2,0.897,2,2s-0.897,2-2,2s-2-0.897-2-2S822.41,335.748,823.513,335.748  M823.513,333.748c-2.21,0-4,1.792-4,4c0,2.209,1.79,4,4,4s4-1.791,4-4C827.513,335.539,825.723,333.748,823.513,333.748 L823.513,333.748z ",
	"M845.213,338.748c1.103,0,2,0.897,2,2s-0.897,2-2,2s-2-0.897-2-2S844.11,338.748,845.213,338.748  M845.213,336.748c-2.21,0-4,1.792-4,4c0,2.209,1.79,4,4,4s4-1.791,4-4C849.213,338.54,847.423,336.748,845.213,336.748 L845.213,336.748z ",
	"M794.478,356.665c1.103,0,2,0.897,2,2s-0.897,2-2,2s-2-0.897-2-2S793.375,356.665,794.478,356.665  M794.478,354.665c-2.21,0-4,1.792-4,4c0,2.209,1.79,4,4,4c2.209,0,4-1.791,4-4C798.478,356.457,796.687,354.665,794.478,354.665 L794.478,354.665z ",
	"M999.274,455.098c1.103,0,2,0.897,2,2s-0.897,2-2,2s-2-0.897-2-2S998.172,455.098,999.274,455.098  M999.274,453.098c-2.21,0-4,1.792-4,4c0,2.21,1.79,4,4,4s4-1.79,4-4C1003.274,454.89,1001.484,453.098,999.274,453.098 L999.274,453.098z ",
	"M1299.706,394.367c1.103,0,2,0.897,2,2s-0.897,2-2,2s-2-0.897-2-2S1298.604,394.367,1299.706,394.367  M1299.706,392.367c-2.21,0-4,1.792-4,4c0,2.209,1.79,4,4,4s4-1.791,4-4C1303.706,394.159,1301.916,392.367,1299.706,392.367 L1299.706,392.367z",
	"M455.168,333.103c1.103,0,2,0.897,2,2s-0.897,2-2,2s-2-0.897-2-2S454.065,333.103,455.168,333.103",
	"M455.168,331.103c-2.209,0-4,1.792-4,4c0,2.209,1.791,4,4,4s4-1.791,4-4C459.168,332.895,457.378,331.103,455.168,331.103 L455.168,331.103z"];

var mapCitiesTitles = ["M473.139,332.36c-0.395-0.336-0.812-0.588-1.251-0.756s-0.901-0.252-1.386-0.252 c-0.938,0-1.7,0.301-2.288,0.902s-0.882,1.381-0.882,2.338c0,0.926,0.286,1.689,0.858,2.291s1.294,0.902,2.165,0.902 c0.508,0,0.991-0.09,1.45-0.27s0.899-0.451,1.321-0.814v1.576c-0.375,0.27-0.783,0.471-1.225,0.604s-0.92,0.199-1.436,0.199 c-0.656,0-1.263-0.107-1.819-0.322s-1.046-0.531-1.468-0.949c-0.418-0.41-0.739-0.894-0.964-1.45s-0.337-1.149-0.337-1.778 s0.112-1.22,0.337-1.772s0.55-1.038,0.976-1.456c0.426-0.422,0.914-0.741,1.465-0.958s1.146-0.325,1.787-0.325 c0.504,0,0.984,0.073,1.441,0.22s0.9,0.368,1.33,0.665L473.139,332.36z",
		"M479.989,338.852h-1.271v-0.721c-0.227,0.32-0.491,0.559-0.794,0.715s-0.649,0.234-1.04,0.234 c-0.785,0-1.403-0.269-1.854-0.806s-0.677-1.272-0.677-2.206c0-0.887,0.23-1.603,0.691-2.147s1.062-0.817,1.805-0.817 c0.453,0,0.841,0.095,1.163,0.284s0.558,0.462,0.706,0.817v-0.908h1.271V338.852z M478.752,336.057 c0-0.574-0.134-1.021-0.401-1.342s-0.642-0.48-1.122-0.48s-0.858,0.165-1.134,0.495s-0.413,0.788-0.413,1.374 c0,0.59,0.133,1.045,0.398,1.365s0.641,0.48,1.125,0.48c0.457,0,0.829-0.174,1.116-0.521S478.752,336.624,478.752,336.057z",
		"M481.747,338.852v-5.555h1.195v0.908c0.254-0.383,0.553-0.662,0.896-0.838s0.762-0.264,1.254-0.264 c0.414,0,0.767,0.065,1.058,0.196s0.519,0.325,0.683,0.583c0.098,0.152,0.168,0.33,0.211,0.533s0.064,0.559,0.064,1.066v3.369 h-1.283v-2.854c0-0.73-0.089-1.216-0.267-1.456s-0.493-0.36-0.946-0.36c-0.297,0-0.562,0.055-0.794,0.164 s-0.415,0.264-0.548,0.463c-0.094,0.133-0.159,0.304-0.196,0.513s-0.056,0.542-0.056,0.999v2.531H481.747z",
		"M494.028,338.852h-1.271v-0.721c-0.227,0.32-0.491,0.559-0.794,0.715s-0.649,0.234-1.04,0.234 c-0.785,0-1.403-0.269-1.854-0.806s-0.677-1.272-0.677-2.206c0-0.887,0.23-1.603,0.691-2.147s1.062-0.817,1.805-0.817 c0.453,0,0.841,0.095,1.163,0.284s0.558,0.462,0.706,0.817v-0.908h1.271V338.852z M492.792,336.057 c0-0.574-0.134-1.021-0.401-1.342s-0.642-0.48-1.122-0.48s-0.858,0.165-1.134,0.495s-0.413,0.788-0.413,1.374 c0,0.59,0.133,1.045,0.398,1.365s0.641,0.48,1.125,0.48c0.457,0,0.829-0.174,1.116-0.521S492.792,336.624,492.792,336.057z",
		"M499.741,329.77h1.271v9.082h-1.271v-0.721c-0.227,0.32-0.491,0.559-0.794,0.715s-0.649,0.234-1.04,0.234 c-0.785,0-1.403-0.269-1.854-0.806s-0.677-1.272-0.677-2.206c0-0.887,0.23-1.603,0.691-2.147s1.062-0.817,1.805-0.817 c0.453,0,0.841,0.095,1.163,0.284s0.558,0.462,0.706,0.817V329.77z M499.776,336.057c0-0.574-0.134-1.021-0.401-1.342 s-0.642-0.48-1.122-0.48s-0.858,0.165-1.134,0.495s-0.413,0.788-0.413,1.374c0,0.59,0.133,1.045,0.398,1.365 s0.641,0.48,1.125,0.48c0.461,0,0.834-0.173,1.119-0.519S499.776,336.627,499.776,336.057z",
		"M507.997,338.852h-1.271v-0.721c-0.227,0.32-0.491,0.559-0.794,0.715s-0.649,0.234-1.04,0.234 c-0.785,0-1.403-0.269-1.854-0.806s-0.677-1.272-0.677-2.206c0-0.887,0.23-1.603,0.691-2.147s1.062-0.817,1.805-0.817 c0.453,0,0.841,0.095,1.163,0.284s0.558,0.462,0.706,0.817v-0.908h1.271V338.852z M506.76,336.057 c0-0.574-0.134-1.021-0.401-1.342s-0.642-0.48-1.122-0.48s-0.858,0.165-1.134,0.495s-0.413,0.788-0.413,1.374 c0,0.59,0.133,1.045,0.398,1.365s0.641,0.48,1.125,0.48c0.457,0,0.829-0.174,1.116-0.521S506.76,336.624,506.76,336.057z",
		"M572.588,679.734v-8.578h2.162c0.617,0,1.073,0.033,1.368,0.1s0.546,0.176,0.753,0.328 c0.266,0.195,0.472,0.451,0.618,0.768s0.22,0.666,0.22,1.049c0,0.457-0.105,0.838-0.316,1.145s-0.518,0.521-0.92,0.643 c0.5,0.078,0.894,0.305,1.181,0.682s0.431,0.854,0.431,1.428c0,0.348-0.061,0.678-0.182,0.99s-0.293,0.578-0.516,0.797 c-0.234,0.238-0.525,0.406-0.873,0.504s-0.932,0.146-1.752,0.146H572.588z M573.953,674.777h0.533 c0.664,0,1.134-0.092,1.409-0.273s0.413-0.486,0.413-0.916c0-0.469-0.127-0.799-0.381-0.988s-0.734-0.283-1.441-0.283h-0.533 V674.777z M573.953,678.568h0.48c0.488,0,0.854-0.02,1.096-0.059s0.434-0.107,0.574-0.205c0.172-0.113,0.305-0.266,0.398-0.457 s0.141-0.402,0.141-0.633c0-0.273-0.057-0.512-0.17-0.715s-0.275-0.361-0.486-0.475c-0.133-0.066-0.284-0.115-0.454-0.146 s-0.396-0.047-0.677-0.047h-0.422h-0.48V678.568z",
		"M580.668,675.064c0.137-0.367,0.317-0.639,0.542-0.814s0.503-0.264,0.835-0.264 c0.18,0,0.356,0.021,0.53,0.064s0.345,0.105,0.513,0.188l-0.457,1.078c-0.109-0.078-0.228-0.137-0.354-0.174 s-0.269-0.055-0.425-0.055c-0.422,0-0.725,0.168-0.908,0.506s-0.275,0.906-0.275,1.703v2.438h-1.271v-5.566h1.271V675.064z",
		"M589.041,679.734h-1.271v-0.721c-0.227,0.32-0.491,0.559-0.794,0.715s-0.649,0.234-1.04,0.234 c-0.785,0-1.403-0.27-1.854-0.807s-0.677-1.271-0.677-2.205c0-0.887,0.23-1.604,0.691-2.148s1.062-0.816,1.805-0.816 c0.453,0,0.841,0.094,1.163,0.283s0.558,0.463,0.706,0.818v-0.908h1.271V679.734z M587.805,676.939 c0-0.574-0.134-1.021-0.401-1.342s-0.642-0.48-1.122-0.48s-0.858,0.164-1.134,0.494s-0.413,0.789-0.413,1.375 c0,0.59,0.133,1.045,0.398,1.365s0.641,0.48,1.125,0.48c0.457,0,0.829-0.174,1.116-0.521S587.805,677.506,587.805,676.939z",
		"M590.16,678.727l1.055-0.574c0.078,0.277,0.223,0.488,0.434,0.633s0.482,0.217,0.814,0.217 c0.285,0,0.509-0.066,0.671-0.197s0.243-0.309,0.243-0.535c0-0.301-0.289-0.559-0.867-0.773c-0.195-0.07-0.346-0.129-0.451-0.176 c-0.594-0.246-1.009-0.496-1.245-0.75s-0.354-0.562-0.354-0.926c0-0.496,0.194-0.898,0.583-1.207s0.903-0.463,1.544-0.463 c0.43,0,0.798,0.078,1.104,0.236s0.53,0.385,0.671,0.678l-0.902,0.621c-0.066-0.176-0.183-0.316-0.349-0.42 s-0.358-0.154-0.577-0.154c-0.242,0-0.437,0.057-0.583,0.172s-0.22,0.27-0.22,0.461c0,0.289,0.328,0.553,0.984,0.791 c0.207,0.074,0.367,0.135,0.48,0.182c0.512,0.203,0.878,0.432,1.099,0.688s0.331,0.576,0.331,0.959 c0,0.555-0.201,0.988-0.604,1.303s-0.957,0.473-1.664,0.473c-0.543,0-0.994-0.102-1.354-0.305S590.363,679.145,590.16,678.727z",
		"M595.797,671.777c0-0.215,0.079-0.4,0.237-0.557s0.347-0.234,0.565-0.234c0.227,0,0.415,0.074,0.565,0.225 s0.226,0.34,0.226,0.566s-0.076,0.416-0.229,0.57s-0.34,0.232-0.562,0.232c-0.219,0-0.407-0.08-0.565-0.238 S595.797,671.996,595.797,671.777z M595.967,679.734v-5.555h1.271v5.555H595.967z",
		"M599.113,679.734v-9.082h1.271v9.082H599.113z",
		"M335.886,413.333h1.377v5.209c0,0.773,0.179,1.354,0.536,1.743s0.892,0.583,1.603,0.583 c0.707,0,1.239-0.194,1.597-0.583s0.536-0.97,0.536-1.743v-5.209h1.395v5.338c0,1.16-0.293,2.028-0.879,2.604 s-1.469,0.864-2.648,0.864s-2.061-0.287-2.643-0.861s-0.873-1.443-0.873-2.607V413.333z",
		"M344.358,420.194l1.113-0.516c0.105,0.383,0.299,0.675,0.58,0.876s0.641,0.302,1.078,0.302 c0.414,0,0.743-0.115,0.987-0.346s0.366-0.539,0.366-0.926c0-0.504-0.418-0.953-1.254-1.348c-0.117-0.059-0.207-0.102-0.27-0.129 c-0.945-0.461-1.575-0.878-1.89-1.251s-0.472-0.829-0.472-1.368c0-0.699,0.237-1.266,0.712-1.699s1.097-0.65,1.866-0.65 c0.633,0,1.162,0.122,1.588,0.366s0.721,0.595,0.885,1.052l-1.09,0.562c-0.172-0.27-0.36-0.467-0.565-0.592 s-0.44-0.188-0.706-0.188c-0.375,0-0.673,0.098-0.894,0.293s-0.331,0.457-0.331,0.785c0,0.516,0.484,0.996,1.453,1.441 c0.074,0.035,0.133,0.062,0.176,0.082c0.848,0.391,1.43,0.772,1.746,1.146s0.475,0.839,0.475,1.397 c0,0.812-0.256,1.458-0.768,1.937s-1.203,0.718-2.074,0.718c-0.73,0-1.329-0.168-1.796-0.504S344.503,420.819,344.358,420.194z",
		"M357.103,421.911l-0.973-2.209h-3.398l-0.996,2.209h-1.465l4.154-8.918l4.148,8.918H357.103z  M353.247,418.542h2.391l-0.879-1.957c-0.051-0.125-0.104-0.269-0.158-0.431s-0.109-0.343-0.164-0.542 c-0.047,0.188-0.097,0.362-0.149,0.524s-0.106,0.312-0.161,0.448L353.247,418.542z",
		"M328.583,483.6c-0.016-0.066-0.041-0.25-0.076-0.551c-0.031-0.25-0.059-0.457-0.082-0.621 c-0.035,0.195-0.085,0.391-0.149,0.586s-0.146,0.395-0.243,0.598l-2.244,4.57l-2.244-4.664c-0.094-0.191-0.175-0.377-0.243-0.557 s-0.128-0.357-0.179-0.533c-0.004,0.18-0.019,0.369-0.044,0.566s-0.063,0.402-0.114,0.617l-0.92,4.225h-1.283l2.027-8.941 l2.531,5.414c0.039,0.086,0.099,0.229,0.179,0.428s0.177,0.445,0.29,0.738c0.082-0.246,0.211-0.559,0.387-0.938 c0.047-0.102,0.082-0.18,0.105-0.234l2.473-5.408l2.074,8.941h-1.295L328.583,483.6z",
		"M337.185,485.246h-4.441c0.031,0.52,0.186,0.926,0.463,1.217s0.646,0.436,1.107,0.436 c0.41,0,0.752-0.086,1.025-0.258s0.512-0.449,0.715-0.832l1.072,0.598c-0.312,0.559-0.699,0.975-1.16,1.248 s-1.002,0.41-1.623,0.41c-0.891,0-1.6-0.271-2.127-0.814s-0.791-1.268-0.791-2.174c0-0.871,0.272-1.586,0.817-2.146 s1.245-0.842,2.101-0.842c0.895,0,1.592,0.256,2.092,0.768s0.75,1.229,0.75,2.15V485.246z M335.867,484.391 c-0.051-0.398-0.203-0.701-0.457-0.91s-0.602-0.314-1.043-0.314c-0.418,0-0.754,0.102-1.008,0.305s-0.432,0.51-0.533,0.92H335.867 z",
		"M338.89,487.836h-1.406l2.104-2.988l-1.799-2.566h1.4l0.779,1.148c0.082,0.117,0.154,0.23,0.217,0.34 s0.119,0.221,0.17,0.334c0.047-0.094,0.101-0.191,0.161-0.295s0.138-0.234,0.231-0.391l0.773-1.137h1.389l-1.799,2.578 l2.086,2.977h-1.389l-1.031-1.459l-0.047-0.07c-0.199-0.301-0.328-0.531-0.387-0.691c-0.078,0.148-0.153,0.287-0.226,0.414 s-0.146,0.244-0.22,0.354L338.89,487.836z",
		"M343.835,479.879c0-0.215,0.079-0.4,0.237-0.557s0.347-0.234,0.565-0.234c0.227,0,0.415,0.076,0.565,0.227 s0.226,0.338,0.226,0.564s-0.076,0.418-0.229,0.572s-0.34,0.23-0.562,0.23c-0.219,0-0.407-0.078-0.565-0.236 S343.835,480.098,343.835,479.879z M344.005,487.836v-5.555h1.271v5.555H344.005z",
		"M351.242,483.863c-0.195-0.215-0.423-0.379-0.683-0.492s-0.54-0.17-0.841-0.17 c-0.52,0-0.936,0.168-1.248,0.504s-0.469,0.781-0.469,1.336c0,0.578,0.157,1.033,0.472,1.363s0.749,0.494,1.304,0.494 c0.309,0,0.584-0.057,0.826-0.172s0.455-0.291,0.639-0.525v1.465c-0.234,0.133-0.485,0.232-0.753,0.299s-0.552,0.1-0.853,0.1 c-0.871,0-1.581-0.277-2.13-0.832s-0.823-1.273-0.823-2.156c0-0.895,0.284-1.615,0.853-2.164s1.312-0.824,2.229-0.824 c0.289,0,0.555,0.029,0.797,0.086s0.469,0.143,0.68,0.26V483.863z",
		"M352.132,485.064c0-0.406,0.077-0.789,0.231-1.15s0.376-0.684,0.665-0.965 c0.285-0.277,0.613-0.49,0.984-0.639s0.76-0.223,1.166-0.223c0.418,0,0.812,0.074,1.181,0.223s0.7,0.367,0.993,0.656 c0.293,0.285,0.516,0.607,0.668,0.967s0.229,0.736,0.229,1.131c0,0.41-0.075,0.795-0.226,1.154s-0.37,0.678-0.659,0.955 c-0.305,0.293-0.643,0.516-1.014,0.666s-0.762,0.225-1.172,0.225c-0.402,0-0.789-0.074-1.16-0.225s-0.701-0.369-0.99-0.654 c-0.293-0.289-0.516-0.613-0.668-0.973S352.132,485.471,352.132,485.064z M356.908,485.076c0-0.516-0.166-0.951-0.498-1.309 s-0.738-0.537-1.219-0.537c-0.477,0-0.882,0.18-1.216,0.537s-0.501,0.793-0.501,1.309s0.167,0.953,0.501,1.311 s0.739,0.535,1.216,0.535s0.882-0.178,1.216-0.535S356.908,485.592,356.908,485.076z",
		"M1023.449,480.6l-0.973-2.209h-3.398l-0.996,2.209h-1.465l4.154-8.918l4.148,8.918H1023.449z  M1019.594,477.23h2.391l-0.879-1.957c-0.051-0.125-0.104-0.27-0.158-0.432s-0.109-0.342-0.164-0.541 c-0.047,0.188-0.097,0.361-0.149,0.523s-0.106,0.312-0.161,0.449L1019.594,477.23z",
		"M1026.895,471.518v4.436c0.148-0.352,0.386-0.623,0.712-0.814s0.716-0.287,1.169-0.287 c0.738,0,1.337,0.271,1.796,0.816s0.688,1.262,0.688,2.148c0,0.934-0.226,1.668-0.677,2.205s-1.069,0.807-1.854,0.807 c-0.391,0-0.737-0.078-1.04-0.234s-0.567-0.395-0.794-0.715v0.721h-1.271v-9.082H1026.895z M1026.854,477.805 c0,0.566,0.146,1.023,0.437,1.371s0.667,0.521,1.128,0.521c0.48,0,0.853-0.16,1.116-0.48s0.396-0.775,0.396-1.365 c0-0.586-0.138-1.045-0.413-1.375s-0.653-0.494-1.134-0.494s-0.855,0.16-1.125,0.48S1026.854,477.23,1026.854,477.805z",
		"M1033.838,475.045v3.129c0,0.539,0.111,0.926,0.334,1.16s0.584,0.352,1.084,0.352s0.861-0.117,1.084-0.352 s0.334-0.621,0.334-1.16v-3.129h1.271v2.748c0,1.062-0.213,1.834-0.639,2.314s-1.105,0.721-2.039,0.721 c-0.949,0-1.637-0.238-2.062-0.715s-0.639-1.25-0.639-2.32v-2.748H1033.838z",
		"M1039.645,477.254h3.135v1.172h-3.135V477.254z",
		"M1044.625,480.6v-8.578h1.881c1.223,0,2.083,0.061,2.581,0.184s0.935,0.33,1.31,0.619 c0.496,0.379,0.872,0.865,1.128,1.459s0.384,1.271,0.384,2.033s-0.128,1.436-0.384,2.023s-0.632,1.074-1.128,1.457 c-0.375,0.289-0.802,0.494-1.28,0.617s-1.224,0.186-2.235,0.186h-0.375H1044.625z M1046.02,479.34h1.172 c0.645,0,1.128-0.043,1.45-0.129s0.603-0.23,0.841-0.434c0.324-0.277,0.567-0.623,0.729-1.035s0.243-0.891,0.243-1.438 s-0.081-1.027-0.243-1.439s-0.405-0.756-0.729-1.033c-0.242-0.203-0.532-0.348-0.87-0.434s-0.866-0.129-1.585-0.129h-0.504h-0.504 V479.34z",
		"M1053.402,480.6v-9.082h1.195v4.436c0.254-0.383,0.553-0.662,0.896-0.838s0.762-0.264,1.254-0.264 c0.414,0,0.767,0.064,1.058,0.195s0.519,0.326,0.683,0.584c0.098,0.152,0.168,0.33,0.211,0.533s0.064,0.559,0.064,1.066v3.369 h-1.283v-2.854c0-0.73-0.089-1.217-0.267-1.457s-0.493-0.359-0.946-0.359c-0.297,0-0.562,0.055-0.794,0.164 s-0.415,0.264-0.548,0.463c-0.094,0.133-0.159,0.303-0.196,0.512s-0.056,0.543-0.056,1v2.531H1053.402z",
		"M1065.684,480.6h-1.271v-0.721c-0.227,0.32-0.491,0.559-0.794,0.715s-0.649,0.234-1.04,0.234 c-0.785,0-1.403-0.27-1.854-0.807s-0.677-1.271-0.677-2.205c0-0.887,0.23-1.604,0.691-2.148s1.062-0.816,1.805-0.816 c0.453,0,0.841,0.094,1.163,0.283s0.558,0.463,0.706,0.818v-0.908h1.271V480.6z M1064.447,477.805 c0-0.574-0.134-1.021-0.401-1.342s-0.642-0.48-1.122-0.48s-0.858,0.164-1.134,0.494s-0.413,0.789-0.413,1.375 c0,0.59,0.133,1.045,0.398,1.365s0.641,0.48,1.125,0.48c0.457,0,0.829-0.174,1.116-0.521S1064.447,478.371,1064.447,477.805z",
		"M1068.713,471.518v4.436c0.148-0.352,0.386-0.623,0.712-0.814s0.716-0.287,1.169-0.287 c0.738,0,1.337,0.271,1.796,0.816s0.688,1.262,0.688,2.148c0,0.934-0.226,1.668-0.677,2.205s-1.069,0.807-1.854,0.807 c-0.391,0-0.737-0.078-1.04-0.234s-0.567-0.395-0.794-0.715v0.721h-1.271v-9.082H1068.713z M1068.672,477.805 c0,0.566,0.146,1.023,0.437,1.371s0.667,0.521,1.128,0.521c0.48,0,0.853-0.16,1.116-0.48s0.396-0.775,0.396-1.365 c0-0.586-0.138-1.045-0.413-1.375s-0.653-0.494-1.134-0.494s-0.855,0.16-1.125,0.48S1068.672,477.23,1068.672,477.805z",
		"M1074.314,472.643c0-0.215,0.079-0.4,0.237-0.557s0.347-0.234,0.565-0.234 c0.227,0,0.415,0.074,0.565,0.225s0.226,0.34,0.226,0.566s-0.076,0.416-0.229,0.57s-0.34,0.232-0.562,0.232 c-0.219,0-0.407-0.08-0.565-0.238S1074.314,472.861,1074.314,472.643z M1074.484,480.6v-5.555h1.271v5.555H1074.484z",
		"M741.814,388.344l1.113-0.516c0.105,0.383,0.299,0.675,0.58,0.876s0.641,0.302,1.078,0.302 c0.414,0,0.742-0.115,0.986-0.346s0.367-0.539,0.367-0.926c0-0.504-0.418-0.953-1.254-1.348c-0.117-0.059-0.207-0.102-0.27-0.129 c-0.945-0.461-1.576-0.878-1.891-1.251s-0.471-0.829-0.471-1.368c0-0.699,0.236-1.266,0.711-1.699s1.098-0.65,1.867-0.65 c0.633,0,1.162,0.122,1.588,0.366s0.721,0.595,0.885,1.052l-1.09,0.562c-0.172-0.27-0.361-0.467-0.566-0.592 s-0.439-0.188-0.705-0.188c-0.375,0-0.674,0.098-0.895,0.293s-0.33,0.457-0.33,0.785c0,0.516,0.484,0.996,1.453,1.441 c0.074,0.035,0.133,0.062,0.176,0.082c0.848,0.391,1.43,0.772,1.746,1.146s0.475,0.839,0.475,1.397 c0,0.812-0.256,1.458-0.768,1.937s-1.203,0.718-2.074,0.718c-0.73,0-1.33-0.168-1.797-0.504S741.959,388.969,741.814,388.344z",
		"M748.787,392.674v-8.168h1.271v0.908c0.148-0.352,0.385-0.623,0.711-0.814s0.717-0.287,1.17-0.287 c0.738,0,1.336,0.272,1.795,0.817s0.689,1.261,0.689,2.147c0,0.934-0.227,1.669-0.678,2.206s-1.068,0.806-1.854,0.806 c-0.391,0-0.738-0.078-1.041-0.234s-0.566-0.395-0.793-0.715v3.334H748.787z M750.018,387.266c0,0.574,0.143,1.033,0.43,1.377 s0.666,0.516,1.135,0.516c0.48,0,0.852-0.16,1.115-0.48s0.396-0.775,0.396-1.365c0-0.586-0.139-1.044-0.414-1.374 s-0.652-0.495-1.133-0.495s-0.855,0.16-1.125,0.48S750.018,386.692,750.018,387.266z",
		"M760.998,390.061h-1.271v-0.721c-0.227,0.32-0.492,0.559-0.795,0.715s-0.648,0.234-1.039,0.234 c-0.785,0-1.404-0.269-1.855-0.806s-0.676-1.272-0.676-2.206c0-0.887,0.23-1.603,0.691-2.147s1.062-0.817,1.805-0.817 c0.453,0,0.84,0.095,1.162,0.284s0.559,0.462,0.707,0.817v-0.908h1.271V390.061z M759.762,387.266 c0-0.574-0.135-1.021-0.402-1.342s-0.641-0.48-1.121-0.48s-0.859,0.165-1.135,0.495s-0.412,0.788-0.412,1.374 c0,0.59,0.133,1.045,0.398,1.365s0.641,0.48,1.125,0.48c0.457,0,0.828-0.174,1.115-0.521S759.762,387.833,759.762,387.266z",
		"M762.645,382.104c0-0.215,0.078-0.4,0.236-0.557s0.348-0.234,0.566-0.234c0.227,0,0.414,0.075,0.564,0.226 s0.227,0.339,0.227,0.565s-0.076,0.417-0.229,0.571s-0.34,0.231-0.562,0.231c-0.219,0-0.408-0.079-0.566-0.237 S762.645,382.323,762.645,382.104z M762.814,390.061v-5.555h1.271v5.555H762.814z",
		"M765.902,390.061v-5.555h1.195v0.908c0.254-0.383,0.553-0.662,0.896-0.838s0.762-0.264,1.254-0.264 c0.414,0,0.766,0.065,1.057,0.196s0.52,0.325,0.684,0.583c0.098,0.152,0.168,0.33,0.211,0.533s0.064,0.559,0.064,1.066v3.369 h-1.283v-2.854c0-0.73-0.09-1.216-0.268-1.456s-0.492-0.36-0.945-0.36c-0.297,0-0.562,0.055-0.795,0.164s-0.414,0.264-0.547,0.463 c-0.094,0.133-0.16,0.304-0.197,0.513s-0.055,0.542-0.055,0.999v2.531H765.902z",
		"M1440.555,793.945l-0.973-2.209h-3.398l-0.996,2.209h-1.465l4.154-8.918l4.148,8.918H1440.555z  M1436.699,790.576h2.391l-0.879-1.957c-0.051-0.125-0.104-0.27-0.158-0.432s-0.109-0.342-0.164-0.541 c-0.047,0.188-0.096,0.361-0.148,0.523s-0.107,0.312-0.162,0.449L1436.699,790.576z",
		"M1443.959,788.391v3.129c0,0.539,0.111,0.926,0.334,1.16s0.584,0.352,1.084,0.352s0.861-0.117,1.084-0.352 s0.334-0.621,0.334-1.16v-3.129h1.271v2.748c0,1.062-0.213,1.834-0.639,2.314s-1.105,0.721-2.039,0.721 c-0.949,0-1.637-0.238-2.062-0.715s-0.639-1.25-0.639-2.32v-2.748H1443.959z",
		"M1449.145,792.938l1.055-0.574c0.078,0.277,0.223,0.488,0.434,0.633s0.482,0.217,0.814,0.217 c0.285,0,0.51-0.066,0.672-0.197s0.242-0.309,0.242-0.535c0-0.301-0.289-0.559-0.867-0.773c-0.195-0.07-0.346-0.129-0.451-0.176 c-0.594-0.246-1.008-0.496-1.244-0.75s-0.355-0.562-0.355-0.926c0-0.496,0.195-0.898,0.584-1.207s0.902-0.463,1.543-0.463 c0.43,0,0.799,0.078,1.105,0.236s0.529,0.385,0.67,0.678l-0.902,0.621c-0.066-0.176-0.182-0.316-0.348-0.42 s-0.359-0.154-0.578-0.154c-0.242,0-0.436,0.057-0.582,0.172s-0.221,0.27-0.221,0.461c0,0.289,0.328,0.553,0.984,0.791 c0.207,0.074,0.367,0.135,0.48,0.182c0.512,0.203,0.879,0.432,1.1,0.688s0.33,0.576,0.33,0.959c0,0.555-0.201,0.988-0.604,1.303 s-0.957,0.473-1.664,0.473c-0.543,0-0.994-0.102-1.354-0.305S1449.348,793.355,1449.145,792.938z",
		"M1455.191,793.945v-4.441h-0.973v-1.113h0.973v-2.104h1.271v2.104h0.973v1.113h-0.973v4.441H1455.191z",
		"M1459.803,789.275c0.137-0.367,0.318-0.639,0.543-0.814s0.502-0.264,0.834-0.264 c0.18,0,0.357,0.021,0.531,0.064s0.344,0.105,0.512,0.188l-0.457,1.078c-0.109-0.078-0.227-0.137-0.354-0.174 s-0.27-0.055-0.426-0.055c-0.422,0-0.725,0.168-0.908,0.506s-0.275,0.906-0.275,1.703v2.438h-1.271v-5.566h1.271V789.275z",
		"M1468.176,793.945h-1.271v-0.721c-0.227,0.32-0.49,0.559-0.793,0.715s-0.65,0.234-1.041,0.234 c-0.785,0-1.402-0.27-1.854-0.807s-0.678-1.271-0.678-2.205c0-0.887,0.23-1.604,0.691-2.148s1.062-0.816,1.805-0.816 c0.453,0,0.842,0.094,1.164,0.283s0.557,0.463,0.705,0.818v-0.908h1.271V793.945z M1466.939,791.15c0-0.574-0.133-1.021-0.4-1.342 s-0.643-0.48-1.123-0.48s-0.857,0.164-1.133,0.494s-0.414,0.789-0.414,1.375c0,0.59,0.133,1.045,0.398,1.365 s0.641,0.48,1.125,0.48c0.457,0,0.83-0.174,1.117-0.521S1466.939,791.717,1466.939,791.15z",
		"M1469.992,793.945v-9.082h1.271v9.082H1469.992z",
		"M1472.969,785.988c0-0.215,0.08-0.4,0.238-0.557s0.346-0.234,0.564-0.234c0.227,0,0.416,0.074,0.566,0.225 s0.225,0.34,0.225,0.566s-0.076,0.416-0.229,0.57s-0.34,0.232-0.562,0.232c-0.219,0-0.406-0.08-0.564-0.238 S1472.969,786.207,1472.969,785.988z M1473.139,793.945v-5.555h1.271v5.555H1473.139z",
		"M1481.453,793.945h-1.271v-0.721c-0.227,0.32-0.49,0.559-0.793,0.715s-0.65,0.234-1.041,0.234 c-0.785,0-1.402-0.27-1.854-0.807s-0.678-1.271-0.678-2.205c0-0.887,0.23-1.604,0.691-2.148s1.062-0.816,1.805-0.816 c0.453,0,0.842,0.094,1.164,0.283s0.557,0.463,0.705,0.818v-0.908h1.271V793.945z M1480.217,791.15c0-0.574-0.133-1.021-0.4-1.342 s-0.643-0.48-1.123-0.48s-0.857,0.164-1.133,0.494s-0.414,0.789-0.414,1.375c0,0.59,0.133,1.045,0.398,1.365 s0.641,0.48,1.125,0.48c0.457,0,0.83-0.174,1.117-0.521S1480.217,791.717,1480.217,791.15z",
		"M1249.467,584.941l1.113-0.516c0.105,0.383,0.299,0.674,0.58,0.875s0.641,0.303,1.078,0.303 c0.414,0,0.742-0.115,0.986-0.346s0.367-0.539,0.367-0.926c0-0.504-0.418-0.953-1.254-1.348c-0.117-0.059-0.207-0.102-0.27-0.129 c-0.945-0.461-1.576-0.879-1.891-1.252s-0.471-0.828-0.471-1.367c0-0.699,0.236-1.266,0.711-1.699s1.098-0.65,1.867-0.65 c0.633,0,1.162,0.121,1.588,0.365s0.721,0.596,0.885,1.053l-1.09,0.562c-0.172-0.27-0.361-0.467-0.566-0.592 s-0.439-0.188-0.705-0.188c-0.375,0-0.674,0.098-0.895,0.293s-0.33,0.457-0.33,0.785c0,0.516,0.484,0.996,1.453,1.441 c0.074,0.035,0.133,0.062,0.176,0.082c0.848,0.391,1.43,0.771,1.746,1.145s0.475,0.84,0.475,1.398 c0,0.812-0.256,1.457-0.768,1.936s-1.203,0.719-2.074,0.719c-0.73,0-1.33-0.168-1.797-0.504S1249.611,585.566,1249.467,584.941z" ,
		"M1256.328,578.701c0-0.215,0.078-0.4,0.236-0.557s0.348-0.234,0.566-0.234 c0.227,0,0.414,0.074,0.564,0.225s0.227,0.34,0.227,0.566s-0.076,0.416-0.229,0.57s-0.34,0.232-0.562,0.232 c-0.219,0-0.408-0.08-0.566-0.238S1256.328,578.92,1256.328,578.701z M1256.498,586.658v-5.555h1.271v5.555H1256.498z",
		"M1259.586,586.658v-5.555h1.195v0.908c0.254-0.383,0.553-0.662,0.896-0.838s0.762-0.264,1.254-0.264 c0.414,0,0.766,0.064,1.057,0.195s0.52,0.326,0.684,0.584c0.098,0.152,0.168,0.33,0.211,0.533s0.064,0.559,0.064,1.066v3.369 h-1.283v-2.854c0-0.73-0.09-1.217-0.268-1.457s-0.492-0.359-0.945-0.359c-0.297,0-0.562,0.055-0.795,0.164 s-0.414,0.264-0.547,0.463c-0.094,0.133-0.16,0.303-0.197,0.512s-0.055,0.543-0.055,1v2.531H1259.586z",
		"M1271.867,586.312c0,1.086-0.217,1.85-0.65,2.293s-1.164,0.666-2.191,0.666 c-0.766,0-1.377-0.162-1.834-0.484s-0.689-0.75-0.697-1.285l1.365-0.006c0.02,0.238,0.131,0.42,0.334,0.545 s0.488,0.188,0.855,0.188c0.543,0,0.934-0.119,1.172-0.357s0.359-0.637,0.363-1.195l0.012-0.738 c-0.227,0.32-0.492,0.559-0.795,0.715s-0.648,0.234-1.039,0.234c-0.785,0-1.404-0.27-1.855-0.807s-0.676-1.271-0.676-2.205 c0-0.887,0.23-1.604,0.691-2.148s1.062-0.816,1.805-0.816c0.453,0,0.84,0.094,1.162,0.283s0.559,0.463,0.707,0.818v-0.908h1.271 V586.312z M1270.631,583.863c0-0.574-0.135-1.021-0.402-1.342s-0.641-0.48-1.121-0.48s-0.859,0.164-1.135,0.494 s-0.412,0.789-0.412,1.375c0,0.59,0.133,1.045,0.398,1.365s0.641,0.48,1.125,0.48c0.457,0,0.828-0.174,1.115-0.521 S1270.631,584.43,1270.631,583.863z",
		"M1278.852,586.658h-1.271v-0.721c-0.227,0.32-0.492,0.559-0.795,0.715s-0.648,0.234-1.039,0.234 c-0.785,0-1.404-0.27-1.855-0.807s-0.676-1.271-0.676-2.205c0-0.887,0.23-1.604,0.691-2.148s1.062-0.816,1.805-0.816 c0.453,0,0.84,0.094,1.162,0.283s0.559,0.463,0.707,0.818v-0.908h1.271V586.658z M1277.615,583.863 c0-0.574-0.135-1.021-0.402-1.342s-0.641-0.48-1.121-0.48s-0.859,0.164-1.135,0.494s-0.412,0.789-0.412,1.375 c0,0.59,0.133,1.045,0.398,1.365s0.641,0.48,1.125,0.48c0.457,0,0.828-0.174,1.115-0.521S1277.615,584.43,1277.615,583.863z",
		"M1280.609,589.271v-8.168h1.271v0.908c0.148-0.352,0.385-0.623,0.711-0.814s0.717-0.287,1.17-0.287 c0.738,0,1.336,0.271,1.795,0.816s0.689,1.262,0.689,2.148c0,0.934-0.227,1.668-0.678,2.205s-1.068,0.807-1.854,0.807 c-0.391,0-0.738-0.078-1.041-0.234s-0.566-0.395-0.793-0.715v3.334H1280.609z M1281.84,583.863c0,0.574,0.143,1.033,0.43,1.377 s0.666,0.516,1.135,0.516c0.48,0,0.852-0.16,1.115-0.48s0.396-0.775,0.396-1.365c0-0.586-0.139-1.045-0.414-1.375 s-0.652-0.494-1.133-0.494s-0.855,0.16-1.125,0.48S1281.84,583.289,1281.84,583.863z",
		"M1287.184,583.887c0-0.406,0.076-0.791,0.23-1.152s0.377-0.682,0.666-0.963 c0.285-0.277,0.613-0.49,0.984-0.639s0.76-0.223,1.166-0.223c0.418,0,0.811,0.074,1.18,0.223s0.701,0.367,0.994,0.656 c0.293,0.285,0.516,0.607,0.668,0.967s0.229,0.736,0.229,1.131c0,0.41-0.076,0.795-0.227,1.154s-0.369,0.678-0.658,0.955 c-0.305,0.293-0.643,0.514-1.014,0.664s-0.762,0.227-1.172,0.227c-0.402,0-0.789-0.076-1.16-0.227s-0.701-0.367-0.99-0.652 c-0.293-0.289-0.516-0.613-0.668-0.973S1287.184,584.293,1287.184,583.887z M1291.959,583.898c0-0.516-0.166-0.953-0.498-1.311 s-0.738-0.535-1.219-0.535c-0.477,0-0.883,0.178-1.217,0.535s-0.5,0.795-0.5,1.311s0.166,0.951,0.5,1.309s0.74,0.537,1.217,0.537 s0.881-0.18,1.215-0.537S1291.959,584.414,1291.959,583.898z",
		"M1295.92,581.988c0.137-0.367,0.316-0.639,0.541-0.814s0.504-0.264,0.836-0.264 c0.18,0,0.355,0.021,0.529,0.064s0.346,0.105,0.514,0.188l-0.457,1.078c-0.109-0.078-0.229-0.137-0.355-0.174 s-0.268-0.055-0.424-0.055c-0.422,0-0.725,0.168-0.908,0.506s-0.275,0.906-0.275,1.703v2.438h-1.271v-5.566h1.271V581.988z",
		"M1304.416,584.068h-4.441c0.031,0.52,0.186,0.924,0.463,1.215s0.646,0.438,1.107,0.438 c0.41,0,0.752-0.086,1.025-0.258s0.512-0.449,0.715-0.832l1.072,0.598c-0.312,0.559-0.699,0.975-1.16,1.248 s-1.002,0.41-1.623,0.41c-0.891,0-1.6-0.271-2.127-0.814s-0.791-1.268-0.791-2.174c0-0.871,0.271-1.588,0.816-2.148 s1.246-0.84,2.102-0.84c0.895,0,1.592,0.256,2.092,0.768s0.75,1.229,0.75,2.15V584.068z M1303.098,583.213 c-0.051-0.398-0.203-0.703-0.457-0.912s-0.602-0.312-1.043-0.312c-0.418,0-0.754,0.102-1.008,0.305s-0.432,0.51-0.533,0.92 H1303.098z",
		"M1205.791,535.328c-0.016-0.066-0.041-0.25-0.076-0.551c-0.031-0.25-0.059-0.457-0.082-0.621 c-0.035,0.195-0.084,0.391-0.148,0.586s-0.146,0.395-0.244,0.598l-2.244,4.57l-2.244-4.664c-0.094-0.191-0.174-0.377-0.242-0.557 s-0.129-0.357-0.18-0.533c-0.004,0.18-0.018,0.369-0.043,0.566s-0.064,0.402-0.115,0.617l-0.92,4.225h-1.283l2.027-8.941 l2.531,5.414c0.039,0.086,0.1,0.229,0.18,0.428s0.176,0.445,0.289,0.738c0.082-0.246,0.211-0.559,0.387-0.938 c0.047-0.102,0.082-0.18,0.105-0.234l2.473-5.408l2.074,8.941h-1.295L1205.791,535.328z",
		"M1214.27,539.564h-1.271v-0.721c-0.227,0.32-0.49,0.559-0.793,0.715s-0.65,0.234-1.041,0.234 c-0.785,0-1.402-0.268-1.854-0.805s-0.678-1.273-0.678-2.207c0-0.887,0.23-1.602,0.691-2.146s1.062-0.818,1.805-0.818 c0.453,0,0.842,0.096,1.164,0.285s0.557,0.461,0.705,0.816v-0.908h1.271V539.564z M1213.033,536.77c0-0.574-0.133-1.021-0.4-1.342 s-0.643-0.48-1.123-0.48s-0.857,0.166-1.133,0.496s-0.414,0.787-0.414,1.373c0,0.59,0.133,1.045,0.398,1.365 s0.641,0.48,1.125,0.48c0.457,0,0.83-0.174,1.117-0.521S1213.033,537.336,1213.033,536.77z",
		"M1216.086,539.564v-9.082h1.271v9.082H1216.086z",
		"M1224.4,539.564h-1.271v-0.721c-0.227,0.32-0.49,0.559-0.793,0.715s-0.65,0.234-1.041,0.234 c-0.785,0-1.402-0.268-1.854-0.805s-0.678-1.273-0.678-2.207c0-0.887,0.23-1.602,0.691-2.146s1.062-0.818,1.805-0.818 c0.453,0,0.842,0.096,1.164,0.285s0.557,0.461,0.705,0.816v-0.908h1.271V539.564z M1223.164,536.77c0-0.574-0.133-1.021-0.4-1.342 s-0.643-0.48-1.123-0.48s-0.857,0.166-1.133,0.496s-0.414,0.787-0.414,1.373c0,0.59,0.133,1.045,0.398,1.365 s0.641,0.48,1.125,0.48c0.457,0,0.83-0.174,1.117-0.521S1223.164,537.336,1223.164,536.77z",
		"M1225.52,538.557l1.055-0.574c0.078,0.277,0.223,0.488,0.434,0.633s0.482,0.217,0.814,0.217 c0.285,0,0.51-0.064,0.672-0.195s0.242-0.311,0.242-0.537c0-0.301-0.289-0.559-0.867-0.773c-0.195-0.07-0.346-0.129-0.451-0.176 c-0.594-0.246-1.008-0.496-1.244-0.75s-0.355-0.562-0.355-0.926c0-0.496,0.195-0.898,0.584-1.207s0.902-0.463,1.543-0.463 c0.43,0,0.799,0.08,1.105,0.238s0.529,0.383,0.67,0.676l-0.902,0.621c-0.066-0.176-0.182-0.314-0.348-0.418 s-0.359-0.156-0.578-0.156c-0.242,0-0.436,0.059-0.582,0.174s-0.221,0.268-0.221,0.459c0,0.289,0.328,0.553,0.984,0.791 c0.207,0.074,0.367,0.135,0.48,0.182c0.512,0.203,0.879,0.434,1.1,0.689s0.33,0.574,0.33,0.957c0,0.555-0.201,0.99-0.604,1.305 s-0.957,0.471-1.664,0.471c-0.543,0-0.994-0.102-1.354-0.305S1225.723,538.975,1225.52,538.557z",
		"M1231.156,531.607c0-0.215,0.08-0.4,0.238-0.557s0.346-0.234,0.564-0.234c0.227,0,0.416,0.076,0.566,0.227 s0.225,0.338,0.225,0.564s-0.076,0.418-0.229,0.572s-0.34,0.23-0.562,0.23c-0.219,0-0.406-0.078-0.564-0.236 S1231.156,531.826,1231.156,531.607z M1231.326,539.564v-5.555h1.271v5.555H1231.326z",
		"M1239.641,539.564h-1.271v-0.721c-0.227,0.32-0.49,0.559-0.793,0.715s-0.65,0.234-1.041,0.234 c-0.785,0-1.402-0.268-1.854-0.805s-0.678-1.273-0.678-2.207c0-0.887,0.23-1.602,0.691-2.146s1.062-0.818,1.805-0.818 c0.453,0,0.842,0.096,1.164,0.285s0.557,0.461,0.705,0.816v-0.908h1.271V539.564z M1238.404,536.77c0-0.574-0.133-1.021-0.4-1.342 s-0.643-0.48-1.123-0.48s-0.857,0.166-1.133,0.496s-0.414,0.787-0.414,1.373c0,0.59,0.133,1.045,0.398,1.365 s0.641,0.48,1.125,0.48c0.457,0,0.83-0.174,1.117-0.521S1238.404,537.336,1238.404,536.77z",
		"M1304.84,410.784c-0.395-0.336-0.811-0.588-1.25-0.756s-0.902-0.252-1.387-0.252 c-0.938,0-1.699,0.301-2.287,0.902s-0.883,1.381-0.883,2.338c0,0.926,0.287,1.689,0.859,2.291s1.293,0.902,2.164,0.902 c0.508,0,0.992-0.09,1.451-0.27s0.898-0.451,1.32-0.814v1.576c-0.375,0.27-0.783,0.471-1.225,0.604s-0.92,0.199-1.436,0.199 c-0.656,0-1.262-0.107-1.818-0.322s-1.047-0.531-1.469-0.949c-0.418-0.41-0.738-0.894-0.963-1.45s-0.338-1.149-0.338-1.778 s0.113-1.22,0.338-1.772s0.549-1.038,0.975-1.456c0.426-0.422,0.914-0.741,1.465-0.958s1.146-0.325,1.787-0.325 c0.504,0,0.984,0.073,1.441,0.22s0.9,0.368,1.33,0.665L1304.84,410.784z",
		"M1306.463,417.276v-9.082h1.195v4.436c0.254-0.383,0.553-0.662,0.896-0.838s0.762-0.264,1.254-0.264 c0.414,0,0.768,0.065,1.059,0.196s0.518,0.325,0.682,0.583c0.098,0.152,0.168,0.33,0.211,0.533s0.064,0.559,0.064,1.066v3.369 h-1.283v-2.854c0-0.73-0.088-1.216-0.266-1.456s-0.494-0.36-0.947-0.36c-0.297,0-0.561,0.055-0.793,0.164 s-0.416,0.264-0.549,0.463c-0.094,0.133-0.158,0.304-0.195,0.513s-0.057,0.542-0.057,0.999v2.531H1306.463z",
		"M1313.406,409.319c0-0.215,0.08-0.4,0.238-0.557s0.346-0.234,0.564-0.234c0.227,0,0.416,0.075,0.566,0.226 s0.225,0.339,0.225,0.565s-0.076,0.417-0.229,0.571s-0.34,0.231-0.562,0.231c-0.219,0-0.406-0.079-0.564-0.237 S1313.406,409.538,1313.406,409.319z M1313.576,417.276v-5.555h1.271v5.555H1313.576z",
		"M1316.664,417.276v-5.555h1.195v0.908c0.254-0.383,0.553-0.662,0.896-0.838s0.762-0.264,1.254-0.264 c0.414,0,0.768,0.065,1.059,0.196s0.518,0.325,0.682,0.583c0.098,0.152,0.168,0.33,0.211,0.533s0.064,0.559,0.064,1.066v3.369 h-1.283v-2.854c0-0.73-0.088-1.216-0.266-1.456s-0.494-0.36-0.947-0.36c-0.297,0-0.561,0.055-0.793,0.164 s-0.416,0.264-0.549,0.463c-0.094,0.133-0.158,0.304-0.195,0.513s-0.057,0.542-0.057,0.999v2.531H1316.664z",
		"M1328.945,417.276h-1.271v-0.721c-0.227,0.32-0.49,0.559-0.793,0.715s-0.65,0.234-1.041,0.234 c-0.785,0-1.402-0.269-1.854-0.806s-0.678-1.272-0.678-2.206c0-0.887,0.23-1.603,0.691-2.147s1.062-0.817,1.805-0.817 c0.453,0,0.842,0.095,1.164,0.284s0.557,0.462,0.705,0.817v-0.908h1.271V417.276z M1327.709,414.481 c0-0.574-0.133-1.021-0.4-1.342s-0.643-0.48-1.123-0.48s-0.857,0.165-1.133,0.495s-0.414,0.788-0.414,1.374 c0,0.59,0.133,1.045,0.398,1.365s0.641,0.48,1.125,0.48c0.457,0,0.83-0.174,1.117-0.521S1327.709,415.047,1327.709,414.481z",
		"M949.408,460.725v-8.578h2.162c0.617,0,1.072,0.033,1.367,0.1s0.547,0.176,0.754,0.328 c0.266,0.195,0.471,0.451,0.617,0.768s0.221,0.666,0.221,1.049c0,0.457-0.105,0.839-0.316,1.146s-0.518,0.521-0.92,0.642 c0.5,0.078,0.893,0.306,1.18,0.683s0.432,0.853,0.432,1.427c0,0.348-0.061,0.678-0.182,0.99s-0.293,0.578-0.516,0.797 c-0.234,0.238-0.525,0.406-0.873,0.504s-0.932,0.146-1.752,0.146H949.408z M950.773,455.768h0.533 c0.664,0,1.133-0.091,1.408-0.272s0.414-0.487,0.414-0.917c0-0.469-0.127-0.798-0.381-0.987s-0.734-0.284-1.441-0.284h-0.533 V455.768z M950.773,459.559h0.48c0.488,0,0.854-0.02,1.096-0.059s0.434-0.107,0.574-0.205c0.172-0.113,0.305-0.266,0.398-0.457 s0.141-0.402,0.141-0.633c0-0.273-0.057-0.512-0.17-0.715s-0.275-0.361-0.486-0.475c-0.133-0.066-0.285-0.115-0.455-0.146 s-0.395-0.047-0.676-0.047h-0.422h-0.48V459.559z",
		"M961.443,460.725h-1.271v-0.721c-0.227,0.32-0.492,0.559-0.795,0.715s-0.648,0.234-1.039,0.234 c-0.785,0-1.404-0.269-1.855-0.806s-0.676-1.272-0.676-2.206c0-0.887,0.23-1.603,0.691-2.147s1.062-0.817,1.805-0.817 c0.453,0,0.84,0.095,1.162,0.284s0.559,0.462,0.707,0.817v-0.908h1.271V460.725z M960.207,457.93c0-0.574-0.135-1.021-0.402-1.342 s-0.641-0.48-1.121-0.48s-0.859,0.165-1.135,0.495s-0.412,0.788-0.412,1.374c0,0.59,0.133,1.045,0.398,1.365 s0.641,0.48,1.125,0.48c0.457,0,0.828-0.174,1.115-0.521S960.207,458.496,960.207,457.93z",
		"M963.201,460.725v-9.082h1.195v4.436c0.254-0.383,0.553-0.662,0.896-0.838s0.762-0.264,1.254-0.264 c0.414,0,0.766,0.065,1.057,0.196s0.52,0.325,0.684,0.583c0.098,0.152,0.168,0.33,0.211,0.533s0.064,0.559,0.064,1.066v3.369 h-1.283v-2.854c0-0.73-0.09-1.216-0.268-1.456s-0.492-0.36-0.945-0.36c-0.297,0-0.562,0.055-0.795,0.164s-0.414,0.264-0.547,0.463 c-0.094,0.133-0.16,0.304-0.197,0.513s-0.055,0.542-0.055,0.999v2.531H963.201z",
		"M971.527,456.055c0.137-0.367,0.316-0.639,0.541-0.814s0.504-0.264,0.836-0.264 c0.18,0,0.355,0.021,0.529,0.064s0.346,0.105,0.514,0.188l-0.457,1.078c-0.109-0.078-0.229-0.136-0.355-0.173 s-0.268-0.056-0.424-0.056c-0.422,0-0.725,0.169-0.908,0.507s-0.275,0.905-0.275,1.702v2.438h-1.271v-5.566h1.271V456.055z",
		"M979.9,460.725h-1.271v-0.721c-0.227,0.32-0.492,0.559-0.795,0.715s-0.648,0.234-1.039,0.234 c-0.785,0-1.404-0.269-1.855-0.806s-0.676-1.272-0.676-2.206c0-0.887,0.23-1.603,0.691-2.147s1.062-0.817,1.805-0.817 c0.453,0,0.84,0.095,1.162,0.284s0.559,0.462,0.707,0.817v-0.908h1.271V460.725z M978.664,457.93c0-0.574-0.135-1.021-0.402-1.342 s-0.641-0.48-1.121-0.48s-0.859,0.165-1.135,0.495s-0.412,0.788-0.412,1.374c0,0.59,0.133,1.045,0.398,1.365 s0.641,0.48,1.125,0.48c0.457,0,0.828-0.174,1.115-0.521S978.664,458.496,978.664,457.93z",
		"M981.547,452.768c0-0.215,0.078-0.4,0.236-0.557s0.348-0.234,0.566-0.234c0.227,0,0.414,0.075,0.564,0.226 s0.227,0.339,0.227,0.565s-0.076,0.417-0.229,0.571s-0.34,0.231-0.562,0.231c-0.219,0-0.408-0.079-0.566-0.237 S981.547,452.986,981.547,452.768z M981.717,460.725v-5.555h1.271v5.555H981.717z",
		"M984.805,460.725v-5.555H986v0.908c0.254-0.383,0.553-0.662,0.896-0.838s0.762-0.264,1.254-0.264 c0.414,0,0.766,0.065,1.057,0.196s0.52,0.325,0.684,0.583c0.098,0.152,0.168,0.33,0.211,0.533s0.064,0.559,0.064,1.066v3.369 h-1.283v-2.854c0-0.73-0.09-1.216-0.268-1.456s-0.492-0.36-0.945-0.36c-0.297,0-0.562,0.055-0.795,0.164s-0.414,0.264-0.547,0.463 c-0.094,0.133-0.16,0.304-0.197,0.513s-0.055,0.542-0.055,0.999v2.531H984.805z",
		"M946.818,340.475v3.838h-1.307v-8.578h1.945c0.57,0,1.012,0.037,1.326,0.111s0.584,0.197,0.807,0.369 c0.266,0.207,0.471,0.475,0.615,0.803s0.217,0.688,0.217,1.078c0,0.688-0.166,1.226-0.498,1.614s-0.822,0.622-1.471,0.7 l2.953,3.902h-1.576l-2.854-3.838H946.818z M946.906,339.391h0.252c0.738,0,1.229-0.086,1.471-0.258s0.363-0.477,0.363-0.914 c0-0.473-0.131-0.806-0.391-0.999s-0.74-0.29-1.443-0.29h-0.252V339.391z",
		"M953.146,338.758v3.129c0,0.539,0.111,0.926,0.334,1.16s0.584,0.352,1.084,0.352s0.861-0.117,1.084-0.352 s0.334-0.621,0.334-1.16v-3.129h1.271v2.748c0,1.062-0.213,1.834-0.639,2.314s-1.105,0.721-2.039,0.721 c-0.949,0-1.637-0.238-2.062-0.715s-0.639-1.25-0.639-2.32v-2.748H953.146z",
		"M958.332,343.305l1.055-0.574c0.078,0.277,0.223,0.488,0.434,0.633s0.482,0.217,0.814,0.217 c0.285,0,0.508-0.065,0.67-0.196s0.244-0.31,0.244-0.536c0-0.301-0.289-0.559-0.867-0.773c-0.195-0.07-0.346-0.129-0.451-0.176 c-0.594-0.246-1.01-0.496-1.246-0.75s-0.354-0.562-0.354-0.926c0-0.496,0.193-0.898,0.582-1.207s0.904-0.463,1.545-0.463 c0.43,0,0.797,0.079,1.104,0.237s0.531,0.384,0.672,0.677l-0.902,0.621c-0.066-0.176-0.184-0.315-0.35-0.419 s-0.357-0.155-0.576-0.155c-0.242,0-0.438,0.058-0.584,0.173s-0.219,0.269-0.219,0.46c0,0.289,0.328,0.553,0.984,0.791 c0.207,0.074,0.367,0.135,0.48,0.182c0.512,0.203,0.877,0.433,1.098,0.688s0.332,0.575,0.332,0.958 c0,0.555-0.201,0.989-0.604,1.304s-0.957,0.472-1.664,0.472c-0.543,0-0.994-0.102-1.354-0.305S958.535,343.723,958.332,343.305z" ,
		"M963.441,343.305l1.055-0.574c0.078,0.277,0.223,0.488,0.434,0.633s0.482,0.217,0.814,0.217 c0.285,0,0.508-0.065,0.67-0.196s0.244-0.31,0.244-0.536c0-0.301-0.289-0.559-0.867-0.773c-0.195-0.07-0.346-0.129-0.451-0.176 c-0.594-0.246-1.01-0.496-1.246-0.75s-0.354-0.562-0.354-0.926c0-0.496,0.193-0.898,0.582-1.207s0.904-0.463,1.545-0.463 c0.43,0,0.797,0.079,1.104,0.237s0.531,0.384,0.672,0.677l-0.902,0.621c-0.066-0.176-0.184-0.315-0.35-0.419 s-0.357-0.155-0.576-0.155c-0.242,0-0.438,0.058-0.584,0.173s-0.219,0.269-0.219,0.46c0,0.289,0.328,0.553,0.984,0.791 c0.207,0.074,0.367,0.135,0.48,0.182c0.512,0.203,0.877,0.433,1.098,0.688s0.332,0.575,0.332,0.958 c0,0.555-0.201,0.989-0.604,1.304s-0.957,0.472-1.664,0.472c-0.543,0-0.994-0.102-1.354-0.305S963.645,343.723,963.441,343.305z" ,
		"M969.078,336.355c0-0.215,0.078-0.4,0.236-0.557s0.348-0.234,0.566-0.234c0.227,0,0.414,0.075,0.564,0.226 s0.227,0.339,0.227,0.565s-0.076,0.417-0.229,0.571s-0.34,0.231-0.562,0.231c-0.219,0-0.408-0.079-0.566-0.237 S969.078,336.574,969.078,336.355z M969.248,344.312v-5.555h1.271v5.555H969.248z",
		"M977.562,344.312h-1.271v-0.721c-0.227,0.32-0.492,0.559-0.795,0.715s-0.648,0.234-1.039,0.234 c-0.785,0-1.404-0.269-1.855-0.806s-0.676-1.272-0.676-2.206c0-0.887,0.23-1.603,0.691-2.147s1.062-0.817,1.805-0.817 c0.453,0,0.84,0.095,1.162,0.284s0.559,0.462,0.707,0.817v-0.908h1.271V344.312z M976.326,341.518 c0-0.574-0.135-1.021-0.402-1.342s-0.641-0.48-1.121-0.48s-0.859,0.165-1.135,0.495s-0.412,0.788-0.412,1.374 c0,0.59,0.133,1.045,0.398,1.365s0.641,0.48,1.125,0.48c0.457,0,0.828-0.174,1.115-0.521S976.326,342.084,976.326,341.518z",
		"M748.727,358.429c-0.016-0.066-0.041-0.25-0.076-0.551c-0.031-0.25-0.059-0.457-0.082-0.621 c-0.035,0.195-0.085,0.391-0.149,0.586s-0.146,0.395-0.243,0.598l-2.244,4.57l-2.244-4.664c-0.094-0.191-0.175-0.377-0.243-0.557 s-0.128-0.357-0.179-0.533c-0.004,0.18-0.019,0.368-0.044,0.565s-0.063,0.403-0.114,0.618l-0.92,4.225h-1.283l2.027-8.941 l2.531,5.414c0.039,0.086,0.099,0.229,0.179,0.428s0.177,0.445,0.29,0.738c0.082-0.246,0.211-0.559,0.387-0.938 c0.047-0.102,0.082-0.18,0.105-0.234l2.473-5.408l2.074,8.941h-1.295L748.727,358.429z",
		"M751.568,359.894c0-0.406,0.077-0.79,0.231-1.151s0.376-0.683,0.665-0.964 c0.285-0.277,0.613-0.49,0.984-0.639s0.76-0.223,1.166-0.223c0.418,0,0.812,0.074,1.181,0.223s0.7,0.367,0.993,0.656 c0.293,0.285,0.516,0.607,0.668,0.967s0.229,0.736,0.229,1.131c0,0.41-0.075,0.795-0.226,1.154s-0.37,0.678-0.659,0.955 c-0.305,0.293-0.643,0.515-1.014,0.665s-0.762,0.226-1.172,0.226c-0.402,0-0.789-0.075-1.16-0.226s-0.701-0.368-0.99-0.653 c-0.293-0.289-0.516-0.613-0.668-0.973S751.568,360.3,751.568,359.894z M756.344,359.905c0-0.516-0.166-0.952-0.498-1.31 s-0.738-0.536-1.219-0.536c-0.477,0-0.882,0.179-1.216,0.536s-0.501,0.794-0.501,1.31s0.167,0.952,0.501,1.31 s0.739,0.536,1.216,0.536s0.882-0.179,1.216-0.536S756.344,360.421,756.344,359.905z",
		"M759.033,362.665v-5.555h1.195v0.908c0.254-0.383,0.553-0.662,0.896-0.838s0.762-0.264,1.254-0.264 c0.414,0,0.767,0.065,1.058,0.196s0.519,0.325,0.683,0.583c0.098,0.152,0.168,0.33,0.211,0.533s0.064,0.559,0.064,1.066v3.369 h-1.283v-2.854c0-0.73-0.089-1.216-0.267-1.456s-0.493-0.36-0.946-0.36c-0.297,0-0.562,0.055-0.794,0.164 s-0.415,0.264-0.548,0.463c-0.094,0.133-0.159,0.304-0.196,0.513s-0.056,0.542-0.056,0.999v2.531H759.033z",
		"M771.314,362.665h-1.271v-0.721c-0.227,0.32-0.491,0.559-0.794,0.715s-0.649,0.234-1.04,0.234 c-0.785,0-1.403-0.269-1.854-0.806s-0.677-1.272-0.677-2.206c0-0.887,0.23-1.603,0.691-2.147s1.062-0.817,1.805-0.817 c0.453,0,0.841,0.095,1.163,0.284s0.558,0.462,0.706,0.817v-0.908h1.271V362.665z M770.078,359.87 c0-0.574-0.134-1.021-0.401-1.342s-0.642-0.48-1.122-0.48s-0.858,0.165-1.134,0.495s-0.413,0.788-0.413,1.374 c0,0.59,0.133,1.045,0.398,1.365s0.641,0.48,1.125,0.48c0.457,0,0.829-0.174,1.116-0.521S770.078,360.437,770.078,359.87z",
		"M777.221,358.692c-0.195-0.215-0.423-0.379-0.683-0.492s-0.54-0.17-0.841-0.17 c-0.52,0-0.936,0.168-1.248,0.504s-0.469,0.781-0.469,1.336c0,0.578,0.157,1.032,0.472,1.362s0.749,0.495,1.304,0.495 c0.309,0,0.584-0.058,0.826-0.173s0.455-0.29,0.639-0.524v1.465c-0.234,0.133-0.485,0.232-0.753,0.299s-0.552,0.1-0.853,0.1 c-0.871,0-1.581-0.277-2.13-0.832s-0.823-1.273-0.823-2.156c0-0.895,0.284-1.616,0.853-2.165s1.312-0.823,2.229-0.823 c0.289,0,0.555,0.028,0.797,0.085s0.469,0.144,0.68,0.261V358.692z",
		"M778.111,359.894c0-0.406,0.077-0.79,0.231-1.151s0.376-0.683,0.665-0.964 c0.285-0.277,0.613-0.49,0.984-0.639s0.76-0.223,1.166-0.223c0.418,0,0.812,0.074,1.181,0.223s0.7,0.367,0.993,0.656 c0.293,0.285,0.516,0.607,0.668,0.967s0.229,0.736,0.229,1.131c0,0.41-0.075,0.795-0.226,1.154s-0.37,0.678-0.659,0.955 c-0.305,0.293-0.643,0.515-1.014,0.665s-0.762,0.226-1.172,0.226c-0.402,0-0.789-0.075-1.16-0.226s-0.701-0.368-0.99-0.653 c-0.293-0.289-0.516-0.613-0.668-0.973S778.111,360.3,778.111,359.894z M782.887,359.905c0-0.516-0.166-0.952-0.498-1.31 s-0.738-0.536-1.219-0.536c-0.477,0-0.882,0.179-1.216,0.536s-0.501,0.794-0.501,1.31s0.167,0.952,0.501,1.31 s0.739,0.536,1.216,0.536s0.882-0.179,1.216-0.536S782.887,360.421,782.887,359.905z",
		"M676.02,294.878h1.377v5.209c0,0.773,0.179,1.354,0.536,1.743s0.892,0.583,1.603,0.583 c0.707,0,1.239-0.194,1.597-0.583s0.536-0.97,0.536-1.743v-5.209h1.395v5.338c0,1.16-0.293,2.028-0.879,2.604 s-1.469,0.864-2.648,0.864s-2.061-0.287-2.643-0.861s-0.873-1.443-0.873-2.607V294.878z",
		"M684.879,303.457v-5.555h1.195v0.908c0.254-0.383,0.553-0.662,0.896-0.838s0.762-0.264,1.254-0.264 c0.414,0,0.767,0.065,1.058,0.196s0.519,0.325,0.683,0.583c0.098,0.152,0.168,0.33,0.211,0.533s0.064,0.559,0.064,1.066v3.369 h-1.283v-2.854c0-0.73-0.089-1.216-0.267-1.456s-0.493-0.36-0.946-0.36c-0.297,0-0.562,0.055-0.794,0.164 s-0.415,0.264-0.548,0.463c-0.094,0.133-0.159,0.304-0.196,0.513s-0.056,0.542-0.056,0.999v2.531H684.879z",
		"M691.822,295.5c0-0.215,0.079-0.4,0.237-0.557s0.347-0.234,0.565-0.234c0.227,0,0.415,0.075,0.565,0.226 s0.226,0.339,0.226,0.565s-0.076,0.417-0.229,0.571s-0.34,0.231-0.562,0.231c-0.219,0-0.407-0.079-0.565-0.237 S691.822,295.718,691.822,295.5z M691.992,303.457v-5.555h1.271v5.555H691.992z",
		"M695.379,303.457v-4.441h-0.973v-1.113h0.973v-2.104h1.271v2.104h0.973v1.113h-0.973v4.441H695.379z",
		"M704.068,300.867h-4.441c0.031,0.52,0.186,0.925,0.463,1.216s0.646,0.437,1.107,0.437 c0.41,0,0.752-0.086,1.025-0.258s0.512-0.449,0.715-0.832l1.072,0.598c-0.312,0.559-0.699,0.975-1.16,1.248 s-1.002,0.41-1.623,0.41c-0.891,0-1.6-0.271-2.127-0.814s-0.791-1.268-0.791-2.174c0-0.871,0.272-1.587,0.817-2.147 s1.245-0.841,2.101-0.841c0.895,0,1.592,0.256,2.092,0.768s0.75,1.229,0.75,2.15V300.867z M702.75,300.011 c-0.051-0.398-0.203-0.702-0.457-0.911s-0.602-0.313-1.043-0.313c-0.418,0-0.754,0.102-1.008,0.305s-0.432,0.51-0.533,0.92H702.75 z",
		"M709.348,294.375h1.271v9.082h-1.271v-0.721c-0.227,0.32-0.491,0.559-0.794,0.715s-0.649,0.234-1.04,0.234 c-0.785,0-1.403-0.269-1.854-0.806s-0.677-1.272-0.677-2.206c0-0.887,0.23-1.603,0.691-2.147s1.062-0.817,1.805-0.817 c0.453,0,0.841,0.095,1.163,0.284s0.558,0.462,0.706,0.817V294.375z M709.383,300.662c0-0.574-0.134-1.021-0.401-1.342 s-0.642-0.48-1.122-0.48s-0.858,0.165-1.134,0.495s-0.413,0.788-0.413,1.374c0,0.59,0.133,1.045,0.398,1.365 s0.641,0.48,1.125,0.48c0.461,0,0.834-0.173,1.119-0.519S709.383,301.232,709.383,300.662z",
		"M716.104,303.457v-8.578h1.395v3.551l3.082-3.551h1.705l-3.398,3.814l3.803,4.764h-1.799l-3.393-4.383 v4.383H716.104z",
		"M723.328,295.5c0-0.215,0.079-0.4,0.237-0.557s0.347-0.234,0.565-0.234c0.227,0,0.415,0.075,0.565,0.226 s0.226,0.339,0.226,0.565s-0.076,0.417-0.229,0.571s-0.34,0.231-0.562,0.231c-0.219,0-0.407-0.079-0.565-0.237 S723.328,295.718,723.328,295.5z M723.498,303.457v-5.555h1.271v5.555H723.498z",
		"M726.586,303.457v-5.555h1.195v0.908c0.254-0.383,0.553-0.662,0.896-0.838s0.762-0.264,1.254-0.264 c0.414,0,0.767,0.065,1.058,0.196s0.519,0.325,0.683,0.583c0.098,0.152,0.168,0.33,0.211,0.533s0.064,0.559,0.064,1.066v3.369 h-1.283v-2.854c0-0.73-0.089-1.216-0.267-1.456s-0.493-0.36-0.946-0.36c-0.297,0-0.562,0.055-0.794,0.164 s-0.415,0.264-0.548,0.463c-0.094,0.133-0.159,0.304-0.196,0.513s-0.056,0.542-0.056,0.999v2.531H726.586z",
		"M738.867,303.111c0,1.086-0.217,1.851-0.65,2.294s-1.164,0.665-2.191,0.665 c-0.766,0-1.377-0.161-1.834-0.483s-0.689-0.751-0.697-1.286l1.365-0.006c0.02,0.238,0.131,0.42,0.334,0.545 s0.488,0.188,0.855,0.188c0.543,0,0.934-0.119,1.172-0.357s0.359-0.637,0.363-1.195l0.012-0.738 c-0.227,0.32-0.491,0.559-0.794,0.715s-0.649,0.234-1.04,0.234c-0.785,0-1.403-0.269-1.854-0.806s-0.677-1.272-0.677-2.206 c0-0.887,0.23-1.603,0.691-2.147s1.062-0.817,1.805-0.817c0.453,0,0.841,0.095,1.163,0.284s0.558,0.462,0.706,0.817v-0.908h1.271 V303.111z M737.631,300.662c0-0.574-0.134-1.021-0.401-1.342s-0.642-0.48-1.122-0.48s-0.858,0.165-1.134,0.495 s-0.413,0.788-0.413,1.374c0,0.59,0.133,1.045,0.398,1.365s0.641,0.48,1.125,0.48c0.457,0,0.829-0.174,1.116-0.521 S737.631,301.228,737.631,300.662z",
		"M744.58,294.375h1.271v9.082h-1.271v-0.721c-0.227,0.32-0.491,0.559-0.794,0.715s-0.649,0.234-1.04,0.234 c-0.785,0-1.403-0.269-1.854-0.806s-0.677-1.272-0.677-2.206c0-0.887,0.23-1.603,0.691-2.147s1.062-0.817,1.805-0.817 c0.453,0,0.841,0.095,1.163,0.284s0.558,0.462,0.706,0.817V294.375z M744.615,300.662c0-0.574-0.134-1.021-0.401-1.342 s-0.642-0.48-1.122-0.48s-0.858,0.165-1.134,0.495s-0.413,0.788-0.413,1.374c0,0.59,0.133,1.045,0.398,1.365 s0.641,0.48,1.125,0.48c0.461,0,0.834-0.173,1.119-0.519S744.615,301.232,744.615,300.662z",
		"M747.199,300.685c0-0.406,0.077-0.79,0.231-1.151s0.376-0.683,0.665-0.964 c0.285-0.277,0.613-0.49,0.984-0.639s0.76-0.223,1.166-0.223c0.418,0,0.812,0.074,1.181,0.223s0.7,0.367,0.993,0.656 c0.293,0.285,0.516,0.607,0.668,0.967s0.229,0.736,0.229,1.131c0,0.41-0.075,0.795-0.226,1.154s-0.37,0.678-0.659,0.955 c-0.305,0.293-0.643,0.515-1.014,0.665s-0.762,0.226-1.172,0.226c-0.402,0-0.789-0.075-1.16-0.226s-0.701-0.368-0.99-0.653 c-0.293-0.289-0.516-0.613-0.668-0.973S747.199,301.091,747.199,300.685z M751.975,300.697c0-0.516-0.166-0.952-0.498-1.31 s-0.738-0.536-1.219-0.536c-0.477,0-0.882,0.179-1.216,0.536s-0.501,0.794-0.501,1.31s0.167,0.952,0.501,1.31 s0.739,0.536,1.216,0.536s0.882-0.179,1.216-0.536S751.975,301.212,751.975,300.697z",
		"M756.005,303.457h-1.271v-5.555h1.195v0.908c0.254-0.387,0.542-0.669,0.864-0.847s0.702-0.267,1.14-0.267 c0.434,0,0.793,0.091,1.078,0.272s0.502,0.458,0.65,0.829c0.293-0.383,0.604-0.662,0.935-0.838s0.706-0.264,1.128-0.264 c0.367,0,0.688,0.067,0.961,0.202s0.486,0.331,0.639,0.589c0.07,0.121,0.122,0.266,0.155,0.434s0.05,0.408,0.05,0.721v0.445v3.369 h-1.271v-2.854c0-0.746-0.079-1.237-0.237-1.474s-0.44-0.354-0.847-0.354c-0.5,0-0.856,0.159-1.069,0.478 s-0.319,0.876-0.319,1.673v2.531h-1.283v-2.854c0-0.688-0.083-1.164-0.249-1.43s-0.452-0.398-0.858-0.398 c-0.25,0-0.479,0.057-0.686,0.17s-0.371,0.27-0.492,0.469c-0.078,0.129-0.133,0.287-0.164,0.475s-0.047,0.533-0.047,1.037V303.457 z",
		"M1391.471,388.863c0.145,0.172,0.283,0.297,0.416,0.375s0.273,0.117,0.422,0.117 c0.273,0,0.467-0.09,0.578-0.27s0.166-0.514,0.166-1.002v-6.24h1.383v6.691c0,0.727-0.16,1.261-0.48,1.603s-0.82,0.513-1.5,0.513 c-0.375,0-0.713-0.072-1.016-0.217s-0.59-0.369-0.859-0.674L1391.471,388.863z",
		"M1401.391,390.421h-1.271v-0.721c-0.227,0.32-0.49,0.559-0.793,0.715s-0.65,0.234-1.041,0.234 c-0.785,0-1.402-0.269-1.854-0.806s-0.678-1.272-0.678-2.206c0-0.887,0.23-1.603,0.691-2.147s1.062-0.817,1.805-0.817 c0.453,0,0.842,0.095,1.164,0.284s0.557,0.462,0.705,0.817v-0.908h1.271V390.421z M1400.154,387.626 c0-0.574-0.133-1.021-0.4-1.342s-0.643-0.48-1.123-0.48s-0.857,0.165-1.133,0.495s-0.414,0.788-0.414,1.374 c0,0.59,0.133,1.045,0.398,1.365s0.641,0.48,1.125,0.48c0.457,0,0.83-0.174,1.117-0.521S1400.154,388.193,1400.154,387.626z",
		"M1403.148,393.035v-8.168h1.271v0.908c0.148-0.352,0.387-0.623,0.713-0.814s0.715-0.287,1.168-0.287 c0.738,0,1.338,0.272,1.797,0.817s0.688,1.261,0.688,2.147c0,0.934-0.225,1.669-0.676,2.206s-1.07,0.806-1.855,0.806 c-0.391,0-0.736-0.078-1.039-0.234s-0.568-0.395-0.795-0.715v3.334H1403.148z M1404.379,387.626c0,0.574,0.145,1.033,0.432,1.377 s0.664,0.516,1.133,0.516c0.48,0,0.854-0.16,1.117-0.48s0.395-0.775,0.395-1.365c0-0.586-0.137-1.044-0.412-1.374 s-0.654-0.495-1.135-0.495s-0.855,0.16-1.125,0.48S1404.379,387.052,1404.379,387.626z",
		"M1415.359,390.421h-1.271v-0.721c-0.227,0.32-0.49,0.559-0.793,0.715s-0.65,0.234-1.041,0.234 c-0.785,0-1.402-0.269-1.854-0.806s-0.678-1.272-0.678-2.206c0-0.887,0.23-1.603,0.691-2.147s1.062-0.817,1.805-0.817 c0.453,0,0.842,0.095,1.164,0.284s0.557,0.462,0.705,0.817v-0.908h1.271V390.421z M1414.123,387.626 c0-0.574-0.133-1.021-0.4-1.342s-0.643-0.48-1.123-0.48s-0.857,0.165-1.133,0.495s-0.414,0.788-0.414,1.374 c0,0.59,0.133,1.045,0.398,1.365s0.641,0.48,1.125,0.48c0.457,0,0.83-0.174,1.117-0.521S1414.123,388.193,1414.123,387.626z",
		"M1417.117,390.421v-5.555h1.195v0.908c0.254-0.383,0.553-0.662,0.896-0.838s0.762-0.264,1.254-0.264 c0.414,0,0.768,0.065,1.059,0.196s0.518,0.325,0.682,0.583c0.098,0.152,0.168,0.33,0.211,0.533s0.064,0.559,0.064,1.066v3.369 h-1.283v-2.854c0-0.73-0.088-1.216-0.266-1.456s-0.494-0.36-0.947-0.36c-0.297,0-0.561,0.055-0.793,0.164 s-0.416,0.264-0.549,0.463c-0.094,0.133-0.158,0.304-0.195,0.513s-0.057,0.542-0.057,0.999v2.531H1417.117z",
		"M815.639,377.991v-8.578h1.395v8.578H815.639z",
		"M819.23,377.991v-4.441h-0.973v-1.113h0.973v-2.104h1.271v2.104h0.973v1.113h-0.973v4.441H819.23z",
		"M827.797,377.991h-1.271v-0.721c-0.227,0.32-0.492,0.559-0.795,0.715s-0.648,0.234-1.039,0.234 c-0.785,0-1.404-0.269-1.855-0.806s-0.676-1.272-0.676-2.206c0-0.887,0.23-1.603,0.691-2.147s1.062-0.817,1.805-0.817 c0.453,0,0.84,0.095,1.162,0.284s0.559,0.462,0.707,0.817v-0.908h1.271V377.991z M826.561,375.196 c0-0.574-0.135-1.021-0.402-1.342s-0.641-0.48-1.121-0.48s-0.859,0.165-1.135,0.495s-0.412,0.788-0.412,1.374 c0,0.59,0.133,1.045,0.398,1.365s0.641,0.48,1.125,0.48c0.457,0,0.828-0.174,1.115-0.521S826.561,375.763,826.561,375.196z",
		"M829.613,377.991v-9.082h1.271v9.082H829.613z",
		"M833.656,380.604h-1.307l1.523-3.094l-2.039-5.074h1.406l1.02,2.877c0.059,0.176,0.109,0.354,0.154,0.536 s0.082,0.366,0.109,0.554c0.051-0.195,0.172-0.506,0.363-0.932l0.029-0.07l1.371-2.965h1.377L833.656,380.604z",
		"M837.215,325.929l-0.973-2.209h-3.398l-0.996,2.209h-1.465l4.154-8.918l4.148,8.918H837.215z  M833.359,322.56h2.391l-0.879-1.957c-0.051-0.125-0.104-0.269-0.158-0.431s-0.109-0.343-0.164-0.542 c-0.047,0.188-0.098,0.362-0.15,0.524s-0.105,0.312-0.16,0.448L833.359,322.56z",
		"M840.619,320.374v3.129c0,0.539,0.111,0.926,0.334,1.16s0.584,0.352,1.084,0.352s0.861-0.117,1.084-0.352 s0.334-0.621,0.334-1.16v-3.129h1.271v2.748c0,1.062-0.213,1.834-0.639,2.314s-1.105,0.721-2.039,0.721 c-0.949,0-1.637-0.238-2.062-0.715s-0.639-1.25-0.639-2.32v-2.748H840.619z",
		"M845.805,324.921l1.055-0.574c0.078,0.277,0.223,0.488,0.434,0.633s0.482,0.217,0.814,0.217 c0.285,0,0.508-0.065,0.67-0.196s0.244-0.31,0.244-0.536c0-0.301-0.289-0.559-0.867-0.773c-0.195-0.07-0.346-0.129-0.451-0.176 c-0.594-0.246-1.01-0.496-1.246-0.75s-0.354-0.562-0.354-0.926c0-0.496,0.193-0.898,0.582-1.207s0.904-0.463,1.545-0.463 c0.43,0,0.797,0.079,1.104,0.237s0.531,0.384,0.672,0.677l-0.902,0.621c-0.066-0.176-0.184-0.315-0.35-0.419 s-0.357-0.155-0.576-0.155c-0.242,0-0.438,0.058-0.584,0.173s-0.219,0.269-0.219,0.46c0,0.289,0.328,0.553,0.984,0.791 c0.207,0.074,0.367,0.135,0.48,0.182c0.512,0.203,0.877,0.433,1.098,0.688s0.332,0.575,0.332,0.958 c0,0.555-0.201,0.989-0.604,1.304s-0.957,0.472-1.664,0.472c-0.543,0-0.994-0.102-1.354-0.305S846.008,325.339,845.805,324.921z" ,
		"M851.852,325.929v-4.441h-0.973v-1.113h0.973v-2.104h1.271v2.104h0.973v1.113h-0.973v4.441H851.852z",
		"M856.463,321.259c0.137-0.367,0.316-0.639,0.541-0.814s0.504-0.264,0.836-0.264 c0.18,0,0.355,0.021,0.529,0.064s0.346,0.105,0.514,0.188l-0.457,1.078c-0.109-0.078-0.229-0.136-0.355-0.173 s-0.268-0.056-0.424-0.056c-0.422,0-0.725,0.169-0.908,0.507s-0.275,0.905-0.275,1.702v2.438h-1.271v-5.566h1.271V321.259z",
		"M859.498,317.972c0-0.215,0.078-0.4,0.236-0.557s0.348-0.234,0.566-0.234c0.227,0,0.414,0.075,0.564,0.226 s0.227,0.339,0.227,0.565s-0.076,0.417-0.229,0.571s-0.34,0.231-0.562,0.231c-0.219,0-0.408-0.079-0.566-0.237 S859.498,318.19,859.498,317.972z M859.668,325.929v-5.555h1.271v5.555H859.668z",
		"M867.982,325.929h-1.271v-0.721c-0.227,0.32-0.492,0.559-0.795,0.715s-0.648,0.234-1.039,0.234 c-0.785,0-1.404-0.269-1.855-0.806s-0.676-1.272-0.676-2.206c0-0.887,0.23-1.603,0.691-2.147s1.062-0.817,1.805-0.817 c0.453,0,0.84,0.095,1.162,0.284s0.559,0.462,0.707,0.817v-0.908h1.271V325.929z M866.746,323.134 c0-0.574-0.135-1.021-0.402-1.342s-0.641-0.48-1.121-0.48s-0.859,0.165-1.135,0.495s-0.412,0.788-0.412,1.374 c0,0.59,0.133,1.045,0.398,1.365s0.641,0.48,1.125,0.48c0.457,0,0.828-0.174,1.115-0.521S866.746,323.7,866.746,323.134z","M844.499,357.429v-8.578h1.395v3.164h4.219v-3.164h1.395v8.578h-1.395v-4.166h-4.219v4.166H844.499z",
		"M854.601,351.874v3.129c0,0.539,0.111,0.926,0.334,1.16s0.584,0.352,1.084,0.352s0.861-0.117,1.084-0.352 s0.334-0.621,0.334-1.16v-3.129h1.271v2.748c0,1.062-0.213,1.834-0.639,2.314s-1.105,0.721-2.039,0.721 c-0.949,0-1.637-0.238-2.062-0.715s-0.639-1.25-0.639-2.32v-2.748H854.601z",
		"M860.425,357.429v-5.555h1.195v0.908c0.254-0.383,0.553-0.662,0.896-0.838s0.762-0.264,1.254-0.264 c0.414,0,0.768,0.065,1.059,0.196s0.518,0.325,0.682,0.583c0.098,0.152,0.168,0.33,0.211,0.533s0.064,0.559,0.064,1.066v3.369 h-1.283v-2.854c0-0.73-0.088-1.216-0.266-1.456s-0.494-0.36-0.947-0.36c-0.297,0-0.561,0.055-0.793,0.164 s-0.416,0.264-0.549,0.463c-0.094,0.133-0.158,0.304-0.195,0.513s-0.057,0.542-0.057,0.999v2.531H860.425z",
		"M872.706,357.083c0,1.086-0.217,1.851-0.65,2.294s-1.164,0.665-2.191,0.665 c-0.766,0-1.377-0.161-1.834-0.483s-0.689-0.751-0.697-1.286l1.365-0.006c0.02,0.238,0.131,0.42,0.334,0.545 s0.488,0.188,0.855,0.188c0.543,0,0.934-0.119,1.172-0.357s0.359-0.637,0.363-1.195l0.012-0.738 c-0.227,0.32-0.49,0.559-0.793,0.715s-0.65,0.234-1.041,0.234c-0.785,0-1.402-0.269-1.854-0.806s-0.678-1.272-0.678-2.206 c0-0.887,0.23-1.603,0.691-2.147s1.062-0.817,1.805-0.817c0.453,0,0.842,0.095,1.164,0.284s0.557,0.462,0.705,0.817v-0.908h1.271 V357.083z M871.47,354.634c0-0.574-0.133-1.021-0.4-1.342s-0.643-0.48-1.123-0.48s-0.857,0.165-1.133,0.495 s-0.414,0.788-0.414,1.374c0,0.59,0.133,1.045,0.398,1.365s0.641,0.48,1.125,0.48c0.457,0,0.83-0.174,1.117-0.521 S871.47,355.2,871.47,354.634z",
		"M879.69,357.429h-1.271v-0.721c-0.227,0.32-0.49,0.559-0.793,0.715s-0.65,0.234-1.041,0.234 c-0.785,0-1.402-0.269-1.854-0.806s-0.678-1.272-0.678-2.206c0-0.887,0.23-1.603,0.691-2.147s1.062-0.817,1.805-0.817 c0.453,0,0.842,0.095,1.164,0.284s0.557,0.462,0.705,0.817v-0.908h1.271V357.429z M878.454,354.634c0-0.574-0.133-1.021-0.4-1.342 s-0.643-0.48-1.123-0.48s-0.857,0.165-1.133,0.495s-0.414,0.788-0.414,1.374c0,0.59,0.133,1.045,0.398,1.365 s0.641,0.48,1.125,0.48c0.457,0,0.83-0.174,1.117-0.521S878.454,355.2,878.454,354.634z",
		"M882.72,352.759c0.137-0.367,0.318-0.639,0.543-0.814s0.502-0.264,0.834-0.264 c0.18,0,0.357,0.021,0.531,0.064s0.344,0.105,0.512,0.188l-0.457,1.078c-0.109-0.078-0.227-0.136-0.354-0.173 s-0.27-0.056-0.426-0.056c-0.422,0-0.725,0.169-0.908,0.507s-0.275,0.905-0.275,1.702v2.438h-1.271v-5.566h1.271V352.759z",
		"M886.821,360.042h-1.307l1.523-3.094l-2.039-5.074h1.406l1.02,2.877c0.059,0.176,0.111,0.354,0.156,0.536 s0.08,0.366,0.107,0.554c0.051-0.195,0.172-0.506,0.363-0.932l0.029-0.07l1.371-2.965h1.377L886.821,360.042z"];

var mapRaces = [
	[783.948,320.01],
	[809.028,355.391],
	[938.208,358.391],
	[1011.882,457.098]
];
var mapRacespaths = [
	"M783.948,320.01c0,0,13.66,0.279,19.08,8.24 c6.6,9.695,5.679,26.926,5.679,26.926",
	"M808.707,355.176c0,0,27.043-24.942,64.754-24.942 c41.093,0,64.747,28.158,64.747,28.158",
	"M938.208,358.391c0,0,34.687,0.464,55.292,34.859 c24.779,41.363,18.382,63.848,18.382,63.848"
]


jQuery.browser = {};
jQuery.browser.mozilla = /mozilla/.test(navigator.userAgent.toLowerCase()) && !/webkit/.test(navigator.userAgent.toLowerCase());
jQuery.browser.webkit = /webkit/.test(navigator.userAgent.toLowerCase());
jQuery.browser.opera = /opera/.test(navigator.userAgent.toLowerCase());
jQuery.browser.msie = /msie/.test(navigator.userAgent.toLowerCase());

var jqApp = {
index: function () {
    var VIPTwo = $(".js-VIP-two"),
        ticketOne = $(".js-ticket-one"),
        portrait = $(".js-portrait"),
        cap = $(".js-cap"),
        autograph = $(".js-autograph");

    VIPTwo.on("mouseenter", function () {
        $(this).addClass("hinge animated").one("webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend", function () {
            $(this).removeClass("hinge animated");
        });
    });

    ticketOne.on("mouseenter", function () {
        $(this).addClass("swing animated").one("webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend", function () {
            $(this).removeClass("swing animated");
        });
    });

    portrait.on("mouseenter", function () {
        $(this).addClass("zoomIn animated").one("webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend", function () {
            $(this).removeClass("zoomIn animated");
        });
    });

    cap.on("mouseenter", function () {
        $(this).addClass("bounceIn animated").one("webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend", function () {
            $(this).removeClass("bounceIn animated");
        });
    });

    autograph.on("mouseenter", function () {
        $(this).addClass("rubberBand animated").one("webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend", function () {
            $(this).removeClass("rubberBand animated");
        });
    });
},
registration: function () {

	// табы формы
	var $info = $(".js-wrapper-forms"),
			$nav = $(".js-enter__nav");

	$("form:not(:first)", $info).hide();

	$("li", $nav).on("click", function (e) {
		$("form", $info).hide();
		$("li", $nav).removeClass("current");
		$(this).addClass("current");

		var clicked = $(this).find("a").data("toggle");

		$(clicked, $info).fadeIn("slow");

		e.preventDefault();

	}).eq(0).addClass("current");


	$('.js_btn_submit').on('click', function (e) {
		e.preventDefault();
		$(this).closest('form').submit();
	});
	$('.btn__cansel').on('click', function (e) {
		e.preventDefault();
		$(this).closest('form')[0].reset();
		$(this).closest('form').find('input').each(function () {
			if ($(this).hasClass('error'))
				$(this).removeClass('error').next('.error').fadeOut('fast', function () {
					$(this).remove();
				});
		});
	});

	$('.b-registration input,.b-login input').on('keyup', function () {
		if ($(this).hasClass('error'))
			$(this).removeClass('error').next('.error').fadeOut('fast', function () {
				$(this).remove();
			});
	});
	$('.b-registration,.b-login').on('submit', function (e) {
		e.preventDefault();
		jqApp.registration.simpleValid($(this));
	});

	jqApp.registration.simpleValid = function ($formObj) {
		$formObj.find('input').each(function () {
			var $this = $(this);
			if ($this.data('validate') && !$this.prop('disabled')) {
				if (!$this.val()) {
					if ($this.next('.error').size() == 0) {
						var $obj = $('<span class="error" style="display: none">' + $this.data('validate') + '</span>');
						$this.addClass('error').after($obj.fadeIn());
					}
					else
						$this.addClass('error');
				}
				else {

					//Check password confirmation
					if ($this.attr('name') === 'pass' || $this.attr('name') === 'pass2') {
						var $form = $this.closest('form');
						var $pass = $form.find('input[name="pass"]');
						var $confirmEl = $form.find('input[name="pass2"]');
						if ($pass.val() != $confirmEl.val()) {
							if ($confirmEl.next('.error').size() == 0) {
								var $obj = $('<span class="error" style="display: none">' + $confirmEl.data('confirmvalidate') + '</span>');
								$confirmEl.addClass('error').after($obj.fadeIn());
							}
							else
								$confirmEl.addClass('error');
						}
						else if ($this.attr('name') === 'pass') {
							if (!checkPwd($this.val())) {
								if ($this.next('.error').size() == 0) {
									var $obj = $('<span class="error" style="display: none">' + $this.data('wrongpass') + '</span>');
									$this.addClass('error').after($obj.fadeIn());
								}
								else {
									$this.next('.error').html($this.data('wrongpass'));
									$this.addClass('error');
								}
							}
						}
					}
					else {
						$this.removeClass('error').next('.error').fadeOut('fast', function () {
							$(this).remove();
						});
					}
				}
			}
		});
	};

	function checkPwd(str) {
		var answer = true;
	    if (str.length < 6) {
	        //return("too_short");
			answer = false;
	    } else if (str.length > 50) {
	        //return("too_long");
			answer = false;
	    } else if (str.search(/\d/) == -1) {
	        //return("no_num");
			answer = false;
	    } else if (str.search(/[a-zA-Z]/) == -1) {
	        //return("no_letter");
			answer = false;
	    } else if (str.search(/[^a-zA-Z0-9\!\@\#\$\%\^\&\*\(\)\_\+]/) != -1) {
	        //return("bad_char");
			answer = false;
	    }
		else {
			answer = true;
		}
	    return answer;
	}
},
//@import 'parts/ks.share.js',
maploading: function () {

	canvasMap = {
		ctx: null,

		init: function () {
			var canvas = document.getElementById('mapcanvas');
			this.ctx = canvas.getContext('2d');
			this.cw = canvas.width;
			this.ch = canvas.height;
			this.ctx.lineWidth = 0.5;

			this.drawMap();

			//this.highlightCountry();
			//setTimeout(scaleMap, 2000)
		},

		drawMap: function () {
			this.ctx.strokeStyle = '#90908F';
			this.ctx.fillStyle = '#525252'

			var paths = [];
			// console.log(paths);
			for (var i = 0, len = mapPaths.shapes.length; i < len; i++) {
				var p = new Path2D(mapPaths.shapes[i]);
				this.ctx.stroke(p);
				this.ctx.fill(p);
			}
		},

		highlightCountry: function () {
			var p = new Path2D('M795.663,359.542l-0.314-0.962l0.604-1.356h-1.41l-1.478-0.969 l-0.199-2.326l-1.141-1.164l0.671-0.71l1.075-0.129l0.265-1.485l-0.87-0.774l-0.133-1.099l0.402-0.452l1.073,0.387l1.812-1.292 l1.209,0.517l1.679-2.779l1.073,0.647l-0.136,1.034l1.48,0.71l0.468,0.904l0.939-1.615v-1.227l2.015,0.517l0.806-0.066 l0.806,0.646l0.201-1.679l1.813-0.388l-0.472-1.422l0.939-1.099l1.547,0.646l2.416-1.356l1.006,0.259l1.609-0.13l-0.133,0.904 l2.282,1.292l2.819,0.517l1.545-0.128l0.669,0.58l-1.07,1.486l0.331,0.71l-0.601,0.904l0.226,1.527l-1.048-0.252l-0.633,0.305 l-0.669,0.643h-1.019l-0.953,0.812l-1.018,0.135l-0.354,0.678l0.497,0.948l0.631,0.778l-0.705,1.014l-0.423,0.339l0.531,1.118 l0.138,1.286l0.493,0.677l2.043,1.049l1.124,0.576l0.562,0.744l3.026,2.945l0.07,0.778l0.387,0.204l0.036,0.915l0.633,0.88 l0.845,0.83l0.666,0.999l1.364,1.014l0.657,0.649l0.862,0.165l0.599,0.346l1.759-0.008l0.739,0.203l1.126-0.169l0.81,0.406 l-0.177,0.608l-1.159,0.78l-0.034,0.404l0.452,0.712h0.952l1.76,0.407l3.658,1.896l1.425,1.025l0.931,0.938l1.513,0.373 l0.771,0.514l0.354,0.604l-0.142,1.15l-0.393,0.55l0.112,0.726l-0.251,0.196l-0.039,0.257l-0.821-0.33l-0.644-0.78l-0.389-0.82 l0.109-0.674l-0.504-0.29l-1.435-0.02l-0.284-0.406l-0.947-0.439l-0.63,0.083l-0.424,0.255l-0.318,1.085l-0.527,0.542 l0.052,0.576l-0.159,0.676l-0.67,0.44l0.008,0.664l0.312,0.453l0.737,0.104l1.303,1.183l0.254,0.51l-0.15,1.15l0.247,0.407 l-0.316,0.642l-0.81,0.203l-0.773,0.78l-0.106,2.064l-1.264,0.982l-0.176,0.947l-0.67,0.88l-1.338,0.102l-1.021-0.982 l-0.034-0.678l0.224-0.34l0.563-0.302l0.55-0.61l0.119-0.846l-0.119-0.88l0.267-0.153l0.368-0.017l0.492-0.576l0.034-0.813 l-0.526-0.743l-0.389-1.592l-0.493-0.61l-0.21-1.355l-0.423-1.42l-0.667-0.406l-0.526,0.305l-1.196-0.271l-0.389-0.745 l-0.947-0.068l-0.459-0.439l0.213-0.372l0.104-0.88l-0.597-0.745l-0.844-0.069l-0.811,0.036l0.07-0.611l-0.773-0.271 l-0.527,0.204l-0.599-0.372l-0.983-1.76l-0.917-0.068l-0.95-0.374l-0.595,0.542h-0.845l-0.177-0.744l-0.773-0.508l-0.879-0.136 l-1.833-1.321l-1.896-2.334l-0.601-0.203l-0.173-0.711l-0.846-1.083l-1.336-0.034l-0.142-0.812l-1.269-1.15l-0.703-0.847 l-1.091-0.508l0.037-1.254l-0.738-0.438l-0.036-0.78l-0.842-1.32l-0.377-0.688l-0.266-0.48l-0.389-0.712l-1.362-0.388 l-0.913-0.575l-3.097-0.778l-2.394,1.285l-0.034,0.745l-0.812,0.982L795.663,359.542L795.663,359.542z M799.068,374.638 l0.302-0.042l0.076-0.404l0.392-0.42l-0.366-0.308l-0.151,0.437l-0.287,0.153L799.068,374.638L799.068,374.638z M810.909,367.346 l0.538,0.242l-0.186-0.403L810.909,367.346L810.909,367.346z M807.218,364.788l-0.405,0.405l0.504,0.193l0.957-0.323l0.739,0.032 l-0.118-0.484l-0.436-0.501l-0.218,0.291L807.218,364.788L807.218,364.788z M801.479,386.685l0.351-0.203l0.456,0.203l0.669-0.27 l0.07-1.016l0.279-0.608l0.883,0.066l0.561,0.542h0.529l0.353-0.644v-1.658l0.176-0.474l-0.212-1.793l0.351-1.625l-1.196-1.015 l1.021-0.645l0.141-0.677l-0.246-1.049l-0.6-0.643l-0.669-1.186l-0.349,0.338l-0.811-0.609l-0.703,0.068l-1.688,1.93l-0.74,0.032 l-1.054-0.61v0.983l-0.177,0.642l0.737,0.713l0.178,0.676l0.595,0.508v1.049l-0.665,0.677l0.28,0.542l0.915,0.068v0.372 l-0.562,0.643l-0.423,1.556l0.385,0.577l0.46,1.829L801.479,386.685L801.479,386.685z M830.922,398.467l-0.073-1.117l0.46-0.543 l-0.105-0.981l-0.846-1.117l0.846-2.167l0.845-0.744l0.173-1.185l-0.699-0.813l-1.164,1.083l-0.491-0.068l-1.021-0.54 l-0.985,1.015l-2.109-0.135l-1.725,0.508l-1.231-0.238l-0.878-0.575l-1.02,0.102l-0.564,0.439l-0.316-0.407l-1.126,0.509 l-0.138,1.456l0.983,0.881l0.983-0.171l1.759,1.151l0.949,0.238l0.88,0.915l2.078,0.743l0.423-0.27l0.91,0.643l0.176,0.71 l2.149,0.814L830.922,398.467z');
			this.ctx.fillStyle = '#CEA54E'
			this.ctx.fillOpacity = 0;
			this.ctx.stroke(p);
			this.ctx.fill(p);
		},

		angle: 1,
		offset: 1,
		linewidth: 1,

		scaleMap: function () {
			this.ctx.clearRect(0, 0, this.cw, this.ch);
			this.ctx.save();
			this.ctx.setTransform(1, 0, 0, 1, 0, 0);
			this.ctx.translate(-this.offset, -this.offset * 0.44);
			this.ctx.scale(this.angle, this.angle);
			this.ctx.lineWidth = this.linewidth;

			this.drawMap();

			this.highlightCountry();
			this.ctx.restore;

			this.angle += 1.888*2;
			this.offset += 1520*2;
			this.linewidth -= 0.0025/2;
			if (this.offset >= 198560) {
				clearInterval(this.intervalTimer);
				if (this.intervalCallback && typeof this.intervalCallback === "function")
					this.intervalCallback();
			}
		},

		interval: function(intervalCallback) {
			this.intervalCallback = intervalCallback;
			var that = this;
			this.intervalTimer = setInterval(function(){
				that.scaleMap.apply(that);
			},1);
		}
	}

	var storageDate = localStorage.getItem('maploader');
	var cDate = new Date().getTime();
	var debug = ((storageDate && storageDate >= cDate) ? true : false);
	if (!debug && storageDate)
		localStorage.removeItem('maploader');
	//var debug = true;
	//var fulldebug = true;
	var fulldebug = false;

	jqApp.maploading.cities = [];
	jqApp.maploading.citiesT = [];
	jqApp.maploading.races = [];
	jqApp.maploading.paper = null;
	jqApp.maploading.elements = {};

	if (fulldebug) {
		$('.mainpage').removeClass('mainpage');
		$('.maploader').remove();
		return false;
	}

	if (!debug) {
		Raphael('maploader', '100%', '100%', function () {
			var r = this;
			jqApp.maploading.paper = r;
			r.setViewBox(0, 0, 1600, 900, true);

			r.setStart();
			var loader = drawpath(r, mapLoader, 2500, {
				'fill': 'transparent',
				'fill-opacity': 0,
				'stroke': '#fff',
				'stroke-width': 3,
				'transform': 't600,280'
			}, null);

			var circle = r.circle(795, 445, 290).attr({
				'stroke': '#FBCA64',
				'stroke-opacity': 0,
				'stroke-width': 10
			});
			var circleLoader = drawpath(r, circle.getPath(), 2500, {
				'stroke': '#FBCA64',
				'stroke-width': 10,
			}, null);

			jqApp.maploading.elements.loader = r.setFinish();

			setTimeout(function () {
				jqApp.maploading.elements.loader.animate({
					'opacity': 0
				}, 500);
			},2500)
			setTimeout(function () {
				//if (mapData) {
				if (!jQuery.browser.opera) {
					canvasMap.init();
				}
				else {
					jqApp.maploading.paper.image("/css/blocks/b-index/map_static.png", 0, 0, 1600, 897);
				}
					initMapElements()
				//}
				//else
				//	initTimerProgress = false;
			}, 3000);
		});
		

		function initMapElements() {
			var r = jqApp.maploading.paper;

			/**
			 * Рисуем города где проводятся гонки
			 */

			jqApp.maploading.elements.titleRows = [];
			var ww_ = $(window).width();
			for (var row in raceTitle) {
				var row_ = raceTitle[row];
				r.setStart();
				for (var el in row_) {
					r.path(row_[el][1]).attr({
						"stroke": "transparent",
						"fill-opacity": 1,
						"fill": row_[el][0],
						"transform": 't-' + ww_ + ',0'
					});
				}
				jqApp.maploading.elements.titleRows.push(r.setFinish());
			}

			/**
			 * Рисуем города где проводятся гонки
			 */
			r.setStart();
			for (var city in mapCities) {
				$city = r.path(mapCities[city]).attr({
					"stroke": "transparent",
					"fill-opacity": 0,
					"fill": "#CDCDCB"
				});
				jqApp.maploading.cities.push($city);
			}
			jqApp.maploading.elements.dots = r.setFinish();


			/**
			 * Заголовки городов где проводятся гонки
			 */
			r.setStart();
			for (var cityT in mapCitiesTitles) {
				// hot fix for Italy - Monza
				if (cityT <= 101 || cityT >= 107) {
					$cityT = r.path(mapCitiesTitles[cityT]).attr({
						"stroke": "transparent",
						"fill-opacity": 0,
						"fill": "#CDCDCB"
					});
					jqApp.maploading.citiesT.push($cityT);
				}
			}
			jqApp.maploading.elements.dotsNames = r.setFinish();

			jqApp.maploading.animateCities();

			jqApp.maploading.animateCitiesTitle();

			$('.maploader .spin').hide();

			/**
			 * Вылетают заголовки
			 */
			var titleRowsTiming = 0;
			$(jqApp.maploading.elements.titleRows).each(function () {
				var $this = this;
				setTimeout(function () {
					$this.animate({
						"transform": 't0,0'
					}, 500, '<');
				}, titleRowsTiming);
				titleRowsTiming += 400;
			});

			setTimeout(function () {
				/**
				 * Рисуем места проедения конкурсов
				 */
				r.setStart();
				for (var race in mapRaces) {
					$race = r.circle(mapRaces[race][0], mapRaces[race][1], 4.5).attr({
						"fill": "#1A3249",
						"stroke": "#0D7260",
						"stroke-width": 3,
						"stroke-opacity": 0,
						"fill-opacity": 0
					});
					jqApp.maploading.races.push($race);
				}
				jqApp.maploading.elements.dotsRaces = r.setFinish();
				jqApp.maploading.animateRaces();
			}, 2000);
		}

		jqApp.maploading.animateCities = function () {

			var timing = 0;

			$(jqApp.maploading.cities).each(function (indx) {
				setTimeout(function () {
					jqApp.maploading.cities[indx].animate({
						"fill-opacity": 1
					}, 200)
				}, timing);
				timing += 100;
			});

		}
		jqApp.maploading.animateCitiesTitle = function () {

			var timing = 0;

			$(jqApp.maploading.citiesT).each(function (indx) {
				setTimeout(function () {
					jqApp.maploading.citiesT[indx].animate({
						"fill-opacity": 1
					}, 200)
				}, timing);
				timing += 5;
			});

		}

		jqApp.maploading.animateRaces = function () {
			var timing = 0;

			jqApp.maploading.elements.racePaths = [];
			$(jqApp.maploading.races).each(function (indx) {
				setTimeout(function () {
					jqApp.maploading.races[indx].animate({
						"stroke-opacity": 1,
						"fill-opacity": 1
					}, 2000, "elastic", function () {

					});
					if (indx < 3) {
						var res = drawpath(jqApp.maploading.paper, mapRacespaths[indx], 1000, {
							'fill': 'transparent',
							'fill-opacity': 0,
							'stroke': '#0D7260',
							'stroke-width': 3
						}, null);
						jqApp.maploading.elements.racePaths.push(res);
					}
					if (indx == 3) {
						setTimeout(jqApp.maploading.moveMap, 500);
					}
				}, timing);
				timing += 1000;
			});

		}

		jqApp.maploading.moveMap = function () {
			if (!jQuery.browser.opera) {
				canvasMap.highlightCountry();
			}
			jqApp.maploading.removeDots(0);
		}

		jqApp.maploading.removeDots = function (index) {
			jqApp.maploading.elements.dotsRaces[index].animate({
				opacity: 0
			}, 100, function () {
				if (index == 3) {
					jqApp.maploading.scaleMap();
				}
				if (index < 3) {
					jqApp.maploading.elements.racePaths[index].animate({
						'opacity': 0
					}, 500, function () {
						this.remove();
						jqApp.maploading.removeDots(index + 1);
					})
				}
			})
		}

		//hotfix - defaultscrolltop
		$('html, body').animate({
			scrollTop: 0
		}, 900);

		jqApp.maploading.scaleMap = function () {
			jqApp.maploading.elements.dots.animate({
				'transform': 's0.1'
			}, 2500, function () {
				jqApp.maploading.elements.dots.remove();
				delete jqApp.maploading.elements.dots;
			})
			jqApp.maploading.elements.dotsNames.animate({
				'fill-opacity': 0
			}, 1500, function () {
				jqApp.maploading.elements.dotsNames.remove();
				delete jqApp.maploading.elements.dotsNames;
			})
			jqApp.maploading.elements.dotsRaces.animate({
				'stroke-opacity': 0,
				'fill-opacity': 0
			}, 2500, function () {
				jqApp.maploading.elements.dotsRaces.remove();
				delete jqApp.maploading.elements.dotsRaces;
			})

			$(jqApp.maploading.elements.racePaths).each(function () {
				var $this = this;
				$this.animate({
					'stroke-width': 0
				}, 2500, function () {
					$this.remove();
				})
			})

			setTimeout(function () {
				if (!jQuery.browser.opera) {
					canvasMap.interval(jqApp.maploading.controlsInit);
				}
				else {
					jqApp.maploading.paper.animateViewBox(780, 320, 3, 2, ((jQuery.browser.msie||jQuery.browser.opera) ? 40 : 100), '<>', function () {
						jqApp.maploading.controlsInit();
					})
				}
				$('.maploader_wrap').addClass('animated');

				//maploader flag
				localStorage.setItem('maploader', new Date().getTime() + 60 * 60 * 24 * 1000);

			}, 2600);

		}

	}

	jqApp.maploading.controlsInit = function () {

		$('.print_text .d_row').each(function () {
			var $this = $(this);
			var characters = $this.text().split("");
			$this.empty();
			$.each(characters, function (i, el) {
				$this.append("<i>" + el + "</i");
			});
		})

		jqApp.trackLoader();

		$('.maploader').fadeOut(1400, function () {
			$('.maploader').remove();

			$('body').removeClass('scrolldisabled');

			if (!debug)
				jqApp.maploading.paper.remove();
			$('body').addClass('map_anim');
			setTimeout(function () {
				$('body').addClass('heading_anim');
			}, 2000)
			setTimeout(function () {
				$('body').addClass('pin_animation');

				var pause = 0;
				$('.print_text:eq(0) i').each(function () {
					$(this).delay(pause).animate({
						opacity: 1
					})
					pause += 20;
				}).promise().done(function () {
					$('.btn__start').addClass('btn_animated');
					var pause = 0;
					$('.print_text.b-date-race i').each(function () {
						$(this).delay(pause).animate({
							opacity: 1
						})
						pause += 20;
					});
				});
			}, 3000)
		});
	};

	if (debug) {
		jqApp.maploading.controlsInit();
	}

	Raphael.fn.animateViewBox = function animateViewBox(x, y, w, h, duration, easing_function, callback) {
		var cx = this._viewBox ? this._viewBox[0] : 0,
				dx = x - cx,
				cy = this._viewBox ? this._viewBox[1] : 0,
				dy = y - cy,
				cw = this._viewBox ? this._viewBox[2] : this.width,
				dw = w - cw,
				ch = this._viewBox ? this._viewBox[3] : this.height,
				dh = h - ch,
				self = this;
		;
		easing_function = easing_function || "linear";

		var interval = 1;
		var steps = duration / interval;
		var current_step = 0;
		var easing_formula = Raphael.easing_formulas[easing_function];

		var intervalID = setInterval(function () {
			var ratio = current_step / steps;
			self.setViewBox(cx + dx * easing_formula(ratio),
					cy + dy * easing_formula(ratio),
					cw + dw * easing_formula(ratio),
					ch + dh * easing_formula(ratio), true);
			if (current_step++ >= steps) {
				clearInterval(intervalID);
				callback && callback();
			}
		}, interval);
	}

	function drawpath(canvas, pathstr, duration, attr, callback, removablePath) {
		if (!removablePath) {
			var guide_path = canvas.path(pathstr).attr({stroke: "none", fill: "none"});
			var path = canvas.path(guide_path.getSubpath(0, 1)).attr(attr);
		}
		else {
			var guide_path = canvas.path(removablePath.getPath()).attr({stroke: "none", fill: "none"});
			var path = canvas.path(guide_path.getSubpath(0, 1)).attr(attr);
			removablePath.remove();
			//var guide_path = removablePath;
			//var path = removablePath;
		}
		var total_length = guide_path.getTotalLength();
		var last_point = guide_path.getPointAtLength(0);
		var start_time = new Date().getTime();
		var interval_length = 50;
		var result = path;

		var interval_id = setInterval(function () {
			var elapsed_time = new Date().getTime() - start_time;
			var this_length = elapsed_time / duration * total_length;
			if (removablePath) {
				var subpathstr = guide_path.getSubpath(this_length, total_length);
			}
			else
				var subpathstr = guide_path.getSubpath(0, this_length);
			attr.path = subpathstr;

			path.animate(attr, interval_length);
			if (elapsed_time >= duration) {
				clearInterval(interval_id);
				if (callback != undefined) callback();
				guide_path.remove();
				if (removablePath) {
					path.remove();
				}
			}
		}, interval_length);
		return result;
	}

	$('.pin_winners').on('click', function () {
		$(this).addClass('hidden_pin');
		$('.b-tribune-wrap').fadeIn('fast', function () {
			var $scrollTo;
			if ($(window).width() < 1025) {
				$scrollTo = $('.print_text.show-for-medium-down');
				$('html, body').animate({
					scrollTop: $scrollTo.offset().top - 110
				}, 900);
			}
		});
		return false;
	});
},
trackLoader: function () {
	jqApp.trackLoader.animCars = true;
	jqApp.trackLoader.cars = {};
	Raphael("track_holder", $('#track_holder').width(), ($('#track_holder').width() * 398 / 1193), function () {
		var r = this,
				p = r.path("M679.262,254.876c0,0-58.82,1.489-78.355,3.161 c-23.202,1.988-72.259,13.045-97.396,11.229c-5.093-0.367-16.34-10.141-20.99-12.282c-5.463-2.516-8.521-4.385-14.456-5.27 c-6.055-0.904-18.316,1.341-24.389,2.108c-8.741,1.104-25.993,5.013-34.767,5.797c-10.21,0.912-30.854,2.041-40.994,0.526 c-9.417-1.406-27.996-6.911-36.324-11.595c-7.164-4.029-19.362-15.487-24.907-21.609c-4.326-4.774-11.51-16.245-12.454-22.663 c-1-6.798,0.883-18.531,2.076-25.298c1.132-6.419,7.744-20.902,7.265-27.406c-0.203-2.744-1.502-8.33-3.114-10.541 c-1.113-1.527-4.64-3.21-6.227-4.216c-4.587-2.908-14.864-7.178-18.681-11.068c-4.021-4.098-8.971-14.803-11.417-20.028 c-1.727-3.691-5.808-11.199-5.708-15.284c0.057-2.301,2.021-6.815,3.632-8.433c3.307-3.321,12.627-6.176,17.125-7.378 c13.258-3.547,40.798-5.533,54.485-6.325c4.922-0.284,14.816-0.527,19.719,0c3.694,0.397,11.077,1.769,14.529,3.163 c5.114,2.063,14.667,7.929,18.822,11.595c7.846,6.921,18.458,25.778,26.323,32.677c20.829,18.27,69.32,46.035,94.442,57.448 c5.581,2.536,17.272,6.714,23.351,7.38c5.956,0.652,17.912-2.739,23.87-2.109c4.45,0.471,13.093,3.301,17.124,5.271 c4.54,2.217,12.025,9.464,16.605,11.595c7.439,3.459,23.545,7.334,31.654,8.433c14.659,1.987,44.378,1.119,59.156,0.526 c49.048-1.966,147.354-9.459,196.147-8.959c4.911,0.049,14.638,2.368,19.199,4.215c3.947,1.599,11.43,6.011,14.529,8.961 c2.312,2.199,6.559,7.406,7.266,10.541c0.816,3.622-0.484,11.466-2.335,14.668c-2.555,4.423-11.282,10.506-15.827,12.738 c-8.158,4.009-26.302,7.218-35.286,8.433c-19.043,2.578-57.588,2.543-76.798,2.635C759.426,257.641,679.262,254.876,679.262,254.876").attr({
					stroke: "transparent",
					opacity: 0,
					"stroke-width": 0
				}),
				over = r.path().attr({stroke: "#fff"}),
				len = p.getTotalLength();

		jqApp.trackLoader.cars.e = r.rect(0,0,1,1).data('color', 'red').attr({
			opacity: 0
		});
		jqApp.trackLoader.cars.e2 = r.rect(0,0,1,1).data('color', 'green').attr({
			opacity: 0
		});
		jqApp.trackLoader.cars.e3 = r.rect(0,0,1,1).data('color', 'white').attr({
			opacity: 0
		});

		jqApp.trackLoader.paper = r;

		var c1 = r.circle(188, 182, 12).attr({
					fill: '#FCCC4E',
					stroke: 'transparent'
				}),
				ctext1 = r.text(188, 182, "+").attr({
					'font-size': 16,
					'stroke': 'transparent',
					'stroke-width': 12
				});

		r.setStart();
		var ctext1baloon = r.text(195, 152, "Monza Cathedral").attr({
			fill: '#000',
			'font-size': 14
		});
		var box = ctext1baloon.getBBox();
		var rect = r.rect(box.x - 4, box.y - 4, box.width + 8, box.height + 8).attr({
			'fill': '#FCCC4E',
			'stroke': 'transparent'
		});
		ctext1baloon.toFront();
		var c1Baloon = r.setFinish();

		r.setStart();
		var c2 = r.circle(251, 344, 12).attr({
					fill: '#FCCC4E',
					stroke: 'transparent'
				}),
				ctext2 = r.text(251, 344, "+").attr({
					'font-size': 16,
					'stroke': 'transparent',
					'stroke-width': 12
				});
		c2 = r.setFinish();

		r.setStart();
		var ctext2baloon = r.text(265, 313, "Italian cafe").attr({
			fill: '#000',
			'font-size': 14
		});
		var box = ctext2baloon.getBBox();
		var rect = r.rect(box.x - 4, box.y - 4, box.width + 8, box.height + 8).attr({
			'fill': '#FCCC4E',
			'stroke': 'transparent'
		});
		ctext2baloon.toFront();
		var c2Baloon = r.setFinish();

		r.setStart();
		var c3 = r.circle(515, 353, 12).attr({
					fill: '#FCCC4E',
					stroke: 'transparent'
				}),
				ctext3 = r.text(515, 353, "+").attr({
					'font-size': 16,
					'stroke': 'transparent',
					'stroke-width': 12
				});
		c3 = r.setFinish();

		r.setStart();
		var ctext3baloon = r.text(545, 323, "Monza park").attr({
			fill: '#000',
			'font-size': 14
		});
		var box = ctext3baloon.getBBox();
		var rect = r.rect(box.x - 4, box.y - 4, box.width + 8, box.height + 8).attr({
			'fill': '#FCCC4E',
			'stroke': 'transparent'
		});
		ctext3baloon.toFront();
		var c3Baloon = r.setFinish();

		/**
		 * Baloon animation
		 */
		var baloons = [c1Baloon, c2Baloon, c3Baloon];
		var plusButtons = [ctext1, ctext2, ctext3];
		var plusDots = [c1, c2, c3];

		var showDots = function (index) {
			baloons[index].attr({
				'opacity': 0
			})
			plusButtons[index].mouseover(function () {
				this[0].style.cursor = "default";
				plusDots[index].animate({
					'r': 15
				}, 300, 'elastic');
				baloons[index].animate({
					'opacity': 1
				}, 300);
			}).mouseout(function () {
				plusDots[index].animate({
					'r': 12
				}, 300, 'elastic')
				baloons[index].animate({
					'opacity': 0
				}, 300);
			});
		}

		for (var i = 0; i <= 2; i++) {
			showDots(i);
		}
		/**
		 * end Baloon animation
		 */

		r.setViewBox(0, 0, 1193, 398, false);

		var positions = new Array();
		var positionsAngles = new Array();
		var start = null;
		var end = null;

		for (len = 0; len <= p.getTotalLength(); len++) {
			if (!start)
				start = p.getPointAtLength(0);
			end = p.getPointAtLength(len);
			positions.push(end);
			positionsAngles.push(Raphael.angle(end.x, end.y, start.x, start.y));
			start = end;
		}

		//console.log(positions.length,positionsAngles.length);

		r.customAttributes.along = function (v) {
			var l = Math.round(v * len);
			if (l == positions.length)
				l -= 1;
			var point = positions[l];
			var i_src = getCarByAngle(positionsAngles[l]);

			var pos = {
				left: point.x,
				top: point.y,
				offset: -30
			};
			var trackwidth = $('#track_holder').width();
			var trackheigt = $('#track_holder').height();
			if (trackwidth < 1193) {
				pos.scaleW = trackwidth/1193;
				pos.scaleH = trackheigt/398;
				pos.left = point.x*pos.scaleW;
				pos.top = point.y*pos.scaleH;
			}

			this.data('v',v);

			$('#'+this.data('color')+'car').removeClass().addClass(' sprite-car-'+this.data('color')+' sprite-car'+i_src).css({
				left: pos.left,
				top: pos.top,
				transform: 'scale('+0.75*pos.scaleW+')'
			});

			//return {
			//	src: '/static/css/blocks/b-index/cars/' + this.data('color') + '/' + i_src,
			//	transform: "t" + [point.x - 30, point.y - 30]
			//};
		};

		jqApp.trackLoader.cars.e.attr({along: 0});
		jqApp.trackLoader.cars.e2.attr({along: 0});
		jqApp.trackLoader.cars.e3.attr({along: 0});

		function runOne(v) {
			var time = (v?(12500*(1-v)):12500);
			jqApp.trackLoader.cars.e.animate({along: 1}, time, function () {
				jqApp.trackLoader.cars.e.attr({along: 0});
				setTimeout(runOne);
			});
		}

		function runTwo(v) {
			var time = (v?(14500*(1-v)):14500);
			jqApp.trackLoader.cars.e2.animate({along: 1}, time, function () {
				jqApp.trackLoader.cars.e2.attr({along: 0});
				setTimeout(runTwo);
			});
		}

		function runThree(v) {
			var time = (v?(16500*(1-v)):16500);
			jqApp.trackLoader.cars.e3.animate({along: 1}, time, function () {
				jqApp.trackLoader.cars.e3.attr({along: 0});
				setTimeout(runThree);
			});
		}

		function getCarByAngle(angle) {
			degName = Math.abs(Math.ceil(angle / 4) - 90);
			return degName;

		}

		runOne();
		setTimeout(runTwo, 500);
		setTimeout(runThree, 1000);

		$(window).on('DOMContentLoaded load resize scroll', function() {
			checkCarsVisibility();
		});

		function checkCarsVisibility() {
			if (!isElementInViewport($('#track_holder'))) {
				jqApp.trackLoader.animCars = false;
				if (jqApp.trackLoader.cars.e) {
					jqApp.trackLoader.cars.e.stop();
					jqApp.trackLoader.cars.e2.stop();
					jqApp.trackLoader.cars.e3.stop();
					jqApp.trackLoader.cars.animated = false;
				}
			}
			else {
				jqApp.trackLoader.animCars = true;
				if (jqApp.trackLoader.cars.e && !jqApp.trackLoader.cars.animated) {
					runOne(jqApp.trackLoader.cars.e.data('v'));
					runTwo(jqApp.trackLoader.cars.e2.data('v'));
					runThree(jqApp.trackLoader.cars.e3.data('v'));
					jqApp.trackLoader.cars.animated = true;
				}
			}
		}

		function isElementInViewport(el) {
			//special bonus for those using jQuery
			if (typeof jQuery === "function" && el instanceof jQuery) {
				el = el[0];
			}

			var rect = el.getBoundingClientRect();

			return (
					(rect.top >= 0 && (rect.bottom + $(el).outerHeight()) < (window.innerHeight || document.documentElement.clientHeight))
					||
					(rect.bottom >= 110)
					&&
					(rect.left >= 0 &&
					rect.right <= (window.innerWidth || document.documentElement.clientWidth) /*or $(window).width() */
					)
			);
		}
	});
	$(window).resize(function () {
		if (jqApp.trackLoader.paper) {
			w = $('#track_holder').width();
			jqApp.trackLoader.paper.setSize(w, (w * 398 / 1193));
		}
	});
},
};
jqApp.profileEndRaceTimer = null;

jqApp.touchMoveContolrs = function (type) {

	if (type === 'disable') {
		var selScrollable = '.b-modal__overlay';

		//uses document because document will be topmost level in bubbling
		$(document).on('touchmove.modaltouch', function (e) {
			if(!$('.b-modal__overlay').has($(e.target)).length)
				e.preventDefault();
		});
		//uses body because jquery on events are called off of the element they are
		//added to, so bubbling would not work if we used document instead.
		$('body').on('touchstart.modaltouch', selScrollable, function (e) {
			if (e.currentTarget.scrollTop === 0) {
				e.currentTarget.scrollTop = 1;
			} else if (e.currentTarget.scrollHeight === e.currentTarget.scrollTop + e.currentTarget.offsetHeight) {
				e.currentTarget.scrollTop -= 1;
			}
		});
		//prevents preventDefault from being called on document if it sees a scrollable div
		$('body').on('touchmove.modaltouch', selScrollable, function (e) {
			if(!$('.b-modal__overlay').has($(e.target)).length)
				e.stopPropagation();
		});
	}
	else {
		$(document).off('touchmove.modaltouch');
		$('body').off('touchstart.modaltouch');
		$('body').off('touchmove.modaltouch');
	}
}

jqApp.gLogic = function () {

	jqApp.maskInput();

	//$('.chosen').chosen();
	$(".fancybox").fancybox();

	//$('.social-icon a').on('click', function(e) {
	//	e.preventDefault();
	//	console.log('asd');
	//	jqApp.socialShare($(this));
	//});


	if (jQuery.browser.opera) {
		$("html").addClass("oldOpera");
	}

	// блок смены пароля
	$(".js-change-password").on("click", function (e) {
		$(this).closest(".js-settings").find(".b-change-password").fadeToggle();

		return false;
	});

	// показываем социальные иконки
	$(".js-social").hide();

	$(".js-trigger-share").on("click", function () {
		$(".js-social").fadeToggle();
	});

	//инит кастом скролла
	$(".js-test-rules__text").customScrollbar({updateOnWindowResize: !0});

	$(".js-trigger-modal").on("click", function (e) {

		$(this).toggleClass("hidden");

		$(".b-modal__overlay").toggleClass("open");
		jqApp.touchMoveContolrs('enable');

		return false;
	});

	$(window).on("mousewheel", function(){
	  $('html,body').stop();
	});

	// скролим до блока на странице
	$('a[href^="#"]').on("click", function () {
		var target = $(this).attr('href');
		if (target === '#tribune' && !$(target).is(":visible")) {
			$('.pin_winners').click();
		}
		if ($(target).size() > 0) {
			$('html,body').animate({scrollTop: $(target).offset().top - 63}, 2000);
		}
		return false;
	});

	// flip
	$('.hover').hover(function () {
		$(this).addClass('fl');
	}, function () {
		$(this).removeClass('fl');
	});


	// гамбургер меню
	var isActive = false,
			$hamburgerToggle = $(".b-menu-hamburger__toggle");

	$('.js-menu-hamburger').on('click', function () {
		if (isActive) {
			$(this).find($hamburgerToggle).removeClass('active');
			$('body').removeClass('menu-open');
		} else {
			$(this).find($hamburgerToggle).addClass('active');
			$('body').addClass('menu-open');
		}

		isActive = !isActive;

	});

	$(".js-menu a").on("click", function () {
		if (isActive) {
			$hamburgerToggle.removeClass('active');
			$('body').removeClass('menu-open');
		} else {
			$hamburgerToggle.addClass('active');
			$('body').addClass('menu-open');
		}

		isActive = !isActive;

		//return false;
	});

	var body = document.body,
			timer;

	//window.addEventListener('scroll', function () {
	//	clearTimeout(timer);
	//	if (!body.classList.contains('disable-hover')) {
	//		body.classList.add('disable-hover');
	//	}
	//
	//	timer = setTimeout(function () {
	//		body.classList.remove('disable-hover');
	//	}, 500);
	//}, false);

};

jqApp.maskInput = function () {
	$(":input").inputmask();
};

$(document).on('ready', function () {

	var page = $('body').data('page');

	jqApp.gLogic();

	if (page === 'index') {
		jqApp.index();
	}
	else if (page === 'registration') {
		jqApp.registration();
	}
	else if (page === 'maploading') {
		jqApp.index();
		jqApp.maploading();
	}

});

String.prototype.trunc = function (n, useWordBoundary) {
	var toLong = this.length > n,
			s_ = toLong ? this.substr(0, n - 1) : this;
	s_ = useWordBoundary && toLong ? s_.substr(0, s_.lastIndexOf(' ')) : s_;
	return toLong ? s_ + '...' : s_;
};